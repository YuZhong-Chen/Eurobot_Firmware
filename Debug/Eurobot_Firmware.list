
Eurobot_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000debc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800e190  0800e190  0001e190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e4a4  0800e4a4  0001e4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800e4ac  0800e4ac  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e4b8  0800e4b8  0001e4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010aac  24000078  0800e534  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24010b24  0800e534  00020b24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a106  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043cd  00000000  00000000  0004a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001570  00000000  00000000  0004e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  0004faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c7c  00000000  00000000  00050f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d772  00000000  00000000  00086bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015674e  00000000  00000000  000a431e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001faa6c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f30  00000000  00000000  001faabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e174 	.word	0x0800e174

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800e174 	.word	0x0800e174

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_ZN8DC_Motor4InitEv>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

namespace DC_Motor {

void Init() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// Init interrupt for reading encoder's CNT
	HAL_TIM_Base_Start_IT(&htim13);
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <_ZN8DC_Motor4InitEv+0x50>)
 8000682:	f009 fff9 	bl	800a678 <HAL_TIM_Base_Start_IT>

	// Init Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Motor[0]
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <_ZN8DC_Motor4InitEv+0x54>)
 800068a:	f00a fa95 	bl	800abb8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Motor[1]
 800068e:	213c      	movs	r1, #60	; 0x3c
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <_ZN8DC_Motor4InitEv+0x58>)
 8000692:	f00a fa91 	bl	800abb8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Motor[2]
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <_ZN8DC_Motor4InitEv+0x5c>)
 800069a:	f00a fa8d 	bl	800abb8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Motor[3]
 800069e:	213c      	movs	r1, #60	; 0x3c
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <_ZN8DC_Motor4InitEv+0x60>)
 80006a2:	f00a fa89 	bl	800abb8 <HAL_TIM_Encoder_Start>

	// Init Motor PWM
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Motor[0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006aa:	f00a f8c3 	bl	800a834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // Motor[1]
 80006ae:	2100      	movs	r1, #0
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006b2:	f00a f8bf 	bl	800a834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // Motor[2]
 80006b6:	2100      	movs	r1, #0
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006ba:	f00a f8bb 	bl	800a834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Motor[3]
 80006be:	2104      	movs	r1, #4
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006c2:	f00a f8b7 	bl	800a834 <HAL_TIM_PWM_Start>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	240108f4 	.word	0x240108f4
 80006d0:	240106e0 	.word	0x240106e0
 80006d4:	240107c4 	.word	0x240107c4
 80006d8:	2401072c 	.word	0x2401072c
 80006dc:	24010778 	.word	0x24010778
 80006e0:	240108a8 	.word	0x240108a8
 80006e4:	24010940 	.word	0x24010940

080006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>:

void Motor::Init(short num, TIM_HandleTypeDef *TIM, double P, double I, double D) {
 80006e8:	b480      	push	{r7}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6278      	str	r0, [r7, #36]	; 0x24
 80006f0:	460b      	mov	r3, r1
 80006f2:	61fa      	str	r2, [r7, #28]
 80006f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80006f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80006fc:	ed87 2b00 	vstr	d2, [r7]
 8000700:	847b      	strh	r3, [r7, #34]	; 0x22
	this->num = num;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000706:	821a      	strh	r2, [r3, #16]
	this->TIM = TIM;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	615a      	str	r2, [r3, #20]
	this->P = P;
 800070e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000714:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->I = I;
 8000718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800071a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800071e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	this->D = D;
 8000722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000728:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800072c:	bf00      	nop
 800072e:	372c      	adds	r7, #44	; 0x2c
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>:

void Motor::UpdatePID() {
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	double p = 0, d = 0;
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Record Prev error
	this->error_before = this->error;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// Count current error
	this->error = this->Vgoal - this->Vnow;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	ed93 7b08 	vldr	d7, [r3, #32]
 8000770:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58

	// Count P
	p = this->P * this->error;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000786:	ee26 7b07 	vmul.f64	d7, d6, d7
 800078a:	ed87 7b04 	vstr	d7, [r7, #16]

	// Count I
	this->i += this->I * this->error * COUNT_TIME;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007a4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000850 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x118>
 80007a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	// Limit I in range
	if (this->i > this->I_lim)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ca:	dd06      	ble.n	80007da <_ZN8DC_Motor5Motor9UpdatePIDEv+0xa2>
		this->i = this->I_lim;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80007d8:	e018      	b.n	800080c <_ZN8DC_Motor5Motor9UpdatePIDEv+0xd4>
	else if (this->i < 0 - this->I_lim)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007e6:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000858 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x120>
 80007ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f6:	d509      	bpl.n	800080c <_ZN8DC_Motor5Motor9UpdatePIDEv+0xd4>
		this->i = 0 - this->I_lim;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007fe:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000858 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x120>
 8000802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	// Count D
//	d = this->D * (this->error - this->error_before) / COUNT_TIME;
	d = 0;
 800080c:	f04f 0200 	mov.w	r2, #0
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Output = P + I + D
	this->u = (double) p + this->i + d;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800081e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000822:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000826:	ed97 7b02 	vldr	d7, [r7, #8]
 800082a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	ed83 7b02 	vstr	d7, [r3, #8]
//	else if (this->u > 0.6) {
//		this->u = 0.6;
//	}

	// Record Prev output
	this->prev_u = this->u;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return;
 8000840:	bf00      	nop
}
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	f3af 8000 	nop.w
 8000850:	d2f1a9fc 	.word	0xd2f1a9fc
 8000854:	3f50624d 	.word	0x3f50624d
	...

08000860 <_ZN8DC_Motor5Motor10UpdateVnowEv>:

void Motor::UpdateVnow() {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	// First, get CNT for this loop
	CNT = __HAL_TIM_GET_COUNTER(TIM);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000870:	b21a      	sxth	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	839a      	strh	r2, [r3, #28]

	Record_CNT();
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f831 	bl	80008de <_ZN8DC_Motor5Motor10Record_CNTEv>
	Vnow = CNT * CONST_FOR_MOTOR[num];  // Unit : m / s
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000882:	ee07 3a90 	vmov	s15, r3
 8000886:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <_ZN8DC_Motor5Motor10UpdateVnowEv+0x58>)
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4413      	add	r3, r2
 8000896:	ed93 7b00 	vldr	d7, [r3]
 800089a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	ed83 7b08 	vstr	d7, [r3, #32]
//	if (isMove && num == 0 && DC_index < 2000) {
//		DC_motor_Vnow[DC_index++] = Vnow;
//	}

	// Finally, reset the counter CNT
	__HAL_TIM_SET_COUNTER(TIM, 0);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800e328 	.word	0x0800e328

080008bc <_ZN8DC_Motor5Motor8SetVgoalEd>:

void Motor::SetVgoal(double Vgoal) {
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	ed87 0b00 	vstr	d0, [r7]
	this->Vgoal = Vgoal;
 80008c8:	68f9      	ldr	r1, [r7, #12]
 80008ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_ZN8DC_Motor5Motor10Record_CNTEv>:

void Motor::Record_CNT() {
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	continue_CNT += CNT;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80008f0:	441a      	add	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	619a      	str	r2, [r3, #24]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_ZN8DC_Motor5Motor9Reset_CNTEv>:

void Motor::Reset_CNT() {
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	continue_CNT = 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <_ZN8DC_Motor5Motor7MoveDisEv>:

double Motor::MoveDis() {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	double dis = continue_CNT * CONST_FOR_MOTOR[num];
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <_ZN8DC_Motor5Motor7MoveDisEv+0x44>)
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4413      	add	r3, r2
 800093c:	ed93 7b00 	vldr	d7, [r3]
 8000940:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000944:	ed87 7b02 	vstr	d7, [r7, #8]

	Reset_CNT();
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ffda 	bl	8000902 <_ZN8DC_Motor5Motor9Reset_CNTEv>

	return dis;
 800094e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000952:	ec43 2b17 	vmov	d7, r2, r3
}
 8000956:	eeb0 0b47 	vmov.f64	d0, d7
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	0800e328 	.word	0x0800e328

08000964 <_ZN8DC_Motor5Motor7GetVnowEv>:

double Motor::GetVnow() {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	return Vnow;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000972:	ec43 2b17 	vmov	d7, r2, r3
}
 8000976:	eeb0 0b47 	vmov.f64	d0, d7
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_ZN8DC_Motor5MotorC1Ev>:

namespace DC_Motor {

class Motor {
public:
	Motor() {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 0200 	mov.w	r2, #0
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	839a      	strh	r2, [r3, #28]
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_ZN8DC_Motor5MotorC1Ev+0x98>)
 80009d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 0200 	mov.w	r2, #0
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000a04:	461a      	mov	r2, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c2 3ef0 	str.w	r3, [r2, #3824]	; 0xef0
	}
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	3ff00000 	.word	0x3ff00000

08000a20 <_ZN8CAR_INFOC1Ev>:

typedef struct {
	double Vx = 0.0;
	double Vy = 0.0;
	double Omega = 0.0;
} CAR_INFO;
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	f04f 0200 	mov.w	r2, #0
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	e9c1 2300 	strd	r2, r3, [r1]
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	f04f 0300 	mov.w	r3, #0
 8000a4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_ZN4OmniC1Ev>:
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim15;

Omni omni;

Omni::Omni() {
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2403      	movs	r4, #3
 8000a6c:	461d      	mov	r5, r3
 8000a6e:	2c00      	cmp	r4, #0
 8000a70:	db08      	blt.n	8000a84 <_ZN4OmniC1Ev+0x24>
 8000a72:	4628      	mov	r0, r5
 8000a74:	f7ff ff86 	bl	8000984 <_ZN8DC_Motor5MotorC1Ev>
 8000a78:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000a7c:	442b      	add	r3, r5
 8000a7e:	461d      	mov	r5, r3
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e7f4      	b.n	8000a6e <_ZN4OmniC1Ev+0xe>
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffc7 	bl	8000a20 <_ZN8CAR_INFOC1Ev>
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	f64f 33f8 	movw	r3, #64504	; 0xfbf8
 8000a98:	4413      	add	r3, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffc0 	bl	8000a20 <_ZN8CAR_INFOC1Ev>
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ffb9 	bl	8000a20 <_ZN8CAR_INFOC1Ev>
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	a305      	add	r3, pc, #20	; (adr r3, 8000ad0 <_ZN4OmniC1Ev+0x70>)
 8000aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abe:	e941 2302 	strd	r2, r3, [r1, #-8]
}
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bdb0      	pop	{r4, r5, r7, pc}
 8000acc:	f3af 8000 	nop.w
 8000ad0:	3d70a3d7 	.word	0x3d70a3d7
 8000ad4:	3fc3d70a 	.word	0x3fc3d70a

08000ad8 <_ZN4Omni4InitEv>:

void Omni::Init() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	this->motors[0].Init(0, &htim2, 3.7, 471.0, 0.);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8000b60 <_ZN4Omni4InitEv+0x88>
 8000ae6:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8000b68 <_ZN4Omni4InitEv+0x90>
 8000aea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8000b70 <_ZN4Omni4InitEv+0x98>
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <_ZN4Omni4InitEv+0xa0>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fdf8 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[1].Init(1, &htim5, 3.7, 471.0, 0.);
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000afe:	4413      	add	r3, r2
 8000b00:	ed9f 2b17 	vldr	d2, [pc, #92]	; 8000b60 <_ZN4Omni4InitEv+0x88>
 8000b04:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8000b68 <_ZN4Omni4InitEv+0x90>
 8000b08:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000b70 <_ZN4Omni4InitEv+0x98>
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <_ZN4Omni4InitEv+0xa4>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fde9 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[2].Init(2, &htim3, 3.7, 471.0, 0.);
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000b1c:	4413      	add	r3, r2
 8000b1e:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8000b60 <_ZN4Omni4InitEv+0x88>
 8000b22:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8000b68 <_ZN4Omni4InitEv+0x90>
 8000b26:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000b70 <_ZN4Omni4InitEv+0x98>
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <_ZN4Omni4InitEv+0xa8>)
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fdda 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[3].Init(3, &htim4, 3.7, 471.0, 0.);
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000b3a:	4413      	add	r3, r2
 8000b3c:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8000b60 <_ZN4Omni4InitEv+0x88>
 8000b40:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8000b68 <_ZN4Omni4InitEv+0x90>
 8000b44:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000b70 <_ZN4Omni4InitEv+0x98>
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <_ZN4Omni4InitEv+0xac>)
 8000b4a:	2103      	movs	r1, #3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fdcb 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>

	DC_Motor::Init();
 8000b52:	f7ff fd93 	bl	800067c <_ZN8DC_Motor4InitEv>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
	...
 8000b6c:	407d7000 	.word	0x407d7000
 8000b70:	9999999a 	.word	0x9999999a
 8000b74:	400d9999 	.word	0x400d9999
 8000b78:	240106e0 	.word	0x240106e0
 8000b7c:	240107c4 	.word	0x240107c4
 8000b80:	2401072c 	.word	0x2401072c
 8000b84:	24010778 	.word	0x24010778

08000b88 <_ZN4Omni16Get_Car_locationEv>:

void Omni::Get_Car_location() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	double m[4];
	for (int i = 0; i < 4; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	dc16      	bgt.n	8000bc8 <_ZN4Omni16Get_Car_locationEv+0x40>
		m[i] = this->motors[i].MoveDis();
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff feb7 	bl	800091c <_ZN8DC_Motor5Motor7MoveDisEv>
 8000bae:	eeb0 7b40 	vmov.f64	d7, d0
 8000bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	3330      	adds	r3, #48	; 0x30
 8000bb8:	443b      	add	r3, r7
 8000bba:	3b28      	subs	r3, #40	; 0x28
 8000bbc:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc6:	e7e5      	b.n	8000b94 <_ZN4Omni16Get_Car_locationEv+0xc>
	}
//	NowCarLocation.Vx += -m[1] + m[3];
//	NowCarLocation.Vy += m[0] - m[2];
//	NowCarLocation.Omega += (m[0] + m[1] + m[2] + m[3]) / 4. / CarRadius;
}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_ZN4Omni16UpdateNowCarInfoEv>:

void Omni::UpdateNowCarInfo() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	ed2d 8b02 	vpush	{d8}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	// Get each motors' Vnow
	// Unit : m/s , rad/s
	this->UpdateMotorVnow();
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f8bd 	bl	8000d5c <_ZN4Omni15UpdateMotorVnowEv>

	NowCarInfo.Vx = (motors[3].GetVnow() - motors[1].GetVnow()) / 2.0;
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000be8:	4413      	add	r3, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff feba 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bf0:	eeb0 8b40 	vmov.f64	d8, d0
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff feb1 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c02:	eeb0 7b40 	vmov.f64	d7, d0
 8000c06:	ee38 6b47 	vsub.f64	d6, d8, d7
 8000c0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8000c18:	4413      	add	r3, r2
 8000c1a:	ed83 7b00 	vstr	d7, [r3]
	NowCarInfo.Vy = (motors[0].GetVnow() - motors[2].GetVnow()) / 2.0;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe9f 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c26:	eeb0 8b40 	vmov.f64	d8, d0
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000c30:	4413      	add	r3, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fe96 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c38:	eeb0 7b40 	vmov.f64	d7, d0
 8000c3c:	ee38 6b47 	vsub.f64	d6, d8, d7
 8000c40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	f64f 33f0 	movw	r3, #64496	; 0xfbf0
 8000c4e:	4413      	add	r3, r2
 8000c50:	ed03 7b02 	vstr	d7, [r3, #-8]
	NowCarInfo.Omega = (motors[0].GetVnow() + motors[1].GetVnow() + motors[2].GetVnow() + motors[3].GetVnow()) / (CarRadius * 4.0);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe84 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c5c:	eeb0 8b40 	vmov.f64	d8, d0
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000c66:	4413      	add	r3, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe7b 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c6e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c72:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe70 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c84:	eeb0 7b40 	vmov.f64	d7, d0
 8000c88:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000c92:	4413      	add	r3, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fe65 	bl	8000964 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9e:	ee38 5b07 	vadd.f64	d5, d8, d7
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000ca8:	4413      	add	r3, r2
 8000caa:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000cae:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000cb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cb6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	f64f 33f0 	movw	r3, #64496	; 0xfbf0
 8000cc0:	4413      	add	r3, r2
 8000cc2:	ed83 7b00 	vstr	d7, [r3]
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	ecbd 8b02 	vpop	{d8}
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_ZN4Omni14SetGoalCarInfoEddd>:

// Set all motors' velocity base on Car Vgoal.
void Omni::SetGoalCarInfo(double Vx, double Vy, double Omega) {
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b088      	sub	sp, #32
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	61f8      	str	r0, [r7, #28]
 8000cda:	ed87 0b04 	vstr	d0, [r7, #16]
 8000cde:	ed87 1b02 	vstr	d1, [r7, #8]
 8000ce2:	ed87 2b00 	vstr	d2, [r7]
	this->GoalCarInfo.Vx = Vx;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000cec:	4619      	mov	r1, r3
 8000cee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cf2:	e941 2302 	strd	r2, r3, [r1, #-8]
	this->GoalCarInfo.Vy = Vy;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d02:	e9c1 2300 	strd	r2, r3, [r1]
	this->GoalCarInfo.Omega = Omega;
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d14:	e941 2302 	strd	r2, r3, [r1, #-8]

	SetMotorVgoal();
 8000d18:	69f8      	ldr	r0, [r7, #28]
 8000d1a:	f000 f8f5 	bl	8000f08 <_ZN4Omni13SetMotorVgoalEv>
}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZN4Omni10Update_PIDEv>:

void Omni::Update_PID() {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	dc0d      	bgt.n	8000d54 <_ZN4Omni10Update_PIDEv+0x2e>
		this->motors[i].UpdatePID();
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fcf6 	bl	8000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>
	for (int i = 0; i < 4; i++) {
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e7ee      	b.n	8000d32 <_ZN4Omni10Update_PIDEv+0xc>
	}
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN4Omni15UpdateMotorVnowEv>:

void Omni::UpdateMotorVnow() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	dc0d      	bgt.n	8000d8a <_ZN4Omni15UpdateMotorVnowEv+0x2e>
		this->motors[i].UpdateVnow();
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd6f 	bl	8000860 <_ZN8DC_Motor5Motor10UpdateVnowEv>
	for (int i = 0; i < 4; i++) {
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e7ee      	b.n	8000d68 <_ZN4Omni15UpdateMotorVnowEv+0xc>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	0000      	movs	r0, r0
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <_ZN4Omni4MoveEv>:

// TODO : Check for the DIR
void Omni::Move() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	// DIR
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (motors[0].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	ed93 7b02 	vldr	d7, [r3, #8]
 8000da6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dae:	bfcc      	ite	gt
 8000db0:	2301      	movgt	r3, #1
 8000db2:	2300      	movle	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	484b      	ldr	r0, [pc, #300]	; (8000ef0 <_ZN4Omni4MoveEv+0x158>)
 8000dc4:	f007 f956 	bl	8008074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (motors[1].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8000dce:	ed93 7b00 	vldr	d7, [r3]
 8000dd2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	bfcc      	ite	gt
 8000ddc:	2301      	movgt	r3, #1
 8000dde:	2300      	movle	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f083 0301 	eor.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dee:	4841      	ldr	r0, [pc, #260]	; (8000ef4 <_ZN4Omni4MoveEv+0x15c>)
 8000df0:	f007 f940 	bl	8008074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, (motors[2].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f503 43fc 	add.w	r3, r3, #32256	; 0x7e00
 8000dfa:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000dfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	bfcc      	ite	gt
 8000e08:	2301      	movgt	r3, #1
 8000e0a:	2300      	movle	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	2108      	movs	r1, #8
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <_ZN4Omni4MoveEv+0x160>)
 8000e1a:	f007 f92b 	bl	8008074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (motors[3].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	f64b 43f0 	movw	r3, #48368	; 0xbcf0
 8000e24:	4413      	add	r3, r2
 8000e26:	ed93 7b00 	vldr	d7, [r3]
 8000e2a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	bfcc      	ite	gt
 8000e34:	2301      	movgt	r3, #1
 8000e36:	2300      	movle	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	482d      	ldr	r0, [pc, #180]	; (8000efc <_ZN4Omni4MoveEv+0x164>)
 8000e48:	f007 f914 	bl	8008074 <HAL_GPIO_WritePin>

	// PWM
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, int(fabs(motors[0].u) * MOTOR_PWM_PULSE));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e52:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e56:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000ee8 <_ZN4Omni4MoveEv+0x150>
 8000e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <_ZN4Omni4MoveEv+0x168>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	ee17 2a90 	vmov	r2, s15
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, int(fabs(motors[1].u) * MOTOR_PWM_PULSE));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8000e72:	ed93 7b00 	vldr	d7, [r3]
 8000e76:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e7a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000ee8 <_ZN4Omni4MoveEv+0x150>
 8000e7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <_ZN4Omni4MoveEv+0x168>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	ee17 2a90 	vmov	r2, s15
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, int(fabs(motors[2].u) * MOTOR_PWM_PULSE));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 43fc 	add.w	r3, r3, #32256	; 0x7e00
 8000e96:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000e9a:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e9e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000ee8 <_ZN4Omni4MoveEv+0x150>
 8000ea2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ea6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <_ZN4Omni4MoveEv+0x16c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	ee17 2a90 	vmov	r2, s15
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, int(fabs(motors[3].u) * MOTOR_PWM_PULSE));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	f64b 43f0 	movw	r3, #48368	; 0xbcf0
 8000eba:	4413      	add	r3, r2
 8000ebc:	ed93 7b00 	vldr	d7, [r3]
 8000ec0:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ec4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ee8 <_ZN4Omni4MoveEv+0x150>
 8000ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ecc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <_ZN4Omni4MoveEv+0x16c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	ee17 2a90 	vmov	r2, s15
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	40b90000 	.word	0x40b90000
 8000ef0:	58020c00 	.word	0x58020c00
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58021000 	.word	0x58021000
 8000efc:	58020800 	.word	0x58020800
 8000f00:	240108a8 	.word	0x240108a8
 8000f04:	24010940 	.word	0x24010940

08000f08 <_ZN4Omni13SetMotorVgoalEv>:

void Omni::SetMotorVgoal() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	// Unit : m/s
	this->motors[0].SetVgoal(GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000f18:	ed93 6b00 	vldr	d6, [r3]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000f22:	4413      	add	r3, r2
 8000f24:	ed13 5b02 	vldr	d5, [r3, #-8]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000f2e:	4413      	add	r3, r2
 8000f30:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000f34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f40:	4608      	mov	r0, r1
 8000f42:	f7ff fcbb 	bl	80008bc <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[1].SetVgoal(-GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000f4c:	4413      	add	r3, r2
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000f54:	440a      	add	r2, r1
 8000f56:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000f60:	440a      	add	r2, r1
 8000f62:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000f70:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f78:	eeb0 0b47 	vmov.f64	d0, d7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fc9d 	bl	80008bc <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[2].SetVgoal(-GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000f88:	4413      	add	r3, r2
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000f90:	440a      	add	r2, r1
 8000f92:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000f9c:	440a      	add	r2, r1
 8000f9e:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000fa2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000fac:	ed92 7b00 	vldr	d7, [r2]
 8000fb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fc7f 	bl	80008bc <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[3].SetVgoal(GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000fc4:	4413      	add	r3, r2
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000fcc:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000fd6:	440a      	add	r2, r1
 8000fd8:	ed12 5b02 	vldr	d5, [r2, #-8]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000fe2:	440a      	add	r2, r1
 8000fe4:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000fe8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fc61 	bl	80008bc <_ZN8DC_Motor5Motor8SetVgoalEd>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_ZN4Omni13GetNowCarInfoEv>:

CAR_INFO Omni::GetNowCarInfo() {
 8001002:	b4b0      	push	{r4, r5, r7}
 8001004:	b08f      	sub	sp, #60	; 0x3c
 8001006:	af00      	add	r7, sp, #0
 8001008:	61f8      	str	r0, [r7, #28]
	return NowCarInfo;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8001010:	f107 0420 	add.w	r4, r7, #32
 8001014:	f503 653e 	add.w	r5, r3, #3040	; 0xbe0
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001020:	e884 0003 	stmia.w	r4, {r0, r1}
 8001024:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001028:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800102c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001030:	ec45 4b15 	vmov	d5, r4, r5
 8001034:	ec41 0b16 	vmov	d6, r0, r1
 8001038:	ec43 2b17 	vmov	d7, r2, r3
}
 800103c:	eeb0 0b45 	vmov.f64	d0, d5
 8001040:	eeb0 1b46 	vmov.f64	d1, d6
 8001044:	eeb0 2b47 	vmov.f64	d2, d7
 8001048:	373c      	adds	r7, #60	; 0x3c
 800104a:	46bd      	mov	sp, r7
 800104c:	bcb0      	pop	{r4, r5, r7}
 800104e:	4770      	bx	lr

08001050 <_Z41__static_initialization_and_destruction_0ii>:
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d107      	bne.n	8001070 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001066:	4293      	cmp	r3, r2
 8001068:	d102      	bne.n	8001070 <_Z41__static_initialization_and_destruction_0ii+0x20>
Omni omni;
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800106c:	f7ff fcf8 	bl	8000a60 <_ZN4OmniC1Ev>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	24000098 	.word	0x24000098

0800107c <_GLOBAL__sub_I_omni>:
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
 8001080:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ffe3 	bl	8001050 <_Z41__static_initialization_and_destruction_0ii>
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	0800e454 	.word	0x0800e454

080010ac <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffe8 	bl	800108c <_ZN3ros3MsgC1Ev>
 80010bc:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0800e43c 	.word	0x0800e43c

080010fc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001110:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	4401      	add	r1, r0
 800111e:	b2d3      	uxtb	r3, r2
 8001120:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001122:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0a02      	lsrs	r2, r0, #8
 8001130:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001134:	0a0b      	lsrs	r3, r1, #8
 8001136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001138:	3101      	adds	r1, #1
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	4401      	add	r1, r0
 800113e:	b2d3      	uxtb	r3, r2
 8001140:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001142:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0c02      	lsrs	r2, r0, #16
 8001150:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001154:	0c0b      	lsrs	r3, r1, #16
 8001156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001158:	3102      	adds	r1, #2
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	4401      	add	r1, r0
 800115e:	b2d3      	uxtb	r3, r2
 8001160:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001162:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	0e02      	lsrs	r2, r0, #24
 8001170:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001174:	0e0b      	lsrs	r3, r1, #24
 8001176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001178:	3103      	adds	r1, #3
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	4401      	add	r1, r0
 800117e:	b2d3      	uxtb	r3, r2
 8001180:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001182:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	000a      	movs	r2, r1
 8001190:	2300      	movs	r3, #0
 8001192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001194:	3104      	adds	r1, #4
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	4401      	add	r1, r0
 800119a:	b2d3      	uxtb	r3, r2
 800119c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800119e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0a0a      	lsrs	r2, r1, #8
 80011ac:	2300      	movs	r3, #0
 80011ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b0:	3105      	adds	r1, #5
 80011b2:	6838      	ldr	r0, [r7, #0]
 80011b4:	4401      	add	r1, r0
 80011b6:	b2d3      	uxtb	r3, r2
 80011b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80011ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	0c0a      	lsrs	r2, r1, #16
 80011c8:	2300      	movs	r3, #0
 80011ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011cc:	3106      	adds	r1, #6
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	4401      	add	r1, r0
 80011d2:	b2d3      	uxtb	r3, r2
 80011d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80011d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	0e0a      	lsrs	r2, r1, #24
 80011e4:	2300      	movs	r3, #0
 80011e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e8:	3107      	adds	r1, #7
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	4401      	add	r1, r0
 80011ee:	b2d3      	uxtb	r3, r2
 80011f0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3308      	adds	r3, #8
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001202:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	4401      	add	r1, r0
 800120c:	b2d3      	uxtb	r3, r2
 800120e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001210:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	0a02      	lsrs	r2, r0, #8
 800121e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001222:	0a0b      	lsrs	r3, r1, #8
 8001224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001226:	3101      	adds	r1, #1
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	4401      	add	r1, r0
 800122c:	b2d3      	uxtb	r3, r2
 800122e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001230:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	0c02      	lsrs	r2, r0, #16
 800123e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001242:	0c0b      	lsrs	r3, r1, #16
 8001244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001246:	3102      	adds	r1, #2
 8001248:	6838      	ldr	r0, [r7, #0]
 800124a:	4401      	add	r1, r0
 800124c:	b2d3      	uxtb	r3, r2
 800124e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	0e02      	lsrs	r2, r0, #24
 800125e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001262:	0e0b      	lsrs	r3, r1, #24
 8001264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001266:	3103      	adds	r1, #3
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	4401      	add	r1, r0
 800126c:	b2d3      	uxtb	r3, r2
 800126e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001270:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	000a      	movs	r2, r1
 800127e:	2300      	movs	r3, #0
 8001280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001282:	3104      	adds	r1, #4
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	4401      	add	r1, r0
 8001288:	b2d3      	uxtb	r3, r2
 800128a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800128c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	0a0a      	lsrs	r2, r1, #8
 800129a:	2300      	movs	r3, #0
 800129c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800129e:	3105      	adds	r1, #5
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	4401      	add	r1, r0
 80012a4:	b2d3      	uxtb	r3, r2
 80012a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80012a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	0c0a      	lsrs	r2, r1, #16
 80012b6:	2300      	movs	r3, #0
 80012b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ba:	3106      	adds	r1, #6
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	4401      	add	r1, r0
 80012c0:	b2d3      	uxtb	r3, r2
 80012c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80012c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	0e0a      	lsrs	r2, r1, #24
 80012d2:	2300      	movs	r3, #0
 80012d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012d6:	3107      	adds	r1, #7
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	4401      	add	r1, r0
 80012dc:	b2d3      	uxtb	r3, r2
 80012de:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	3308      	adds	r3, #8
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80012f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	4401      	add	r1, r0
 80012fa:	b2d3      	uxtb	r3, r2
 80012fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80012fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	0a02      	lsrs	r2, r0, #8
 800130c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001310:	0a0b      	lsrs	r3, r1, #8
 8001312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001314:	3101      	adds	r1, #1
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	4401      	add	r1, r0
 800131a:	b2d3      	uxtb	r3, r2
 800131c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800131e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	0c02      	lsrs	r2, r0, #16
 800132c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001330:	0c0b      	lsrs	r3, r1, #16
 8001332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001334:	3102      	adds	r1, #2
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	4401      	add	r1, r0
 800133a:	b2d3      	uxtb	r3, r2
 800133c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800133e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	0e02      	lsrs	r2, r0, #24
 800134c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001350:	0e0b      	lsrs	r3, r1, #24
 8001352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001354:	3103      	adds	r1, #3
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	4401      	add	r1, r0
 800135a:	b2d3      	uxtb	r3, r2
 800135c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800135e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	000a      	movs	r2, r1
 800136c:	2300      	movs	r3, #0
 800136e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001370:	3104      	adds	r1, #4
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	4401      	add	r1, r0
 8001376:	b2d3      	uxtb	r3, r2
 8001378:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800137a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	0a0a      	lsrs	r2, r1, #8
 8001388:	2300      	movs	r3, #0
 800138a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138c:	3105      	adds	r1, #5
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	4401      	add	r1, r0
 8001392:	b2d3      	uxtb	r3, r2
 8001394:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001396:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	0c0a      	lsrs	r2, r1, #16
 80013a4:	2300      	movs	r3, #0
 80013a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a8:	3106      	adds	r1, #6
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	4401      	add	r1, r0
 80013ae:	b2d3      	uxtb	r3, r2
 80013b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80013b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	0e0a      	lsrs	r2, r1, #24
 80013c0:	2300      	movs	r3, #0
 80013c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c4:	3107      	adds	r1, #7
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	4401      	add	r1, r0
 80013ca:	b2d3      	uxtb	r3, r2
 80013cc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	3308      	adds	r3, #8
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80013d6:	4618      	mov	r0, r3
 80013d8:	372c      	adds	r7, #44	; 0x2c
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80013e2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013e6:	b0eb      	sub	sp, #428	; 0x1ac
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80013ee:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001404:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001408:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800140c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2200      	movs	r2, #0
 8001418:	461c      	mov	r4, r3
 800141a:	4615      	mov	r5, r2
 800141c:	ea40 0804 	orr.w	r8, r0, r4
 8001420:	ea41 0905 	orr.w	r9, r1, r5
 8001424:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001428:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800142c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2200      	movs	r2, #0
 800143e:	469a      	mov	sl, r3
 8001440:	4693      	mov	fp, r2
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800144e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001452:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001456:	ea40 0402 	orr.w	r4, r0, r2
 800145a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800145e:	430b      	orrs	r3, r1
 8001460:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001464:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8001468:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800146c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001470:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001474:	1c9a      	adds	r2, r3, #2
 8001476:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2200      	movs	r2, #0
 8001482:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001486:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8001496:	464c      	mov	r4, r9
 8001498:	0423      	lsls	r3, r4, #16
 800149a:	4644      	mov	r4, r8
 800149c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80014a0:	4644      	mov	r4, r8
 80014a2:	0422      	lsls	r2, r4, #16
 80014a4:	ea40 0402 	orr.w	r4, r0, r2
 80014a8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80014ac:	430b      	orrs	r3, r1
 80014ae:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80014b2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80014b6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014ba:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014c2:	1cda      	adds	r2, r3, #3
 80014c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2200      	movs	r2, #0
 80014d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80014d4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80014d8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80014dc:	4623      	mov	r3, r4
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80014e4:	4623      	mov	r3, r4
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014ec:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80014f0:	4623      	mov	r3, r4
 80014f2:	4303      	orrs	r3, r0
 80014f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014f8:	462b      	mov	r3, r5
 80014fa:	430b      	orrs	r3, r1
 80014fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001500:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8001504:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001508:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800150c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001510:	1d1a      	adds	r2, r3, #4
 8001512:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2200      	movs	r2, #0
 800151e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001522:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8001532:	0023      	movs	r3, r4
 8001534:	2200      	movs	r2, #0
 8001536:	ea40 0402 	orr.w	r4, r0, r2
 800153a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800153e:	430b      	orrs	r3, r1
 8001540:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001544:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8001548:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800154c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001550:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001554:	1d5a      	adds	r2, r3, #5
 8001556:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2200      	movs	r2, #0
 8001562:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001566:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001576:	0223      	lsls	r3, r4, #8
 8001578:	2200      	movs	r2, #0
 800157a:	ea40 0402 	orr.w	r4, r0, r2
 800157e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8001582:	430b      	orrs	r3, r1
 8001584:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001588:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800158c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001590:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001594:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001598:	1d9a      	adds	r2, r3, #6
 800159a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2200      	movs	r2, #0
 80015a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015aa:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80015ba:	0423      	lsls	r3, r4, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	ea40 0402 	orr.w	r4, r0, r2
 80015c2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80015c6:	430b      	orrs	r3, r1
 80015c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015cc:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80015d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80015d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80015d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015dc:	1dda      	adds	r2, r3, #7
 80015de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80015ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80015fe:	0623      	lsls	r3, r4, #24
 8001600:	2200      	movs	r2, #0
 8001602:	ea40 0402 	orr.w	r4, r0, r2
 8001606:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800160a:	430b      	orrs	r3, r1
 800160c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001610:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8001614:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8001618:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800161c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001620:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8001624:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001628:	3308      	adds	r3, #8
 800162a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800163a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800163e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001642:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001646:	4413      	add	r3, r2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2200      	movs	r2, #0
 800164e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001652:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001656:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800165a:	4623      	mov	r3, r4
 800165c:	4303      	orrs	r3, r0
 800165e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001662:	462b      	mov	r3, r5
 8001664:	430b      	orrs	r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800166e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001672:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001676:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2200      	movs	r2, #0
 8001688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800168c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800169c:	464c      	mov	r4, r9
 800169e:	0223      	lsls	r3, r4, #8
 80016a0:	4644      	mov	r4, r8
 80016a2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80016a6:	4644      	mov	r4, r8
 80016a8:	0222      	lsls	r2, r4, #8
 80016aa:	ea40 0402 	orr.w	r4, r0, r2
 80016ae:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80016b2:	430b      	orrs	r3, r1
 80016b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016b8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80016bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80016c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016c8:	1c9a      	adds	r2, r3, #2
 80016ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016ea:	464c      	mov	r4, r9
 80016ec:	0423      	lsls	r3, r4, #16
 80016ee:	4644      	mov	r4, r8
 80016f0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80016f4:	4644      	mov	r4, r8
 80016f6:	0422      	lsls	r2, r4, #16
 80016f8:	ea40 0402 	orr.w	r4, r0, r2
 80016fc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8001700:	430b      	orrs	r3, r1
 8001702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001706:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800170a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800170e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001712:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001716:	1cda      	adds	r2, r3, #3
 8001718:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2200      	movs	r2, #0
 8001724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001728:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800172c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001730:	4623      	mov	r3, r4
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001738:	4623      	mov	r3, r4
 800173a:	061b      	lsls	r3, r3, #24
 800173c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001740:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001744:	4623      	mov	r3, r4
 8001746:	4303      	orrs	r3, r0
 8001748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800174c:	462b      	mov	r3, r5
 800174e:	430b      	orrs	r3, r1
 8001750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001754:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8001758:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800175c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001760:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2200      	movs	r2, #0
 8001772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001776:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8001786:	0023      	movs	r3, r4
 8001788:	2200      	movs	r2, #0
 800178a:	ea40 0402 	orr.w	r4, r0, r2
 800178e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8001792:	430b      	orrs	r3, r1
 8001794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001798:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800179c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80017a0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017a8:	1d5a      	adds	r2, r3, #5
 80017aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80017ba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80017ca:	0223      	lsls	r3, r4, #8
 80017cc:	2200      	movs	r2, #0
 80017ce:	ea40 0402 	orr.w	r4, r0, r2
 80017d2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80017d6:	430b      	orrs	r3, r1
 80017d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80017dc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80017e0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80017e4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017ec:	1d9a      	adds	r2, r3, #6
 80017ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80017fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800180e:	0423      	lsls	r3, r4, #16
 8001810:	2200      	movs	r2, #0
 8001812:	ea40 0402 	orr.w	r4, r0, r2
 8001816:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800181a:	430b      	orrs	r3, r1
 800181c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001820:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001824:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001828:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800182c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001830:	1dda      	adds	r2, r3, #7
 8001832:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2200      	movs	r2, #0
 800183e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8001852:	0623      	lsls	r3, r4, #24
 8001854:	2200      	movs	r2, #0
 8001856:	ea40 0402 	orr.w	r4, r0, r2
 800185a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800185e:	430b      	orrs	r3, r1
 8001860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001864:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001868:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800186c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001870:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001874:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8001878:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800187c:	3308      	adds	r3, #8
 800187e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800188e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001892:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001896:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018a6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80018aa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018ae:	4623      	mov	r3, r4
 80018b0:	4303      	orrs	r3, r0
 80018b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80018b4:	462b      	mov	r3, r5
 80018b6:	430b      	orrs	r3, r1
 80018b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018ba:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80018be:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80018c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2200      	movs	r2, #0
 80018d8:	673b      	str	r3, [r7, #112]	; 0x70
 80018da:	677a      	str	r2, [r7, #116]	; 0x74
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80018e8:	464c      	mov	r4, r9
 80018ea:	0223      	lsls	r3, r4, #8
 80018ec:	4644      	mov	r4, r8
 80018ee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80018f2:	4644      	mov	r4, r8
 80018f4:	0222      	lsls	r2, r4, #8
 80018f6:	ea40 0402 	orr.w	r4, r0, r2
 80018fa:	66bc      	str	r4, [r7, #104]	; 0x68
 80018fc:	430b      	orrs	r3, r1
 80018fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001900:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001904:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001908:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800190c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001910:	1c9a      	adds	r2, r3, #2
 8001912:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2200      	movs	r2, #0
 800191e:	663b      	str	r3, [r7, #96]	; 0x60
 8001920:	667a      	str	r2, [r7, #100]	; 0x64
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800192e:	464c      	mov	r4, r9
 8001930:	0423      	lsls	r3, r4, #16
 8001932:	4644      	mov	r4, r8
 8001934:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001938:	4644      	mov	r4, r8
 800193a:	0422      	lsls	r2, r4, #16
 800193c:	ea40 0402 	orr.w	r4, r0, r2
 8001940:	65bc      	str	r4, [r7, #88]	; 0x58
 8001942:	430b      	orrs	r3, r1
 8001944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001946:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800194a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800194e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001952:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001956:	1cda      	adds	r2, r3, #3
 8001958:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2200      	movs	r2, #0
 8001964:	653b      	str	r3, [r7, #80]	; 0x50
 8001966:	657a      	str	r2, [r7, #84]	; 0x54
 8001968:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800196c:	4623      	mov	r3, r4
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001972:	4623      	mov	r3, r4
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
 8001978:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800197c:	4623      	mov	r3, r4
 800197e:	4303      	orrs	r3, r0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
 8001982:	462b      	mov	r3, r5
 8001984:	430b      	orrs	r3, r1
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
 8001988:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800198c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001990:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001994:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80019b4:	0023      	movs	r3, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	ea40 0402 	orr.w	r4, r0, r2
 80019bc:	633c      	str	r4, [r7, #48]	; 0x30
 80019be:	430b      	orrs	r3, r1
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
 80019c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80019c6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80019ca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019d2:	1d5a      	adds	r2, r3, #5
 80019d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019d8:	4413      	add	r3, r2
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80019ee:	0223      	lsls	r3, r4, #8
 80019f0:	2200      	movs	r2, #0
 80019f2:	ea40 0402 	orr.w	r4, r0, r2
 80019f6:	623c      	str	r4, [r7, #32]
 80019f8:	430b      	orrs	r3, r1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a00:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001a04:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001a08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	61fa      	str	r2, [r7, #28]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	69bc      	ldr	r4, [r7, #24]
 8001a28:	0423      	lsls	r3, r4, #16
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	ea40 0402 	orr.w	r4, r0, r2
 8001a30:	613c      	str	r4, [r7, #16]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a3a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001a3e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001a42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a46:	3307      	adds	r3, #7
 8001a48:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2200      	movs	r2, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	60fa      	str	r2, [r7, #12]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	68bc      	ldr	r4, [r7, #8]
 8001a62:	0623      	lsls	r3, r4, #24
 8001a64:	2200      	movs	r2, #0
 8001a66:	ea40 0402 	orr.w	r4, r0, r2
 8001a6a:	603c      	str	r4, [r7, #0]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a74:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8001a78:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001a7c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001a80:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8001a84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a88:	3308      	adds	r3, #8
 8001a8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8001a8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8001a92:	4618      	mov	r0, r3
 8001a94:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a9e:	4770      	bx	lr

08001aa0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	0800e190 	.word	0x0800e190

08001abc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	0800e1a8 	.word	0x0800e1a8

08001ad8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fad2 	bl	800108c <_ZN3ros3MsgC1Ev>
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3308      	adds	r3, #8
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fada 	bl	80010ac <_ZN13geometry_msgs7Vector3C1Ev>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3328      	adds	r3, #40	; 0x28
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fad5 	bl	80010ac <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	0800e424 	.word	0x0800e424

08001b10 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 0008 	add.w	r0, r3, #8
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff fae6 	bl	80010fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7ff fad9 	bl	80010fc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b52:	68fb      	ldr	r3, [r7, #12]
    }
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 0008 	add.w	r0, r3, #8
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff fc33 	bl	80013e2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7ff fc26 	bl	80013e2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	0800e1cc 	.word	0x0800e1cc

08001bc4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	0800e1e0 	.word	0x0800e1e0

08001be0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      data()
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fa3c 	bl	800108c <_ZN3ros3MsgC1Ev>
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ffde 	bl	8001be0 <_ZN3ros4TimeC1Ev>
    {
    }
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0800e40c 	.word	0x0800e40c

08001c34 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0a19      	lsrs	r1, r3, #8
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0c19      	lsrs	r1, r3, #16
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	0e19      	lsrs	r1, r3, #24
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3303      	adds	r3, #3
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2ca      	uxtb	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a19      	lsrs	r1, r3, #8
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	0c19      	lsrs	r1, r3, #16
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0e19      	lsrs	r1, r3, #24
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    }
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3301      	adds	r3, #1
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	440b      	add	r3, r1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	440b      	add	r3, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3303      	adds	r3, #3
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	440b      	add	r3, r1
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3304      	adds	r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	440b      	add	r3, r1
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3302      	adds	r3, #2
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	440b      	add	r3, r1
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3303      	adds	r3, #3
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	0800e204 	.word	0x0800e204

08001dc8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	0800e214 	.word	0x0800e214

08001de4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f94c 	bl	800108c <_ZN3ros3MsgC1Ev>
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	809a      	strh	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
    {
    }
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	0800e3f4 	.word	0x0800e3f4
 8001e28:	0800e238 	.word	0x0800e238

08001e2c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	8899      	ldrh	r1, [r3, #4]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	889b      	ldrh	r3, [r3, #4]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b299      	uxth	r1, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	3301      	adds	r3, #1
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fa52 	bl	8000310 <strlen>
 8001e6c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	69b9      	ldr	r1, [r7, #24]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 ff7a 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	18d0      	adds	r0, r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f00b ffd8 	bl	800de44 <memcpy>
      offset += length_topic_name;
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4413      	add	r3, r2
 8001e9a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fa35 	bl	8000310 <strlen>
 8001ea6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	6979      	ldr	r1, [r7, #20]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 ff5d 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	18d0      	adds	r0, r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f00b ffbb 	bl	800de44 <memcpy>
      offset += length_message_type;
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fa18 	bl	8000310 <strlen>
 8001ee0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 ff40 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	18d0      	adds	r0, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4619      	mov	r1, r3
 8001f04:	f00b ff9e 	bl	800de44 <memcpy>
      offset += length_md5sum;
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2ca      	uxtb	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0a19      	lsrs	r1, r3, #8
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0c19      	lsrs	r1, r3, #16
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b2ca      	uxtb	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0e19      	lsrs	r1, r3, #24
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3303      	adds	r3, #3
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	61fb      	str	r3, [r7, #28]
      return offset;
 8001f58:	69fb      	ldr	r3, [r7, #28]
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b08a      	sub	sp, #40	; 0x28
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	889b      	ldrh	r3, [r3, #4]
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	3301      	adds	r3, #1
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	440b      	add	r3, r1
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	441a      	add	r2, r3
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fefc 	bl	8002dac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d20c      	bcs.n	8001fe4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	441a      	add	r2, r3
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	3301      	adds	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	e7ec      	b.n	8001fbe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b01      	subs	r3, #1
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4413      	add	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	441a      	add	r2, r3
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fec9 	bl	8002dac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3304      	adds	r3, #4
 800201e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	6a3a      	ldr	r2, [r7, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d20c      	bcs.n	800204a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	441a      	add	r2, r3
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	3b01      	subs	r3, #1
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	440b      	add	r3, r1
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	3301      	adds	r3, #1
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	e7ec      	b.n	8002024 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	3b01      	subs	r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3b01      	subs	r3, #1
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	441a      	add	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	441a      	add	r2, r3
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fe96 	bl	8002dac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	3304      	adds	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	429a      	cmp	r2, r3
 8002094:	d20c      	bcs.n	80020b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	441a      	add	r2, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3301      	adds	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e7ec      	b.n	800208a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	3b01      	subs	r3, #1
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	440a      	add	r2, r1
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	3301      	adds	r3, #1
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	440b      	add	r3, r1
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3302      	adds	r3, #2
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	440b      	add	r3, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	4313      	orrs	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	3303      	adds	r3, #3
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	440b      	add	r3, r1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	4313      	orrs	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3304      	adds	r3, #4
 8002126:	61bb      	str	r3, [r7, #24]
     return offset;
 8002128:	69bb      	ldr	r3, [r7, #24]
    }
 800212a:	4618      	mov	r0, r3
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	0800e23c 	.word	0x0800e23c

08002150 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	0800e258 	.word	0x0800e258

0800216c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe ff88 	bl	800108c <_ZN3ros3MsgC1Ev>
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	711a      	strb	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800218c:	609a      	str	r2, [r3, #8]
    {
    }
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	0800e3dc 	.word	0x0800e3dc
 800219c:	0800e238 	.word	0x0800e238

080021a0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	7912      	ldrb	r2, [r2, #4]
 80021b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3301      	adds	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f8a3 	bl	8000310 <strlen>
 80021ca:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fdcb 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3304      	adds	r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	18d0      	adds	r0, r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f00b fe29 	bl	800de44 <memcpy>
      offset += length_msg;
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80021fa:	68fb      	ldr	r3, [r7, #12]
    }
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4413      	add	r3, r2
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	3301      	adds	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	441a      	add	r2, r3
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fdbb 	bl	8002dac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	3304      	adds	r3, #4
 800223a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d20c      	bcs.n	8002266 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	441a      	add	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3b01      	subs	r3, #1
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	440b      	add	r3, r1
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3301      	adds	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e7ec      	b.n	8002240 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	3b01      	subs	r3, #1
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3b01      	subs	r3, #1
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	441a      	add	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
     return offset;
 800228a:	693b      	ldr	r3, [r7, #16]
    }
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	0800e27c 	.word	0x0800e27c

080022b0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	0800e290 	.word	0x0800e290

080022cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fed8 	bl	800108c <_ZN3ros3MsgC1Ev>
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	61da      	str	r2, [r3, #28]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	0800e3c4 	.word	0x0800e3c4

08002314 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	0a19      	lsrs	r1, r3, #8
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4413      	add	r3, r2
 800233e:	b2ca      	uxtb	r2, r1
 8002340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c19      	lsrs	r1, r3, #16
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3302      	adds	r3, #2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0e19      	lsrs	r1, r3, #24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3303      	adds	r3, #3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3304      	adds	r3, #4
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	429a      	cmp	r2, r3
 8002378:	d22b      	bcs.n	80023d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002388:	6939      	ldr	r1, [r7, #16]
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4413      	add	r3, r2
 8002390:	b2ca      	uxtb	r2, r1
 8002392:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	0a19      	lsrs	r1, r3, #8
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3301      	adds	r3, #1
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	b2ca      	uxtb	r2, r1
 80023a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	0c19      	lsrs	r1, r3, #16
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3302      	adds	r3, #2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	0e19      	lsrs	r1, r3, #24
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3303      	adds	r3, #3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3304      	adds	r3, #4
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	3301      	adds	r3, #1
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	e7ce      	b.n	8002370 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	b2ca      	uxtb	r2, r1
 80023de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	0a19      	lsrs	r1, r3, #8
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	0c19      	lsrs	r1, r3, #16
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3302      	adds	r3, #2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	0e19      	lsrs	r1, r3, #24
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3303      	adds	r3, #3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3304      	adds	r3, #4
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	429a      	cmp	r2, r3
 8002428:	d22b      	bcs.n	8002482 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	b2ca      	uxtb	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0a19      	lsrs	r1, r3, #8
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b2ca      	uxtb	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	0c19      	lsrs	r1, r3, #16
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3302      	adds	r3, #2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	0e19      	lsrs	r1, r3, #24
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3303      	adds	r3, #3
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	3304      	adds	r3, #4
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	e7ce      	b.n	8002420 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69d9      	ldr	r1, [r3, #28]
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	0a19      	lsrs	r1, r3, #8
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	b2ca      	uxtb	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	0c19      	lsrs	r1, r3, #16
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	3302      	adds	r3, #2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	b2ca      	uxtb	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	0e19      	lsrs	r1, r3, #24
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3303      	adds	r3, #3
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3304      	adds	r3, #4
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d228      	bcs.n	800252c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd ff12 	bl	8000310 <strlen>
 80024ec:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	6979      	ldr	r1, [r7, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fc3a 	bl	8002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	3304      	adds	r3, #4
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	18d0      	adds	r0, r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4619      	mov	r1, r3
 8002518:	f00b fc94 	bl	800de44 <memcpy>
      offset += length_stringsi;
 800251c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4413      	add	r3, r2
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	3301      	adds	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e7d1      	b.n	80024d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800252e:	4618      	mov	r0, r3
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002536:	b580      	push	{r7, lr}
 8002538:	b08e      	sub	sp, #56	; 0x38
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	3301      	adds	r3, #1
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	4313      	orrs	r3, r2
 800255e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	3302      	adds	r3, #2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	4313      	orrs	r3, r2
 8002570:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002574:	3303      	adds	r3, #3
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	6a3a      	ldr	r2, [r7, #32]
 8002580:	4313      	orrs	r3, r2
 8002582:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	3304      	adds	r3, #4
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	6a3a      	ldr	r2, [r7, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d90a      	bls.n	80025aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f00b fc66 	bl	800de70 <realloc>
 80025a4:	4602      	mov	r2, r0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d236      	bcs.n	800262c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	440a      	add	r2, r1
 80025ca:	7812      	ldrb	r2, [r2, #0]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d4:	3301      	adds	r3, #1
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	440b      	add	r3, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	3302      	adds	r3, #2
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	440b      	add	r3, r1
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	041b      	lsls	r3, r3, #16
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f8:	3303      	adds	r3, #3
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	440b      	add	r3, r1
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	3304      	adds	r3, #4
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	3301      	adds	r3, #1
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
 800262a:	e7c3      	b.n	80025b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	3301      	adds	r3, #1
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	3302      	adds	r3, #2
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	4313      	orrs	r3, r2
 8002658:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	3303      	adds	r3, #3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	4313      	orrs	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	3304      	adds	r3, #4
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	429a      	cmp	r2, r3
 800267a:	d90a      	bls.n	8002692 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f00b fbf2 	bl	800de70 <realloc>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d236      	bcs.n	8002714 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	440a      	add	r2, r1
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026bc:	3301      	adds	r3, #1
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	440b      	add	r3, r1
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	3302      	adds	r3, #2
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	3303      	adds	r3, #3
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	440b      	add	r3, r1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	3304      	adds	r3, #4
 80026f8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	3214      	adds	r2, #20
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	3301      	adds	r3, #1
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002712:	e7c3      	b.n	800269c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	3301      	adds	r3, #1
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	3302      	adds	r3, #2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	3303      	adds	r3, #3
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	3304      	adds	r3, #4
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	429a      	cmp	r2, r3
 8002762:	d90a      	bls.n	800277a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f00b fb7e 	bl	800de70 <realloc>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278a:	429a      	cmp	r2, r3
 800278c:	d23f      	bcs.n	800280e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	441a      	add	r2, r3
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fb06 	bl	8002dac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	3304      	adds	r3, #4
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d20c      	bcs.n	80027d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	441a      	add	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	3b01      	subs	r3, #1
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	440b      	add	r3, r1
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	3301      	adds	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e7ec      	b.n	80027aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80027d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4413      	add	r3, r2
 80027d6:	3b01      	subs	r3, #1
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80027e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e2:	3b01      	subs	r3, #1
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	441a      	add	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80027ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	3220      	adds	r2, #32
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	3301      	adds	r3, #1
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
 800280c:	e7ba      	b.n	8002784 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002810:	4618      	mov	r0, r3
 8002812:	3738      	adds	r7, #56	; 0x38
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	0800e348 	.word	0x0800e348

08002834 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	0800e2b4 	.word	0x0800e2b4

08002850 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	611a      	str	r2, [r3, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68d8      	ldr	r0, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6891      	ldr	r1, [r2, #8]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4798      	blx	r3
 800289c:	4603      	mov	r3, r0
  };
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
  }
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a42      	ldr	r2, [pc, #264]	; (80029dc <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d068      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d061      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d05a      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d053      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a38      	ldr	r2, [pc, #224]	; (80029ec <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d04c      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a36      	ldr	r2, [pc, #216]	; (80029f0 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d045      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d03e      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d037      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2e      	ldr	r2, [pc, #184]	; (80029fc <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d030      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d029      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d022      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d01b      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d014      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00d      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d006      	beq.n	80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d109      	bne.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	e008      	b.n	80029ce <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40020010 	.word	0x40020010
 80029e0:	40020028 	.word	0x40020028
 80029e4:	40020040 	.word	0x40020040
 80029e8:	40020058 	.word	0x40020058
 80029ec:	40020070 	.word	0x40020070
 80029f0:	40020088 	.word	0x40020088
 80029f4:	400200a0 	.word	0x400200a0
 80029f8:	400200b8 	.word	0x400200b8
 80029fc:	40020410 	.word	0x40020410
 8002a00:	40020428 	.word	0x40020428
 8002a04:	40020440 	.word	0x40020440
 8002a08:	40020458 	.word	0x40020458
 8002a0c:	40020470 	.word	0x40020470
 8002a10:	40020488 	.word	0x40020488
 8002a14:	400204a0 	.word	0x400204a0
 8002a18:	400204b8 	.word	0x400204b8

08002a1c <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
			huart(&huart1), rind(0), twind(0), tfind(0) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <_ZN13STM32HardwareC1Ev+0x34>)
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	2401098c 	.word	0x2401098c

08002a54 <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f804 	bl	8002a6a <_ZN13STM32Hardware10reset_rbufEv>
	}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f009 f962 	bl	800bd48 <HAL_UART_Receive_DMA>
	}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_ZN13STM32Hardware4readEv>:

	int read() {
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
		int c = -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a98:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff0d 	bl	80028c0 <_ZN13STM32Hardware10getRdmaIndEv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002abc:	1c59      	adds	r1, r3, #1
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8002adc:	68fb      	ldr	r3, [r7, #12]
	}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
	...

08002ae8 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d108      	bne.n	8002b0e <_ZN13STM32Hardware5flushEv+0x26>
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <_ZN13STM32Hardware5flushEv+0x26>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <_ZN13STM32Hardware5flushEv+0x28>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d03f      	beq.n	8002b94 <_ZN13STM32Hardware5flushEv+0xac>
			mutex = true;
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d031      	beq.n	8002b8e <_ZN13STM32Hardware5flushEv+0xa6>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d20a      	bcs.n	8002b50 <_ZN13STM32Hardware5flushEv+0x68>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	e006      	b.n	8002b5e <_ZN13STM32Hardware5flushEv+0x76>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	89fa      	ldrh	r2, [r7, #14]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f009 f855 	bl	800bc24 <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b80:	89fb      	ldrh	r3, [r7, #14]
 8002b82:	4413      	add	r3, r2
 8002b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 8002b8e:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
		}
	}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2400fcc8 	.word	0x2400fcc8

08002ba0 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
		int n = length;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb6:	bfa8      	it	ge
 8002bb8:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002bbc:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bc4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	bf28      	it	cs
 8002bce:	4613      	movcs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f00b f92d 	bl	800de44 <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d00b      	beq.n	8002c1e <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	18d1      	adds	r1, r2, r3
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f00b f913 	bl	800de44 <memcpy>
		}

		flush();
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff ff62 	bl	8002ae8 <_ZN13STM32Hardware5flushEv>
	}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 8002c34:	f002 f920 	bl	8004e78 <HAL_GetTick>
 8002c38:	4603      	mov	r3, r0
	}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE>:

ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);

ros::Publisher CarVelPub("Toposition", &CarVnow);

void ROS::GoalVel_CB(const geometry_msgs::Twist &msg) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	omni.SetGoalCarInfo(msg.linear.x, msg.linear.y, msg.angular.z);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	ed93 6b06 	vldr	d6, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8002c5e:	eeb0 2b45 	vmov.f64	d2, d5
 8002c62:	eeb0 1b46 	vmov.f64	d1, d6
 8002c66:	eeb0 0b47 	vmov.f64	d0, d7
 8002c6a:	4803      	ldr	r0, [pc, #12]	; (8002c78 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE+0x34>)
 8002c6c:	f7fe f831 	bl	8000cd2 <_ZN4Omni14SetGoalCarInfoEddd>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	24000098 	.word	0x24000098

08002c7c <_ZN3ROS5setupEv>:

void ROS::setup() {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	nh.initNode();
 8002c80:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <_ZN3ROS5setupEv+0x24>)
 8002c82:	f000 f97d 	bl	8002f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(CarVelSub);
 8002c86:	4907      	ldr	r1, [pc, #28]	; (8002ca4 <_ZN3ROS5setupEv+0x28>)
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <_ZN3ROS5setupEv+0x24>)
 8002c8a:	f000 f996 	bl	8002fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	nh.advertise(CarVelPub);
 8002c8e:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <_ZN3ROS5setupEv+0x2c>)
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <_ZN3ROS5setupEv+0x24>)
 8002c92:	f000 f9bd 	bl	8003010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	HAL_TIM_Base_Start_IT(&htim7);
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <_ZN3ROS5setupEv+0x30>)
 8002c98:	f007 fcee 	bl	800a678 <HAL_TIM_Base_Start_IT>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2400fccc 	.word	0x2400fccc
 8002ca4:	24010668 	.word	0x24010668
 8002ca8:	240106c8 	.word	0x240106c8
 8002cac:	24010810 	.word	0x24010810

08002cb0 <_ZN3ROS4loopEv>:

void ROS::loop() {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <_ZN3ROS4loopEv+0x10>)
 8002cb6:	f000 f9db 	bl	8003070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2400fccc 	.word	0x2400fccc

08002cc4 <_ZN3ROS10PubCarVnowEv>:

void ROS::PubCarVnow() {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	NowCarInfo = omni.GetNowCarInfo();
 8002cc8:	4813      	ldr	r0, [pc, #76]	; (8002d18 <_ZN3ROS10PubCarVnowEv+0x54>)
 8002cca:	f7fe f99a 	bl	8001002 <_ZN4Omni13GetNowCarInfoEv>
 8002cce:	eeb0 5b40 	vmov.f64	d5, d0
 8002cd2:	eeb0 6b41 	vmov.f64	d6, d1
 8002cd6:	eeb0 7b42 	vmov.f64	d7, d2
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <_ZN3ROS10PubCarVnowEv+0x58>)
 8002cdc:	ed83 5b00 	vstr	d5, [r3]
 8002ce0:	ed83 6b02 	vstr	d6, [r3, #8]
 8002ce4:	ed83 7b04 	vstr	d7, [r3, #16]

	CarVnow.linear.x = NowCarInfo.Vx;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <_ZN3ROS10PubCarVnowEv+0x58>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	490c      	ldr	r1, [pc, #48]	; (8002d20 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002cf0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CarVnow.linear.y = NowCarInfo.Vy;
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <_ZN3ROS10PubCarVnowEv+0x58>)
 8002cf6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cfa:	4909      	ldr	r1, [pc, #36]	; (8002d20 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002cfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CarVnow.angular.z = NowCarInfo.Omega;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <_ZN3ROS10PubCarVnowEv+0x58>)
 8002d02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d06:	4906      	ldr	r1, [pc, #24]	; (8002d20 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002d08:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	CarVelPub.publish(&CarVnow);
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <_ZN3ROS10PubCarVnowEv+0x60>)
 8002d10:	f7ff fdb5 	bl	800287e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	24000098 	.word	0x24000098
 8002d1c:	24010650 	.word	0x24010650
 8002d20:	24010608 	.word	0x24010608
 8002d24:	240106c8 	.word	0x240106c8

08002d28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_UART_TxCpltCallback+0x20>)
 8002d32:	f000 fb76 	bl	8003422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fed5 	bl	8002ae8 <_ZN13STM32Hardware5flushEv>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2400fccc 	.word	0x2400fccc

08002d4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8002d54:	4805      	ldr	r0, [pc, #20]	; (8002d6c <HAL_UART_RxCpltCallback+0x20>)
 8002d56:	f000 fb64 	bl	8003422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fe84 	bl	8002a6a <_ZN13STM32Hardware10reset_rbufEv>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2400fccc 	.word	0x2400fccc

08002d70 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d80d      	bhi.n	8002da0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	fa22 f103 	lsr.w	r1, r2, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	b2ca      	uxtb	r2, r1
 8002d96:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e7ee      	b.n	8002d7e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d811      	bhi.n	8002dea <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	440a      	add	r2, r1
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	00d2      	lsls	r2, r2, #3
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3301      	adds	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e7ea      	b.n	8002dc0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	0800e3b0 	.word	0x0800e3b0

08002e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ffe8 	bl	8002df8 <_ZN3ros15NodeHandleBase_C1Ev>
 8002e28:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fdf2 	bl	8002a1c <_ZN13STM32HardwareC1Ev>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fa40 	bl	80022cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b18      	cmp	r3, #24
 8002e54:	d80b      	bhi.n	8002e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	2200      	movs	r2, #0
 8002e64:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e7f0      	b.n	8002e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b18      	cmp	r3, #24
 8002e76:	d80a      	bhi.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e80:	2100      	movs	r1, #0
 8002e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	e7f1      	b.n	8002e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e98:	d20a      	bcs.n	8002eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e7f0      	b.n	8002e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eba:	d20a      	bcs.n	8002ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e7f0      	b.n	8002eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	0800e384 	.word	0x0800e384

08002f18 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	0800e398 	.word	0x0800e398

08002f38 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ffe5 	bl	8002f18 <_ZN3ros11Subscriber_C1Ev>
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3310      	adds	r3, #16
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fdbd 	bl	8001ad8 <_ZN13geometry_msgs5TwistC1Ev>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
  };
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	0800e36c 	.word	0x0800e36c

08002f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fd61 	bl	8002a54 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b18      	cmp	r3, #24
 8002fcc:	dc19      	bgt.n	8003002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
        return true;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e004      	b.n	8003004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e7e2      	b.n	8002fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003002:	2300      	movs	r3, #0
  }
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b18      	cmp	r3, #24
 8003022:	dc1e      	bgt.n	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d111      	bne.n	800305a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	60da      	str	r2, [r3, #12]
        return true;
 8003056:	2301      	movs	r3, #1
 8003058:	e004      	b.n	8003064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e7dd      	b.n	800301e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003062:	2300      	movs	r3, #0
  }
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fdd5 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 8003082:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003092:	4293      	cmp	r3, r2
 8003094:	d903      	bls.n	800309e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d903      	bls.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d014      	beq.n	80030f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fdae 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80030dc:	429a      	cmp	r2, r3
 80030de:	bf8c      	ite	hi
 80030e0:	2301      	movhi	r3, #1
 80030e2:	2300      	movls	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80030ea:	f06f 0301 	mvn.w	r3, #1
 80030ee:	e194      	b.n	800341a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fcc9 	bl	8002a8c <_ZN13STM32Hardware4readEv>
 80030fa:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f2c0 8174 	blt.w	80033ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800311a:	2b07      	cmp	r3, #7
 800311c:	d11e      	bne.n	800315c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	b2d1      	uxtb	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	460a      	mov	r2, r1
 8003136:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003140:	1e5a      	subs	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1b4      	bne.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2208      	movs	r2, #8
 8003156:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800315a:	e7af      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003162:	2b00      	cmp	r3, #0
 8003164:	d128      	bne.n	80031b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2bff      	cmp	r3, #255	; 0xff
 800316a:	d10d      	bne.n	8003188 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f103 0214 	add.w	r2, r3, #20
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003186:	e799      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fd4d 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	bf8c      	ite	hi
 80031a0:	2301      	movhi	r3, #1
 80031a2:	2300      	movls	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d088      	beq.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80031b2:	f06f 0301 	mvn.w	r3, #1
 80031b6:	e130      	b.n	800341a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d118      	bne.n	80031f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2bfe      	cmp	r3, #254	; 0xfe
 80031c6:	d107      	bne.n	80031d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031d6:	e771      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f47f af68 	bne.w	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f924 	bl	800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80031f2:	e763      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d113      	bne.n	8003226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003224:	e74a      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800322c:	2b03      	cmp	r3, #3
 800322e:	d110      	bne.n	8003252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	441a      	add	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003250:	e734      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003258:	2b04      	cmp	r3, #4
 800325a:	d116      	bne.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003262:	425a      	negs	r2, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	bf58      	it	pl
 800326a:	4253      	negpl	r3, r2
 800326c:	2bff      	cmp	r3, #255	; 0xff
 800326e:	d107      	bne.n	8003280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800327e:	e71d      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003288:	e718      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10f      	bne.n	80032b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80032b2:	e703      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d117      	bne.n	80032ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2207      	movs	r2, #7
 80032d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f47f aeec 	bne.w	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2208      	movs	r2, #8
 80032e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032ec:	e6e6      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f47f aee1 	bne.w	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003308:	425a      	negs	r2, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	f47f aed2 	bne.w	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d110      	bne.n	8003344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f889 	bl	800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8a4 	bl	8003476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003342:	e06a      	b.n	800341a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800334a:	2b0a      	cmp	r3, #10
 800334c:	d107      	bne.n	800335e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f96c 	bl	8003634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800335c:	e6ae      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003364:	2b06      	cmp	r3, #6
 8003366:	d10e      	bne.n	8003386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7ff f8dd 	bl	8002536 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003384:	e69a      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800338c:	2b0b      	cmp	r3, #11
 800338e:	d104      	bne.n	800339a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003398:	e690      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80033a0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f43f ae84 	beq.w	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80033ba:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80033ce:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80033e6:	4611      	mov	r1, r2
 80033e8:	4798      	blx	r3
    while (true)
 80033ea:	e667      	b.n	80030bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80033ec:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00f      	beq.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003406:	4293      	cmp	r3, r2
 8003408:	d906      	bls.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f815 	bl	800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003418:	2300      	movs	r3, #0
  }
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
  }
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003442:	f107 030c 	add.w	r3, r7, #12
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fbdc 	bl	8001c04 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f107 020c 	add.w	r2, r7, #12
 8003456:	210a      	movs	r1, #10
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
    rt_time = hardware_.time();
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fbe3 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b08b      	sub	sp, #44	; 0x2c
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fcae 	bl	8001de4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2b18      	cmp	r3, #24
 8003490:	dc63      	bgt.n	800355a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d056      	beq.n	8003552 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4798      	blx	r3
 80034f4:	4603      	mov	r3, r0
 80034f6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4608      	mov	r0, r1
 8003520:	4798      	blx	r3
 8003522:	4603      	mov	r3, r0
 8003524:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681c      	ldr	r4, [r3, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f9b0 	bl	80028a6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003546:	4601      	mov	r1, r0
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	461a      	mov	r2, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	3301      	adds	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	e798      	b.n	800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	2b18      	cmp	r3, #24
 8003562:	dc5f      	bgt.n	8003624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	f202 2222 	addw	r2, r2, #546	; 0x222
 800356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d053      	beq.n	800361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	f202 2222 	addw	r2, r2, #546	; 0x222
 800357c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	b29b      	uxth	r3, r3
 8003584:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800358e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800359e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4798      	blx	r3
 80035b8:	4603      	mov	r3, r0
 80035ba:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4608      	mov	r0, r1
 80035dc:	4798      	blx	r3
 80035de:	4603      	mov	r3, r0
 80035e0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80035e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681c      	ldr	r4, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4608      	mov	r0, r1
 800360e:	4798      	blx	r3
 8003610:	4601      	mov	r1, r0
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	461a      	mov	r2, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	3301      	adds	r3, #1
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e79c      	b.n	800355e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800362c:	bf00      	nop
 800362e:	372c      	adds	r7, #44	; 0x2c
 8003630:	46bd      	mov	sp, r7
 8003632:	bd90      	pop	{r4, r7, pc}

08003634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fade 	bl	8001c04 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff faed 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 8003652:	4602      	mov	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800365e:	f107 0308 	add.w	r3, r7, #8
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fb3d 	bl	8001ce4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4915      	ldr	r1, [pc, #84]	; (80036c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003670:	fba1 1303 	umull	r1, r3, r1, r3
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800367a:	6939      	ldr	r1, [r7, #16]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003680:	fba3 0302 	umull	r0, r3, r3, r2
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800368a:	fb00 f303 	mul.w	r3, r0, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	440b      	add	r3, r1
 8003698:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8a6 	bl	80037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fabd 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 80036b2:	4602      	mov	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	10624dd3 	.word	0x10624dd3
 80036c8:	000f4240 	.word	0x000f4240

080036cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b63      	cmp	r3, #99	; 0x63
 80036dc:	dd09      	ble.n	80036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036e4:	f083 0301 	eor.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e079      	b.n	80037e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80036fe:	3207      	adds	r2, #7
 8003700:	4611      	mov	r1, r2
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
 8003706:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	22fe      	movs	r2, #254	; 0xfe
 8003714:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	b29b      	uxth	r3, r3
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800373e:	4413      	add	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	b21b      	sxth	r3, r3
 800375a:	121b      	asrs	r3, r3, #8
 800375c:	b21b      	sxth	r3, r3
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800376a:	2305      	movs	r3, #5
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3306      	adds	r3, #6
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	dc0d      	bgt.n	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	3301      	adds	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e7ec      	b.n	800376e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3307      	adds	r3, #7
 8003798:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	425a      	negs	r2, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	bf58      	it	pl
 80037a4:	4253      	negpl	r3, r2
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	6179      	str	r1, [r7, #20]
 80037ae:	43d2      	mvns	r2, r2
 80037b0:	b2d1      	uxtb	r1, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	460a      	mov	r2, r1
 80037b8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c2:	dc0a      	bgt.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1d18      	adds	r0, r3, #4
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7ff f9e5 	bl	8002ba0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	e005      	b.n	80037e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80037da:	4905      	ldr	r1, [pc, #20]	; (80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f849 	bl	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	0800e2d8 	.word	0x0800e2d8

080037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fa12 	bl	8002c2c <_ZN13STM32Hardware4timeEv>
 8003808:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4915      	ldr	r1, [pc, #84]	; (8003868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003812:	fba1 1303 	umull	r1, r3, r1, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800382a:	fba3 0302 	umull	r0, r3, r3, r2
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003834:	fb00 f303 	mul.w	r3, r0, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	4a0c      	ldr	r2, [pc, #48]	; (800386c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	1aca      	subs	r2, r1, r3
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003844:	4413      	add	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fc fee2 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	10624dd3 	.word	0x10624dd3
 800386c:	000f4240 	.word	0x000f4240
 8003870:	3b9aca00 	.word	0x3b9aca00

08003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	2103      	movs	r1, #3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f804 	bl	8003890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	460b      	mov	r3, r1
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fc62 	bl	800216c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f107 0214 	add.w	r2, r7, #20
 80038ba:	2107      	movs	r1, #7
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	4798      	blx	r3
  }
 80038c0:	bf00      	nop
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_Z41__static_initialization_and_destruction_0ii>:

void ROS::init(void) {
//	nh.getHardware()->init();
}
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d116      	bne.n	8003906 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80038e2:	480b      	ldr	r0, [pc, #44]	; (8003910 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80038e4:	f7ff fa98 	bl	8002e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist CarVnow;
 80038e8:	480a      	ldr	r0, [pc, #40]	; (8003914 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80038ea:	f7fe f8f5 	bl	8001ad8 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);
 80038ee:	2301      	movs	r3, #1
 80038f0:	4a09      	ldr	r2, [pc, #36]	; (8003918 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80038f2:	490a      	ldr	r1, [pc, #40]	; (800391c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80038f4:	480a      	ldr	r0, [pc, #40]	; (8003920 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80038f6:	f7ff fb1f 	bl	8002f38 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher CarVelPub("Toposition", &CarVnow);
 80038fa:	2300      	movs	r3, #0
 80038fc:	4a05      	ldr	r2, [pc, #20]	; (8003914 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80038fe:	4909      	ldr	r1, [pc, #36]	; (8003924 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003900:	4809      	ldr	r0, [pc, #36]	; (8003928 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003902:	f7fe ffa5 	bl	8002850 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	2400fccc 	.word	0x2400fccc
 8003914:	24010608 	.word	0x24010608
 8003918:	08002c45 	.word	0x08002c45
 800391c:	0800e314 	.word	0x0800e314
 8003920:	24010668 	.word	0x24010668
 8003924:	0800e31c 	.word	0x0800e31c
 8003928:	240106c8 	.word	0x240106c8

0800392c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3310      	adds	r3, #16
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe f90d 	bl	8001b5c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	3210      	adds	r2, #16
 800394a:	4610      	mov	r0, r2
 800394c:	4798      	blx	r3
  }
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3310      	adds	r3, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe f914 	bl	8001ba8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003980:	4603      	mov	r3, r0
  }
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3310      	adds	r3, #16
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f914 	bl	8001bc4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800399c:	4603      	mov	r3, r0
  }
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
    return configured_;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <_GLOBAL__sub_I_nh>:
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7ff ff7d 	bl	80038c8 <_Z41__static_initialization_and_destruction_0ii>
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim12;

// Count ROS frequency.
static int ROS_CAR_FREQUENCY = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_PeriodElapsedCallback+0x58>

		// Update Car Vnow
		omni.UpdateNowCarInfo();
 80039e2:	4818      	ldr	r0, [pc, #96]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039e4:	f7fd f8f4 	bl	8000bd0 <_ZN4Omni16UpdateNowCarInfoEv>

		// Update four wheel's PID value.
		omni.Update_PID();
 80039e8:	4816      	ldr	r0, [pc, #88]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039ea:	f7fd f99c 	bl	8000d26 <_ZN4Omni10Update_PIDEv>

		// Output GPIO and PWM
		omni.Move();
 80039ee:	4815      	ldr	r0, [pc, #84]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039f0:	f7fd f9d2 	bl	8000d98 <_ZN4Omni4MoveEv>

		// Debug from Live Expressions ( Optional )
		omni.SetMotorVgoal();
 80039f4:	4813      	ldr	r0, [pc, #76]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039f6:	f7fd fa87 	bl	8000f08 <_ZN4Omni13SetMotorVgoalEv>

		// ROS pub -> Mecanum
		if (++ROS_CAR_FREQUENCY >= ROS_CAR_PUB_FREQUENCY) {
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	bfcc      	ite	gt
 8003a0c:	2301      	movgt	r3, #1
 8003a0e:	2300      	movle	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00f      	beq.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x66>
			ROS_CAR_FREQUENCY = 0;
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
			omni.Get_Car_location();
 8003a1c:	4809      	ldr	r0, [pc, #36]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003a1e:	f7fd f8b3 	bl	8000b88 <_ZN4Omni16Get_Car_locationEv>
			ROS::PubCarVnow();
 8003a22:	f7ff f94f 	bl	8002cc4 <_ZN3ROS10PubCarVnowEv>
		}
	}
	else if (htim->Instance == TIM7) {
		ROS::loop();
	}
}
 8003a26:	e006      	b.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim->Instance == TIM7) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x66>
		ROS::loop();
 8003a32:	f7ff f93d 	bl	8002cb0 <_ZN3ROS4loopEv>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40001c00 	.word	0x40001c00
 8003a44:	24000098 	.word	0x24000098
 8003a48:	240106dc 	.word	0x240106dc
 8003a4c:	40001400 	.word	0x40001400

08003a50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a54:	f001 f98a 	bl	8004d6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a58:	f000 f81c 	bl	8003a94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a5c:	f000 fc2a 	bl	80042b4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8003a60:	f000 f888 	bl	8003b74 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003a64:	f000 f8da 	bl	8003c1c <MX_TIM3_Init>
	MX_TIM4_Init();
 8003a68:	f000 f92e 	bl	8003cc8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003a6c:	f000 f982 	bl	8003d74 <MX_TIM5_Init>
	MX_TIM12_Init();
 8003a70:	f000 fa9e 	bl	8003fb0 <MX_TIM12_Init>
	MX_TIM15_Init();
 8003a74:	f000 fb10 	bl	8004098 <MX_TIM15_Init>
	MX_TIM13_Init();
 8003a78:	f000 faea 	bl	8004050 <MX_TIM13_Init>
	MX_DMA_Init();
 8003a7c:	f000 fbf2 	bl	8004264 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8003a80:	f000 fb9c 	bl	80041bc <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003a84:	f000 f9cc 	bl	8003e20 <MX_TIM7_Init>
	MX_TIM8_Init();
 8003a88:	f000 fa00 	bl	8003e8c <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */

	main_function();
 8003a8c:	f000 fcde 	bl	800444c <main_function>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003a90:	e7fe      	b.n	8003a90 <main+0x40>
	...

08003a94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b09c      	sub	sp, #112	; 0x70
 8003a98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a9e:	224c      	movs	r2, #76	; 0x4c
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00a f9dc 	bl	800de60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2220      	movs	r2, #32
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00a f9d6 	bl	800de60 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f004 faf7 	bl	80080a8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aba:	2300      	movs	r3, #0
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ac6:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003acc:	6193      	str	r3, [r2, #24]
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8003ada:	bf00      	nop
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <SystemClock_Config+0xdc>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	d1f8      	bne.n	8003adc <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aea:	2301      	movs	r3, #1
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af4:	2302      	movs	r3, #2
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003af8:	2302      	movs	r3, #2
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003afc:	2304      	movs	r3, #4
 8003afe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 256;
 8003b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b04:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003b06:	2302      	movs	r3, #2
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003b12:	2304      	movs	r3, #4
 8003b14:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fafa 	bl	800811c <HAL_RCC_OscConfig>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <SystemClock_Config+0x9e>
		Error_Handler();
 8003b2e:	f000 fc87 	bl	8004440 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8003b32:	233f      	movs	r3, #63	; 0x3f
 8003b34:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b36:	2303      	movs	r3, #3
 8003b38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003b3e:	2308      	movs	r3, #8
 8003b40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003b42:	2340      	movs	r3, #64	; 0x40
 8003b44:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	2102      	movs	r1, #2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 fe8d 	bl	8008878 <HAL_RCC_ClockConfig>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <SystemClock_Config+0xd4>
		Error_Handler();
 8003b64:	f000 fc6c 	bl	8004440 <Error_Handler>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3770      	adds	r7, #112	; 0x70
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	58024800 	.word	0x58024800

08003b74 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003b7a:	f107 030c 	add.w	r3, r7, #12
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f00a f96c 	bl	800de60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b88:	463b      	mov	r3, r7
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b98:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bac:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bae:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	4619      	mov	r1, r3
 8003be4:	480c      	ldr	r0, [pc, #48]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003be6:	f006 ff41 	bl	800aa6c <HAL_TIM_Encoder_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_TIM2_Init+0x80>
		Error_Handler();
 8003bf0:	f000 fc26 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4805      	ldr	r0, [pc, #20]	; (8003c18 <MX_TIM2_Init+0xa4>)
 8003c02:	f007 fe65 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM2_Init+0x9c>
		Error_Handler();
 8003c0c:	f000 fc18 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003c10:	bf00      	nop
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	240106e0 	.word	0x240106e0

08003c1c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f00a f918 	bl	800de60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c30:	463b      	mov	r3, r7
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c3c:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <MX_TIM3_Init+0xa8>)
 8003c3e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c52:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c60:	2303      	movs	r3, #3
 8003c62:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c74:	2300      	movs	r3, #0
 8003c76:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	4619      	mov	r1, r3
 8003c8a:	480d      	ldr	r0, [pc, #52]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003c8c:	f006 feee 	bl	800aa6c <HAL_TIM_Encoder_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003c96:	f000 fbd3 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4806      	ldr	r0, [pc, #24]	; (8003cc0 <MX_TIM3_Init+0xa4>)
 8003ca8:	f007 fe12 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM3_Init+0x9a>
		Error_Handler();
 8003cb2:	f000 fbc5 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003cb6:	bf00      	nop
 8003cb8:	3730      	adds	r7, #48	; 0x30
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2401072c 	.word	0x2401072c
 8003cc4:	40000400 	.word	0x40000400

08003cc8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f00a f8c2 	bl	800de60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cdc:	463b      	mov	r3, r7
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <MX_TIM4_Init+0xa8>)
 8003cea:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfe:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d06:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	4619      	mov	r1, r3
 8003d36:	480d      	ldr	r0, [pc, #52]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003d38:	f006 fe98 	bl	800aa6c <HAL_TIM_Encoder_Init>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003d42:	f000 fb7d 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003d4e:	463b      	mov	r3, r7
 8003d50:	4619      	mov	r1, r3
 8003d52:	4806      	ldr	r0, [pc, #24]	; (8003d6c <MX_TIM4_Init+0xa4>)
 8003d54:	f007 fdbc 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM4_Init+0x9a>
		Error_Handler();
 8003d5e:	f000 fb6f 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003d62:	bf00      	nop
 8003d64:	3730      	adds	r7, #48	; 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	24010778 	.word	0x24010778
 8003d70:	40000800 	.word	0x40000800

08003d74 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d7a:	f107 030c 	add.w	r3, r7, #12
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f00a f86c 	bl	800de60 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d88:	463b      	mov	r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <MX_TIM5_Init+0xa8>)
 8003d96:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003daa:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003db8:	2303      	movs	r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4619      	mov	r1, r3
 8003de2:	480d      	ldr	r0, [pc, #52]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003de4:	f006 fe42 	bl	800aa6c <HAL_TIM_Encoder_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM5_Init+0x7e>
		Error_Handler();
 8003dee:	f000 fb27 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4806      	ldr	r0, [pc, #24]	; (8003e18 <MX_TIM5_Init+0xa4>)
 8003e00:	f007 fd66 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_TIM5_Init+0x9a>
		Error_Handler();
 8003e0a:	f000 fb19 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003e0e:	bf00      	nop
 8003e10:	3730      	adds	r7, #48	; 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	240107c4 	.word	0x240107c4
 8003e1c:	40000c00 	.word	0x40000c00

08003e20 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e32:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <MX_TIM7_Init+0x68>)
 8003e34:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 127;
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e38:	227f      	movs	r2, #127	; 0x7f
 8003e3a:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9999;
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e44:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e48:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003e50:	480c      	ldr	r0, [pc, #48]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e52:	f006 fbb9 	bl	800a5c8 <HAL_TIM_Base_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003e5c:	f000 faf0 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4805      	ldr	r0, [pc, #20]	; (8003e84 <MX_TIM7_Init+0x64>)
 8003e6e:	f007 fd2f 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM7_Init+0x5c>
		Error_Handler();
 8003e78:	f000 fae2 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	24010810 	.word	0x24010810
 8003e88:	40001400 	.word	0x40001400

08003e8c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b098      	sub	sp, #96	; 0x60
 8003e90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	615a      	str	r2, [r3, #20]
 8003eb0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	2234      	movs	r2, #52	; 0x34
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f009 ffd1 	bl	800de60 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003ebe:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003ec0:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <MX_TIM8_Init+0x120>)
 8003ec2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 12799;
 8003ec4:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003ec6:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8003eca:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 9999;
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003ed4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ed8:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003eec:	482e      	ldr	r0, [pc, #184]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003eee:	f006 fc49 	bl	800a784 <HAL_TIM_PWM_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_TIM8_Init+0x70>
		Error_Handler();
 8003ef8:	f000 faa2 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003efc:	2300      	movs	r3, #0
 8003efe:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f00:	2300      	movs	r3, #0
 8003f02:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8003f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4826      	ldr	r0, [pc, #152]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003f10:	f007 fcde 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM8_Init+0x92>
		Error_Handler();
 8003f1a:	f000 fa91 	bl	8004440 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f1e:	2360      	movs	r3, #96	; 0x60
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 5000;
 8003f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f26:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003f3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f40:	2200      	movs	r2, #0
 8003f42:	4619      	mov	r1, r3
 8003f44:	4818      	ldr	r0, [pc, #96]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003f46:	f006 ffe5 	bl	800af14 <HAL_TIM_PWM_ConfigChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8003f50:	f000 fa76 	bl	8004440 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4807      	ldr	r0, [pc, #28]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003f8a:	f007 fd3d 	bl	800ba08 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM8_Init+0x10c>
		Error_Handler();
 8003f94:	f000 fa54 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003f98:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <MX_TIM8_Init+0x11c>)
 8003f9a:	f000 fc2d 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 8003f9e:	bf00      	nop
 8003fa0:	3760      	adds	r7, #96	; 0x60
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2401085c 	.word	0x2401085c
 8003fac:	40010400 	.word	0x40010400

08003fb0 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <MX_TIM12_Init+0x98>)
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <MX_TIM12_Init+0x9c>)
 8003fcc:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <MX_TIM12_Init+0x98>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <MX_TIM12_Init+0x98>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 6399;
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <MX_TIM12_Init+0x98>)
 8003fdc:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8003fe0:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <MX_TIM12_Init+0x98>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <MX_TIM12_Init+0x98>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <MX_TIM12_Init+0x98>)
 8003ff0:	f006 fbc8 	bl	800a784 <HAL_TIM_PWM_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_TIM12_Init+0x4e>
		Error_Handler();
 8003ffa:	f000 fa21 	bl	8004440 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ffe:	2360      	movs	r3, #96	; 0x60
 8004000:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	2200      	movs	r2, #0
 8004012:	4619      	mov	r1, r3
 8004014:	480c      	ldr	r0, [pc, #48]	; (8004048 <MX_TIM12_Init+0x98>)
 8004016:	f006 ff7d 	bl	800af14 <HAL_TIM_PWM_ConfigChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM12_Init+0x74>
		Error_Handler();
 8004020:	f000 fa0e 	bl	8004440 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	2204      	movs	r2, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4807      	ldr	r0, [pc, #28]	; (8004048 <MX_TIM12_Init+0x98>)
 800402c:	f006 ff72 	bl	800af14 <HAL_TIM_PWM_ConfigChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM12_Init+0x8a>
		Error_Handler();
 8004036:	f000 fa03 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800403a:	4803      	ldr	r0, [pc, #12]	; (8004048 <MX_TIM12_Init+0x98>)
 800403c:	f000 fbdc 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 8004040:	bf00      	nop
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	240108a8 	.word	0x240108a8
 800404c:	40001800 	.word	0x40001800

08004050 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <MX_TIM13_Init+0x40>)
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <MX_TIM13_Init+0x44>)
 8004058:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 127;
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <MX_TIM13_Init+0x40>)
 800405c:	227f      	movs	r2, #127	; 0x7f
 800405e:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <MX_TIM13_Init+0x40>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <MX_TIM13_Init+0x40>)
 8004068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800406c:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <MX_TIM13_Init+0x40>)
 8004070:	2200      	movs	r2, #0
 8004072:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <MX_TIM13_Init+0x40>)
 8004076:	2200      	movs	r2, #0
 8004078:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 800407a:	4805      	ldr	r0, [pc, #20]	; (8004090 <MX_TIM13_Init+0x40>)
 800407c:	f006 faa4 	bl	800a5c8 <HAL_TIM_Base_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM13_Init+0x3a>
		Error_Handler();
 8004086:	f000 f9db 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	240108f4 	.word	0x240108f4
 8004094:	40001c00 	.word	0x40001c00

08004098 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b098      	sub	sp, #96	; 0x60
 800409c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800409e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80040aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	615a      	str	r2, [r3, #20]
 80040bc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2234      	movs	r2, #52	; 0x34
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f009 fecb 	bl	800de60 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80040ca:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040cc:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <MX_TIM15_Init+0x120>)
 80040ce:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 6399;
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040de:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80040e2:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e4:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80040ea:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f0:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80040f6:	482f      	ldr	r0, [pc, #188]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80040f8:	f006 fb44 	bl	800a784 <HAL_TIM_PWM_Init>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM15_Init+0x6e>
		Error_Handler();
 8004102:	f000 f99d 	bl	8004440 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800410a:	2300      	movs	r3, #0
 800410c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK) {
 800410e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004112:	4619      	mov	r1, r3
 8004114:	4827      	ldr	r0, [pc, #156]	; (80041b4 <MX_TIM15_Init+0x11c>)
 8004116:	f007 fbdb 	bl	800b8d0 <HAL_TIMEx_MasterConfigSynchronization>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MX_TIM15_Init+0x8c>
		Error_Handler();
 8004120:	f000 f98e 	bl	8004440 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004124:	2360      	movs	r3, #96	; 0x60
 8004126:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800412c:	2300      	movs	r3, #0
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004130:	2300      	movs	r3, #0
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004138:	2300      	movs	r3, #0
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800413c:	2300      	movs	r3, #0
 800413e:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004140:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004144:	2200      	movs	r2, #0
 8004146:	4619      	mov	r1, r3
 8004148:	481a      	ldr	r0, [pc, #104]	; (80041b4 <MX_TIM15_Init+0x11c>)
 800414a:	f006 fee3 	bl	800af14 <HAL_TIM_PWM_ConfigChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_TIM15_Init+0xc0>
		Error_Handler();
 8004154:	f000 f974 	bl	8004440 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800415c:	2204      	movs	r2, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4814      	ldr	r0, [pc, #80]	; (80041b4 <MX_TIM15_Init+0x11c>)
 8004162:	f006 fed7 	bl	800af14 <HAL_TIM_PWM_ConfigChannel>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM15_Init+0xd8>
		Error_Handler();
 800416c:	f000 f968 	bl	8004440 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004188:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4807      	ldr	r0, [pc, #28]	; (80041b4 <MX_TIM15_Init+0x11c>)
 8004198:	f007 fc36 	bl	800ba08 <HAL_TIMEx_ConfigBreakDeadTime>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM15_Init+0x10e>
		Error_Handler();
 80041a2:	f000 f94d 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 80041a6:	4803      	ldr	r0, [pc, #12]	; (80041b4 <MX_TIM15_Init+0x11c>)
 80041a8:	f000 fb26 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 80041ac:	bf00      	nop
 80041ae:	3760      	adds	r7, #96	; 0x60
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	24010940 	.word	0x24010940
 80041b8:	40014000 	.word	0x40014000

080041bc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041c2:	4a27      	ldr	r2, [pc, #156]	; (8004260 <MX_USART1_UART_Init+0xa4>)
 80041c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80041c6:	4b25      	ldr	r3, [pc, #148]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041e2:	220c      	movs	r2, #12
 80041e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041e6:	4b1d      	ldr	r3, [pc, #116]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <MX_USART1_UART_Init+0xa0>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80041fe:	4b17      	ldr	r3, [pc, #92]	; (800425c <MX_USART1_UART_Init+0xa0>)
 8004200:	2240      	movs	r2, #64	; 0x40
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
	huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <MX_USART1_UART_Init+0xa0>)
 8004206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
	huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <MX_USART1_UART_Init+0xa0>)
 800420e:	2200      	movs	r2, #0
 8004210:	649a      	str	r2, [r3, #72]	; 0x48
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004212:	4812      	ldr	r0, [pc, #72]	; (800425c <MX_USART1_UART_Init+0xa0>)
 8004214:	f007 fcb6 	bl	800bb84 <HAL_UART_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_USART1_UART_Init+0x66>
		Error_Handler();
 800421e:	f000 f90f 	bl	8004440 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8004222:	2100      	movs	r1, #0
 8004224:	480d      	ldr	r0, [pc, #52]	; (800425c <MX_USART1_UART_Init+0xa0>)
 8004226:	f009 fcfd 	bl	800dc24 <HAL_UARTEx_SetTxFifoThreshold>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_USART1_UART_Init+0x78>
		Error_Handler();
 8004230:	f000 f906 	bl	8004440 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8004234:	2100      	movs	r1, #0
 8004236:	4809      	ldr	r0, [pc, #36]	; (800425c <MX_USART1_UART_Init+0xa0>)
 8004238:	f009 fd32 	bl	800dca0 <HAL_UARTEx_SetRxFifoThreshold>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_USART1_UART_Init+0x8a>
		Error_Handler();
 8004242:	f000 f8fd 	bl	8004440 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8004246:	4805      	ldr	r0, [pc, #20]	; (800425c <MX_USART1_UART_Init+0xa0>)
 8004248:	f009 fcb3 	bl	800dbb2 <HAL_UARTEx_DisableFifoMode>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_USART1_UART_Init+0x9a>
		Error_Handler();
 8004252:	f000 f8f5 	bl	8004440 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	2401098c 	.word	0x2401098c
 8004260:	40011000 	.word	0x40011000

08004264 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800426a:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <MX_DMA_Init+0x4c>)
 800426c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004270:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <MX_DMA_Init+0x4c>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800427a:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <MX_DMA_Init+0x4c>)
 800427c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004288:	2200      	movs	r2, #0
 800428a:	2100      	movs	r1, #0
 800428c:	200b      	movs	r0, #11
 800428e:	f000 feda 	bl	8005046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004292:	200b      	movs	r0, #11
 8004294:	f000 fef1 	bl	800507a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004298:	2200      	movs	r2, #0
 800429a:	2100      	movs	r1, #0
 800429c:	200c      	movs	r0, #12
 800429e:	f000 fed2 	bl	8005046 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80042a2:	200c      	movs	r0, #12
 80042a4:	f000 fee9 	bl	800507a <HAL_NVIC_EnableIRQ>

}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	58024400 	.word	0x58024400

080042b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	; 0x30
 80042b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80042ba:	f107 031c 	add.w	r3, r7, #28
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80042ca:	4b58      	ldr	r3, [pc, #352]	; (800442c <MX_GPIO_Init+0x178>)
 80042cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d0:	4a56      	ldr	r2, [pc, #344]	; (800442c <MX_GPIO_Init+0x178>)
 80042d2:	f043 0310 	orr.w	r3, r3, #16
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042da:	4b54      	ldr	r3, [pc, #336]	; (800442c <MX_GPIO_Init+0x178>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80042e8:	4b50      	ldr	r3, [pc, #320]	; (800442c <MX_GPIO_Init+0x178>)
 80042ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ee:	4a4f      	ldr	r2, [pc, #316]	; (800442c <MX_GPIO_Init+0x178>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f8:	4b4c      	ldr	r3, [pc, #304]	; (800442c <MX_GPIO_Init+0x178>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004306:	4b49      	ldr	r3, [pc, #292]	; (800442c <MX_GPIO_Init+0x178>)
 8004308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <MX_GPIO_Init+0x178>)
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004316:	4b45      	ldr	r3, [pc, #276]	; (800442c <MX_GPIO_Init+0x178>)
 8004318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004324:	4b41      	ldr	r3, [pc, #260]	; (800442c <MX_GPIO_Init+0x178>)
 8004326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432a:	4a40      	ldr	r2, [pc, #256]	; (800442c <MX_GPIO_Init+0x178>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004334:	4b3d      	ldr	r3, [pc, #244]	; (800442c <MX_GPIO_Init+0x178>)
 8004336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004342:	4b3a      	ldr	r3, [pc, #232]	; (800442c <MX_GPIO_Init+0x178>)
 8004344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004348:	4a38      	ldr	r2, [pc, #224]	; (800442c <MX_GPIO_Init+0x178>)
 800434a:	f043 0302 	orr.w	r3, r3, #2
 800434e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <MX_GPIO_Init+0x178>)
 8004354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004360:	4b32      	ldr	r3, [pc, #200]	; (800442c <MX_GPIO_Init+0x178>)
 8004362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004366:	4a31      	ldr	r2, [pc, #196]	; (800442c <MX_GPIO_Init+0x178>)
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004370:	4b2e      	ldr	r3, [pc, #184]	; (800442c <MX_GPIO_Init+0x178>)
 8004372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800437e:	2200      	movs	r2, #0
 8004380:	2108      	movs	r1, #8
 8004382:	482b      	ldr	r0, [pc, #172]	; (8004430 <MX_GPIO_Init+0x17c>)
 8004384:	f003 fe76 	bl	8008074 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800438e:	4829      	ldr	r0, [pc, #164]	; (8004434 <MX_GPIO_Init+0x180>)
 8004390:	f003 fe70 	bl	8008074 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8004394:	2200      	movs	r2, #0
 8004396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800439a:	4827      	ldr	r0, [pc, #156]	; (8004438 <MX_GPIO_Init+0x184>)
 800439c:	f003 fe6a 	bl	8008074 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80043a0:	2200      	movs	r2, #0
 80043a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043a6:	4825      	ldr	r0, [pc, #148]	; (800443c <MX_GPIO_Init+0x188>)
 80043a8:	f003 fe64 	bl	8008074 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043ac:	2308      	movs	r3, #8
 80043ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b0:	2301      	movs	r3, #1
 80043b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043bc:	f107 031c 	add.w	r3, r7, #28
 80043c0:	4619      	mov	r1, r3
 80043c2:	481b      	ldr	r0, [pc, #108]	; (8004430 <MX_GPIO_Init+0x17c>)
 80043c4:	f003 fcae 	bl	8007d24 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ce:	2301      	movs	r3, #1
 80043d0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043da:	f107 031c 	add.w	r3, r7, #28
 80043de:	4619      	mov	r1, r3
 80043e0:	4814      	ldr	r0, [pc, #80]	; (8004434 <MX_GPIO_Init+0x180>)
 80043e2:	f003 fc9f 	bl	8007d24 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ec:	2301      	movs	r3, #1
 80043ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f8:	f107 031c 	add.w	r3, r7, #28
 80043fc:	4619      	mov	r1, r3
 80043fe:	480e      	ldr	r0, [pc, #56]	; (8004438 <MX_GPIO_Init+0x184>)
 8004400:	f003 fc90 	bl	8007d24 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004408:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440a:	2301      	movs	r3, #1
 800440c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004412:	2300      	movs	r3, #0
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004416:	f107 031c 	add.w	r3, r7, #28
 800441a:	4619      	mov	r1, r3
 800441c:	4807      	ldr	r0, [pc, #28]	; (800443c <MX_GPIO_Init+0x188>)
 800441e:	f003 fc81 	bl	8007d24 <HAL_GPIO_Init>

}
 8004422:	bf00      	nop
 8004424:	3730      	adds	r7, #48	; 0x30
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	58024400 	.word	0x58024400
 8004430:	58021000 	.word	0x58021000
 8004434:	58020800 	.word	0x58020800
 8004438:	58020400 	.word	0x58020400
 800443c:	58020c00 	.word	0x58020c00

08004440 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004448:	e7fe      	b.n	8004448 <Error_Handler+0x8>
	...

0800444c <main_function>:
#include "Omni.h"

// For LED blink
extern TIM_HandleTypeDef htim8;

void main_function() {
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	// Init
	ROS::setup();
 8004450:	f7fe fc14 	bl	8002c7c <_ZN3ROS5setupEv>
	omni.Init();
 8004454:	4803      	ldr	r0, [pc, #12]	; (8004464 <main_function+0x18>)
 8004456:	f7fc fb3f 	bl	8000ad8 <_ZN4Omni4InitEv>

	// For LED blink
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800445a:	2100      	movs	r1, #0
 800445c:	4802      	ldr	r0, [pc, #8]	; (8004468 <main_function+0x1c>)
 800445e:	f006 f9e9 	bl	800a834 <HAL_TIM_PWM_Start>
#ifdef DEBUGGER_MODE
	DebugMode.DebuggingMode();
	return;
#endif

	while (true) {
 8004462:	e7fe      	b.n	8004462 <main_function+0x16>
 8004464:	24000098 	.word	0x24000098
 8004468:	2401085c 	.word	0x2401085c

0800446c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <HAL_MspInit+0x30>)
 8004474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <HAL_MspInit+0x30>)
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_MspInit+0x30>)
 8004484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	58024400 	.word	0x58024400

080044a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b090      	sub	sp, #64	; 0x40
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d14e      	bne.n	8004560 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044c2:	4b77      	ldr	r3, [pc, #476]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80044c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c8:	4a75      	ldr	r2, [pc, #468]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044d2:	4b73      	ldr	r3, [pc, #460]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80044d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80044e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e6:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f0:	4b6b      	ldr	r3, [pc, #428]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80044f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004504:	4a66      	ldr	r2, [pc, #408]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800450e:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800451c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004522:	2302      	movs	r3, #2
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452a:	2300      	movs	r3, #0
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800452e:	2301      	movs	r3, #1
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004536:	4619      	mov	r1, r3
 8004538:	485a      	ldr	r0, [pc, #360]	; (80046a4 <HAL_TIM_Encoder_MspInit+0x204>)
 800453a:	f003 fbf3 	bl	8007d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800453e:	2308      	movs	r3, #8
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004542:	2302      	movs	r3, #2
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454a:	2300      	movs	r3, #0
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800454e:	2301      	movs	r3, #1
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004556:	4619      	mov	r1, r3
 8004558:	4853      	ldr	r0, [pc, #332]	; (80046a8 <HAL_TIM_Encoder_MspInit+0x208>)
 800455a:	f003 fbe3 	bl	8007d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800455e:	e09b      	b.n	8004698 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a51      	ldr	r2, [pc, #324]	; (80046ac <HAL_TIM_Encoder_MspInit+0x20c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12e      	bne.n	80045c8 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800456a:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800456c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004570:	4a4b      	ldr	r2, [pc, #300]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004572:	f043 0302 	orr.w	r3, r3, #2
 8004576:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800457a:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800457c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004588:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800458a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800458e:	4a44      	ldr	r2, [pc, #272]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004598:	4b41      	ldr	r3, [pc, #260]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800459a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80045a6:	2330      	movs	r3, #48	; 0x30
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2300      	movs	r3, #0
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045b6:	2302      	movs	r3, #2
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045be:	4619      	mov	r1, r3
 80045c0:	4839      	ldr	r0, [pc, #228]	; (80046a8 <HAL_TIM_Encoder_MspInit+0x208>)
 80045c2:	f003 fbaf 	bl	8007d24 <HAL_GPIO_Init>
}
 80045c6:	e067      	b.n	8004698 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a38      	ldr	r2, [pc, #224]	; (80046b0 <HAL_TIM_Encoder_MspInit+0x210>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d12f      	bne.n	8004632 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045d2:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80045d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d8:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045e2:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80045e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045f0:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80045f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f6:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800460e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461c:	2300      	movs	r3, #0
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004620:	2302      	movs	r3, #2
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004628:	4619      	mov	r1, r3
 800462a:	4822      	ldr	r0, [pc, #136]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x214>)
 800462c:	f003 fb7a 	bl	8007d24 <HAL_GPIO_Init>
}
 8004630:	e032      	b.n	8004698 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_TIM_Encoder_MspInit+0x218>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d12d      	bne.n	8004698 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800463e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004644:	f043 0308 	orr.w	r3, r3, #8
 8004648:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800464e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800465c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800466c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004678:	2303      	movs	r3, #3
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004684:	2300      	movs	r3, #0
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004688:	2302      	movs	r3, #2
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004690:	4619      	mov	r1, r3
 8004692:	4804      	ldr	r0, [pc, #16]	; (80046a4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004694:	f003 fb46 	bl	8007d24 <HAL_GPIO_Init>
}
 8004698:	bf00      	nop
 800469a:	3740      	adds	r7, #64	; 0x40
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	58024400 	.word	0x58024400
 80046a4:	58020000 	.word	0x58020000
 80046a8:	58020400 	.word	0x58020400
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	58020c00 	.word	0x58020c00
 80046b8:	40000c00 	.word	0x40000c00

080046bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_TIM_Base_MspInit+0x84>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d117      	bne.n	80046fe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80046ce:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <HAL_TIM_Base_MspInit+0x88>)
 80046d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d4:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <HAL_TIM_Base_MspInit+0x88>)
 80046d6:	f043 0320 	orr.w	r3, r3, #32
 80046da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046de:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_TIM_Base_MspInit+0x88>)
 80046e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80046ec:	2200      	movs	r2, #0
 80046ee:	2100      	movs	r1, #0
 80046f0:	2037      	movs	r0, #55	; 0x37
 80046f2:	f000 fca8 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80046f6:	2037      	movs	r0, #55	; 0x37
 80046f8:	f000 fcbf 	bl	800507a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80046fc:	e01b      	b.n	8004736 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM13)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a11      	ldr	r2, [pc, #68]	; (8004748 <HAL_TIM_Base_MspInit+0x8c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d116      	bne.n	8004736 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <HAL_TIM_Base_MspInit+0x88>)
 800470a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800470e:	4a0d      	ldr	r2, [pc, #52]	; (8004744 <HAL_TIM_Base_MspInit+0x88>)
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_TIM_Base_MspInit+0x88>)
 800471a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2100      	movs	r1, #0
 800472a:	202c      	movs	r0, #44	; 0x2c
 800472c:	f000 fc8b 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004730:	202c      	movs	r0, #44	; 0x2c
 8004732:	f000 fca2 	bl	800507a <HAL_NVIC_EnableIRQ>
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40001400 	.word	0x40001400
 8004744:	58024400 	.word	0x58024400
 8004748:	40001c00 	.word	0x40001c00

0800474c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <HAL_TIM_PWM_MspInit+0x9c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d117      	bne.n	800478e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 8004760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004764:	4a21      	ldr	r2, [pc, #132]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 8004770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800477c:	2200      	movs	r2, #0
 800477e:	2100      	movs	r1, #0
 8004780:	202c      	movs	r0, #44	; 0x2c
 8004782:	f000 fc60 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004786:	202c      	movs	r0, #44	; 0x2c
 8004788:	f000 fc77 	bl	800507a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800478c:	e028      	b.n	80047e0 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM12)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_TIM_PWM_MspInit+0xa4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10f      	bne.n	80047b8 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 800479a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800479e:	4a13      	ldr	r2, [pc, #76]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 80047aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
}
 80047b6:	e013      	b.n	80047e0 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM15)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0d      	ldr	r2, [pc, #52]	; (80047f4 <HAL_TIM_PWM_MspInit+0xa8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10e      	bne.n	80047e0 <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 80047c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <HAL_TIM_PWM_MspInit+0xa0>)
 80047d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40010400 	.word	0x40010400
 80047ec:	58024400 	.word	0x58024400
 80047f0:	40001800 	.word	0x40001800
 80047f4:	40014000 	.word	0x40014000

080047f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a38      	ldr	r2, [pc, #224]	; (80048f8 <HAL_TIM_MspPostInit+0x100>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d11f      	bne.n	800485a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800481a:	4b38      	ldr	r3, [pc, #224]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 800481c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004820:	4a36      	ldr	r2, [pc, #216]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800482a:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 800482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004838:	2340      	movs	r3, #64	; 0x40
 800483a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	2300      	movs	r3, #0
 8004846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004848:	2303      	movs	r3, #3
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4619      	mov	r1, r3
 8004852:	482b      	ldr	r0, [pc, #172]	; (8004900 <HAL_TIM_MspPostInit+0x108>)
 8004854:	f003 fa66 	bl	8007d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004858:	e049      	b.n	80048ee <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM12)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a29      	ldr	r2, [pc, #164]	; (8004904 <HAL_TIM_MspPostInit+0x10c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d120      	bne.n	80048a6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 8004866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800486a:	4a24      	ldr	r2, [pc, #144]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 8004876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004882:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004894:	2302      	movs	r3, #2
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4619      	mov	r1, r3
 800489e:	481a      	ldr	r0, [pc, #104]	; (8004908 <HAL_TIM_MspPostInit+0x110>)
 80048a0:	f003 fa40 	bl	8007d24 <HAL_GPIO_Init>
}
 80048a4:	e023      	b.n	80048ee <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_TIM_MspPostInit+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d11e      	bne.n	80048ee <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 80048b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048b6:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 80048b8:	f043 0310 	orr.w	r3, r3, #16
 80048bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048c0:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <HAL_TIM_MspPostInit+0x104>)
 80048c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80048ce:	2360      	movs	r3, #96	; 0x60
 80048d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d2:	2302      	movs	r3, #2
 80048d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048da:	2300      	movs	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80048de:	2304      	movs	r3, #4
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048e2:	f107 0314 	add.w	r3, r7, #20
 80048e6:	4619      	mov	r1, r3
 80048e8:	4809      	ldr	r0, [pc, #36]	; (8004910 <HAL_TIM_MspPostInit+0x118>)
 80048ea:	f003 fa1b 	bl	8007d24 <HAL_GPIO_Init>
}
 80048ee:	bf00      	nop
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40010400 	.word	0x40010400
 80048fc:	58024400 	.word	0x58024400
 8004900:	58020800 	.word	0x58020800
 8004904:	40001800 	.word	0x40001800
 8004908:	58020400 	.word	0x58020400
 800490c:	40014000 	.word	0x40014000
 8004910:	58021000 	.word	0x58021000

08004914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b0b6      	sub	sp, #216	; 0xd8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800491c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800492c:	f107 0310 	add.w	r3, r7, #16
 8004930:	22b4      	movs	r2, #180	; 0xb4
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f009 fa93 	bl	800de60 <memset>
  if(huart->Instance==USART1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a57      	ldr	r2, [pc, #348]	; (8004a9c <HAL_UART_MspInit+0x188>)
 8004940:	4293      	cmp	r3, r2
 8004942:	f040 80a7 	bne.w	8004a94 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004946:	2301      	movs	r3, #1
 8004948:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800494a:	2300      	movs	r3, #0
 800494c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	4618      	mov	r0, r3
 8004956:	f004 fb1b 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004960:	f7ff fd6e 	bl	8004440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004964:	4b4e      	ldr	r3, [pc, #312]	; (8004aa0 <HAL_UART_MspInit+0x18c>)
 8004966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800496a:	4a4d      	ldr	r2, [pc, #308]	; (8004aa0 <HAL_UART_MspInit+0x18c>)
 800496c:	f043 0310 	orr.w	r3, r3, #16
 8004970:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004974:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <HAL_UART_MspInit+0x18c>)
 8004976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_UART_MspInit+0x18c>)
 8004984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004988:	4a45      	ldr	r2, [pc, #276]	; (8004aa0 <HAL_UART_MspInit+0x18c>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004992:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <HAL_UART_MspInit+0x18c>)
 8004994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80049a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a8:	2302      	movs	r3, #2
 80049aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049ba:	2307      	movs	r3, #7
 80049bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4837      	ldr	r0, [pc, #220]	; (8004aa4 <HAL_UART_MspInit+0x190>)
 80049c8:	f003 f9ac 	bl	8007d24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80049cc:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049ce:	4a37      	ldr	r2, [pc, #220]	; (8004aac <HAL_UART_MspInit+0x198>)
 80049d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80049d2:	4b35      	ldr	r3, [pc, #212]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049d4:	2229      	movs	r2, #41	; 0x29
 80049d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049d8:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049de:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049e4:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80049fe:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 8004a00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a04:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a0c:	4826      	ldr	r0, [pc, #152]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 8004a0e:	f000 fb4f 	bl	80050b0 <HAL_DMA_Init>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004a18:	f7ff fd12 	bl	8004440 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 8004a20:	67da      	str	r2, [r3, #124]	; 0x7c
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_UART_MspInit+0x194>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a2a:	4a22      	ldr	r2, [pc, #136]	; (8004ab4 <HAL_UART_MspInit+0x1a0>)
 8004a2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a30:	222a      	movs	r2, #42	; 0x2a
 8004a32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a60:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a68:	4811      	ldr	r0, [pc, #68]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a6a:	f000 fb21 	bl	80050b0 <HAL_DMA_Init>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004a74:	f7ff fce4 	bl	8004440 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0d      	ldr	r2, [pc, #52]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a7c:	679a      	str	r2, [r3, #120]	; 0x78
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <HAL_UART_MspInit+0x19c>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a84:	2200      	movs	r2, #0
 8004a86:	2100      	movs	r1, #0
 8004a88:	2025      	movs	r0, #37	; 0x25
 8004a8a:	f000 fadc 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a8e:	2025      	movs	r0, #37	; 0x25
 8004a90:	f000 faf3 	bl	800507a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a94:	bf00      	nop
 8004a96:	37d8      	adds	r7, #216	; 0xd8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	58020000 	.word	0x58020000
 8004aa8:	24010a1c 	.word	0x24010a1c
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	24010a94 	.word	0x24010a94
 8004ab4:	40020028 	.word	0x40020028

08004ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004abc:	e7fe      	b.n	8004abc <NMI_Handler+0x4>

08004abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ac2:	e7fe      	b.n	8004ac2 <HardFault_Handler+0x4>

08004ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ac8:	e7fe      	b.n	8004ac8 <MemManage_Handler+0x4>

08004aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ace:	e7fe      	b.n	8004ace <BusFault_Handler+0x4>

08004ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ad4:	e7fe      	b.n	8004ad4 <UsageFault_Handler+0x4>

08004ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004af2:	b480      	push	{r7}
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b04:	f000 f9a4 	bl	8004e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004b10:	4802      	ldr	r0, [pc, #8]	; (8004b1c <DMA1_Stream0_IRQHandler+0x10>)
 8004b12:	f001 fdf5 	bl	8006700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	24010a1c 	.word	0x24010a1c

08004b20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004b24:	4802      	ldr	r0, [pc, #8]	; (8004b30 <DMA1_Stream1_IRQHandler+0x10>)
 8004b26:	f001 fdeb 	bl	8006700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	24010a94 	.word	0x24010a94

08004b34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b38:	4802      	ldr	r0, [pc, #8]	; (8004b44 <USART1_IRQHandler+0x10>)
 8004b3a:	f007 f95b 	bl	800bdf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b3e:	bf00      	nop
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	2401098c 	.word	0x2401098c

08004b48 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004b4c:	4803      	ldr	r0, [pc, #12]	; (8004b5c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004b4e:	f006 f8c1 	bl	800acd4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004b52:	4803      	ldr	r0, [pc, #12]	; (8004b60 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004b54:	f006 f8be 	bl	800acd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004b58:	bf00      	nop
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	2401085c 	.word	0x2401085c
 8004b60:	240108f4 	.word	0x240108f4

08004b64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b68:	4802      	ldr	r0, [pc, #8]	; (8004b74 <TIM7_IRQHandler+0x10>)
 8004b6a:	f006 f8b3 	bl	800acd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	24010810 	.word	0x24010810

08004b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
	return 1;
 8004b7c:	2301      	movs	r3, #1
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <_kill>:

int _kill(int pid, int sig)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b92:	f009 f92d 	bl	800ddf0 <__errno>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2216      	movs	r2, #22
 8004b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <_exit>:

void _exit (int status)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ffe7 	bl	8004b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bba:	e7fe      	b.n	8004bba <_exit+0x12>

08004bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <_sbrk+0x5c>)
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <_sbrk+0x60>)
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <_sbrk+0x64>)
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <_sbrk+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <_sbrk+0x64>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d207      	bcs.n	8004bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bec:	f009 f900 	bl	800ddf0 <__errno>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfa:	e009      	b.n	8004c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <_sbrk+0x64>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <_sbrk+0x64>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <_sbrk+0x64>)
 8004c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	24050000 	.word	0x24050000
 8004c1c:	00000400 	.word	0x00000400
 8004c20:	24010b0c 	.word	0x24010b0c
 8004c24:	24010b28 	.word	0x24010b28

08004c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <SystemInit+0xd0>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <SystemInit+0xd0>)
 8004c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c3c:	4b2f      	ldr	r3, [pc, #188]	; (8004cfc <SystemInit+0xd4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	2b06      	cmp	r3, #6
 8004c46:	d807      	bhi.n	8004c58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c48:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <SystemInit+0xd4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 030f 	bic.w	r3, r3, #15
 8004c50:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <SystemInit+0xd4>)
 8004c52:	f043 0307 	orr.w	r3, r3, #7
 8004c56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <SystemInit+0xd8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <SystemInit+0xd8>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <SystemInit+0xd8>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <SystemInit+0xd8>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4924      	ldr	r1, [pc, #144]	; (8004d00 <SystemInit+0xd8>)
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <SystemInit+0xdc>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c76:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <SystemInit+0xd4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <SystemInit+0xd4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 030f 	bic.w	r3, r3, #15
 8004c8a:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <SystemInit+0xd4>)
 8004c8c:	f043 0307 	orr.w	r3, r3, #7
 8004c90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <SystemInit+0xd8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <SystemInit+0xd8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <SystemInit+0xd8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <SystemInit+0xd8>)
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <SystemInit+0xe0>)
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <SystemInit+0xd8>)
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <SystemInit+0xe4>)
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <SystemInit+0xd8>)
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <SystemInit+0xe8>)
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <SystemInit+0xd8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <SystemInit+0xd8>)
 8004cbe:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <SystemInit+0xe8>)
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <SystemInit+0xd8>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <SystemInit+0xd8>)
 8004cca:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <SystemInit+0xe8>)
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <SystemInit+0xd8>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <SystemInit+0xd8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <SystemInit+0xd8>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <SystemInit+0xd8>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <SystemInit+0xec>)
 8004ce8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004cec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00
 8004cfc:	52002000 	.word	0x52002000
 8004d00:	58024400 	.word	0x58024400
 8004d04:	eaf6ed7f 	.word	0xeaf6ed7f
 8004d08:	02020200 	.word	0x02020200
 8004d0c:	01ff0000 	.word	0x01ff0000
 8004d10:	01010280 	.word	0x01010280
 8004d14:	52004000 	.word	0x52004000

08004d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004d1c:	f7ff ff84 	bl	8004c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d22:	490d      	ldr	r1, [pc, #52]	; (8004d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d28:	e002      	b.n	8004d30 <LoopCopyDataInit>

08004d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d2e:	3304      	adds	r3, #4

08004d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d34:	d3f9      	bcc.n	8004d2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d38:	4c0a      	ldr	r4, [pc, #40]	; (8004d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d3c:	e001      	b.n	8004d42 <LoopFillZerobss>

08004d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d40:	3204      	adds	r2, #4

08004d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d44:	d3fb      	bcc.n	8004d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d46:	f009 f859 	bl	800ddfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d4a:	f7fe fe81 	bl	8003a50 <main>
  bx  lr
 8004d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d50:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004d54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004d58:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004d5c:	0800e4bc 	.word	0x0800e4bc
  ldr r2, =_sbss
 8004d60:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004d64:	24010b24 	.word	0x24010b24

08004d68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d68:	e7fe      	b.n	8004d68 <ADC3_IRQHandler>
	...

08004d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d72:	2003      	movs	r0, #3
 8004d74:	f000 f95c 	bl	8005030 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d78:	f003 ff34 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_Init+0x68>)
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	4913      	ldr	r1, [pc, #76]	; (8004dd8 <HAL_Init+0x6c>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <HAL_Init+0x68>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	4a0e      	ldr	r2, [pc, #56]	; (8004dd8 <HAL_Init+0x6c>)
 8004da0:	5cd3      	ldrb	r3, [r2, r3]
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dac:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <HAL_Init+0x70>)
 8004dae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004db0:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <HAL_Init+0x74>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004db6:	200f      	movs	r0, #15
 8004db8:	f000 f814 	bl	8004de4 <HAL_InitTick>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e002      	b.n	8004dcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004dc6:	f7ff fb51 	bl	800446c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	0800e464 	.word	0x0800e464
 8004ddc:	24000004 	.word	0x24000004
 8004de0:	24000000 	.word	0x24000000

08004de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004dec:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_InitTick+0x60>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e021      	b.n	8004e3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004df8:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <HAL_InitTick+0x64>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <HAL_InitTick+0x60>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	4619      	mov	r1, r3
 8004e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f941 	bl	8005096 <HAL_SYSTICK_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e00e      	b.n	8004e3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d80a      	bhi.n	8004e3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e24:	2200      	movs	r2, #0
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e2c:	f000 f90b 	bl	8005046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e30:	4a06      	ldr	r2, [pc, #24]	; (8004e4c <HAL_InitTick+0x68>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	2400000c 	.word	0x2400000c
 8004e48:	24000000 	.word	0x24000000
 8004e4c:	24000008 	.word	0x24000008

08004e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_IncTick+0x20>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_IncTick+0x24>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_IncTick+0x24>)
 8004e62:	6013      	str	r3, [r2, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	2400000c 	.word	0x2400000c
 8004e74:	24010b10 	.word	0x24010b10

08004e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_GetTick+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	24010b10 	.word	0x24010b10

08004e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004eac:	4013      	ands	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ebe:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	60d3      	str	r3, [r2, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00
 8004ed4:	05fa0000 	.word	0x05fa0000

08004ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	f003 0307 	and.w	r3, r3, #7
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	db0b      	blt.n	8004f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	f003 021f 	and.w	r2, r3, #31
 8004f0c:	4907      	ldr	r1, [pc, #28]	; (8004f2c <__NVIC_EnableIRQ+0x38>)
 8004f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2001      	movs	r0, #1
 8004f16:	fa00 f202 	lsl.w	r2, r0, r2
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000e100 	.word	0xe000e100

08004f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	db0a      	blt.n	8004f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	490c      	ldr	r1, [pc, #48]	; (8004f7c <__NVIC_SetPriority+0x4c>)
 8004f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	440b      	add	r3, r1
 8004f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f58:	e00a      	b.n	8004f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4908      	ldr	r1, [pc, #32]	; (8004f80 <__NVIC_SetPriority+0x50>)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	3b04      	subs	r3, #4
 8004f68:	0112      	lsls	r2, r2, #4
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	761a      	strb	r2, [r3, #24]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000e100 	.word	0xe000e100
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f1c3 0307 	rsb	r3, r3, #7
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	bf28      	it	cs
 8004fa2:	2304      	movcs	r3, #4
 8004fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d902      	bls.n	8004fb4 <NVIC_EncodePriority+0x30>
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	3b03      	subs	r3, #3
 8004fb2:	e000      	b.n	8004fb6 <NVIC_EncodePriority+0x32>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	43d9      	mvns	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fdc:	4313      	orrs	r3, r2
         );
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	; 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ffc:	d301      	bcc.n	8005002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ffe:	2301      	movs	r3, #1
 8005000:	e00f      	b.n	8005022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <SysTick_Config+0x40>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3b01      	subs	r3, #1
 8005008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800500a:	210f      	movs	r1, #15
 800500c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005010:	f7ff ff8e 	bl	8004f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <SysTick_Config+0x40>)
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800501a:	4b04      	ldr	r3, [pc, #16]	; (800502c <SysTick_Config+0x40>)
 800501c:	2207      	movs	r2, #7
 800501e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	e000e010 	.word	0xe000e010

08005030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ff29 	bl	8004e90 <__NVIC_SetPriorityGrouping>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005054:	f7ff ff40 	bl	8004ed8 <__NVIC_GetPriorityGrouping>
 8005058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7ff ff90 	bl	8004f84 <NVIC_EncodePriority>
 8005064:	4602      	mov	r2, r0
 8005066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff5f 	bl	8004f30 <__NVIC_SetPriority>
}
 8005072:	bf00      	nop
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	4603      	mov	r3, r0
 8005082:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ff33 	bl	8004ef4 <__NVIC_EnableIRQ>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff ffa4 	bl	8004fec <SysTick_Config>
 80050a4:	4603      	mov	r3, r0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80050b8:	f7ff fede 	bl	8004e78 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e314      	b.n	80056f2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a66      	ldr	r2, [pc, #408]	; (8005268 <HAL_DMA_Init+0x1b8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d04a      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a65      	ldr	r2, [pc, #404]	; (800526c <HAL_DMA_Init+0x1bc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d045      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a63      	ldr	r2, [pc, #396]	; (8005270 <HAL_DMA_Init+0x1c0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d040      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a62      	ldr	r2, [pc, #392]	; (8005274 <HAL_DMA_Init+0x1c4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d03b      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a60      	ldr	r2, [pc, #384]	; (8005278 <HAL_DMA_Init+0x1c8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d036      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a5f      	ldr	r2, [pc, #380]	; (800527c <HAL_DMA_Init+0x1cc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d031      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5d      	ldr	r2, [pc, #372]	; (8005280 <HAL_DMA_Init+0x1d0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02c      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5c      	ldr	r2, [pc, #368]	; (8005284 <HAL_DMA_Init+0x1d4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d027      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5a      	ldr	r2, [pc, #360]	; (8005288 <HAL_DMA_Init+0x1d8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a59      	ldr	r2, [pc, #356]	; (800528c <HAL_DMA_Init+0x1dc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_DMA_Init+0x1e0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a56      	ldr	r2, [pc, #344]	; (8005294 <HAL_DMA_Init+0x1e4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a54      	ldr	r2, [pc, #336]	; (8005298 <HAL_DMA_Init+0x1e8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a53      	ldr	r2, [pc, #332]	; (800529c <HAL_DMA_Init+0x1ec>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a51      	ldr	r2, [pc, #324]	; (80052a0 <HAL_DMA_Init+0x1f0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_DMA_Init+0xb8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a50      	ldr	r2, [pc, #320]	; (80052a4 <HAL_DMA_Init+0x1f4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <HAL_DMA_Init+0xbc>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_DMA_Init+0xbe>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 813c 	beq.w	80053ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a37      	ldr	r2, [pc, #220]	; (8005268 <HAL_DMA_Init+0x1b8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d04a      	beq.n	8005224 <HAL_DMA_Init+0x174>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a36      	ldr	r2, [pc, #216]	; (800526c <HAL_DMA_Init+0x1bc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d045      	beq.n	8005224 <HAL_DMA_Init+0x174>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a34      	ldr	r2, [pc, #208]	; (8005270 <HAL_DMA_Init+0x1c0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d040      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a33      	ldr	r2, [pc, #204]	; (8005274 <HAL_DMA_Init+0x1c4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d03b      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a31      	ldr	r2, [pc, #196]	; (8005278 <HAL_DMA_Init+0x1c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d036      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a30      	ldr	r2, [pc, #192]	; (800527c <HAL_DMA_Init+0x1cc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d031      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2e      	ldr	r2, [pc, #184]	; (8005280 <HAL_DMA_Init+0x1d0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d02c      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <HAL_DMA_Init+0x1d4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d027      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <HAL_DMA_Init+0x1d8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d022      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2a      	ldr	r2, [pc, #168]	; (800528c <HAL_DMA_Init+0x1dc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d01d      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a28      	ldr	r2, [pc, #160]	; (8005290 <HAL_DMA_Init+0x1e0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a27      	ldr	r2, [pc, #156]	; (8005294 <HAL_DMA_Init+0x1e4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_DMA_Init+0x174>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a25      	ldr	r2, [pc, #148]	; (8005298 <HAL_DMA_Init+0x1e8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_DMA_Init+0x174>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a24      	ldr	r2, [pc, #144]	; (800529c <HAL_DMA_Init+0x1ec>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_DMA_Init+0x174>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <HAL_DMA_Init+0x1f0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_DMA_Init+0x174>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_DMA_Init+0x1f4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d108      	bne.n	8005236 <HAL_DMA_Init+0x186>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e007      	b.n	8005246 <HAL_DMA_Init+0x196>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005246:	e02f      	b.n	80052a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005248:	f7ff fe16 	bl	8004e78 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b05      	cmp	r3, #5
 8005254:	d928      	bls.n	80052a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2203      	movs	r2, #3
 8005260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e244      	b.n	80056f2 <HAL_DMA_Init+0x642>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1c8      	bne.n	8005248 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4b84      	ldr	r3, [pc, #528]	; (80054d4 <HAL_DMA_Init+0x424>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80052ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d107      	bne.n	800530c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	4313      	orrs	r3, r2
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b28      	cmp	r3, #40	; 0x28
 8005312:	d903      	bls.n	800531c <HAL_DMA_Init+0x26c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b2e      	cmp	r3, #46	; 0x2e
 800531a:	d91f      	bls.n	800535c <HAL_DMA_Init+0x2ac>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b3e      	cmp	r3, #62	; 0x3e
 8005322:	d903      	bls.n	800532c <HAL_DMA_Init+0x27c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b42      	cmp	r3, #66	; 0x42
 800532a:	d917      	bls.n	800535c <HAL_DMA_Init+0x2ac>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b46      	cmp	r3, #70	; 0x46
 8005332:	d903      	bls.n	800533c <HAL_DMA_Init+0x28c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b48      	cmp	r3, #72	; 0x48
 800533a:	d90f      	bls.n	800535c <HAL_DMA_Init+0x2ac>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b4e      	cmp	r3, #78	; 0x4e
 8005342:	d903      	bls.n	800534c <HAL_DMA_Init+0x29c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b52      	cmp	r3, #82	; 0x52
 800534a:	d907      	bls.n	800535c <HAL_DMA_Init+0x2ac>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b73      	cmp	r3, #115	; 0x73
 8005352:	d905      	bls.n	8005360 <HAL_DMA_Init+0x2b0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b77      	cmp	r3, #119	; 0x77
 800535a:	d801      	bhi.n	8005360 <HAL_DMA_Init+0x2b0>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_DMA_Init+0x2b2>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800536c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2b04      	cmp	r3, #4
 8005396:	d117      	bne.n	80053c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00e      	beq.n	80053c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f002 fb30 	bl	8007a10 <DMA_CheckFifoParam>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2240      	movs	r2, #64	; 0x40
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e194      	b.n	80056f2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f002 fa6b 	bl	80078ac <DMA_CalcBaseAndBitshift>
 80053d6:	4603      	mov	r3, r0
 80053d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	223f      	movs	r2, #63	; 0x3f
 80053e4:	409a      	lsls	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	e0ca      	b.n	8005582 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a39      	ldr	r2, [pc, #228]	; (80054d8 <HAL_DMA_Init+0x428>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_DMA_Init+0x38c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a38      	ldr	r2, [pc, #224]	; (80054dc <HAL_DMA_Init+0x42c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d01d      	beq.n	800543c <HAL_DMA_Init+0x38c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a36      	ldr	r2, [pc, #216]	; (80054e0 <HAL_DMA_Init+0x430>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_DMA_Init+0x38c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a35      	ldr	r2, [pc, #212]	; (80054e4 <HAL_DMA_Init+0x434>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_DMA_Init+0x38c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a33      	ldr	r2, [pc, #204]	; (80054e8 <HAL_DMA_Init+0x438>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_DMA_Init+0x38c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a32      	ldr	r2, [pc, #200]	; (80054ec <HAL_DMA_Init+0x43c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_DMA_Init+0x38c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <HAL_DMA_Init+0x440>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_DMA_Init+0x38c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <HAL_DMA_Init+0x444>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d101      	bne.n	8005440 <HAL_DMA_Init+0x390>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_DMA_Init+0x392>
 8005440:	2300      	movs	r3, #0
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8094 	beq.w	8005570 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a22      	ldr	r2, [pc, #136]	; (80054d8 <HAL_DMA_Init+0x428>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d021      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a21      	ldr	r2, [pc, #132]	; (80054dc <HAL_DMA_Init+0x42c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d01c      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <HAL_DMA_Init+0x430>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d017      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <HAL_DMA_Init+0x434>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d012      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <HAL_DMA_Init+0x438>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00d      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_DMA_Init+0x43c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d008      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <HAL_DMA_Init+0x440>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <HAL_DMA_Init+0x3e6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_DMA_Init+0x444>)
 8005494:	4293      	cmp	r3, r2
 8005496:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <HAL_DMA_Init+0x448>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d01d      	beq.n	80054fc <HAL_DMA_Init+0x44c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d102      	bne.n	80054ce <HAL_DMA_Init+0x41e>
 80054c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054cc:	e017      	b.n	80054fe <HAL_DMA_Init+0x44e>
 80054ce:	2300      	movs	r3, #0
 80054d0:	e015      	b.n	80054fe <HAL_DMA_Init+0x44e>
 80054d2:	bf00      	nop
 80054d4:	fe10803f 	.word	0xfe10803f
 80054d8:	58025408 	.word	0x58025408
 80054dc:	5802541c 	.word	0x5802541c
 80054e0:	58025430 	.word	0x58025430
 80054e4:	58025444 	.word	0x58025444
 80054e8:	58025458 	.word	0x58025458
 80054ec:	5802546c 	.word	0x5802546c
 80054f0:	58025480 	.word	0x58025480
 80054f4:	58025494 	.word	0x58025494
 80054f8:	fffe000f 	.word	0xfffe000f
 80054fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68d2      	ldr	r2, [r2, #12]
 8005502:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800550c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800551c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800552c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	4b6e      	ldr	r3, [pc, #440]	; (80056fc <HAL_DMA_Init+0x64c>)
 8005544:	4413      	add	r3, r2
 8005546:	4a6e      	ldr	r2, [pc, #440]	; (8005700 <HAL_DMA_Init+0x650>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	009a      	lsls	r2, r3, #2
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f002 f9a9 	bl	80078ac <DMA_CalcBaseAndBitshift>
 800555a:	4603      	mov	r3, r0
 800555c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2201      	movs	r2, #1
 8005568:	409a      	lsls	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	e008      	b.n	8005582 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2240      	movs	r2, #64	; 0x40
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2203      	movs	r2, #3
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0b7      	b.n	80056f2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a5f      	ldr	r2, [pc, #380]	; (8005704 <HAL_DMA_Init+0x654>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d072      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a5d      	ldr	r2, [pc, #372]	; (8005708 <HAL_DMA_Init+0x658>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d06d      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5c      	ldr	r2, [pc, #368]	; (800570c <HAL_DMA_Init+0x65c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d068      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5a      	ldr	r2, [pc, #360]	; (8005710 <HAL_DMA_Init+0x660>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d063      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a59      	ldr	r2, [pc, #356]	; (8005714 <HAL_DMA_Init+0x664>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d05e      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a57      	ldr	r2, [pc, #348]	; (8005718 <HAL_DMA_Init+0x668>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d059      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a56      	ldr	r2, [pc, #344]	; (800571c <HAL_DMA_Init+0x66c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d054      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a54      	ldr	r2, [pc, #336]	; (8005720 <HAL_DMA_Init+0x670>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d04f      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a53      	ldr	r2, [pc, #332]	; (8005724 <HAL_DMA_Init+0x674>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a51      	ldr	r2, [pc, #324]	; (8005728 <HAL_DMA_Init+0x678>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a50      	ldr	r2, [pc, #320]	; (800572c <HAL_DMA_Init+0x67c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a4e      	ldr	r2, [pc, #312]	; (8005730 <HAL_DMA_Init+0x680>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4d      	ldr	r2, [pc, #308]	; (8005734 <HAL_DMA_Init+0x684>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a4b      	ldr	r2, [pc, #300]	; (8005738 <HAL_DMA_Init+0x688>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4a      	ldr	r2, [pc, #296]	; (800573c <HAL_DMA_Init+0x68c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a48      	ldr	r2, [pc, #288]	; (8005740 <HAL_DMA_Init+0x690>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a47      	ldr	r2, [pc, #284]	; (8005744 <HAL_DMA_Init+0x694>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a45      	ldr	r2, [pc, #276]	; (8005748 <HAL_DMA_Init+0x698>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a44      	ldr	r2, [pc, #272]	; (800574c <HAL_DMA_Init+0x69c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a42      	ldr	r2, [pc, #264]	; (8005750 <HAL_DMA_Init+0x6a0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a41      	ldr	r2, [pc, #260]	; (8005754 <HAL_DMA_Init+0x6a4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <HAL_DMA_Init+0x6a8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3e      	ldr	r2, [pc, #248]	; (800575c <HAL_DMA_Init+0x6ac>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_Init+0x5c2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3c      	ldr	r2, [pc, #240]	; (8005760 <HAL_DMA_Init+0x6b0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d101      	bne.n	8005676 <HAL_DMA_Init+0x5c6>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_DMA_Init+0x5c8>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d032      	beq.n	80056e2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f002 fa43 	bl	8007b08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d102      	bne.n	8005690 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_DMA_Init+0x620>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d80c      	bhi.n	80056d0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 fac0 	bl	8007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	e008      	b.n	80056e2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	a7fdabf8 	.word	0xa7fdabf8
 8005700:	cccccccd 	.word	0xcccccccd
 8005704:	40020010 	.word	0x40020010
 8005708:	40020028 	.word	0x40020028
 800570c:	40020040 	.word	0x40020040
 8005710:	40020058 	.word	0x40020058
 8005714:	40020070 	.word	0x40020070
 8005718:	40020088 	.word	0x40020088
 800571c:	400200a0 	.word	0x400200a0
 8005720:	400200b8 	.word	0x400200b8
 8005724:	40020410 	.word	0x40020410
 8005728:	40020428 	.word	0x40020428
 800572c:	40020440 	.word	0x40020440
 8005730:	40020458 	.word	0x40020458
 8005734:	40020470 	.word	0x40020470
 8005738:	40020488 	.word	0x40020488
 800573c:	400204a0 	.word	0x400204a0
 8005740:	400204b8 	.word	0x400204b8
 8005744:	58025408 	.word	0x58025408
 8005748:	5802541c 	.word	0x5802541c
 800574c:	58025430 	.word	0x58025430
 8005750:	58025444 	.word	0x58025444
 8005754:	58025458 	.word	0x58025458
 8005758:	5802546c 	.word	0x5802546c
 800575c:	58025480 	.word	0x58025480
 8005760:	58025494 	.word	0x58025494

08005764 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e226      	b.n	8005bce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_DMA_Start_IT+0x2a>
 800578a:	2302      	movs	r3, #2
 800578c:	e21f      	b.n	8005bce <HAL_DMA_Start_IT+0x46a>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	f040 820a 	bne.w	8005bb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a68      	ldr	r2, [pc, #416]	; (8005958 <HAL_DMA_Start_IT+0x1f4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04a      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a66      	ldr	r2, [pc, #408]	; (800595c <HAL_DMA_Start_IT+0x1f8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d045      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a65      	ldr	r2, [pc, #404]	; (8005960 <HAL_DMA_Start_IT+0x1fc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a63      	ldr	r2, [pc, #396]	; (8005964 <HAL_DMA_Start_IT+0x200>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d03b      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a62      	ldr	r2, [pc, #392]	; (8005968 <HAL_DMA_Start_IT+0x204>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d036      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a60      	ldr	r2, [pc, #384]	; (800596c <HAL_DMA_Start_IT+0x208>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a5f      	ldr	r2, [pc, #380]	; (8005970 <HAL_DMA_Start_IT+0x20c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d02c      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a5d      	ldr	r2, [pc, #372]	; (8005974 <HAL_DMA_Start_IT+0x210>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d027      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a5c      	ldr	r2, [pc, #368]	; (8005978 <HAL_DMA_Start_IT+0x214>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a5a      	ldr	r2, [pc, #360]	; (800597c <HAL_DMA_Start_IT+0x218>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01d      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a59      	ldr	r2, [pc, #356]	; (8005980 <HAL_DMA_Start_IT+0x21c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a57      	ldr	r2, [pc, #348]	; (8005984 <HAL_DMA_Start_IT+0x220>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a56      	ldr	r2, [pc, #344]	; (8005988 <HAL_DMA_Start_IT+0x224>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a54      	ldr	r2, [pc, #336]	; (800598c <HAL_DMA_Start_IT+0x228>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a53      	ldr	r2, [pc, #332]	; (8005990 <HAL_DMA_Start_IT+0x22c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_Start_IT+0xee>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a51      	ldr	r2, [pc, #324]	; (8005994 <HAL_DMA_Start_IT+0x230>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <HAL_DMA_Start_IT+0x100>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e007      	b.n	8005874 <HAL_DMA_Start_IT+0x110>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f001 fe6a 	bl	8007554 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a34      	ldr	r2, [pc, #208]	; (8005958 <HAL_DMA_Start_IT+0x1f4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04a      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a33      	ldr	r2, [pc, #204]	; (800595c <HAL_DMA_Start_IT+0x1f8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d045      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a31      	ldr	r2, [pc, #196]	; (8005960 <HAL_DMA_Start_IT+0x1fc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d040      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a30      	ldr	r2, [pc, #192]	; (8005964 <HAL_DMA_Start_IT+0x200>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03b      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <HAL_DMA_Start_IT+0x204>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d036      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_DMA_Start_IT+0x208>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d031      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <HAL_DMA_Start_IT+0x20c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02c      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <HAL_DMA_Start_IT+0x210>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <HAL_DMA_Start_IT+0x214>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_DMA_Start_IT+0x218>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01d      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a25      	ldr	r2, [pc, #148]	; (8005980 <HAL_DMA_Start_IT+0x21c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_DMA_Start_IT+0x220>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a22      	ldr	r2, [pc, #136]	; (8005988 <HAL_DMA_Start_IT+0x224>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_DMA_Start_IT+0x228>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <HAL_DMA_Start_IT+0x22c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_DMA_Start_IT+0x1bc>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <HAL_DMA_Start_IT+0x230>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d101      	bne.n	8005924 <HAL_DMA_Start_IT+0x1c0>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <HAL_DMA_Start_IT+0x1c2>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d036      	beq.n	8005998 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f023 021e 	bic.w	r2, r3, #30
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0216 	orr.w	r2, r2, #22
 800593c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d03e      	beq.n	80059c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0208 	orr.w	r2, r2, #8
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e035      	b.n	80059c4 <HAL_DMA_Start_IT+0x260>
 8005958:	40020010 	.word	0x40020010
 800595c:	40020028 	.word	0x40020028
 8005960:	40020040 	.word	0x40020040
 8005964:	40020058 	.word	0x40020058
 8005968:	40020070 	.word	0x40020070
 800596c:	40020088 	.word	0x40020088
 8005970:	400200a0 	.word	0x400200a0
 8005974:	400200b8 	.word	0x400200b8
 8005978:	40020410 	.word	0x40020410
 800597c:	40020428 	.word	0x40020428
 8005980:	40020440 	.word	0x40020440
 8005984:	40020458 	.word	0x40020458
 8005988:	40020470 	.word	0x40020470
 800598c:	40020488 	.word	0x40020488
 8005990:	400204a0 	.word	0x400204a0
 8005994:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 020e 	bic.w	r2, r3, #14
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 020a 	orr.w	r2, r2, #10
 80059aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0204 	orr.w	r2, r2, #4
 80059c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <HAL_DMA_Start_IT+0x474>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d072      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a82      	ldr	r2, [pc, #520]	; (8005bdc <HAL_DMA_Start_IT+0x478>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d06d      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a80      	ldr	r2, [pc, #512]	; (8005be0 <HAL_DMA_Start_IT+0x47c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d068      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a7f      	ldr	r2, [pc, #508]	; (8005be4 <HAL_DMA_Start_IT+0x480>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d063      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a7d      	ldr	r2, [pc, #500]	; (8005be8 <HAL_DMA_Start_IT+0x484>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d05e      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7c      	ldr	r2, [pc, #496]	; (8005bec <HAL_DMA_Start_IT+0x488>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d059      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a7a      	ldr	r2, [pc, #488]	; (8005bf0 <HAL_DMA_Start_IT+0x48c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d054      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a79      	ldr	r2, [pc, #484]	; (8005bf4 <HAL_DMA_Start_IT+0x490>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04f      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a77      	ldr	r2, [pc, #476]	; (8005bf8 <HAL_DMA_Start_IT+0x494>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d04a      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a76      	ldr	r2, [pc, #472]	; (8005bfc <HAL_DMA_Start_IT+0x498>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d045      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a74      	ldr	r2, [pc, #464]	; (8005c00 <HAL_DMA_Start_IT+0x49c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d040      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a73      	ldr	r2, [pc, #460]	; (8005c04 <HAL_DMA_Start_IT+0x4a0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d03b      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a71      	ldr	r2, [pc, #452]	; (8005c08 <HAL_DMA_Start_IT+0x4a4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d036      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a70      	ldr	r2, [pc, #448]	; (8005c0c <HAL_DMA_Start_IT+0x4a8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d031      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a6e      	ldr	r2, [pc, #440]	; (8005c10 <HAL_DMA_Start_IT+0x4ac>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d02c      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6d      	ldr	r2, [pc, #436]	; (8005c14 <HAL_DMA_Start_IT+0x4b0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d027      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a6b      	ldr	r2, [pc, #428]	; (8005c18 <HAL_DMA_Start_IT+0x4b4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d022      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6a      	ldr	r2, [pc, #424]	; (8005c1c <HAL_DMA_Start_IT+0x4b8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d01d      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a68      	ldr	r2, [pc, #416]	; (8005c20 <HAL_DMA_Start_IT+0x4bc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a67      	ldr	r2, [pc, #412]	; (8005c24 <HAL_DMA_Start_IT+0x4c0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a65      	ldr	r2, [pc, #404]	; (8005c28 <HAL_DMA_Start_IT+0x4c4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00e      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a64      	ldr	r2, [pc, #400]	; (8005c2c <HAL_DMA_Start_IT+0x4c8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a62      	ldr	r2, [pc, #392]	; (8005c30 <HAL_DMA_Start_IT+0x4cc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_DMA_Start_IT+0x350>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a61      	ldr	r2, [pc, #388]	; (8005c34 <HAL_DMA_Start_IT+0x4d0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d101      	bne.n	8005ab8 <HAL_DMA_Start_IT+0x354>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <HAL_DMA_Start_IT+0x356>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01a      	beq.n	8005af4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ada:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a37      	ldr	r2, [pc, #220]	; (8005bd8 <HAL_DMA_Start_IT+0x474>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d04a      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a36      	ldr	r2, [pc, #216]	; (8005bdc <HAL_DMA_Start_IT+0x478>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d045      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a34      	ldr	r2, [pc, #208]	; (8005be0 <HAL_DMA_Start_IT+0x47c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d040      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a33      	ldr	r2, [pc, #204]	; (8005be4 <HAL_DMA_Start_IT+0x480>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d03b      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a31      	ldr	r2, [pc, #196]	; (8005be8 <HAL_DMA_Start_IT+0x484>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d036      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a30      	ldr	r2, [pc, #192]	; (8005bec <HAL_DMA_Start_IT+0x488>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d031      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2e      	ldr	r2, [pc, #184]	; (8005bf0 <HAL_DMA_Start_IT+0x48c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02c      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <HAL_DMA_Start_IT+0x490>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d027      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <HAL_DMA_Start_IT+0x494>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d022      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <HAL_DMA_Start_IT+0x498>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d01d      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <HAL_DMA_Start_IT+0x49c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <HAL_DMA_Start_IT+0x4a0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <HAL_DMA_Start_IT+0x4a4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a24      	ldr	r2, [pc, #144]	; (8005c0c <HAL_DMA_Start_IT+0x4a8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <HAL_DMA_Start_IT+0x4ac>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_DMA_Start_IT+0x430>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a21      	ldr	r2, [pc, #132]	; (8005c14 <HAL_DMA_Start_IT+0x4b0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <HAL_DMA_Start_IT+0x442>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e012      	b.n	8005bcc <HAL_DMA_Start_IT+0x468>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e009      	b.n	8005bcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40020010 	.word	0x40020010
 8005bdc:	40020028 	.word	0x40020028
 8005be0:	40020040 	.word	0x40020040
 8005be4:	40020058 	.word	0x40020058
 8005be8:	40020070 	.word	0x40020070
 8005bec:	40020088 	.word	0x40020088
 8005bf0:	400200a0 	.word	0x400200a0
 8005bf4:	400200b8 	.word	0x400200b8
 8005bf8:	40020410 	.word	0x40020410
 8005bfc:	40020428 	.word	0x40020428
 8005c00:	40020440 	.word	0x40020440
 8005c04:	40020458 	.word	0x40020458
 8005c08:	40020470 	.word	0x40020470
 8005c0c:	40020488 	.word	0x40020488
 8005c10:	400204a0 	.word	0x400204a0
 8005c14:	400204b8 	.word	0x400204b8
 8005c18:	58025408 	.word	0x58025408
 8005c1c:	5802541c 	.word	0x5802541c
 8005c20:	58025430 	.word	0x58025430
 8005c24:	58025444 	.word	0x58025444
 8005c28:	58025458 	.word	0x58025458
 8005c2c:	5802546c 	.word	0x5802546c
 8005c30:	58025480 	.word	0x58025480
 8005c34:	58025494 	.word	0x58025494

08005c38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005c40:	f7ff f91a 	bl	8004e78 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e2dc      	b.n	800620a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d008      	beq.n	8005c6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e2cd      	b.n	800620a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a76      	ldr	r2, [pc, #472]	; (8005e4c <HAL_DMA_Abort+0x214>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d04a      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a74      	ldr	r2, [pc, #464]	; (8005e50 <HAL_DMA_Abort+0x218>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d045      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a73      	ldr	r2, [pc, #460]	; (8005e54 <HAL_DMA_Abort+0x21c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d040      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a71      	ldr	r2, [pc, #452]	; (8005e58 <HAL_DMA_Abort+0x220>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d03b      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a70      	ldr	r2, [pc, #448]	; (8005e5c <HAL_DMA_Abort+0x224>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d036      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a6e      	ldr	r2, [pc, #440]	; (8005e60 <HAL_DMA_Abort+0x228>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d031      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6d      	ldr	r2, [pc, #436]	; (8005e64 <HAL_DMA_Abort+0x22c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d02c      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a6b      	ldr	r2, [pc, #428]	; (8005e68 <HAL_DMA_Abort+0x230>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d027      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a6a      	ldr	r2, [pc, #424]	; (8005e6c <HAL_DMA_Abort+0x234>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a68      	ldr	r2, [pc, #416]	; (8005e70 <HAL_DMA_Abort+0x238>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01d      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a67      	ldr	r2, [pc, #412]	; (8005e74 <HAL_DMA_Abort+0x23c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a65      	ldr	r2, [pc, #404]	; (8005e78 <HAL_DMA_Abort+0x240>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a64      	ldr	r2, [pc, #400]	; (8005e7c <HAL_DMA_Abort+0x244>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a62      	ldr	r2, [pc, #392]	; (8005e80 <HAL_DMA_Abort+0x248>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a61      	ldr	r2, [pc, #388]	; (8005e84 <HAL_DMA_Abort+0x24c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_DMA_Abort+0xd6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a5f      	ldr	r2, [pc, #380]	; (8005e88 <HAL_DMA_Abort+0x250>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_DMA_Abort+0xda>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_DMA_Abort+0xdc>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d013      	beq.n	8005d40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 021e 	bic.w	r2, r2, #30
 8005d26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e00a      	b.n	8005d56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 020e 	bic.w	r2, r2, #14
 8005d4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <HAL_DMA_Abort+0x214>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d072      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_DMA_Abort+0x218>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d06d      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a39      	ldr	r2, [pc, #228]	; (8005e54 <HAL_DMA_Abort+0x21c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d068      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a37      	ldr	r2, [pc, #220]	; (8005e58 <HAL_DMA_Abort+0x220>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d063      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a36      	ldr	r2, [pc, #216]	; (8005e5c <HAL_DMA_Abort+0x224>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d05e      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a34      	ldr	r2, [pc, #208]	; (8005e60 <HAL_DMA_Abort+0x228>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d059      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a33      	ldr	r2, [pc, #204]	; (8005e64 <HAL_DMA_Abort+0x22c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d054      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <HAL_DMA_Abort+0x230>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d04f      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a30      	ldr	r2, [pc, #192]	; (8005e6c <HAL_DMA_Abort+0x234>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d04a      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <HAL_DMA_Abort+0x238>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d045      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_DMA_Abort+0x23c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d040      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <HAL_DMA_Abort+0x240>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d03b      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_DMA_Abort+0x244>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d036      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <HAL_DMA_Abort+0x248>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d031      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <HAL_DMA_Abort+0x24c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d02c      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <HAL_DMA_Abort+0x250>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d027      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <HAL_DMA_Abort+0x254>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d022      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <HAL_DMA_Abort+0x258>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01d      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_DMA_Abort+0x25c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1f      	ldr	r2, [pc, #124]	; (8005e98 <HAL_DMA_Abort+0x260>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <HAL_DMA_Abort+0x264>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_DMA_Abort+0x268>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <HAL_DMA_Abort+0x26c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_DMA_Abort+0x20e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <HAL_DMA_Abort+0x270>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d132      	bne.n	8005eac <HAL_DMA_Abort+0x274>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e031      	b.n	8005eae <HAL_DMA_Abort+0x276>
 8005e4a:	bf00      	nop
 8005e4c:	40020010 	.word	0x40020010
 8005e50:	40020028 	.word	0x40020028
 8005e54:	40020040 	.word	0x40020040
 8005e58:	40020058 	.word	0x40020058
 8005e5c:	40020070 	.word	0x40020070
 8005e60:	40020088 	.word	0x40020088
 8005e64:	400200a0 	.word	0x400200a0
 8005e68:	400200b8 	.word	0x400200b8
 8005e6c:	40020410 	.word	0x40020410
 8005e70:	40020428 	.word	0x40020428
 8005e74:	40020440 	.word	0x40020440
 8005e78:	40020458 	.word	0x40020458
 8005e7c:	40020470 	.word	0x40020470
 8005e80:	40020488 	.word	0x40020488
 8005e84:	400204a0 	.word	0x400204a0
 8005e88:	400204b8 	.word	0x400204b8
 8005e8c:	58025408 	.word	0x58025408
 8005e90:	5802541c 	.word	0x5802541c
 8005e94:	58025430 	.word	0x58025430
 8005e98:	58025444 	.word	0x58025444
 8005e9c:	58025458 	.word	0x58025458
 8005ea0:	5802546c 	.word	0x5802546c
 8005ea4:	58025480 	.word	0x58025480
 8005ea8:	58025494 	.word	0x58025494
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a6d      	ldr	r2, [pc, #436]	; (800607c <HAL_DMA_Abort+0x444>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d04a      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a6b      	ldr	r2, [pc, #428]	; (8006080 <HAL_DMA_Abort+0x448>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d045      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a6a      	ldr	r2, [pc, #424]	; (8006084 <HAL_DMA_Abort+0x44c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d040      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a68      	ldr	r2, [pc, #416]	; (8006088 <HAL_DMA_Abort+0x450>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d03b      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a67      	ldr	r2, [pc, #412]	; (800608c <HAL_DMA_Abort+0x454>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d036      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a65      	ldr	r2, [pc, #404]	; (8006090 <HAL_DMA_Abort+0x458>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d031      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a64      	ldr	r2, [pc, #400]	; (8006094 <HAL_DMA_Abort+0x45c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d02c      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a62      	ldr	r2, [pc, #392]	; (8006098 <HAL_DMA_Abort+0x460>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d027      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a61      	ldr	r2, [pc, #388]	; (800609c <HAL_DMA_Abort+0x464>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a5f      	ldr	r2, [pc, #380]	; (80060a0 <HAL_DMA_Abort+0x468>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01d      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a5e      	ldr	r2, [pc, #376]	; (80060a4 <HAL_DMA_Abort+0x46c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a5c      	ldr	r2, [pc, #368]	; (80060a8 <HAL_DMA_Abort+0x470>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a5b      	ldr	r2, [pc, #364]	; (80060ac <HAL_DMA_Abort+0x474>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a59      	ldr	r2, [pc, #356]	; (80060b0 <HAL_DMA_Abort+0x478>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a58      	ldr	r2, [pc, #352]	; (80060b4 <HAL_DMA_Abort+0x47c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_DMA_Abort+0x32a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a56      	ldr	r2, [pc, #344]	; (80060b8 <HAL_DMA_Abort+0x480>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d108      	bne.n	8005f74 <HAL_DMA_Abort+0x33c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e007      	b.n	8005f84 <HAL_DMA_Abort+0x34c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f84:	e013      	b.n	8005fae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f86:	f7fe ff77 	bl	8004e78 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b05      	cmp	r3, #5
 8005f92:	d90c      	bls.n	8005fae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e12d      	b.n	800620a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	; (800607c <HAL_DMA_Abort+0x444>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d04a      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2d      	ldr	r2, [pc, #180]	; (8006080 <HAL_DMA_Abort+0x448>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d045      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2c      	ldr	r2, [pc, #176]	; (8006084 <HAL_DMA_Abort+0x44c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d040      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <HAL_DMA_Abort+0x450>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d03b      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a29      	ldr	r2, [pc, #164]	; (800608c <HAL_DMA_Abort+0x454>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d036      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <HAL_DMA_Abort+0x458>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a26      	ldr	r2, [pc, #152]	; (8006094 <HAL_DMA_Abort+0x45c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d02c      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a24      	ldr	r2, [pc, #144]	; (8006098 <HAL_DMA_Abort+0x460>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d027      	beq.n	800605a <HAL_DMA_Abort+0x422>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a23      	ldr	r2, [pc, #140]	; (800609c <HAL_DMA_Abort+0x464>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <HAL_DMA_Abort+0x468>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01d      	beq.n	800605a <HAL_DMA_Abort+0x422>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_DMA_Abort+0x46c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_DMA_Abort+0x470>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_DMA_Abort+0x474>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_DMA_Abort+0x422>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <HAL_DMA_Abort+0x478>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_DMA_Abort+0x47c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_DMA_Abort+0x422>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <HAL_DMA_Abort+0x480>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_DMA_Abort+0x426>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_DMA_Abort+0x428>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02b      	beq.n	80060bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006068:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	223f      	movs	r2, #63	; 0x3f
 8006074:	409a      	lsls	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	609a      	str	r2, [r3, #8]
 800607a:	e02a      	b.n	80060d2 <HAL_DMA_Abort+0x49a>
 800607c:	40020010 	.word	0x40020010
 8006080:	40020028 	.word	0x40020028
 8006084:	40020040 	.word	0x40020040
 8006088:	40020058 	.word	0x40020058
 800608c:	40020070 	.word	0x40020070
 8006090:	40020088 	.word	0x40020088
 8006094:	400200a0 	.word	0x400200a0
 8006098:	400200b8 	.word	0x400200b8
 800609c:	40020410 	.word	0x40020410
 80060a0:	40020428 	.word	0x40020428
 80060a4:	40020440 	.word	0x40020440
 80060a8:	40020458 	.word	0x40020458
 80060ac:	40020470 	.word	0x40020470
 80060b0:	40020488 	.word	0x40020488
 80060b4:	400204a0 	.word	0x400204a0
 80060b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2201      	movs	r2, #1
 80060cc:	409a      	lsls	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a4f      	ldr	r2, [pc, #316]	; (8006214 <HAL_DMA_Abort+0x5dc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d072      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a4d      	ldr	r2, [pc, #308]	; (8006218 <HAL_DMA_Abort+0x5e0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d06d      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a4c      	ldr	r2, [pc, #304]	; (800621c <HAL_DMA_Abort+0x5e4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d068      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a4a      	ldr	r2, [pc, #296]	; (8006220 <HAL_DMA_Abort+0x5e8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d063      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a49      	ldr	r2, [pc, #292]	; (8006224 <HAL_DMA_Abort+0x5ec>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d05e      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a47      	ldr	r2, [pc, #284]	; (8006228 <HAL_DMA_Abort+0x5f0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d059      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a46      	ldr	r2, [pc, #280]	; (800622c <HAL_DMA_Abort+0x5f4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d054      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a44      	ldr	r2, [pc, #272]	; (8006230 <HAL_DMA_Abort+0x5f8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d04f      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a43      	ldr	r2, [pc, #268]	; (8006234 <HAL_DMA_Abort+0x5fc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d04a      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a41      	ldr	r2, [pc, #260]	; (8006238 <HAL_DMA_Abort+0x600>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d045      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a40      	ldr	r2, [pc, #256]	; (800623c <HAL_DMA_Abort+0x604>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d040      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3e      	ldr	r2, [pc, #248]	; (8006240 <HAL_DMA_Abort+0x608>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d03b      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a3d      	ldr	r2, [pc, #244]	; (8006244 <HAL_DMA_Abort+0x60c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d036      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3b      	ldr	r2, [pc, #236]	; (8006248 <HAL_DMA_Abort+0x610>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d031      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a3a      	ldr	r2, [pc, #232]	; (800624c <HAL_DMA_Abort+0x614>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d02c      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a38      	ldr	r2, [pc, #224]	; (8006250 <HAL_DMA_Abort+0x618>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d027      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a37      	ldr	r2, [pc, #220]	; (8006254 <HAL_DMA_Abort+0x61c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d022      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a35      	ldr	r2, [pc, #212]	; (8006258 <HAL_DMA_Abort+0x620>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d01d      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a34      	ldr	r2, [pc, #208]	; (800625c <HAL_DMA_Abort+0x624>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d018      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a32      	ldr	r2, [pc, #200]	; (8006260 <HAL_DMA_Abort+0x628>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a31      	ldr	r2, [pc, #196]	; (8006264 <HAL_DMA_Abort+0x62c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2f      	ldr	r2, [pc, #188]	; (8006268 <HAL_DMA_Abort+0x630>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a2e      	ldr	r2, [pc, #184]	; (800626c <HAL_DMA_Abort+0x634>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_DMA_Abort+0x58a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a2c      	ldr	r2, [pc, #176]	; (8006270 <HAL_DMA_Abort+0x638>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d101      	bne.n	80061c6 <HAL_DMA_Abort+0x58e>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <HAL_DMA_Abort+0x590>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80061d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40020010 	.word	0x40020010
 8006218:	40020028 	.word	0x40020028
 800621c:	40020040 	.word	0x40020040
 8006220:	40020058 	.word	0x40020058
 8006224:	40020070 	.word	0x40020070
 8006228:	40020088 	.word	0x40020088
 800622c:	400200a0 	.word	0x400200a0
 8006230:	400200b8 	.word	0x400200b8
 8006234:	40020410 	.word	0x40020410
 8006238:	40020428 	.word	0x40020428
 800623c:	40020440 	.word	0x40020440
 8006240:	40020458 	.word	0x40020458
 8006244:	40020470 	.word	0x40020470
 8006248:	40020488 	.word	0x40020488
 800624c:	400204a0 	.word	0x400204a0
 8006250:	400204b8 	.word	0x400204b8
 8006254:	58025408 	.word	0x58025408
 8006258:	5802541c 	.word	0x5802541c
 800625c:	58025430 	.word	0x58025430
 8006260:	58025444 	.word	0x58025444
 8006264:	58025458 	.word	0x58025458
 8006268:	5802546c 	.word	0x5802546c
 800626c:	58025480 	.word	0x58025480
 8006270:	58025494 	.word	0x58025494

08006274 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e237      	b.n	80066f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d004      	beq.n	800629c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2280      	movs	r2, #128	; 0x80
 8006296:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e22c      	b.n	80066f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a5c      	ldr	r2, [pc, #368]	; (8006414 <HAL_DMA_Abort_IT+0x1a0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04a      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5b      	ldr	r2, [pc, #364]	; (8006418 <HAL_DMA_Abort_IT+0x1a4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d045      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a59      	ldr	r2, [pc, #356]	; (800641c <HAL_DMA_Abort_IT+0x1a8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d040      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a58      	ldr	r2, [pc, #352]	; (8006420 <HAL_DMA_Abort_IT+0x1ac>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d03b      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a56      	ldr	r2, [pc, #344]	; (8006424 <HAL_DMA_Abort_IT+0x1b0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d036      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a55      	ldr	r2, [pc, #340]	; (8006428 <HAL_DMA_Abort_IT+0x1b4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d031      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a53      	ldr	r2, [pc, #332]	; (800642c <HAL_DMA_Abort_IT+0x1b8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02c      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a52      	ldr	r2, [pc, #328]	; (8006430 <HAL_DMA_Abort_IT+0x1bc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d027      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a50      	ldr	r2, [pc, #320]	; (8006434 <HAL_DMA_Abort_IT+0x1c0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d022      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a4f      	ldr	r2, [pc, #316]	; (8006438 <HAL_DMA_Abort_IT+0x1c4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d01d      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a4d      	ldr	r2, [pc, #308]	; (800643c <HAL_DMA_Abort_IT+0x1c8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d018      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4c      	ldr	r2, [pc, #304]	; (8006440 <HAL_DMA_Abort_IT+0x1cc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a4a      	ldr	r2, [pc, #296]	; (8006444 <HAL_DMA_Abort_IT+0x1d0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00e      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a49      	ldr	r2, [pc, #292]	; (8006448 <HAL_DMA_Abort_IT+0x1d4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d009      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a47      	ldr	r2, [pc, #284]	; (800644c <HAL_DMA_Abort_IT+0x1d8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_DMA_Abort_IT+0xc8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a46      	ldr	r2, [pc, #280]	; (8006450 <HAL_DMA_Abort_IT+0x1dc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_DMA_Abort_IT+0xcc>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_DMA_Abort_IT+0xce>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8086 	beq.w	8006454 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2204      	movs	r2, #4
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a2f      	ldr	r2, [pc, #188]	; (8006414 <HAL_DMA_Abort_IT+0x1a0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d04a      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2e      	ldr	r2, [pc, #184]	; (8006418 <HAL_DMA_Abort_IT+0x1a4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d045      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a2c      	ldr	r2, [pc, #176]	; (800641c <HAL_DMA_Abort_IT+0x1a8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d040      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2b      	ldr	r2, [pc, #172]	; (8006420 <HAL_DMA_Abort_IT+0x1ac>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d03b      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a29      	ldr	r2, [pc, #164]	; (8006424 <HAL_DMA_Abort_IT+0x1b0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d036      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a28      	ldr	r2, [pc, #160]	; (8006428 <HAL_DMA_Abort_IT+0x1b4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d031      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <HAL_DMA_Abort_IT+0x1b8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02c      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a25      	ldr	r2, [pc, #148]	; (8006430 <HAL_DMA_Abort_IT+0x1bc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d027      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a23      	ldr	r2, [pc, #140]	; (8006434 <HAL_DMA_Abort_IT+0x1c0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a22      	ldr	r2, [pc, #136]	; (8006438 <HAL_DMA_Abort_IT+0x1c4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <HAL_DMA_Abort_IT+0x1c8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <HAL_DMA_Abort_IT+0x1cc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <HAL_DMA_Abort_IT+0x1d0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_DMA_Abort_IT+0x1d4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_DMA_Abort_IT+0x1d8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x17c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a19      	ldr	r2, [pc, #100]	; (8006450 <HAL_DMA_Abort_IT+0x1dc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_DMA_Abort_IT+0x18e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0201 	bic.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e178      	b.n	80066f4 <HAL_DMA_Abort_IT+0x480>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e16f      	b.n	80066f4 <HAL_DMA_Abort_IT+0x480>
 8006414:	40020010 	.word	0x40020010
 8006418:	40020028 	.word	0x40020028
 800641c:	40020040 	.word	0x40020040
 8006420:	40020058 	.word	0x40020058
 8006424:	40020070 	.word	0x40020070
 8006428:	40020088 	.word	0x40020088
 800642c:	400200a0 	.word	0x400200a0
 8006430:	400200b8 	.word	0x400200b8
 8006434:	40020410 	.word	0x40020410
 8006438:	40020428 	.word	0x40020428
 800643c:	40020440 	.word	0x40020440
 8006440:	40020458 	.word	0x40020458
 8006444:	40020470 	.word	0x40020470
 8006448:	40020488 	.word	0x40020488
 800644c:	400204a0 	.word	0x400204a0
 8006450:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 020e 	bic.w	r2, r2, #14
 8006462:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6c      	ldr	r2, [pc, #432]	; (800661c <HAL_DMA_Abort_IT+0x3a8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04a      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a6b      	ldr	r2, [pc, #428]	; (8006620 <HAL_DMA_Abort_IT+0x3ac>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d045      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a69      	ldr	r2, [pc, #420]	; (8006624 <HAL_DMA_Abort_IT+0x3b0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d040      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a68      	ldr	r2, [pc, #416]	; (8006628 <HAL_DMA_Abort_IT+0x3b4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d03b      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a66      	ldr	r2, [pc, #408]	; (800662c <HAL_DMA_Abort_IT+0x3b8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d036      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a65      	ldr	r2, [pc, #404]	; (8006630 <HAL_DMA_Abort_IT+0x3bc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d031      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a63      	ldr	r2, [pc, #396]	; (8006634 <HAL_DMA_Abort_IT+0x3c0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02c      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a62      	ldr	r2, [pc, #392]	; (8006638 <HAL_DMA_Abort_IT+0x3c4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a60      	ldr	r2, [pc, #384]	; (800663c <HAL_DMA_Abort_IT+0x3c8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5f      	ldr	r2, [pc, #380]	; (8006640 <HAL_DMA_Abort_IT+0x3cc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5d      	ldr	r2, [pc, #372]	; (8006644 <HAL_DMA_Abort_IT+0x3d0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a5c      	ldr	r2, [pc, #368]	; (8006648 <HAL_DMA_Abort_IT+0x3d4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5a      	ldr	r2, [pc, #360]	; (800664c <HAL_DMA_Abort_IT+0x3d8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a59      	ldr	r2, [pc, #356]	; (8006650 <HAL_DMA_Abort_IT+0x3dc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a57      	ldr	r2, [pc, #348]	; (8006654 <HAL_DMA_Abort_IT+0x3e0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_DMA_Abort_IT+0x290>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a56      	ldr	r2, [pc, #344]	; (8006658 <HAL_DMA_Abort_IT+0x3e4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <HAL_DMA_Abort_IT+0x2a2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e007      	b.n	8006526 <HAL_DMA_Abort_IT+0x2b2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0201 	bic.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a3c      	ldr	r2, [pc, #240]	; (800661c <HAL_DMA_Abort_IT+0x3a8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d072      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a3a      	ldr	r2, [pc, #232]	; (8006620 <HAL_DMA_Abort_IT+0x3ac>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d06d      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a39      	ldr	r2, [pc, #228]	; (8006624 <HAL_DMA_Abort_IT+0x3b0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d068      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a37      	ldr	r2, [pc, #220]	; (8006628 <HAL_DMA_Abort_IT+0x3b4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d063      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a36      	ldr	r2, [pc, #216]	; (800662c <HAL_DMA_Abort_IT+0x3b8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d05e      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a34      	ldr	r2, [pc, #208]	; (8006630 <HAL_DMA_Abort_IT+0x3bc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d059      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a33      	ldr	r2, [pc, #204]	; (8006634 <HAL_DMA_Abort_IT+0x3c0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d054      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a31      	ldr	r2, [pc, #196]	; (8006638 <HAL_DMA_Abort_IT+0x3c4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d04f      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a30      	ldr	r2, [pc, #192]	; (800663c <HAL_DMA_Abort_IT+0x3c8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d04a      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <HAL_DMA_Abort_IT+0x3cc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d045      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <HAL_DMA_Abort_IT+0x3d0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d040      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <HAL_DMA_Abort_IT+0x3d4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d03b      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2a      	ldr	r2, [pc, #168]	; (800664c <HAL_DMA_Abort_IT+0x3d8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d036      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <HAL_DMA_Abort_IT+0x3dc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d031      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a27      	ldr	r2, [pc, #156]	; (8006654 <HAL_DMA_Abort_IT+0x3e0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d02c      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a25      	ldr	r2, [pc, #148]	; (8006658 <HAL_DMA_Abort_IT+0x3e4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d027      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a24      	ldr	r2, [pc, #144]	; (800665c <HAL_DMA_Abort_IT+0x3e8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d022      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <HAL_DMA_Abort_IT+0x3ec>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01d      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a21      	ldr	r2, [pc, #132]	; (8006664 <HAL_DMA_Abort_IT+0x3f0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d018      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <HAL_DMA_Abort_IT+0x3f4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1e      	ldr	r2, [pc, #120]	; (800666c <HAL_DMA_Abort_IT+0x3f8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <HAL_DMA_Abort_IT+0x3fc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d009      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <HAL_DMA_Abort_IT+0x400>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_DMA_Abort_IT+0x3a2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a19      	ldr	r2, [pc, #100]	; (8006678 <HAL_DMA_Abort_IT+0x404>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d132      	bne.n	800667c <HAL_DMA_Abort_IT+0x408>
 8006616:	2301      	movs	r3, #1
 8006618:	e031      	b.n	800667e <HAL_DMA_Abort_IT+0x40a>
 800661a:	bf00      	nop
 800661c:	40020010 	.word	0x40020010
 8006620:	40020028 	.word	0x40020028
 8006624:	40020040 	.word	0x40020040
 8006628:	40020058 	.word	0x40020058
 800662c:	40020070 	.word	0x40020070
 8006630:	40020088 	.word	0x40020088
 8006634:	400200a0 	.word	0x400200a0
 8006638:	400200b8 	.word	0x400200b8
 800663c:	40020410 	.word	0x40020410
 8006640:	40020428 	.word	0x40020428
 8006644:	40020440 	.word	0x40020440
 8006648:	40020458 	.word	0x40020458
 800664c:	40020470 	.word	0x40020470
 8006650:	40020488 	.word	0x40020488
 8006654:	400204a0 	.word	0x400204a0
 8006658:	400204b8 	.word	0x400204b8
 800665c:	58025408 	.word	0x58025408
 8006660:	5802541c 	.word	0x5802541c
 8006664:	58025430 	.word	0x58025430
 8006668:	58025444 	.word	0x58025444
 800666c:	58025458 	.word	0x58025458
 8006670:	5802546c 	.word	0x5802546c
 8006674:	58025480 	.word	0x58025480
 8006678:	58025494 	.word	0x58025494
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d028      	beq.n	80066d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006690:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	2201      	movs	r2, #1
 80066a2:	409a      	lsls	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800670c:	4b67      	ldr	r3, [pc, #412]	; (80068ac <HAL_DMA_IRQHandler+0x1ac>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a67      	ldr	r2, [pc, #412]	; (80068b0 <HAL_DMA_IRQHandler+0x1b0>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	0a9b      	lsrs	r3, r3, #10
 8006718:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5f      	ldr	r2, [pc, #380]	; (80068b4 <HAL_DMA_IRQHandler+0x1b4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d04a      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d045      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5c      	ldr	r2, [pc, #368]	; (80068bc <HAL_DMA_IRQHandler+0x1bc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d040      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5a      	ldr	r2, [pc, #360]	; (80068c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a59      	ldr	r2, [pc, #356]	; (80068c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a57      	ldr	r2, [pc, #348]	; (80068c8 <HAL_DMA_IRQHandler+0x1c8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a56      	ldr	r2, [pc, #344]	; (80068cc <HAL_DMA_IRQHandler+0x1cc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d02c      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a54      	ldr	r2, [pc, #336]	; (80068d0 <HAL_DMA_IRQHandler+0x1d0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a53      	ldr	r2, [pc, #332]	; (80068d4 <HAL_DMA_IRQHandler+0x1d4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a51      	ldr	r2, [pc, #324]	; (80068d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01d      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a50      	ldr	r2, [pc, #320]	; (80068dc <HAL_DMA_IRQHandler+0x1dc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a4e      	ldr	r2, [pc, #312]	; (80068e0 <HAL_DMA_IRQHandler+0x1e0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4d      	ldr	r2, [pc, #308]	; (80068e4 <HAL_DMA_IRQHandler+0x1e4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a4b      	ldr	r2, [pc, #300]	; (80068e8 <HAL_DMA_IRQHandler+0x1e8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a4a      	ldr	r2, [pc, #296]	; (80068ec <HAL_DMA_IRQHandler+0x1ec>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_DMA_IRQHandler+0xd2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a48      	ldr	r2, [pc, #288]	; (80068f0 <HAL_DMA_IRQHandler+0x1f0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d101      	bne.n	80067d6 <HAL_DMA_IRQHandler+0xd6>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <HAL_DMA_IRQHandler+0xd8>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 842b 	beq.w	8007034 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2208      	movs	r2, #8
 80067e8:	409a      	lsls	r2, r3
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80a2 	beq.w	8006938 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2e      	ldr	r2, [pc, #184]	; (80068b4 <HAL_DMA_IRQHandler+0x1b4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d04a      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2d      	ldr	r2, [pc, #180]	; (80068b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d045      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2b      	ldr	r2, [pc, #172]	; (80068bc <HAL_DMA_IRQHandler+0x1bc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d040      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d03b      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d036      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <HAL_DMA_IRQHandler+0x1c8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d031      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_DMA_IRQHandler+0x1cc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02c      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <HAL_DMA_IRQHandler+0x1d0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d027      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_DMA_IRQHandler+0x1d4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d022      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01d      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <HAL_DMA_IRQHandler+0x1dc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d018      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_DMA_IRQHandler+0x1e0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_DMA_IRQHandler+0x1e4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00e      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_DMA_IRQHandler+0x1e8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a19      	ldr	r2, [pc, #100]	; (80068ec <HAL_DMA_IRQHandler+0x1ec>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_DMA_IRQHandler+0x194>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_DMA_IRQHandler+0x1f0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d12f      	bne.n	80068f4 <HAL_DMA_IRQHandler+0x1f4>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf14      	ite	ne
 80068a2:	2301      	movne	r3, #1
 80068a4:	2300      	moveq	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	e02e      	b.n	8006908 <HAL_DMA_IRQHandler+0x208>
 80068aa:	bf00      	nop
 80068ac:	24000000 	.word	0x24000000
 80068b0:	1b4e81b5 	.word	0x1b4e81b5
 80068b4:	40020010 	.word	0x40020010
 80068b8:	40020028 	.word	0x40020028
 80068bc:	40020040 	.word	0x40020040
 80068c0:	40020058 	.word	0x40020058
 80068c4:	40020070 	.word	0x40020070
 80068c8:	40020088 	.word	0x40020088
 80068cc:	400200a0 	.word	0x400200a0
 80068d0:	400200b8 	.word	0x400200b8
 80068d4:	40020410 	.word	0x40020410
 80068d8:	40020428 	.word	0x40020428
 80068dc:	40020440 	.word	0x40020440
 80068e0:	40020458 	.word	0x40020458
 80068e4:	40020470 	.word	0x40020470
 80068e8:	40020488 	.word	0x40020488
 80068ec:	400204a0 	.word	0x400204a0
 80068f0:	400204b8 	.word	0x400204b8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d015      	beq.n	8006938 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0204 	bic.w	r2, r2, #4
 800691a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	2208      	movs	r2, #8
 8006926:	409a      	lsls	r2, r3
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006930:	f043 0201 	orr.w	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d06e      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a69      	ldr	r2, [pc, #420]	; (8006af8 <HAL_DMA_IRQHandler+0x3f8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d04a      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a67      	ldr	r2, [pc, #412]	; (8006afc <HAL_DMA_IRQHandler+0x3fc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d045      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a66      	ldr	r2, [pc, #408]	; (8006b00 <HAL_DMA_IRQHandler+0x400>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d040      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a64      	ldr	r2, [pc, #400]	; (8006b04 <HAL_DMA_IRQHandler+0x404>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d03b      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a63      	ldr	r2, [pc, #396]	; (8006b08 <HAL_DMA_IRQHandler+0x408>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d036      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a61      	ldr	r2, [pc, #388]	; (8006b0c <HAL_DMA_IRQHandler+0x40c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d031      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a60      	ldr	r2, [pc, #384]	; (8006b10 <HAL_DMA_IRQHandler+0x410>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d02c      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a5e      	ldr	r2, [pc, #376]	; (8006b14 <HAL_DMA_IRQHandler+0x414>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d027      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a5d      	ldr	r2, [pc, #372]	; (8006b18 <HAL_DMA_IRQHandler+0x418>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d022      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a5b      	ldr	r2, [pc, #364]	; (8006b1c <HAL_DMA_IRQHandler+0x41c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d01d      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a5a      	ldr	r2, [pc, #360]	; (8006b20 <HAL_DMA_IRQHandler+0x420>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d018      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a58      	ldr	r2, [pc, #352]	; (8006b24 <HAL_DMA_IRQHandler+0x424>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d013      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a57      	ldr	r2, [pc, #348]	; (8006b28 <HAL_DMA_IRQHandler+0x428>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00e      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a55      	ldr	r2, [pc, #340]	; (8006b2c <HAL_DMA_IRQHandler+0x42c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a54      	ldr	r2, [pc, #336]	; (8006b30 <HAL_DMA_IRQHandler+0x430>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_DMA_IRQHandler+0x2ee>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a52      	ldr	r2, [pc, #328]	; (8006b34 <HAL_DMA_IRQHandler+0x434>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d10a      	bne.n	8006a04 <HAL_DMA_IRQHandler+0x304>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e003      	b.n	8006a0c <HAL_DMA_IRQHandler+0x30c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2201      	movs	r2, #1
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	f043 0202 	orr.w	r2, r3, #2
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2204      	movs	r2, #4
 8006a36:	409a      	lsls	r2, r3
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 808f 	beq.w	8006b60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a2c      	ldr	r2, [pc, #176]	; (8006af8 <HAL_DMA_IRQHandler+0x3f8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04a      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2a      	ldr	r2, [pc, #168]	; (8006afc <HAL_DMA_IRQHandler+0x3fc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <HAL_DMA_IRQHandler+0x400>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a27      	ldr	r2, [pc, #156]	; (8006b04 <HAL_DMA_IRQHandler+0x404>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d03b      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <HAL_DMA_IRQHandler+0x408>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d036      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <HAL_DMA_IRQHandler+0x40c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d031      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <HAL_DMA_IRQHandler+0x410>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02c      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <HAL_DMA_IRQHandler+0x414>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d027      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <HAL_DMA_IRQHandler+0x418>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <HAL_DMA_IRQHandler+0x41c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <HAL_DMA_IRQHandler+0x420>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <HAL_DMA_IRQHandler+0x424>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1a      	ldr	r2, [pc, #104]	; (8006b28 <HAL_DMA_IRQHandler+0x428>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_DMA_IRQHandler+0x42c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a17      	ldr	r2, [pc, #92]	; (8006b30 <HAL_DMA_IRQHandler+0x430>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x3e2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <HAL_DMA_IRQHandler+0x434>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d12a      	bne.n	8006b38 <HAL_DMA_IRQHandler+0x438>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	e023      	b.n	8006b40 <HAL_DMA_IRQHandler+0x440>
 8006af8:	40020010 	.word	0x40020010
 8006afc:	40020028 	.word	0x40020028
 8006b00:	40020040 	.word	0x40020040
 8006b04:	40020058 	.word	0x40020058
 8006b08:	40020070 	.word	0x40020070
 8006b0c:	40020088 	.word	0x40020088
 8006b10:	400200a0 	.word	0x400200a0
 8006b14:	400200b8 	.word	0x400200b8
 8006b18:	40020410 	.word	0x40020410
 8006b1c:	40020428 	.word	0x40020428
 8006b20:	40020440 	.word	0x40020440
 8006b24:	40020458 	.word	0x40020458
 8006b28:	40020470 	.word	0x40020470
 8006b2c:	40020488 	.word	0x40020488
 8006b30:	400204a0 	.word	0x400204a0
 8006b34:	400204b8 	.word	0x400204b8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	409a      	lsls	r2, r3
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	f043 0204 	orr.w	r2, r3, #4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2210      	movs	r2, #16
 8006b6a:	409a      	lsls	r2, r3
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80a6 	beq.w	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a85      	ldr	r2, [pc, #532]	; (8006d90 <HAL_DMA_IRQHandler+0x690>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d04a      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a83      	ldr	r2, [pc, #524]	; (8006d94 <HAL_DMA_IRQHandler+0x694>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d045      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a82      	ldr	r2, [pc, #520]	; (8006d98 <HAL_DMA_IRQHandler+0x698>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d040      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a80      	ldr	r2, [pc, #512]	; (8006d9c <HAL_DMA_IRQHandler+0x69c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d03b      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a7f      	ldr	r2, [pc, #508]	; (8006da0 <HAL_DMA_IRQHandler+0x6a0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d036      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a7d      	ldr	r2, [pc, #500]	; (8006da4 <HAL_DMA_IRQHandler+0x6a4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d031      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a7c      	ldr	r2, [pc, #496]	; (8006da8 <HAL_DMA_IRQHandler+0x6a8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a7a      	ldr	r2, [pc, #488]	; (8006dac <HAL_DMA_IRQHandler+0x6ac>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d027      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a79      	ldr	r2, [pc, #484]	; (8006db0 <HAL_DMA_IRQHandler+0x6b0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a77      	ldr	r2, [pc, #476]	; (8006db4 <HAL_DMA_IRQHandler+0x6b4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a76      	ldr	r2, [pc, #472]	; (8006db8 <HAL_DMA_IRQHandler+0x6b8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a74      	ldr	r2, [pc, #464]	; (8006dbc <HAL_DMA_IRQHandler+0x6bc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a73      	ldr	r2, [pc, #460]	; (8006dc0 <HAL_DMA_IRQHandler+0x6c0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a71      	ldr	r2, [pc, #452]	; (8006dc4 <HAL_DMA_IRQHandler+0x6c4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a70      	ldr	r2, [pc, #448]	; (8006dc8 <HAL_DMA_IRQHandler+0x6c8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x516>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a6e      	ldr	r2, [pc, #440]	; (8006dcc <HAL_DMA_IRQHandler+0x6cc>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d10a      	bne.n	8006c2c <HAL_DMA_IRQHandler+0x52c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e009      	b.n	8006c40 <HAL_DMA_IRQHandler+0x540>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bf14      	ite	ne
 8006c3a:	2301      	movne	r3, #1
 8006c3c:	2300      	moveq	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d03e      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d018      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d108      	bne.n	8006c82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d024      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
 8006c80:	e01f      	b.n	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01b      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	e016      	b.n	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d107      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0208 	bic.w	r2, r2, #8
 8006cb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2220      	movs	r2, #32
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8110 	beq.w	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <HAL_DMA_IRQHandler+0x690>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d04a      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2b      	ldr	r2, [pc, #172]	; (8006d94 <HAL_DMA_IRQHandler+0x694>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d045      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a29      	ldr	r2, [pc, #164]	; (8006d98 <HAL_DMA_IRQHandler+0x698>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d040      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a28      	ldr	r2, [pc, #160]	; (8006d9c <HAL_DMA_IRQHandler+0x69c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d03b      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <HAL_DMA_IRQHandler+0x6a0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d036      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a25      	ldr	r2, [pc, #148]	; (8006da4 <HAL_DMA_IRQHandler+0x6a4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d031      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a23      	ldr	r2, [pc, #140]	; (8006da8 <HAL_DMA_IRQHandler+0x6a8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d02c      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a22      	ldr	r2, [pc, #136]	; (8006dac <HAL_DMA_IRQHandler+0x6ac>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d027      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a20      	ldr	r2, [pc, #128]	; (8006db0 <HAL_DMA_IRQHandler+0x6b0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d022      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1f      	ldr	r2, [pc, #124]	; (8006db4 <HAL_DMA_IRQHandler+0x6b4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d01d      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <HAL_DMA_IRQHandler+0x6b8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d018      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <HAL_DMA_IRQHandler+0x6bc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1a      	ldr	r2, [pc, #104]	; (8006dc0 <HAL_DMA_IRQHandler+0x6c0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00e      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a19      	ldr	r2, [pc, #100]	; (8006dc4 <HAL_DMA_IRQHandler+0x6c4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d009      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <HAL_DMA_IRQHandler+0x6c8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x678>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <HAL_DMA_IRQHandler+0x6cc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d12b      	bne.n	8006dd0 <HAL_DMA_IRQHandler+0x6d0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bf14      	ite	ne
 8006d86:	2301      	movne	r3, #1
 8006d88:	2300      	moveq	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e02a      	b.n	8006de4 <HAL_DMA_IRQHandler+0x6e4>
 8006d8e:	bf00      	nop
 8006d90:	40020010 	.word	0x40020010
 8006d94:	40020028 	.word	0x40020028
 8006d98:	40020040 	.word	0x40020040
 8006d9c:	40020058 	.word	0x40020058
 8006da0:	40020070 	.word	0x40020070
 8006da4:	40020088 	.word	0x40020088
 8006da8:	400200a0 	.word	0x400200a0
 8006dac:	400200b8 	.word	0x400200b8
 8006db0:	40020410 	.word	0x40020410
 8006db4:	40020428 	.word	0x40020428
 8006db8:	40020440 	.word	0x40020440
 8006dbc:	40020458 	.word	0x40020458
 8006dc0:	40020470 	.word	0x40020470
 8006dc4:	40020488 	.word	0x40020488
 8006dc8:	400204a0 	.word	0x400204a0
 8006dcc:	400204b8 	.word	0x400204b8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bf14      	ite	ne
 8006dde:	2301      	movne	r3, #1
 8006de0:	2300      	moveq	r3, #0
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8087 	beq.w	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2220      	movs	r2, #32
 8006df4:	409a      	lsls	r2, r3
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d139      	bne.n	8006e7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0216 	bic.w	r2, r2, #22
 8006e14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <HAL_DMA_IRQHandler+0x736>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d007      	beq.n	8006e46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0208 	bic.w	r2, r2, #8
 8006e44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	223f      	movs	r2, #63	; 0x3f
 8006e50:	409a      	lsls	r2, r3
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 834a 	beq.w	8007504 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
          }
          return;
 8006e78:	e344      	b.n	8007504 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d108      	bne.n	8006ea8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d02c      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
 8006ea6:	e027      	b.n	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
 8006eb8:	e01e      	b.n	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10f      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0210 	bic.w	r2, r2, #16
 8006ed6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8306 	beq.w	800750e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8088 	beq.w	8007020 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2204      	movs	r2, #4
 8006f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a7a      	ldr	r2, [pc, #488]	; (8007108 <HAL_DMA_IRQHandler+0xa08>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d04a      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a79      	ldr	r2, [pc, #484]	; (800710c <HAL_DMA_IRQHandler+0xa0c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d045      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a77      	ldr	r2, [pc, #476]	; (8007110 <HAL_DMA_IRQHandler+0xa10>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d040      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a76      	ldr	r2, [pc, #472]	; (8007114 <HAL_DMA_IRQHandler+0xa14>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d03b      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a74      	ldr	r2, [pc, #464]	; (8007118 <HAL_DMA_IRQHandler+0xa18>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d036      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a73      	ldr	r2, [pc, #460]	; (800711c <HAL_DMA_IRQHandler+0xa1c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d031      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a71      	ldr	r2, [pc, #452]	; (8007120 <HAL_DMA_IRQHandler+0xa20>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d02c      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a70      	ldr	r2, [pc, #448]	; (8007124 <HAL_DMA_IRQHandler+0xa24>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d027      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6e      	ldr	r2, [pc, #440]	; (8007128 <HAL_DMA_IRQHandler+0xa28>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d022      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6d      	ldr	r2, [pc, #436]	; (800712c <HAL_DMA_IRQHandler+0xa2c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d01d      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a6b      	ldr	r2, [pc, #428]	; (8007130 <HAL_DMA_IRQHandler+0xa30>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a6a      	ldr	r2, [pc, #424]	; (8007134 <HAL_DMA_IRQHandler+0xa34>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a68      	ldr	r2, [pc, #416]	; (8007138 <HAL_DMA_IRQHandler+0xa38>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a67      	ldr	r2, [pc, #412]	; (800713c <HAL_DMA_IRQHandler+0xa3c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a65      	ldr	r2, [pc, #404]	; (8007140 <HAL_DMA_IRQHandler+0xa40>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x8b8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a64      	ldr	r2, [pc, #400]	; (8007144 <HAL_DMA_IRQHandler+0xa44>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <HAL_DMA_IRQHandler+0x8ca>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	e007      	b.n	8006fda <HAL_DMA_IRQHandler+0x8da>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d307      	bcc.n	8006ff6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f2      	bne.n	8006fda <HAL_DMA_IRQHandler+0x8da>
 8006ff4:	e000      	b.n	8006ff8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006ff6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2203      	movs	r2, #3
 800700a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800700e:	e003      	b.n	8007018 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8272 	beq.w	800750e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
 8007032:	e26c      	b.n	800750e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a43      	ldr	r2, [pc, #268]	; (8007148 <HAL_DMA_IRQHandler+0xa48>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d022      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a42      	ldr	r2, [pc, #264]	; (800714c <HAL_DMA_IRQHandler+0xa4c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d01d      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a40      	ldr	r2, [pc, #256]	; (8007150 <HAL_DMA_IRQHandler+0xa50>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d018      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a3f      	ldr	r2, [pc, #252]	; (8007154 <HAL_DMA_IRQHandler+0xa54>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a3d      	ldr	r2, [pc, #244]	; (8007158 <HAL_DMA_IRQHandler+0xa58>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00e      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a3c      	ldr	r2, [pc, #240]	; (800715c <HAL_DMA_IRQHandler+0xa5c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d009      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3a      	ldr	r2, [pc, #232]	; (8007160 <HAL_DMA_IRQHandler+0xa60>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <HAL_DMA_IRQHandler+0x984>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a39      	ldr	r2, [pc, #228]	; (8007164 <HAL_DMA_IRQHandler+0xa64>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d101      	bne.n	8007088 <HAL_DMA_IRQHandler+0x988>
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <HAL_DMA_IRQHandler+0x98a>
 8007088:	2300      	movs	r3, #0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 823f 	beq.w	800750e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2204      	movs	r2, #4
 80070a2:	409a      	lsls	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80cd 	beq.w	8007248 <HAL_DMA_IRQHandler+0xb48>
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 80c7 	beq.w	8007248 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2204      	movs	r2, #4
 80070c4:	409a      	lsls	r2, r3
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d049      	beq.n	8007168 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8210 	beq.w	8007508 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f0:	e20a      	b.n	8007508 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8206 	beq.w	8007508 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007104:	e200      	b.n	8007508 <HAL_DMA_IRQHandler+0xe08>
 8007106:	bf00      	nop
 8007108:	40020010 	.word	0x40020010
 800710c:	40020028 	.word	0x40020028
 8007110:	40020040 	.word	0x40020040
 8007114:	40020058 	.word	0x40020058
 8007118:	40020070 	.word	0x40020070
 800711c:	40020088 	.word	0x40020088
 8007120:	400200a0 	.word	0x400200a0
 8007124:	400200b8 	.word	0x400200b8
 8007128:	40020410 	.word	0x40020410
 800712c:	40020428 	.word	0x40020428
 8007130:	40020440 	.word	0x40020440
 8007134:	40020458 	.word	0x40020458
 8007138:	40020470 	.word	0x40020470
 800713c:	40020488 	.word	0x40020488
 8007140:	400204a0 	.word	0x400204a0
 8007144:	400204b8 	.word	0x400204b8
 8007148:	58025408 	.word	0x58025408
 800714c:	5802541c 	.word	0x5802541c
 8007150:	58025430 	.word	0x58025430
 8007154:	58025444 	.word	0x58025444
 8007158:	58025458 	.word	0x58025458
 800715c:	5802546c 	.word	0x5802546c
 8007160:	58025480 	.word	0x58025480
 8007164:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d160      	bne.n	8007234 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a7f      	ldr	r2, [pc, #508]	; (8007374 <HAL_DMA_IRQHandler+0xc74>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d04a      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a7d      	ldr	r2, [pc, #500]	; (8007378 <HAL_DMA_IRQHandler+0xc78>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d045      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a7c      	ldr	r2, [pc, #496]	; (800737c <HAL_DMA_IRQHandler+0xc7c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d040      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a7a      	ldr	r2, [pc, #488]	; (8007380 <HAL_DMA_IRQHandler+0xc80>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d03b      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a79      	ldr	r2, [pc, #484]	; (8007384 <HAL_DMA_IRQHandler+0xc84>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d036      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a77      	ldr	r2, [pc, #476]	; (8007388 <HAL_DMA_IRQHandler+0xc88>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d031      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a76      	ldr	r2, [pc, #472]	; (800738c <HAL_DMA_IRQHandler+0xc8c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d02c      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a74      	ldr	r2, [pc, #464]	; (8007390 <HAL_DMA_IRQHandler+0xc90>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d027      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a73      	ldr	r2, [pc, #460]	; (8007394 <HAL_DMA_IRQHandler+0xc94>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a71      	ldr	r2, [pc, #452]	; (8007398 <HAL_DMA_IRQHandler+0xc98>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a70      	ldr	r2, [pc, #448]	; (800739c <HAL_DMA_IRQHandler+0xc9c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a6e      	ldr	r2, [pc, #440]	; (80073a0 <HAL_DMA_IRQHandler+0xca0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a6d      	ldr	r2, [pc, #436]	; (80073a4 <HAL_DMA_IRQHandler+0xca4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a6b      	ldr	r2, [pc, #428]	; (80073a8 <HAL_DMA_IRQHandler+0xca8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6a      	ldr	r2, [pc, #424]	; (80073ac <HAL_DMA_IRQHandler+0xcac>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_DMA_IRQHandler+0xb12>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a68      	ldr	r2, [pc, #416]	; (80073b0 <HAL_DMA_IRQHandler+0xcb0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d108      	bne.n	8007224 <HAL_DMA_IRQHandler+0xb24>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0208 	bic.w	r2, r2, #8
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e007      	b.n	8007234 <HAL_DMA_IRQHandler+0xb34>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0204 	bic.w	r2, r2, #4
 8007232:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8165 	beq.w	8007508 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007246:	e15f      	b.n	8007508 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	2202      	movs	r2, #2
 8007252:	409a      	lsls	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	4013      	ands	r3, r2
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80c5 	beq.w	80073e8 <HAL_DMA_IRQHandler+0xce8>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80bf 	beq.w	80073e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	2202      	movs	r2, #2
 8007274:	409a      	lsls	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d018      	beq.n	80072b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 813a 	beq.w	800750c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a0:	e134      	b.n	800750c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8130 	beq.w	800750c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072b4:	e12a      	b.n	800750c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f040 8089 	bne.w	80073d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2b      	ldr	r2, [pc, #172]	; (8007374 <HAL_DMA_IRQHandler+0xc74>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d04a      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a29      	ldr	r2, [pc, #164]	; (8007378 <HAL_DMA_IRQHandler+0xc78>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d045      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a28      	ldr	r2, [pc, #160]	; (800737c <HAL_DMA_IRQHandler+0xc7c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d040      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a26      	ldr	r2, [pc, #152]	; (8007380 <HAL_DMA_IRQHandler+0xc80>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d03b      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a25      	ldr	r2, [pc, #148]	; (8007384 <HAL_DMA_IRQHandler+0xc84>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d036      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a23      	ldr	r2, [pc, #140]	; (8007388 <HAL_DMA_IRQHandler+0xc88>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d031      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a22      	ldr	r2, [pc, #136]	; (800738c <HAL_DMA_IRQHandler+0xc8c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d02c      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a20      	ldr	r2, [pc, #128]	; (8007390 <HAL_DMA_IRQHandler+0xc90>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d027      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <HAL_DMA_IRQHandler+0xc94>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d022      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <HAL_DMA_IRQHandler+0xc98>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01d      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1c      	ldr	r2, [pc, #112]	; (800739c <HAL_DMA_IRQHandler+0xc9c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d018      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <HAL_DMA_IRQHandler+0xca0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d013      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_DMA_IRQHandler+0xca4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00e      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_DMA_IRQHandler+0xca8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d009      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a16      	ldr	r2, [pc, #88]	; (80073ac <HAL_DMA_IRQHandler+0xcac>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_DMA_IRQHandler+0xc62>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <HAL_DMA_IRQHandler+0xcb0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d128      	bne.n	80073b4 <HAL_DMA_IRQHandler+0xcb4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0214 	bic.w	r2, r2, #20
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e027      	b.n	80073c4 <HAL_DMA_IRQHandler+0xcc4>
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 020a 	bic.w	r2, r2, #10
 80073c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8097 	beq.w	800750c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073e6:	e091      	b.n	800750c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2208      	movs	r2, #8
 80073f2:	409a      	lsls	r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8088 	beq.w	800750e <HAL_DMA_IRQHandler+0xe0e>
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8082 	beq.w	800750e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a41      	ldr	r2, [pc, #260]	; (8007514 <HAL_DMA_IRQHandler+0xe14>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d04a      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a3f      	ldr	r2, [pc, #252]	; (8007518 <HAL_DMA_IRQHandler+0xe18>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d045      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a3e      	ldr	r2, [pc, #248]	; (800751c <HAL_DMA_IRQHandler+0xe1c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d040      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <HAL_DMA_IRQHandler+0xe20>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d03b      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a3b      	ldr	r2, [pc, #236]	; (8007524 <HAL_DMA_IRQHandler+0xe24>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d036      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a39      	ldr	r2, [pc, #228]	; (8007528 <HAL_DMA_IRQHandler+0xe28>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d031      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a38      	ldr	r2, [pc, #224]	; (800752c <HAL_DMA_IRQHandler+0xe2c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d02c      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a36      	ldr	r2, [pc, #216]	; (8007530 <HAL_DMA_IRQHandler+0xe30>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a35      	ldr	r2, [pc, #212]	; (8007534 <HAL_DMA_IRQHandler+0xe34>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d022      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a33      	ldr	r2, [pc, #204]	; (8007538 <HAL_DMA_IRQHandler+0xe38>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01d      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a32      	ldr	r2, [pc, #200]	; (800753c <HAL_DMA_IRQHandler+0xe3c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d018      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a30      	ldr	r2, [pc, #192]	; (8007540 <HAL_DMA_IRQHandler+0xe40>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2f      	ldr	r2, [pc, #188]	; (8007544 <HAL_DMA_IRQHandler+0xe44>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00e      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a2d      	ldr	r2, [pc, #180]	; (8007548 <HAL_DMA_IRQHandler+0xe48>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a2c      	ldr	r2, [pc, #176]	; (800754c <HAL_DMA_IRQHandler+0xe4c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_DMA_IRQHandler+0xdaa>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2a      	ldr	r2, [pc, #168]	; (8007550 <HAL_DMA_IRQHandler+0xe50>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d108      	bne.n	80074bc <HAL_DMA_IRQHandler+0xdbc>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 021c 	bic.w	r2, r2, #28
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e007      	b.n	80074cc <HAL_DMA_IRQHandler+0xdcc>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 020e 	bic.w	r2, r2, #14
 80074ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	2201      	movs	r2, #1
 80074d6:	409a      	lsls	r2, r3
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
 8007502:	e004      	b.n	800750e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007504:	bf00      	nop
 8007506:	e002      	b.n	800750e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007508:	bf00      	nop
 800750a:	e000      	b.n	800750e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800750c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800750e:	3728      	adds	r7, #40	; 0x28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40020010 	.word	0x40020010
 8007518:	40020028 	.word	0x40020028
 800751c:	40020040 	.word	0x40020040
 8007520:	40020058 	.word	0x40020058
 8007524:	40020070 	.word	0x40020070
 8007528:	40020088 	.word	0x40020088
 800752c:	400200a0 	.word	0x400200a0
 8007530:	400200b8 	.word	0x400200b8
 8007534:	40020410 	.word	0x40020410
 8007538:	40020428 	.word	0x40020428
 800753c:	40020440 	.word	0x40020440
 8007540:	40020458 	.word	0x40020458
 8007544:	40020470 	.word	0x40020470
 8007548:	40020488 	.word	0x40020488
 800754c:	400204a0 	.word	0x400204a0
 8007550:	400204b8 	.word	0x400204b8

08007554 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007566:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a7f      	ldr	r2, [pc, #508]	; (8007770 <DMA_SetConfig+0x21c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d072      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a7d      	ldr	r2, [pc, #500]	; (8007774 <DMA_SetConfig+0x220>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d06d      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a7c      	ldr	r2, [pc, #496]	; (8007778 <DMA_SetConfig+0x224>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d068      	beq.n	800765e <DMA_SetConfig+0x10a>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a7a      	ldr	r2, [pc, #488]	; (800777c <DMA_SetConfig+0x228>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d063      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a79      	ldr	r2, [pc, #484]	; (8007780 <DMA_SetConfig+0x22c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d05e      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a77      	ldr	r2, [pc, #476]	; (8007784 <DMA_SetConfig+0x230>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d059      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a76      	ldr	r2, [pc, #472]	; (8007788 <DMA_SetConfig+0x234>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d054      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a74      	ldr	r2, [pc, #464]	; (800778c <DMA_SetConfig+0x238>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d04f      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a73      	ldr	r2, [pc, #460]	; (8007790 <DMA_SetConfig+0x23c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d04a      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a71      	ldr	r2, [pc, #452]	; (8007794 <DMA_SetConfig+0x240>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d045      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a70      	ldr	r2, [pc, #448]	; (8007798 <DMA_SetConfig+0x244>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d040      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a6e      	ldr	r2, [pc, #440]	; (800779c <DMA_SetConfig+0x248>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d03b      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a6d      	ldr	r2, [pc, #436]	; (80077a0 <DMA_SetConfig+0x24c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d036      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a6b      	ldr	r2, [pc, #428]	; (80077a4 <DMA_SetConfig+0x250>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d031      	beq.n	800765e <DMA_SetConfig+0x10a>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a6a      	ldr	r2, [pc, #424]	; (80077a8 <DMA_SetConfig+0x254>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d02c      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a68      	ldr	r2, [pc, #416]	; (80077ac <DMA_SetConfig+0x258>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d027      	beq.n	800765e <DMA_SetConfig+0x10a>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a67      	ldr	r2, [pc, #412]	; (80077b0 <DMA_SetConfig+0x25c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a65      	ldr	r2, [pc, #404]	; (80077b4 <DMA_SetConfig+0x260>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a64      	ldr	r2, [pc, #400]	; (80077b8 <DMA_SetConfig+0x264>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <DMA_SetConfig+0x10a>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a62      	ldr	r2, [pc, #392]	; (80077bc <DMA_SetConfig+0x268>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a61      	ldr	r2, [pc, #388]	; (80077c0 <DMA_SetConfig+0x26c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a5f      	ldr	r2, [pc, #380]	; (80077c4 <DMA_SetConfig+0x270>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <DMA_SetConfig+0x10a>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a5e      	ldr	r2, [pc, #376]	; (80077c8 <DMA_SetConfig+0x274>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <DMA_SetConfig+0x10a>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a5c      	ldr	r2, [pc, #368]	; (80077cc <DMA_SetConfig+0x278>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d101      	bne.n	8007662 <DMA_SetConfig+0x10e>
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <DMA_SetConfig+0x110>
 8007662:	2300      	movs	r3, #0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007670:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007682:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a39      	ldr	r2, [pc, #228]	; (8007770 <DMA_SetConfig+0x21c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d04a      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a38      	ldr	r2, [pc, #224]	; (8007774 <DMA_SetConfig+0x220>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d045      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a36      	ldr	r2, [pc, #216]	; (8007778 <DMA_SetConfig+0x224>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d040      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a35      	ldr	r2, [pc, #212]	; (800777c <DMA_SetConfig+0x228>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d03b      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a33      	ldr	r2, [pc, #204]	; (8007780 <DMA_SetConfig+0x22c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d036      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a32      	ldr	r2, [pc, #200]	; (8007784 <DMA_SetConfig+0x230>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d031      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a30      	ldr	r2, [pc, #192]	; (8007788 <DMA_SetConfig+0x234>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d02c      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2f      	ldr	r2, [pc, #188]	; (800778c <DMA_SetConfig+0x238>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d027      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2d      	ldr	r2, [pc, #180]	; (8007790 <DMA_SetConfig+0x23c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2c      	ldr	r2, [pc, #176]	; (8007794 <DMA_SetConfig+0x240>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d01d      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a2a      	ldr	r2, [pc, #168]	; (8007798 <DMA_SetConfig+0x244>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a29      	ldr	r2, [pc, #164]	; (800779c <DMA_SetConfig+0x248>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a27      	ldr	r2, [pc, #156]	; (80077a0 <DMA_SetConfig+0x24c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a26      	ldr	r2, [pc, #152]	; (80077a4 <DMA_SetConfig+0x250>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a24      	ldr	r2, [pc, #144]	; (80077a8 <DMA_SetConfig+0x254>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <DMA_SetConfig+0x1d0>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a23      	ldr	r2, [pc, #140]	; (80077ac <DMA_SetConfig+0x258>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d101      	bne.n	8007728 <DMA_SetConfig+0x1d4>
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <DMA_SetConfig+0x1d6>
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d059      	beq.n	80077e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	223f      	movs	r2, #63	; 0x3f
 8007738:	409a      	lsls	r2, r3
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800774c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d138      	bne.n	80077d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800776e:	e086      	b.n	800787e <DMA_SetConfig+0x32a>
 8007770:	40020010 	.word	0x40020010
 8007774:	40020028 	.word	0x40020028
 8007778:	40020040 	.word	0x40020040
 800777c:	40020058 	.word	0x40020058
 8007780:	40020070 	.word	0x40020070
 8007784:	40020088 	.word	0x40020088
 8007788:	400200a0 	.word	0x400200a0
 800778c:	400200b8 	.word	0x400200b8
 8007790:	40020410 	.word	0x40020410
 8007794:	40020428 	.word	0x40020428
 8007798:	40020440 	.word	0x40020440
 800779c:	40020458 	.word	0x40020458
 80077a0:	40020470 	.word	0x40020470
 80077a4:	40020488 	.word	0x40020488
 80077a8:	400204a0 	.word	0x400204a0
 80077ac:	400204b8 	.word	0x400204b8
 80077b0:	58025408 	.word	0x58025408
 80077b4:	5802541c 	.word	0x5802541c
 80077b8:	58025430 	.word	0x58025430
 80077bc:	58025444 	.word	0x58025444
 80077c0:	58025458 	.word	0x58025458
 80077c4:	5802546c 	.word	0x5802546c
 80077c8:	58025480 	.word	0x58025480
 80077cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	60da      	str	r2, [r3, #12]
}
 80077e0:	e04d      	b.n	800787e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a29      	ldr	r2, [pc, #164]	; (800788c <DMA_SetConfig+0x338>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d022      	beq.n	8007832 <DMA_SetConfig+0x2de>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a27      	ldr	r2, [pc, #156]	; (8007890 <DMA_SetConfig+0x33c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d01d      	beq.n	8007832 <DMA_SetConfig+0x2de>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a26      	ldr	r2, [pc, #152]	; (8007894 <DMA_SetConfig+0x340>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d018      	beq.n	8007832 <DMA_SetConfig+0x2de>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a24      	ldr	r2, [pc, #144]	; (8007898 <DMA_SetConfig+0x344>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <DMA_SetConfig+0x2de>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a23      	ldr	r2, [pc, #140]	; (800789c <DMA_SetConfig+0x348>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00e      	beq.n	8007832 <DMA_SetConfig+0x2de>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a21      	ldr	r2, [pc, #132]	; (80078a0 <DMA_SetConfig+0x34c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d009      	beq.n	8007832 <DMA_SetConfig+0x2de>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a20      	ldr	r2, [pc, #128]	; (80078a4 <DMA_SetConfig+0x350>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d004      	beq.n	8007832 <DMA_SetConfig+0x2de>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1e      	ldr	r2, [pc, #120]	; (80078a8 <DMA_SetConfig+0x354>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d101      	bne.n	8007836 <DMA_SetConfig+0x2e2>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <DMA_SetConfig+0x2e4>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d020      	beq.n	800787e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	2201      	movs	r2, #1
 8007846:	409a      	lsls	r2, r3
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	d108      	bne.n	800786e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	60da      	str	r2, [r3, #12]
}
 800786c:	e007      	b.n	800787e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	60da      	str	r2, [r3, #12]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	58025408 	.word	0x58025408
 8007890:	5802541c 	.word	0x5802541c
 8007894:	58025430 	.word	0x58025430
 8007898:	58025444 	.word	0x58025444
 800789c:	58025458 	.word	0x58025458
 80078a0:	5802546c 	.word	0x5802546c
 80078a4:	58025480 	.word	0x58025480
 80078a8:	58025494 	.word	0x58025494

080078ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a42      	ldr	r2, [pc, #264]	; (80079c4 <DMA_CalcBaseAndBitshift+0x118>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d04a      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a41      	ldr	r2, [pc, #260]	; (80079c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d045      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a3f      	ldr	r2, [pc, #252]	; (80079cc <DMA_CalcBaseAndBitshift+0x120>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d040      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a3e      	ldr	r2, [pc, #248]	; (80079d0 <DMA_CalcBaseAndBitshift+0x124>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d03b      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a3c      	ldr	r2, [pc, #240]	; (80079d4 <DMA_CalcBaseAndBitshift+0x128>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d036      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3b      	ldr	r2, [pc, #236]	; (80079d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d031      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a39      	ldr	r2, [pc, #228]	; (80079dc <DMA_CalcBaseAndBitshift+0x130>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d02c      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a38      	ldr	r2, [pc, #224]	; (80079e0 <DMA_CalcBaseAndBitshift+0x134>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d027      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a36      	ldr	r2, [pc, #216]	; (80079e4 <DMA_CalcBaseAndBitshift+0x138>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d022      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a35      	ldr	r2, [pc, #212]	; (80079e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d01d      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a33      	ldr	r2, [pc, #204]	; (80079ec <DMA_CalcBaseAndBitshift+0x140>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d018      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a32      	ldr	r2, [pc, #200]	; (80079f0 <DMA_CalcBaseAndBitshift+0x144>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d013      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a30      	ldr	r2, [pc, #192]	; (80079f4 <DMA_CalcBaseAndBitshift+0x148>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00e      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2f      	ldr	r2, [pc, #188]	; (80079f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d009      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a2d      	ldr	r2, [pc, #180]	; (80079fc <DMA_CalcBaseAndBitshift+0x150>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d004      	beq.n	8007954 <DMA_CalcBaseAndBitshift+0xa8>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a2c      	ldr	r2, [pc, #176]	; (8007a00 <DMA_CalcBaseAndBitshift+0x154>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d101      	bne.n	8007958 <DMA_CalcBaseAndBitshift+0xac>
 8007954:	2301      	movs	r3, #1
 8007956:	e000      	b.n	800795a <DMA_CalcBaseAndBitshift+0xae>
 8007958:	2300      	movs	r3, #0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d024      	beq.n	80079a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	3b10      	subs	r3, #16
 8007966:	4a27      	ldr	r2, [pc, #156]	; (8007a04 <DMA_CalcBaseAndBitshift+0x158>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	4a24      	ldr	r2, [pc, #144]	; (8007a08 <DMA_CalcBaseAndBitshift+0x15c>)
 8007978:	5cd3      	ldrb	r3, [r2, r3]
 800797a:	461a      	mov	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b03      	cmp	r3, #3
 8007984:	d908      	bls.n	8007998 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	4b1f      	ldr	r3, [pc, #124]	; (8007a0c <DMA_CalcBaseAndBitshift+0x160>)
 800798e:	4013      	ands	r3, r2
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	659a      	str	r2, [r3, #88]	; 0x58
 8007996:	e00d      	b.n	80079b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	4b1b      	ldr	r3, [pc, #108]	; (8007a0c <DMA_CalcBaseAndBitshift+0x160>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6593      	str	r3, [r2, #88]	; 0x58
 80079a6:	e005      	b.n	80079b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	40020010 	.word	0x40020010
 80079c8:	40020028 	.word	0x40020028
 80079cc:	40020040 	.word	0x40020040
 80079d0:	40020058 	.word	0x40020058
 80079d4:	40020070 	.word	0x40020070
 80079d8:	40020088 	.word	0x40020088
 80079dc:	400200a0 	.word	0x400200a0
 80079e0:	400200b8 	.word	0x400200b8
 80079e4:	40020410 	.word	0x40020410
 80079e8:	40020428 	.word	0x40020428
 80079ec:	40020440 	.word	0x40020440
 80079f0:	40020458 	.word	0x40020458
 80079f4:	40020470 	.word	0x40020470
 80079f8:	40020488 	.word	0x40020488
 80079fc:	400204a0 	.word	0x400204a0
 8007a00:	400204b8 	.word	0x400204b8
 8007a04:	aaaaaaab 	.word	0xaaaaaaab
 8007a08:	0800e474 	.word	0x0800e474
 8007a0c:	fffffc00 	.word	0xfffffc00

08007a10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d120      	bne.n	8007a66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d858      	bhi.n	8007ade <DMA_CheckFifoParam+0xce>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <DMA_CheckFifoParam+0x24>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a57 	.word	0x08007a57
 8007a3c:	08007a45 	.word	0x08007a45
 8007a40:	08007adf 	.word	0x08007adf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d048      	beq.n	8007ae2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a54:	e045      	b.n	8007ae2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a5e:	d142      	bne.n	8007ae6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a64:	e03f      	b.n	8007ae6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	d123      	bne.n	8007ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d838      	bhi.n	8007aea <DMA_CheckFifoParam+0xda>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <DMA_CheckFifoParam+0x70>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007a91 	.word	0x08007a91
 8007a84:	08007a97 	.word	0x08007a97
 8007a88:	08007a91 	.word	0x08007a91
 8007a8c:	08007aa9 	.word	0x08007aa9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
        break;
 8007a94:	e030      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d025      	beq.n	8007aee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007aa6:	e022      	b.n	8007aee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ab0:	d11f      	bne.n	8007af2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ab6:	e01c      	b.n	8007af2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d902      	bls.n	8007ac6 <DMA_CheckFifoParam+0xb6>
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d003      	beq.n	8007acc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ac4:	e018      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8007aca:	e015      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00e      	beq.n	8007af6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
    break;
 8007adc:	e00b      	b.n	8007af6 <DMA_CheckFifoParam+0xe6>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e00a      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ae2:	bf00      	nop
 8007ae4:	e008      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        break;
 8007ae6:	bf00      	nop
 8007ae8:	e006      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        break;
 8007aea:	bf00      	nop
 8007aec:	e004      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        break;
 8007aee:	bf00      	nop
 8007af0:	e002      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
        break;
 8007af2:	bf00      	nop
 8007af4:	e000      	b.n	8007af8 <DMA_CheckFifoParam+0xe8>
    break;
 8007af6:	bf00      	nop
    }
  }

  return status;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop

08007b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a38      	ldr	r2, [pc, #224]	; (8007bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d022      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a36      	ldr	r2, [pc, #216]	; (8007c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d01d      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a35      	ldr	r2, [pc, #212]	; (8007c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d018      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a33      	ldr	r2, [pc, #204]	; (8007c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a32      	ldr	r2, [pc, #200]	; (8007c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00e      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a30      	ldr	r2, [pc, #192]	; (8007c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d009      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a2f      	ldr	r2, [pc, #188]	; (8007c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d004      	beq.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a2d      	ldr	r2, [pc, #180]	; (8007c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d101      	bne.n	8007b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01a      	beq.n	8007ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	3b08      	subs	r3, #8
 8007b78:	4a28      	ldr	r2, [pc, #160]	; (8007c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	091b      	lsrs	r3, r3, #4
 8007b80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a24      	ldr	r2, [pc, #144]	; (8007c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	409a      	lsls	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ba4:	e024      	b.n	8007bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	3b10      	subs	r3, #16
 8007bae:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb4:	091b      	lsrs	r3, r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d806      	bhi.n	8007bce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d902      	bls.n	8007bce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4b18      	ldr	r3, [pc, #96]	; (8007c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a16      	ldr	r2, [pc, #88]	; (8007c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007be0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 031f 	and.w	r3, r3, #31
 8007be8:	2201      	movs	r2, #1
 8007bea:	409a      	lsls	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007bf0:	bf00      	nop
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	58025408 	.word	0x58025408
 8007c00:	5802541c 	.word	0x5802541c
 8007c04:	58025430 	.word	0x58025430
 8007c08:	58025444 	.word	0x58025444
 8007c0c:	58025458 	.word	0x58025458
 8007c10:	5802546c 	.word	0x5802546c
 8007c14:	58025480 	.word	0x58025480
 8007c18:	58025494 	.word	0x58025494
 8007c1c:	cccccccd 	.word	0xcccccccd
 8007c20:	16009600 	.word	0x16009600
 8007c24:	58025880 	.word	0x58025880
 8007c28:	aaaaaaab 	.word	0xaaaaaaab
 8007c2c:	400204b8 	.word	0x400204b8
 8007c30:	4002040f 	.word	0x4002040f
 8007c34:	10008200 	.word	0x10008200
 8007c38:	40020880 	.word	0x40020880

08007c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d04a      	beq.n	8007ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d847      	bhi.n	8007ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a25      	ldr	r2, [pc, #148]	; (8007cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d022      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a24      	ldr	r2, [pc, #144]	; (8007cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d01d      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d018      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a21      	ldr	r2, [pc, #132]	; (8007d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d013      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1f      	ldr	r2, [pc, #124]	; (8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00e      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1e      	ldr	r2, [pc, #120]	; (8007d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d009      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d004      	beq.n	8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	; (8007d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d101      	bne.n	8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e000      	b.n	8007cae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007cac:	2300      	movs	r3, #0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a15      	ldr	r2, [pc, #84]	; (8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007cc4:	671a      	str	r2, [r3, #112]	; 0x70
 8007cc6:	e009      	b.n	8007cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a11      	ldr	r2, [pc, #68]	; (8007d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007cda:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	409a      	lsls	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	58025408 	.word	0x58025408
 8007cf8:	5802541c 	.word	0x5802541c
 8007cfc:	58025430 	.word	0x58025430
 8007d00:	58025444 	.word	0x58025444
 8007d04:	58025458 	.word	0x58025458
 8007d08:	5802546c 	.word	0x5802546c
 8007d0c:	58025480 	.word	0x58025480
 8007d10:	58025494 	.word	0x58025494
 8007d14:	1600963f 	.word	0x1600963f
 8007d18:	58025940 	.word	0x58025940
 8007d1c:	1000823f 	.word	0x1000823f
 8007d20:	40020940 	.word	0x40020940

08007d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b089      	sub	sp, #36	; 0x24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d32:	4b86      	ldr	r3, [pc, #536]	; (8007f4c <HAL_GPIO_Init+0x228>)
 8007d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d36:	e18c      	b.n	8008052 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	fa01 f303 	lsl.w	r3, r1, r3
 8007d44:	4013      	ands	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 817e 	beq.w	800804c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d005      	beq.n	8007d68 <HAL_GPIO_Init+0x44>
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d130      	bne.n	8007dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	2203      	movs	r2, #3
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d9e:	2201      	movs	r2, #1
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	f003 0201 	and.w	r2, r3, #1
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d017      	beq.n	8007e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	2203      	movs	r2, #3
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d123      	bne.n	8007e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	08da      	lsrs	r2, r3, #3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3208      	adds	r2, #8
 8007e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	220f      	movs	r2, #15
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	43db      	mvns	r3, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4013      	ands	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	08da      	lsrs	r2, r3, #3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3208      	adds	r2, #8
 8007e54:	69b9      	ldr	r1, [r7, #24]
 8007e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	2203      	movs	r2, #3
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f003 0203 	and.w	r2, r3, #3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 80d8 	beq.w	800804c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e9c:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <HAL_GPIO_Init+0x22c>)
 8007e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ea2:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <HAL_GPIO_Init+0x22c>)
 8007ea4:	f043 0302 	orr.w	r3, r3, #2
 8007ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007eac:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <HAL_GPIO_Init+0x22c>)
 8007eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eba:	4a26      	ldr	r2, [pc, #152]	; (8007f54 <HAL_GPIO_Init+0x230>)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	089b      	lsrs	r3, r3, #2
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	220f      	movs	r2, #15
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	43db      	mvns	r3, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4013      	ands	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a1d      	ldr	r2, [pc, #116]	; (8007f58 <HAL_GPIO_Init+0x234>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d04a      	beq.n	8007f7c <HAL_GPIO_Init+0x258>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <HAL_GPIO_Init+0x238>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d02b      	beq.n	8007f46 <HAL_GPIO_Init+0x222>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_GPIO_Init+0x23c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d025      	beq.n	8007f42 <HAL_GPIO_Init+0x21e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <HAL_GPIO_Init+0x240>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d01f      	beq.n	8007f3e <HAL_GPIO_Init+0x21a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a19      	ldr	r2, [pc, #100]	; (8007f68 <HAL_GPIO_Init+0x244>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d019      	beq.n	8007f3a <HAL_GPIO_Init+0x216>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a18      	ldr	r2, [pc, #96]	; (8007f6c <HAL_GPIO_Init+0x248>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <HAL_GPIO_Init+0x212>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a17      	ldr	r2, [pc, #92]	; (8007f70 <HAL_GPIO_Init+0x24c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00d      	beq.n	8007f32 <HAL_GPIO_Init+0x20e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a16      	ldr	r2, [pc, #88]	; (8007f74 <HAL_GPIO_Init+0x250>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d007      	beq.n	8007f2e <HAL_GPIO_Init+0x20a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <HAL_GPIO_Init+0x254>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d101      	bne.n	8007f2a <HAL_GPIO_Init+0x206>
 8007f26:	2309      	movs	r3, #9
 8007f28:	e029      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	e027      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f2e:	2307      	movs	r3, #7
 8007f30:	e025      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f32:	2306      	movs	r3, #6
 8007f34:	e023      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f36:	2305      	movs	r3, #5
 8007f38:	e021      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f3a:	2304      	movs	r3, #4
 8007f3c:	e01f      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e01d      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e01b      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e019      	b.n	8007f7e <HAL_GPIO_Init+0x25a>
 8007f4a:	bf00      	nop
 8007f4c:	58000080 	.word	0x58000080
 8007f50:	58024400 	.word	0x58024400
 8007f54:	58000400 	.word	0x58000400
 8007f58:	58020000 	.word	0x58020000
 8007f5c:	58020400 	.word	0x58020400
 8007f60:	58020800 	.word	0x58020800
 8007f64:	58020c00 	.word	0x58020c00
 8007f68:	58021000 	.word	0x58021000
 8007f6c:	58021400 	.word	0x58021400
 8007f70:	58021800 	.word	0x58021800
 8007f74:	58021c00 	.word	0x58021c00
 8007f78:	58022400 	.word	0x58022400
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	f002 0203 	and.w	r2, r2, #3
 8007f84:	0092      	lsls	r2, r2, #2
 8007f86:	4093      	lsls	r3, r2
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f8e:	4938      	ldr	r1, [pc, #224]	; (8008070 <HAL_GPIO_Init+0x34c>)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	3302      	adds	r3, #2
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4013      	ands	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	43db      	mvns	r3, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4013      	ands	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	43db      	mvns	r3, r3
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	4013      	ands	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f ae6b 	bne.w	8007d38 <HAL_GPIO_Init+0x14>
  }
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	3724      	adds	r7, #36	; 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	58000400 	.word	0x58000400

08008074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	807b      	strh	r3, [r7, #2]
 8008080:	4613      	mov	r3, r2
 8008082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008084:	787b      	ldrb	r3, [r7, #1]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800808a:	887a      	ldrh	r2, [r7, #2]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008090:	e003      	b.n	800809a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008092:	887b      	ldrh	r3, [r7, #2]
 8008094:	041a      	lsls	r2, r3, #16
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	619a      	str	r2, [r3, #24]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80080b0:	4b19      	ldr	r3, [pc, #100]	; (8008118 <HAL_PWREx_ConfigSupply+0x70>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d00a      	beq.n	80080d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80080bc:	4b16      	ldr	r3, [pc, #88]	; (8008118 <HAL_PWREx_ConfigSupply+0x70>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d001      	beq.n	80080ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e01f      	b.n	800810e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e01d      	b.n	800810e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80080d2:	4b11      	ldr	r3, [pc, #68]	; (8008118 <HAL_PWREx_ConfigSupply+0x70>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f023 0207 	bic.w	r2, r3, #7
 80080da:	490f      	ldr	r1, [pc, #60]	; (8008118 <HAL_PWREx_ConfigSupply+0x70>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80080e2:	f7fc fec9 	bl	8004e78 <HAL_GetTick>
 80080e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080e8:	e009      	b.n	80080fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80080ea:	f7fc fec5 	bl	8004e78 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080f8:	d901      	bls.n	80080fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e007      	b.n	800810e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080fe:	4b06      	ldr	r3, [pc, #24]	; (8008118 <HAL_PWREx_ConfigSupply+0x70>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810a:	d1ee      	bne.n	80080ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	58024800 	.word	0x58024800

0800811c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08c      	sub	sp, #48	; 0x30
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e39d      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 8087 	beq.w	800824a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800813c:	4b88      	ldr	r3, [pc, #544]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008146:	4b86      	ldr	r3, [pc, #536]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	2b10      	cmp	r3, #16
 8008150:	d007      	beq.n	8008162 <HAL_RCC_OscConfig+0x46>
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	2b18      	cmp	r3, #24
 8008156:	d110      	bne.n	800817a <HAL_RCC_OscConfig+0x5e>
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d10b      	bne.n	800817a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008162:	4b7f      	ldr	r3, [pc, #508]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d06c      	beq.n	8008248 <HAL_RCC_OscConfig+0x12c>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d168      	bne.n	8008248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e377      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008182:	d106      	bne.n	8008192 <HAL_RCC_OscConfig+0x76>
 8008184:	4b76      	ldr	r3, [pc, #472]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a75      	ldr	r2, [pc, #468]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800818a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	e02e      	b.n	80081f0 <HAL_RCC_OscConfig+0xd4>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10c      	bne.n	80081b4 <HAL_RCC_OscConfig+0x98>
 800819a:	4b71      	ldr	r3, [pc, #452]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a70      	ldr	r2, [pc, #448]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	4b6e      	ldr	r3, [pc, #440]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a6d      	ldr	r2, [pc, #436]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	e01d      	b.n	80081f0 <HAL_RCC_OscConfig+0xd4>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081bc:	d10c      	bne.n	80081d8 <HAL_RCC_OscConfig+0xbc>
 80081be:	4b68      	ldr	r3, [pc, #416]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a67      	ldr	r2, [pc, #412]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	4b65      	ldr	r3, [pc, #404]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a64      	ldr	r2, [pc, #400]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	e00b      	b.n	80081f0 <HAL_RCC_OscConfig+0xd4>
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a60      	ldr	r2, [pc, #384]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	4b5e      	ldr	r3, [pc, #376]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a5d      	ldr	r2, [pc, #372]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80081ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d013      	beq.n	8008220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f8:	f7fc fe3e 	bl	8004e78 <HAL_GetTick>
 80081fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008200:	f7fc fe3a 	bl	8004e78 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b64      	cmp	r3, #100	; 0x64
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e32b      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008212:	4b53      	ldr	r3, [pc, #332]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0xe4>
 800821e:	e014      	b.n	800824a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fc fe2a 	bl	8004e78 <HAL_GetTick>
 8008224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008228:	f7fc fe26 	bl	8004e78 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b64      	cmp	r3, #100	; 0x64
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e317      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800823a:	4b49      	ldr	r3, [pc, #292]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1f0      	bne.n	8008228 <HAL_RCC_OscConfig+0x10c>
 8008246:	e000      	b.n	800824a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 808c 	beq.w	8008370 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008258:	4b41      	ldr	r3, [pc, #260]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008260:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008262:	4b3f      	ldr	r3, [pc, #252]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <HAL_RCC_OscConfig+0x162>
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	2b18      	cmp	r3, #24
 8008272:	d137      	bne.n	80082e4 <HAL_RCC_OscConfig+0x1c8>
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d132      	bne.n	80082e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800827e:	4b38      	ldr	r3, [pc, #224]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <HAL_RCC_OscConfig+0x17a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e2e9      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008296:	4b32      	ldr	r3, [pc, #200]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 0219 	bic.w	r2, r3, #25
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	492f      	ldr	r1, [pc, #188]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082a8:	f7fc fde6 	bl	8004e78 <HAL_GetTick>
 80082ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082b0:	f7fc fde2 	bl	8004e78 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e2d3      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082c2:	4b27      	ldr	r3, [pc, #156]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ce:	4b24      	ldr	r3, [pc, #144]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	061b      	lsls	r3, r3, #24
 80082dc:	4920      	ldr	r1, [pc, #128]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082e2:	e045      	b.n	8008370 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d026      	beq.n	800833a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082ec:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f023 0219 	bic.w	r2, r3, #25
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4919      	ldr	r1, [pc, #100]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fe:	f7fc fdbb 	bl	8004e78 <HAL_GetTick>
 8008302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008306:	f7fc fdb7 	bl	8004e78 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e2a8      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008318:	4b11      	ldr	r3, [pc, #68]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	061b      	lsls	r3, r3, #24
 8008332:	490b      	ldr	r1, [pc, #44]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008334:	4313      	orrs	r3, r2
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	e01a      	b.n	8008370 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a08      	ldr	r2, [pc, #32]	; (8008360 <HAL_RCC_OscConfig+0x244>)
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008346:	f7fc fd97 	bl	8004e78 <HAL_GetTick>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800834c:	e00a      	b.n	8008364 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800834e:	f7fc fd93 	bl	8004e78 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d903      	bls.n	8008364 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e284      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
 8008360:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008364:	4b96      	ldr	r3, [pc, #600]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1ee      	bne.n	800834e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	d06a      	beq.n	8008452 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800837c:	4b90      	ldr	r3, [pc, #576]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008384:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008386:	4b8e      	ldr	r3, [pc, #568]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	2b08      	cmp	r3, #8
 8008390:	d007      	beq.n	80083a2 <HAL_RCC_OscConfig+0x286>
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b18      	cmp	r3, #24
 8008396:	d11b      	bne.n	80083d0 <HAL_RCC_OscConfig+0x2b4>
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d116      	bne.n	80083d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083a2:	4b87      	ldr	r3, [pc, #540]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <HAL_RCC_OscConfig+0x29e>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	2b80      	cmp	r3, #128	; 0x80
 80083b4:	d001      	beq.n	80083ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e257      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083ba:	4b81      	ldr	r3, [pc, #516]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	061b      	lsls	r3, r3, #24
 80083c8:	497d      	ldr	r1, [pc, #500]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ce:	e040      	b.n	8008452 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d023      	beq.n	8008420 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083d8:	4b79      	ldr	r3, [pc, #484]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a78      	ldr	r2, [pc, #480]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80083de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fc fd48 	bl	8004e78 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083ec:	f7fc fd44 	bl	8004e78 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e235      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083fe:	4b70      	ldr	r3, [pc, #448]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f0      	beq.n	80083ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800840a:	4b6d      	ldr	r3, [pc, #436]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	061b      	lsls	r3, r3, #24
 8008418:	4969      	ldr	r1, [pc, #420]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800841a:	4313      	orrs	r3, r2
 800841c:	60cb      	str	r3, [r1, #12]
 800841e:	e018      	b.n	8008452 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008420:	4b67      	ldr	r3, [pc, #412]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a66      	ldr	r2, [pc, #408]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842c:	f7fc fd24 	bl	8004e78 <HAL_GetTick>
 8008430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008434:	f7fc fd20 	bl	8004e78 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e211      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008446:	4b5e      	ldr	r3, [pc, #376]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f0      	bne.n	8008434 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0308 	and.w	r3, r3, #8
 800845a:	2b00      	cmp	r3, #0
 800845c:	d036      	beq.n	80084cc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d019      	beq.n	800849a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008466:	4b56      	ldr	r3, [pc, #344]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800846a:	4a55      	ldr	r2, [pc, #340]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008472:	f7fc fd01 	bl	8004e78 <HAL_GetTick>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800847a:	f7fc fcfd 	bl	8004e78 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e1ee      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800848c:	4b4c      	ldr	r3, [pc, #304]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800848e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <HAL_RCC_OscConfig+0x35e>
 8008498:	e018      	b.n	80084cc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800849a:	4b49      	ldr	r3, [pc, #292]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800849c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800849e:	4a48      	ldr	r2, [pc, #288]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a6:	f7fc fce7 	bl	8004e78 <HAL_GetTick>
 80084aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084ae:	f7fc fce3 	bl	8004e78 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e1d4      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084c0:	4b3f      	ldr	r3, [pc, #252]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80084c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f0      	bne.n	80084ae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d036      	beq.n	8008546 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d019      	beq.n	8008514 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084e0:	4b37      	ldr	r3, [pc, #220]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a36      	ldr	r2, [pc, #216]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80084e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084ec:	f7fc fcc4 	bl	8004e78 <HAL_GetTick>
 80084f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084f4:	f7fc fcc0 	bl	8004e78 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e1b1      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008506:	4b2e      	ldr	r3, [pc, #184]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f0      	beq.n	80084f4 <HAL_RCC_OscConfig+0x3d8>
 8008512:	e018      	b.n	8008546 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008514:	4b2a      	ldr	r3, [pc, #168]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a29      	ldr	r2, [pc, #164]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800851a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800851e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008520:	f7fc fcaa 	bl	8004e78 <HAL_GetTick>
 8008524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008528:	f7fc fca6 	bl	8004e78 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e197      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800853a:	4b21      	ldr	r3, [pc, #132]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 8086 	beq.w	8008660 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <HAL_RCC_OscConfig+0x4a8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <HAL_RCC_OscConfig+0x4a8>)
 800855a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008560:	f7fc fc8a 	bl	8004e78 <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008568:	f7fc fc86 	bl	8004e78 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b64      	cmp	r3, #100	; 0x64
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e177      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800857a:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <HAL_RCC_OscConfig+0x4a8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f0      	beq.n	8008568 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d106      	bne.n	800859c <HAL_RCC_OscConfig+0x480>
 800858e:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	4a0b      	ldr	r2, [pc, #44]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 8008594:	f043 0301 	orr.w	r3, r3, #1
 8008598:	6713      	str	r3, [r2, #112]	; 0x70
 800859a:	e032      	b.n	8008602 <HAL_RCC_OscConfig+0x4e6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d111      	bne.n	80085c8 <HAL_RCC_OscConfig+0x4ac>
 80085a4:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a8:	4a05      	ldr	r2, [pc, #20]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80085aa:	f023 0301 	bic.w	r3, r3, #1
 80085ae:	6713      	str	r3, [r2, #112]	; 0x70
 80085b0:	4b03      	ldr	r3, [pc, #12]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	4a02      	ldr	r2, [pc, #8]	; (80085c0 <HAL_RCC_OscConfig+0x4a4>)
 80085b6:	f023 0304 	bic.w	r3, r3, #4
 80085ba:	6713      	str	r3, [r2, #112]	; 0x70
 80085bc:	e021      	b.n	8008602 <HAL_RCC_OscConfig+0x4e6>
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
 80085c4:	58024800 	.word	0x58024800
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d10c      	bne.n	80085ea <HAL_RCC_OscConfig+0x4ce>
 80085d0:	4b83      	ldr	r3, [pc, #524]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	4a82      	ldr	r2, [pc, #520]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	6713      	str	r3, [r2, #112]	; 0x70
 80085dc:	4b80      	ldr	r3, [pc, #512]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	4a7f      	ldr	r2, [pc, #508]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	6713      	str	r3, [r2, #112]	; 0x70
 80085e8:	e00b      	b.n	8008602 <HAL_RCC_OscConfig+0x4e6>
 80085ea:	4b7d      	ldr	r3, [pc, #500]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ee:	4a7c      	ldr	r2, [pc, #496]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	6713      	str	r3, [r2, #112]	; 0x70
 80085f6:	4b7a      	ldr	r3, [pc, #488]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fa:	4a79      	ldr	r2, [pc, #484]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80085fc:	f023 0304 	bic.w	r3, r3, #4
 8008600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d015      	beq.n	8008636 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800860a:	f7fc fc35 	bl	8004e78 <HAL_GetTick>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008610:	e00a      	b.n	8008628 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008612:	f7fc fc31 	bl	8004e78 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008620:	4293      	cmp	r3, r2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e120      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008628:	4b6d      	ldr	r3, [pc, #436]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800862a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0ee      	beq.n	8008612 <HAL_RCC_OscConfig+0x4f6>
 8008634:	e014      	b.n	8008660 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008636:	f7fc fc1f 	bl	8004e78 <HAL_GetTick>
 800863a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800863c:	e00a      	b.n	8008654 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800863e:	f7fc fc1b 	bl	8004e78 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	f241 3288 	movw	r2, #5000	; 0x1388
 800864c:	4293      	cmp	r3, r2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e10a      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008654:	4b62      	ldr	r3, [pc, #392]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ee      	bne.n	800863e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80ff 	beq.w	8008868 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800866a:	4b5d      	ldr	r3, [pc, #372]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008672:	2b18      	cmp	r3, #24
 8008674:	f000 80ba 	beq.w	80087ec <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b02      	cmp	r3, #2
 800867e:	f040 8095 	bne.w	80087ac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008682:	4b57      	ldr	r3, [pc, #348]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a56      	ldr	r2, [pc, #344]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800868c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868e:	f7fc fbf3 	bl	8004e78 <HAL_GetTick>
 8008692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008696:	f7fc fbef 	bl	8004e78 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e0e0      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086a8:	4b4d      	ldr	r3, [pc, #308]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f0      	bne.n	8008696 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086b4:	4b4a      	ldr	r3, [pc, #296]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80086b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086b8:	4b4a      	ldr	r3, [pc, #296]	; (80087e4 <HAL_RCC_OscConfig+0x6c8>)
 80086ba:	4013      	ands	r3, r2
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086c4:	0112      	lsls	r2, r2, #4
 80086c6:	430a      	orrs	r2, r1
 80086c8:	4945      	ldr	r1, [pc, #276]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	628b      	str	r3, [r1, #40]	; 0x28
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	3b01      	subs	r3, #1
 80086d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	3b01      	subs	r3, #1
 80086de:	025b      	lsls	r3, r3, #9
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	3b01      	subs	r3, #1
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f6:	3b01      	subs	r3, #1
 80086f8:	061b      	lsls	r3, r3, #24
 80086fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086fe:	4938      	ldr	r1, [pc, #224]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008700:	4313      	orrs	r3, r2
 8008702:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008704:	4b36      	ldr	r3, [pc, #216]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a35      	ldr	r2, [pc, #212]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008710:	4b33      	ldr	r3, [pc, #204]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008714:	4b34      	ldr	r3, [pc, #208]	; (80087e8 <HAL_RCC_OscConfig+0x6cc>)
 8008716:	4013      	ands	r3, r2
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800871c:	00d2      	lsls	r2, r2, #3
 800871e:	4930      	ldr	r1, [pc, #192]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008720:	4313      	orrs	r3, r2
 8008722:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008724:	4b2e      	ldr	r3, [pc, #184]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	f023 020c 	bic.w	r2, r3, #12
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008730:	492b      	ldr	r1, [pc, #172]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008732:	4313      	orrs	r3, r2
 8008734:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008736:	4b2a      	ldr	r3, [pc, #168]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	f023 0202 	bic.w	r2, r3, #2
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008742:	4927      	ldr	r1, [pc, #156]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008744:	4313      	orrs	r3, r2
 8008746:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008748:	4b25      	ldr	r3, [pc, #148]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800874a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874c:	4a24      	ldr	r2, [pc, #144]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800874e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008754:	4b22      	ldr	r3, [pc, #136]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	4a21      	ldr	r2, [pc, #132]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800875a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800875e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008760:	4b1f      	ldr	r3, [pc, #124]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4a1e      	ldr	r2, [pc, #120]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800876a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	4a1b      	ldr	r2, [pc, #108]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008778:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a18      	ldr	r2, [pc, #96]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 800877e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008784:	f7fc fb78 	bl	8004e78 <HAL_GetTick>
 8008788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800878c:	f7fc fb74 	bl	8004e78 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e065      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800879e:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0f0      	beq.n	800878c <HAL_RCC_OscConfig+0x670>
 80087aa:	e05d      	b.n	8008868 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ac:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0b      	ldr	r2, [pc, #44]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80087b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b8:	f7fc fb5e 	bl	8004e78 <HAL_GetTick>
 80087bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087c0:	f7fc fb5a 	bl	8004e78 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e04b      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087d2:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <HAL_RCC_OscConfig+0x6c4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1f0      	bne.n	80087c0 <HAL_RCC_OscConfig+0x6a4>
 80087de:	e043      	b.n	8008868 <HAL_RCC_OscConfig+0x74c>
 80087e0:	58024400 	.word	0x58024400
 80087e4:	fffffc0c 	.word	0xfffffc0c
 80087e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087ec:	4b21      	ldr	r3, [pc, #132]	; (8008874 <HAL_RCC_OscConfig+0x758>)
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087f2:	4b20      	ldr	r3, [pc, #128]	; (8008874 <HAL_RCC_OscConfig+0x758>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d031      	beq.n	8008864 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f003 0203 	and.w	r2, r3, #3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800880a:	429a      	cmp	r2, r3
 800880c:	d12a      	bne.n	8008864 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	091b      	lsrs	r3, r3, #4
 8008812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800881a:	429a      	cmp	r2, r3
 800881c:	d122      	bne.n	8008864 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800882a:	429a      	cmp	r2, r3
 800882c:	d11a      	bne.n	8008864 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	0a5b      	lsrs	r3, r3, #9
 8008832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800883c:	429a      	cmp	r2, r3
 800883e:	d111      	bne.n	8008864 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800884e:	429a      	cmp	r2, r3
 8008850:	d108      	bne.n	8008864 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	0e1b      	lsrs	r3, r3, #24
 8008856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008860:	429a      	cmp	r2, r3
 8008862:	d001      	beq.n	8008868 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3730      	adds	r7, #48	; 0x30
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	58024400 	.word	0x58024400

08008878 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e19c      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800888c:	4b8a      	ldr	r3, [pc, #552]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 030f 	and.w	r3, r3, #15
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d910      	bls.n	80088bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800889a:	4b87      	ldr	r3, [pc, #540]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 020f 	bic.w	r2, r3, #15
 80088a2:	4985      	ldr	r1, [pc, #532]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088aa:	4b83      	ldr	r3, [pc, #524]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d001      	beq.n	80088bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e184      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	4b7b      	ldr	r3, [pc, #492]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d908      	bls.n	80088ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088d8:	4b78      	ldr	r3, [pc, #480]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	4975      	ldr	r1, [pc, #468]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d010      	beq.n	8008918 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	4b70      	ldr	r3, [pc, #448]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008902:	429a      	cmp	r2, r3
 8008904:	d908      	bls.n	8008918 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008906:	4b6d      	ldr	r3, [pc, #436]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	496a      	ldr	r1, [pc, #424]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008914:	4313      	orrs	r3, r2
 8008916:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0310 	and.w	r3, r3, #16
 8008920:	2b00      	cmp	r3, #0
 8008922:	d010      	beq.n	8008946 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	4b64      	ldr	r3, [pc, #400]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008930:	429a      	cmp	r2, r3
 8008932:	d908      	bls.n	8008946 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008934:	4b61      	ldr	r3, [pc, #388]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	495e      	ldr	r1, [pc, #376]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008942:	4313      	orrs	r3, r2
 8008944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d010      	beq.n	8008974 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69da      	ldr	r2, [r3, #28]
 8008956:	4b59      	ldr	r3, [pc, #356]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800895e:	429a      	cmp	r2, r3
 8008960:	d908      	bls.n	8008974 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008962:	4b56      	ldr	r3, [pc, #344]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	4953      	ldr	r1, [pc, #332]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008970:	4313      	orrs	r3, r2
 8008972:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d010      	beq.n	80089a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	4b4d      	ldr	r3, [pc, #308]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	429a      	cmp	r2, r3
 800898e:	d908      	bls.n	80089a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008990:	4b4a      	ldr	r3, [pc, #296]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	f023 020f 	bic.w	r2, r3, #15
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4947      	ldr	r1, [pc, #284]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d055      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089ae:	4b43      	ldr	r3, [pc, #268]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	4940      	ldr	r1, [pc, #256]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d107      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089c8:	4b3c      	ldr	r3, [pc, #240]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d121      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0f6      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d107      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089e0:	4b36      	ldr	r3, [pc, #216]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d115      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0ea      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d107      	bne.n	8008a08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089f8:	4b30      	ldr	r3, [pc, #192]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0de      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a08:	4b2c      	ldr	r3, [pc, #176]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e0d6      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a18:	4b28      	ldr	r3, [pc, #160]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f023 0207 	bic.w	r2, r3, #7
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4925      	ldr	r1, [pc, #148]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2a:	f7fc fa25 	bl	8004e78 <HAL_GetTick>
 8008a2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a30:	e00a      	b.n	8008a48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a32:	f7fc fa21 	bl	8004e78 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d901      	bls.n	8008a48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e0be      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a48:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1eb      	bne.n	8008a32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d010      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d208      	bcs.n	8008a88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a76:	4b11      	ldr	r3, [pc, #68]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	f023 020f 	bic.w	r2, r3, #15
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	490e      	ldr	r1, [pc, #56]	; (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a88:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d214      	bcs.n	8008ac0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 020f 	bic.w	r2, r3, #15
 8008a9e:	4906      	ldr	r1, [pc, #24]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aa6:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d005      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e086      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
 8008ab8:	52002000 	.word	0x52002000
 8008abc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d010      	beq.n	8008aee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691a      	ldr	r2, [r3, #16]
 8008ad0:	4b3f      	ldr	r3, [pc, #252]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d208      	bcs.n	8008aee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008adc:	4b3c      	ldr	r3, [pc, #240]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	4939      	ldr	r1, [pc, #228]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d208      	bcs.n	8008b1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	492e      	ldr	r1, [pc, #184]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d010      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	4b28      	ldr	r3, [pc, #160]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d208      	bcs.n	8008b4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b38:	4b25      	ldr	r3, [pc, #148]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	4922      	ldr	r1, [pc, #136]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d010      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d208      	bcs.n	8008b78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	4917      	ldr	r1, [pc, #92]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b78:	f000 f834 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	4912      	ldr	r1, [pc, #72]	; (8008bd4 <HAL_RCC_ClockConfig+0x35c>)
 8008b8a:	5ccb      	ldrb	r3, [r1, r3]
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	4a0d      	ldr	r2, [pc, #52]	; (8008bd4 <HAL_RCC_ClockConfig+0x35c>)
 8008ba0:	5cd3      	ldrb	r3, [r2, r3]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <HAL_RCC_ClockConfig+0x360>)
 8008bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <HAL_RCC_ClockConfig+0x364>)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <HAL_RCC_ClockConfig+0x368>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fc f912 	bl	8004de4 <HAL_InitTick>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	0800e464 	.word	0x0800e464
 8008bd8:	24000004 	.word	0x24000004
 8008bdc:	24000000 	.word	0x24000000
 8008be0:	24000008 	.word	0x24000008

08008be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bea:	4bb3      	ldr	r3, [pc, #716]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf2:	2b18      	cmp	r3, #24
 8008bf4:	f200 8155 	bhi.w	8008ea2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c65 	.word	0x08008c65
 8008c04:	08008ea3 	.word	0x08008ea3
 8008c08:	08008ea3 	.word	0x08008ea3
 8008c0c:	08008ea3 	.word	0x08008ea3
 8008c10:	08008ea3 	.word	0x08008ea3
 8008c14:	08008ea3 	.word	0x08008ea3
 8008c18:	08008ea3 	.word	0x08008ea3
 8008c1c:	08008ea3 	.word	0x08008ea3
 8008c20:	08008c8b 	.word	0x08008c8b
 8008c24:	08008ea3 	.word	0x08008ea3
 8008c28:	08008ea3 	.word	0x08008ea3
 8008c2c:	08008ea3 	.word	0x08008ea3
 8008c30:	08008ea3 	.word	0x08008ea3
 8008c34:	08008ea3 	.word	0x08008ea3
 8008c38:	08008ea3 	.word	0x08008ea3
 8008c3c:	08008ea3 	.word	0x08008ea3
 8008c40:	08008c91 	.word	0x08008c91
 8008c44:	08008ea3 	.word	0x08008ea3
 8008c48:	08008ea3 	.word	0x08008ea3
 8008c4c:	08008ea3 	.word	0x08008ea3
 8008c50:	08008ea3 	.word	0x08008ea3
 8008c54:	08008ea3 	.word	0x08008ea3
 8008c58:	08008ea3 	.word	0x08008ea3
 8008c5c:	08008ea3 	.word	0x08008ea3
 8008c60:	08008c97 	.word	0x08008c97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c64:	4b94      	ldr	r3, [pc, #592]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d009      	beq.n	8008c84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c70:	4b91      	ldr	r3, [pc, #580]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	4a90      	ldr	r2, [pc, #576]	; (8008ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008c82:	e111      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c84:	4b8d      	ldr	r3, [pc, #564]	; (8008ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c86:	61bb      	str	r3, [r7, #24]
    break;
 8008c88:	e10e      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008c8a:	4b8d      	ldr	r3, [pc, #564]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c8c:	61bb      	str	r3, [r7, #24]
    break;
 8008c8e:	e10b      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008c90:	4b8c      	ldr	r3, [pc, #560]	; (8008ec4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c92:	61bb      	str	r3, [r7, #24]
    break;
 8008c94:	e108      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c96:	4b88      	ldr	r3, [pc, #544]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ca0:	4b85      	ldr	r3, [pc, #532]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008caa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cac:	4b82      	ldr	r3, [pc, #520]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008cb6:	4b80      	ldr	r3, [pc, #512]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cba:	08db      	lsrs	r3, r3, #3
 8008cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80e1 	beq.w	8008e9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	f000 8083 	beq.w	8008de8 <HAL_RCC_GetSysClockFreq+0x204>
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f200 80a1 	bhi.w	8008e2c <HAL_RCC_GetSysClockFreq+0x248>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x114>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d056      	beq.n	8008da4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008cf6:	e099      	b.n	8008e2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf8:	4b6f      	ldr	r3, [pc, #444]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02d      	beq.n	8008d60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d04:	4b6c      	ldr	r3, [pc, #432]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	4a6b      	ldr	r2, [pc, #428]	; (8008ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b62      	ldr	r3, [pc, #392]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008d5e:	e087      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ecc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b51      	ldr	r3, [pc, #324]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da2:	e065      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b40      	ldr	r3, [pc, #256]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de6:	e043      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ed4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2a:	e021      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b1e      	ldr	r3, [pc, #120]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008e70:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e74:	0a5b      	lsrs	r3, r3, #9
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e94:	ee17 3a90 	vmov	r3, s15
 8008e98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e9a:	e005      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61bb      	str	r3, [r7, #24]
    break;
 8008ea0:	e002      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ea4:	61bb      	str	r3, [r7, #24]
    break;
 8008ea6:	bf00      	nop
  }

  return sysclockfreq;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3724      	adds	r7, #36	; 0x24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	003d0900 	.word	0x003d0900
 8008ec4:	007a1200 	.word	0x007a1200
 8008ec8:	46000000 	.word	0x46000000
 8008ecc:	4c742400 	.word	0x4c742400
 8008ed0:	4a742400 	.word	0x4a742400
 8008ed4:	4af42400 	.word	0x4af42400

08008ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ede:	f7ff fe81 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	490f      	ldr	r1, [pc, #60]	; (8008f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008ef0:	5ccb      	ldrb	r3, [r1, r3]
 8008ef2:	f003 031f 	and.w	r3, r3, #31
 8008ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8008efa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008f06:	5cd3      	ldrb	r3, [r2, r3]
 8008f08:	f003 031f 	and.w	r3, r3, #31
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f12:	4a07      	ldr	r2, [pc, #28]	; (8008f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f16:	4a07      	ldr	r2, [pc, #28]	; (8008f34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f1c:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	58024400 	.word	0x58024400
 8008f2c:	0800e464 	.word	0x0800e464
 8008f30:	24000004 	.word	0x24000004
 8008f34:	24000000 	.word	0x24000000

08008f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f3c:	f7ff ffcc 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 8008f40:	4602      	mov	r2, r0
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	091b      	lsrs	r3, r3, #4
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	4904      	ldr	r1, [pc, #16]	; (8008f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f4e:	5ccb      	ldrb	r3, [r1, r3]
 8008f50:	f003 031f 	and.w	r3, r3, #31
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	0800e464 	.word	0x0800e464

08008f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f68:	f7ff ffb6 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	4904      	ldr	r1, [pc, #16]	; (8008f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f7a:	5ccb      	ldrb	r3, [r1, r3]
 8008f7c:	f003 031f 	and.w	r3, r3, #31
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	0800e464 	.word	0x0800e464

08008f90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f98:	2300      	movs	r3, #0
 8008f9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d03f      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fb4:	d02a      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008fb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fba:	d824      	bhi.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc0:	d018      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc6:	d81e      	bhi.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd0:	d007      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008fd2:	e018      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd4:	4ba4      	ldr	r3, [pc, #656]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	4aa3      	ldr	r2, [pc, #652]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008fe0:	e015      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f989 	bl	800a300 <RCCEx_PLL2_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ff2:	e00c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3324      	adds	r3, #36	; 0x24
 8008ff8:	2102      	movs	r1, #2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 fa32 	bl	800a464 <RCCEx_PLL3_Config>
 8009000:	4603      	mov	r3, r0
 8009002:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009004:	e003      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
      break;
 800900a:	e000      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800900c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d109      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009014:	4b94      	ldr	r3, [pc, #592]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009020:	4991      	ldr	r1, [pc, #580]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009022:	4313      	orrs	r3, r2
 8009024:	650b      	str	r3, [r1, #80]	; 0x50
 8009026:	e001      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009034:	2b00      	cmp	r3, #0
 8009036:	d03d      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903c:	2b04      	cmp	r3, #4
 800903e:	d826      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009040:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009046:	bf00      	nop
 8009048:	0800905d 	.word	0x0800905d
 800904c:	0800906b 	.word	0x0800906b
 8009050:	0800907d 	.word	0x0800907d
 8009054:	08009095 	.word	0x08009095
 8009058:	08009095 	.word	0x08009095
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905c:	4b82      	ldr	r3, [pc, #520]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	4a81      	ldr	r2, [pc, #516]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009068:	e015      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3304      	adds	r3, #4
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f945 	bl	800a300 <RCCEx_PLL2_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800907a:	e00c      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3324      	adds	r3, #36	; 0x24
 8009080:	2100      	movs	r1, #0
 8009082:	4618      	mov	r0, r3
 8009084:	f001 f9ee 	bl	800a464 <RCCEx_PLL3_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800908c:	e003      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
      break;
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800909c:	4b72      	ldr	r3, [pc, #456]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	f023 0207 	bic.w	r2, r3, #7
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a8:	496f      	ldr	r1, [pc, #444]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	650b      	str	r3, [r1, #80]	; 0x50
 80090ae:	e001      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d051      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090c6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80090ca:	d036      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80090cc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80090d0:	d830      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80090d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090d6:	d032      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80090d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090dc:	d82a      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80090de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090e2:	d02e      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80090e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090e8:	d824      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80090ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ee:	d018      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80090f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090f4:	d81e      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80090fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090fe:	d007      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009100:	e018      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009102:	4b59      	ldr	r3, [pc, #356]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	4a58      	ldr	r2, [pc, #352]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800910c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800910e:	e019      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f001 f8f2 	bl	800a300 <RCCEx_PLL2_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009120:	e010      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3324      	adds	r3, #36	; 0x24
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f001 f99b 	bl	800a464 <RCCEx_PLL3_Config>
 800912e:	4603      	mov	r3, r0
 8009130:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009132:	e007      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]
      break;
 8009138:	e004      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800913a:	bf00      	nop
 800913c:	e002      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10a      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800914a:	4b47      	ldr	r3, [pc, #284]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009158:	4943      	ldr	r1, [pc, #268]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800915a:	4313      	orrs	r3, r2
 800915c:	658b      	str	r3, [r1, #88]	; 0x58
 800915e:	e001      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800916c:	2b00      	cmp	r3, #0
 800916e:	d051      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009176:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800917a:	d036      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800917c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009180:	d830      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009186:	d032      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800918c:	d82a      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800918e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009192:	d02e      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009198:	d824      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800919a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919e:	d018      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80091a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a4:	d81e      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80091aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091ae:	d007      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80091b0:	e018      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b2:	4b2d      	ldr	r3, [pc, #180]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	4a2c      	ldr	r2, [pc, #176]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091be:	e019      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 f89a 	bl	800a300 <RCCEx_PLL2_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091d0:	e010      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3324      	adds	r3, #36	; 0x24
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 f943 	bl	800a464 <RCCEx_PLL3_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091e2:	e007      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
      break;
 80091e8:	e004      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80091ea:	bf00      	nop
 80091ec:	e002      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80091ee:	bf00      	nop
 80091f0:	e000      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80091f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f4:	7dfb      	ldrb	r3, [r7, #23]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009208:	4917      	ldr	r1, [pc, #92]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800920a:	4313      	orrs	r3, r2
 800920c:	658b      	str	r3, [r1, #88]	; 0x58
 800920e:	e001      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d035      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009224:	2b30      	cmp	r3, #48	; 0x30
 8009226:	d01c      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009228:	2b30      	cmp	r3, #48	; 0x30
 800922a:	d817      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800922c:	2b20      	cmp	r3, #32
 800922e:	d00c      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009230:	2b20      	cmp	r3, #32
 8009232:	d813      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d019      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009238:	2b10      	cmp	r3, #16
 800923a:	d10f      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800923c:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	4a09      	ldr	r2, [pc, #36]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009248:	e011      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3304      	adds	r3, #4
 800924e:	2102      	movs	r1, #2
 8009250:	4618      	mov	r0, r3
 8009252:	f001 f855 	bl	800a300 <RCCEx_PLL2_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800925a:	e008      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	75fb      	strb	r3, [r7, #23]
      break;
 8009260:	e005      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009262:	bf00      	nop
 8009264:	e003      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009266:	bf00      	nop
 8009268:	58024400 	.word	0x58024400
      break;
 800926c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009274:	4ba3      	ldr	r3, [pc, #652]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009280:	49a0      	ldr	r1, [pc, #640]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009282:	4313      	orrs	r3, r2
 8009284:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009286:	e001      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d047      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092a0:	d030      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80092a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092a6:	d82a      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80092a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092ac:	d02c      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80092ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092b2:	d824      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80092b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b8:	d018      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80092ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092be:	d81e      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80092c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c8:	d007      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092ca:	e018      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092cc:	4b8d      	ldr	r3, [pc, #564]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a8c      	ldr	r2, [pc, #560]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092d8:	e017      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3304      	adds	r3, #4
 80092de:	2100      	movs	r1, #0
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f80d 	bl	800a300 <RCCEx_PLL2_Config>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092ea:	e00e      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3324      	adds	r3, #36	; 0x24
 80092f0:	2100      	movs	r1, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f8b6 	bl	800a464 <RCCEx_PLL3_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092fc:	e005      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
      break;
 8009302:	e002      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009304:	bf00      	nop
 8009306:	e000      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009310:	4b7c      	ldr	r3, [pc, #496]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009314:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931c:	4979      	ldr	r1, [pc, #484]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800931e:	4313      	orrs	r3, r2
 8009320:	650b      	str	r3, [r1, #80]	; 0x50
 8009322:	e001      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d049      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800933c:	d02e      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800933e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009342:	d828      	bhi.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009348:	d02a      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800934a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800934e:	d822      	bhi.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009350:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009354:	d026      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009356:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800935a:	d81c      	bhi.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800935c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009360:	d010      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009366:	d816      	bhi.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01d      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800936c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009370:	d111      	bne.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3304      	adds	r3, #4
 8009376:	2101      	movs	r1, #1
 8009378:	4618      	mov	r0, r3
 800937a:	f000 ffc1 	bl	800a300 <RCCEx_PLL2_Config>
 800937e:	4603      	mov	r3, r0
 8009380:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009382:	e012      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3324      	adds	r3, #36	; 0x24
 8009388:	2101      	movs	r1, #1
 800938a:	4618      	mov	r0, r3
 800938c:	f001 f86a 	bl	800a464 <RCCEx_PLL3_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009394:	e009      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	75fb      	strb	r3, [r7, #23]
      break;
 800939a:	e006      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800939c:	bf00      	nop
 800939e:	e004      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80093a0:	bf00      	nop
 80093a2:	e002      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80093a4:	bf00      	nop
 80093a6:	e000      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80093a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d109      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80093b0:	4b54      	ldr	r3, [pc, #336]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093bc:	4951      	ldr	r1, [pc, #324]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	650b      	str	r3, [r1, #80]	; 0x50
 80093c2:	e001      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d04b      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093de:	d02e      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80093e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093e4:	d828      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ea:	d02a      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80093ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f0:	d822      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093f6:	d026      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80093f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093fc:	d81c      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009402:	d010      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009408:	d816      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01d      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800940e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009412:	d111      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3304      	adds	r3, #4
 8009418:	2101      	movs	r1, #1
 800941a:	4618      	mov	r0, r3
 800941c:	f000 ff70 	bl	800a300 <RCCEx_PLL2_Config>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009424:	e012      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3324      	adds	r3, #36	; 0x24
 800942a:	2101      	movs	r1, #1
 800942c:	4618      	mov	r0, r3
 800942e:	f001 f819 	bl	800a464 <RCCEx_PLL3_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009436:	e009      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	75fb      	strb	r3, [r7, #23]
      break;
 800943c:	e006      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800943e:	bf00      	nop
 8009440:	e004      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009442:	bf00      	nop
 8009444:	e002      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009446:	bf00      	nop
 8009448:	e000      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800944a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009452:	4b2c      	ldr	r3, [pc, #176]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009456:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009460:	4928      	ldr	r1, [pc, #160]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009462:	4313      	orrs	r3, r2
 8009464:	658b      	str	r3, [r1, #88]	; 0x58
 8009466:	e001      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d02f      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009480:	d00e      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009486:	d814      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d015      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800948c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009490:	d10f      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	4a1b      	ldr	r2, [pc, #108]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800949c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800949e:	e00c      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3304      	adds	r3, #4
 80094a4:	2101      	movs	r1, #1
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 ff2a 	bl	800a300 <RCCEx_PLL2_Config>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80094b0:	e003      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]
      break;
 80094b6:	e000      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80094b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094c0:	4b10      	ldr	r3, [pc, #64]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80094c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094cc:	490d      	ldr	r1, [pc, #52]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	650b      	str	r3, [r1, #80]	; 0x50
 80094d2:	e001      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d034      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d81d      	bhi.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80094ec:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80094ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f2:	bf00      	nop
 80094f4:	0800952f 	.word	0x0800952f
 80094f8:	08009509 	.word	0x08009509
 80094fc:	08009517 	.word	0x08009517
 8009500:	0800952f 	.word	0x0800952f
 8009504:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009508:	4bb1      	ldr	r3, [pc, #708]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4ab0      	ldr	r2, [pc, #704]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800950e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009514:	e00c      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3304      	adds	r3, #4
 800951a:	2102      	movs	r1, #2
 800951c:	4618      	mov	r0, r3
 800951e:	f000 feef 	bl	800a300 <RCCEx_PLL2_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009526:	e003      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
      break;
 800952c:	e000      	b.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800952e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009536:	4ba6      	ldr	r3, [pc, #664]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800953a:	f023 0203 	bic.w	r2, r3, #3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009542:	49a3      	ldr	r1, [pc, #652]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009544:	4313      	orrs	r3, r2
 8009546:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009548:	e001      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8086 	beq.w	8009668 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800955c:	4b9d      	ldr	r3, [pc, #628]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a9c      	ldr	r2, [pc, #624]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009568:	f7fb fc86 	bl	8004e78 <HAL_GetTick>
 800956c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800956e:	e009      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009570:	f7fb fc82 	bl	8004e78 <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b64      	cmp	r3, #100	; 0x64
 800957c:	d902      	bls.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	75fb      	strb	r3, [r7, #23]
        break;
 8009582:	e005      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009584:	4b93      	ldr	r3, [pc, #588]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0ef      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d166      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009596:	4b8e      	ldr	r3, [pc, #568]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095a0:	4053      	eors	r3, r2
 80095a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d013      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095aa:	4b89      	ldr	r3, [pc, #548]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095b4:	4b86      	ldr	r3, [pc, #536]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b8:	4a85      	ldr	r2, [pc, #532]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095be:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095c0:	4b83      	ldr	r3, [pc, #524]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c4:	4a82      	ldr	r2, [pc, #520]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80095cc:	4a80      	ldr	r2, [pc, #512]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095dc:	d115      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095de:	f7fb fc4b 	bl	8004e78 <HAL_GetTick>
 80095e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095e4:	e00b      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095e6:	f7fb fc47 	bl	8004e78 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d902      	bls.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	75fb      	strb	r3, [r7, #23]
            break;
 80095fc:	e005      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095fe:	4b74      	ldr	r3, [pc, #464]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0ed      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d126      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800961a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800961e:	d10d      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009620:	4b6b      	ldr	r3, [pc, #428]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800962e:	0919      	lsrs	r1, r3, #4
 8009630:	4b69      	ldr	r3, [pc, #420]	; (80097d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009632:	400b      	ands	r3, r1
 8009634:	4966      	ldr	r1, [pc, #408]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009636:	4313      	orrs	r3, r2
 8009638:	610b      	str	r3, [r1, #16]
 800963a:	e005      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800963c:	4b64      	ldr	r3, [pc, #400]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	4a63      	ldr	r2, [pc, #396]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009642:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009646:	6113      	str	r3, [r2, #16]
 8009648:	4b61      	ldr	r3, [pc, #388]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800964a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009656:	495e      	ldr	r1, [pc, #376]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009658:	4313      	orrs	r3, r2
 800965a:	670b      	str	r3, [r1, #112]	; 0x70
 800965c:	e004      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	75bb      	strb	r3, [r7, #22]
 8009662:	e001      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d07e      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009678:	2b28      	cmp	r3, #40	; 0x28
 800967a:	d867      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	08009753 	.word	0x08009753
 8009688:	0800974d 	.word	0x0800974d
 800968c:	0800974d 	.word	0x0800974d
 8009690:	0800974d 	.word	0x0800974d
 8009694:	0800974d 	.word	0x0800974d
 8009698:	0800974d 	.word	0x0800974d
 800969c:	0800974d 	.word	0x0800974d
 80096a0:	0800974d 	.word	0x0800974d
 80096a4:	08009729 	.word	0x08009729
 80096a8:	0800974d 	.word	0x0800974d
 80096ac:	0800974d 	.word	0x0800974d
 80096b0:	0800974d 	.word	0x0800974d
 80096b4:	0800974d 	.word	0x0800974d
 80096b8:	0800974d 	.word	0x0800974d
 80096bc:	0800974d 	.word	0x0800974d
 80096c0:	0800974d 	.word	0x0800974d
 80096c4:	0800973b 	.word	0x0800973b
 80096c8:	0800974d 	.word	0x0800974d
 80096cc:	0800974d 	.word	0x0800974d
 80096d0:	0800974d 	.word	0x0800974d
 80096d4:	0800974d 	.word	0x0800974d
 80096d8:	0800974d 	.word	0x0800974d
 80096dc:	0800974d 	.word	0x0800974d
 80096e0:	0800974d 	.word	0x0800974d
 80096e4:	08009753 	.word	0x08009753
 80096e8:	0800974d 	.word	0x0800974d
 80096ec:	0800974d 	.word	0x0800974d
 80096f0:	0800974d 	.word	0x0800974d
 80096f4:	0800974d 	.word	0x0800974d
 80096f8:	0800974d 	.word	0x0800974d
 80096fc:	0800974d 	.word	0x0800974d
 8009700:	0800974d 	.word	0x0800974d
 8009704:	08009753 	.word	0x08009753
 8009708:	0800974d 	.word	0x0800974d
 800970c:	0800974d 	.word	0x0800974d
 8009710:	0800974d 	.word	0x0800974d
 8009714:	0800974d 	.word	0x0800974d
 8009718:	0800974d 	.word	0x0800974d
 800971c:	0800974d 	.word	0x0800974d
 8009720:	0800974d 	.word	0x0800974d
 8009724:	08009753 	.word	0x08009753
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3304      	adds	r3, #4
 800972c:	2101      	movs	r1, #1
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fde6 	bl	800a300 <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009738:	e00c      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3324      	adds	r3, #36	; 0x24
 800973e:	2101      	movs	r1, #1
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fe8f 	bl	800a464 <RCCEx_PLL3_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800974a:	e003      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
      break;
 8009750:	e000      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800975a:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800975c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009766:	491a      	ldr	r1, [pc, #104]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009768:	4313      	orrs	r3, r2
 800976a:	654b      	str	r3, [r1, #84]	; 0x54
 800976c:	e001      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d03e      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009782:	2b05      	cmp	r3, #5
 8009784:	d820      	bhi.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009786:	a201      	add	r2, pc, #4	; (adr r2, 800978c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	080097dd 	.word	0x080097dd
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097b7 	.word	0x080097b7
 8009798:	080097dd 	.word	0x080097dd
 800979c:	080097dd 	.word	0x080097dd
 80097a0:	080097dd 	.word	0x080097dd
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	3304      	adds	r3, #4
 80097a8:	2101      	movs	r1, #1
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fda8 	bl	800a300 <RCCEx_PLL2_Config>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80097b4:	e013      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3324      	adds	r3, #36	; 0x24
 80097ba:	2101      	movs	r1, #1
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fe51 	bl	800a464 <RCCEx_PLL3_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80097c6:	e00a      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]
      break;
 80097cc:	e007      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80097ce:	bf00      	nop
 80097d0:	58024400 	.word	0x58024400
 80097d4:	58024800 	.word	0x58024800
 80097d8:	00ffffcf 	.word	0x00ffffcf
      break;
 80097dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d109      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097e4:	4b9f      	ldr	r3, [pc, #636]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e8:	f023 0207 	bic.w	r2, r3, #7
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f0:	499c      	ldr	r1, [pc, #624]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	654b      	str	r3, [r1, #84]	; 0x54
 80097f6:	e001      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d039      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800980e:	2b05      	cmp	r3, #5
 8009810:	d820      	bhi.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	0800985b 	.word	0x0800985b
 800981c:	08009831 	.word	0x08009831
 8009820:	08009843 	.word	0x08009843
 8009824:	0800985b 	.word	0x0800985b
 8009828:	0800985b 	.word	0x0800985b
 800982c:	0800985b 	.word	0x0800985b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3304      	adds	r3, #4
 8009834:	2101      	movs	r1, #1
 8009836:	4618      	mov	r0, r3
 8009838:	f000 fd62 	bl	800a300 <RCCEx_PLL2_Config>
 800983c:	4603      	mov	r3, r0
 800983e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009840:	e00c      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3324      	adds	r3, #36	; 0x24
 8009846:	2101      	movs	r1, #1
 8009848:	4618      	mov	r0, r3
 800984a:	f000 fe0b 	bl	800a464 <RCCEx_PLL3_Config>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009852:	e003      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	75fb      	strb	r3, [r7, #23]
      break;
 8009858:	e000      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800985a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009862:	4b80      	ldr	r3, [pc, #512]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009866:	f023 0207 	bic.w	r2, r3, #7
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009870:	497c      	ldr	r1, [pc, #496]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009872:	4313      	orrs	r3, r2
 8009874:	658b      	str	r3, [r1, #88]	; 0x58
 8009876:	e001      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d04b      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009892:	d02e      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009898:	d828      	bhi.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800989a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989e:	d02a      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80098a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a4:	d822      	bhi.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80098a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098aa:	d026      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80098ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098b0:	d81c      	bhi.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80098b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b6:	d010      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80098b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098bc:	d816      	bhi.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01d      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80098c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098c6:	d111      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	2100      	movs	r1, #0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 fd16 	bl	800a300 <RCCEx_PLL2_Config>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098d8:	e012      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3324      	adds	r3, #36	; 0x24
 80098de:	2102      	movs	r1, #2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fdbf 	bl	800a464 <RCCEx_PLL3_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098ea:	e009      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75fb      	strb	r3, [r7, #23]
      break;
 80098f0:	e006      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098f2:	bf00      	nop
 80098f4:	e004      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098f6:	bf00      	nop
 80098f8:	e002      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098fa:	bf00      	nop
 80098fc:	e000      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009906:	4b57      	ldr	r3, [pc, #348]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009914:	4953      	ldr	r1, [pc, #332]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009916:	4313      	orrs	r3, r2
 8009918:	654b      	str	r3, [r1, #84]	; 0x54
 800991a:	e001      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d04b      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009932:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009936:	d02e      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009938:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800993c:	d828      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800993e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009942:	d02a      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009948:	d822      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800994a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800994e:	d026      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009954:	d81c      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800995a:	d010      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800995c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009960:	d816      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01d      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996a:	d111      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fcc4 	bl	800a300 <RCCEx_PLL2_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800997c:	e012      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3324      	adds	r3, #36	; 0x24
 8009982:	2102      	movs	r1, #2
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fd6d 	bl	800a464 <RCCEx_PLL3_Config>
 800998a:	4603      	mov	r3, r0
 800998c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800998e:	e009      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	75fb      	strb	r3, [r7, #23]
      break;
 8009994:	e006      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009996:	bf00      	nop
 8009998:	e004      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800999a:	bf00      	nop
 800999c:	e002      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800999e:	bf00      	nop
 80099a0:	e000      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80099a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10a      	bne.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80099aa:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099b8:	492a      	ldr	r1, [pc, #168]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	658b      	str	r3, [r1, #88]	; 0x58
 80099be:	e001      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d04d      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099da:	d02e      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80099dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099e0:	d828      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80099e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e6:	d02a      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80099e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ec:	d822      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80099ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099f2:	d026      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80099f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099f8:	d81c      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80099fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099fe:	d010      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a04:	d816      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01d      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0e:	d111      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3304      	adds	r3, #4
 8009a14:	2100      	movs	r1, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fc72 	bl	800a300 <RCCEx_PLL2_Config>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009a20:	e012      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3324      	adds	r3, #36	; 0x24
 8009a26:	2102      	movs	r1, #2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fd1b 	bl	800a464 <RCCEx_PLL3_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009a32:	e009      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	75fb      	strb	r3, [r7, #23]
      break;
 8009a38:	e006      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009a3a:	bf00      	nop
 8009a3c:	e004      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009a3e:	bf00      	nop
 8009a40:	e002      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009a42:	bf00      	nop
 8009a44:	e000      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a48:	7dfb      	ldrb	r3, [r7, #23]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10c      	bne.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a5c:	4901      	ldr	r1, [pc, #4]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	658b      	str	r3, [r1, #88]	; 0x58
 8009a62:	e003      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d018      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a80:	d10a      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	2102      	movs	r1, #2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fceb 	bl	800a464 <RCCEx_PLL3_Config>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a98:	4b8a      	ldr	r3, [pc, #552]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aa4:	4987      	ldr	r1, [pc, #540]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0310 	and.w	r3, r3, #16
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01a      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac0:	d10a      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3324      	adds	r3, #36	; 0x24
 8009ac6:	2102      	movs	r1, #2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fccb 	bl	800a464 <RCCEx_PLL3_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ad8:	4b7a      	ldr	r3, [pc, #488]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae6:	4977      	ldr	r1, [pc, #476]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d034      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b02:	d01d      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b08:	d817      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b12:	d009      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009b14:	e011      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fbef 	bl	800a300 <RCCEx_PLL2_Config>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009b26:	e00c      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3324      	adds	r3, #36	; 0x24
 8009b2c:	2102      	movs	r1, #2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fc98 	bl	800a464 <RCCEx_PLL3_Config>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009b38:	e003      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3e:	e000      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b48:	4b5e      	ldr	r3, [pc, #376]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b56:	495b      	ldr	r1, [pc, #364]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	658b      	str	r3, [r1, #88]	; 0x58
 8009b5c:	e001      	b.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d033      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b78:	d01c      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009b7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b7e:	d816      	bhi.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b84:	d003      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b8a:	d007      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009b8c:	e00f      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b8e:	4b4d      	ldr	r3, [pc, #308]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	4a4c      	ldr	r2, [pc, #304]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b9a:	e00c      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3324      	adds	r3, #36	; 0x24
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 fc5e 	bl	800a464 <RCCEx_PLL3_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009bac:	e003      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb2:	e000      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bbc:	4b41      	ldr	r3, [pc, #260]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bca:	493e      	ldr	r1, [pc, #248]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	654b      	str	r3, [r1, #84]	; 0x54
 8009bd0:	e001      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d029      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bee:	d007      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009bf0:	e00f      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf2:	4b34      	ldr	r3, [pc, #208]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	4a33      	ldr	r2, [pc, #204]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bfe:	e00b      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3304      	adds	r3, #4
 8009c04:	2102      	movs	r1, #2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fb7a 	bl	800a300 <RCCEx_PLL2_Config>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009c10:	e002      	b.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	75fb      	strb	r3, [r7, #23]
      break;
 8009c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d109      	bne.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c1e:	4b29      	ldr	r3, [pc, #164]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c2a:	4926      	ldr	r1, [pc, #152]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c30:	e001      	b.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3324      	adds	r3, #36	; 0x24
 8009c46:	2102      	movs	r1, #2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fc0b 	bl	800a464 <RCCEx_PLL3_Config>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d033      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c6c:	d017      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c72:	d811      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c78:	d013      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c7e:	d80b      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d010      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c88:	d106      	bne.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c8a:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	4a0d      	ldr	r2, [pc, #52]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c96:	e007      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c9c:	e004      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c9e:	bf00      	nop
 8009ca0:	e002      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009ca2:	bf00      	nop
 8009ca4:	e000      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10c      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cae:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cba:	4902      	ldr	r1, [pc, #8]	; (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	654b      	str	r3, [r1, #84]	; 0x54
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009cd8:	4b29      	ldr	r3, [pc, #164]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce4:	4926      	ldr	r1, [pc, #152]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d008      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cf6:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d02:	491f      	ldr	r1, [pc, #124]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00d      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d14:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	4a19      	ldr	r2, [pc, #100]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d1e:	6113      	str	r3, [r2, #16]
 8009d20:	4b17      	ldr	r3, [pc, #92]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d2a:	4915      	ldr	r1, [pc, #84]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da08      	bge.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d38:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d44:	490e      	ldr	r1, [pc, #56]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d64:	4906      	ldr	r1, [pc, #24]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009d6a:	7dbb      	ldrb	r3, [r7, #22]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	e000      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	58024400 	.word	0x58024400

08009d84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d88:	f7ff f8a6 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	091b      	lsrs	r3, r3, #4
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	4904      	ldr	r1, [pc, #16]	; (8009dac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d9a:	5ccb      	ldrb	r3, [r1, r3]
 8009d9c:	f003 031f 	and.w	r3, r3, #31
 8009da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	58024400 	.word	0x58024400
 8009dac:	0800e464 	.word	0x0800e464

08009db0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b089      	sub	sp, #36	; 0x24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db8:	4ba1      	ldr	r3, [pc, #644]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009dc2:	4b9f      	ldr	r3, [pc, #636]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	0b1b      	lsrs	r3, r3, #12
 8009dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009dce:	4b9c      	ldr	r3, [pc, #624]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	091b      	lsrs	r3, r3, #4
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009dda:	4b99      	ldr	r3, [pc, #612]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 8111 	beq.w	800a020 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f000 8083 	beq.w	8009f0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	f200 80a1 	bhi.w	8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d056      	beq.n	8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009e1a:	e099      	b.n	8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1c:	4b88      	ldr	r3, [pc, #544]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d02d      	beq.n	8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e28:	4b85      	ldr	r3, [pc, #532]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	4a84      	ldr	r2, [pc, #528]	; (800a044 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e52:	4b7b      	ldr	r3, [pc, #492]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e82:	e087      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e96:	4b6a      	ldr	r3, [pc, #424]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec6:	e065      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eda:	4b59      	ldr	r3, [pc, #356]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f0a:	e043      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1e:	4b48      	ldr	r3, [pc, #288]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f4e:	e021      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f62:	4b37      	ldr	r3, [pc, #220]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f94:	4b2a      	ldr	r3, [pc, #168]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	0a5b      	lsrs	r3, r3, #9
 8009f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fba:	ee17 2a90 	vmov	r2, s15
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009fc2:	4b1f      	ldr	r3, [pc, #124]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe8:	ee17 2a90 	vmov	r2, s15
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ff0:	4b13      	ldr	r3, [pc, #76]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	0e1b      	lsrs	r3, r3, #24
 8009ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a016:	ee17 2a90 	vmov	r2, s15
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a01e:	e008      	b.n	800a032 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	609a      	str	r2, [r3, #8]
}
 800a032:	bf00      	nop
 800a034:	3724      	adds	r7, #36	; 0x24
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
 800a044:	03d09000 	.word	0x03d09000
 800a048:	46000000 	.word	0x46000000
 800a04c:	4c742400 	.word	0x4c742400
 800a050:	4a742400 	.word	0x4a742400
 800a054:	4af42400 	.word	0x4af42400

0800a058 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a058:	b480      	push	{r7}
 800a05a:	b089      	sub	sp, #36	; 0x24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a060:	4ba1      	ldr	r3, [pc, #644]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a06a:	4b9f      	ldr	r3, [pc, #636]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	0d1b      	lsrs	r3, r3, #20
 800a070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a074:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a076:	4b9c      	ldr	r3, [pc, #624]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a082:	4b99      	ldr	r3, [pc, #612]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a086:	08db      	lsrs	r3, r3, #3
 800a088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	fb02 f303 	mul.w	r3, r2, r3
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8111 	beq.w	800a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	f000 8083 	beq.w	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	f200 80a1 	bhi.w	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d056      	beq.n	800a170 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a0c2:	e099      	b.n	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0c4:	4b88      	ldr	r3, [pc, #544]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02d      	beq.n	800a12c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0d0:	4b85      	ldr	r3, [pc, #532]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	08db      	lsrs	r3, r3, #3
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	4a84      	ldr	r2, [pc, #528]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fa:	4b7b      	ldr	r3, [pc, #492]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a12a:	e087      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a136:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13e:	4b6a      	ldr	r3, [pc, #424]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a152:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a16e:	e065      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a182:	4b59      	ldr	r3, [pc, #356]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	ed97 6a03 	vldr	s12, [r7, #12]
 800a196:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1b2:	e043      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c6:	4b48      	ldr	r3, [pc, #288]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1f6:	e021      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20a:	4b37      	ldr	r3, [pc, #220]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a21e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a23a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a23c:	4b2a      	ldr	r3, [pc, #168]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	0a5b      	lsrs	r3, r3, #9
 800a242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a256:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a262:	ee17 2a90 	vmov	r2, s15
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a26a:	4b1f      	ldr	r3, [pc, #124]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a284:	edd7 6a07 	vldr	s13, [r7, #28]
 800a288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a290:	ee17 2a90 	vmov	r2, s15
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a298:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	0e1b      	lsrs	r3, r3, #24
 800a29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2be:	ee17 2a90 	vmov	r2, s15
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a2c6:	e008      	b.n	800a2da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	609a      	str	r2, [r3, #8]
}
 800a2da:	bf00      	nop
 800a2dc:	3724      	adds	r7, #36	; 0x24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	03d09000 	.word	0x03d09000
 800a2f0:	46000000 	.word	0x46000000
 800a2f4:	4c742400 	.word	0x4c742400
 800a2f8:	4a742400 	.word	0x4a742400
 800a2fc:	4af42400 	.word	0x4af42400

0800a300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a30e:	4b53      	ldr	r3, [pc, #332]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	2b03      	cmp	r3, #3
 800a318:	d101      	bne.n	800a31e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e099      	b.n	800a452 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a31e:	4b4f      	ldr	r3, [pc, #316]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a4e      	ldr	r2, [pc, #312]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a324:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a32a:	f7fa fda5 	bl	8004e78 <HAL_GetTick>
 800a32e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a330:	e008      	b.n	800a344 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a332:	f7fa fda1 	bl	8004e78 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d901      	bls.n	800a344 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e086      	b.n	800a452 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a344:	4b45      	ldr	r3, [pc, #276]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1f0      	bne.n	800a332 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a350:	4b42      	ldr	r3, [pc, #264]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	031b      	lsls	r3, r3, #12
 800a35e:	493f      	ldr	r1, [pc, #252]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a360:	4313      	orrs	r3, r2
 800a362:	628b      	str	r3, [r1, #40]	; 0x28
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	3b01      	subs	r3, #1
 800a36a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	3b01      	subs	r3, #1
 800a374:	025b      	lsls	r3, r3, #9
 800a376:	b29b      	uxth	r3, r3
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	3b01      	subs	r3, #1
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	061b      	lsls	r3, r3, #24
 800a390:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a394:	4931      	ldr	r1, [pc, #196]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a39a:	4b30      	ldr	r3, [pc, #192]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	492d      	ldr	r1, [pc, #180]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3ac:	4b2b      	ldr	r3, [pc, #172]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	f023 0220 	bic.w	r2, r3, #32
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	4928      	ldr	r1, [pc, #160]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a3be:	4b27      	ldr	r3, [pc, #156]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	4a26      	ldr	r2, [pc, #152]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3ca:	4b24      	ldr	r3, [pc, #144]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <RCCEx_PLL2_Config+0x160>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	69d2      	ldr	r2, [r2, #28]
 800a3d6:	00d2      	lsls	r2, r2, #3
 800a3d8:	4920      	ldr	r1, [pc, #128]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3de:	4b1f      	ldr	r3, [pc, #124]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e2:	4a1e      	ldr	r2, [pc, #120]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3e4:	f043 0310 	orr.w	r3, r3, #16
 800a3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3f0:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	4a19      	ldr	r2, [pc, #100]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3fc:	e00f      	b.n	800a41e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d106      	bne.n	800a412 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a404:	4b15      	ldr	r3, [pc, #84]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a14      	ldr	r2, [pc, #80]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a40a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a40e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a410:	e005      	b.n	800a41e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	4a11      	ldr	r2, [pc, #68]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a41c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a0e      	ldr	r2, [pc, #56]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a424:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a42a:	f7fa fd25 	bl	8004e78 <HAL_GetTick>
 800a42e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a430:	e008      	b.n	800a444 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a432:	f7fa fd21 	bl	8004e78 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e006      	b.n	800a452 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f0      	beq.n	800a432 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a450:	7bfb      	ldrb	r3, [r7, #15]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	58024400 	.word	0x58024400
 800a460:	ffff0007 	.word	0xffff0007

0800a464 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a472:	4b53      	ldr	r3, [pc, #332]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d101      	bne.n	800a482 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e099      	b.n	800a5b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a482:	4b4f      	ldr	r3, [pc, #316]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a4e      	ldr	r2, [pc, #312]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a48e:	f7fa fcf3 	bl	8004e78 <HAL_GetTick>
 800a492:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a494:	e008      	b.n	800a4a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a496:	f7fa fcef 	bl	8004e78 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e086      	b.n	800a5b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4a8:	4b45      	ldr	r3, [pc, #276]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f0      	bne.n	800a496 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a4b4:	4b42      	ldr	r3, [pc, #264]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	051b      	lsls	r3, r3, #20
 800a4c2:	493f      	ldr	r1, [pc, #252]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	025b      	lsls	r3, r3, #9
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	061b      	lsls	r3, r3, #24
 800a4f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4f8:	4931      	ldr	r1, [pc, #196]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4fe:	4b30      	ldr	r3, [pc, #192]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	492d      	ldr	r1, [pc, #180]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a510:	4b2b      	ldr	r3, [pc, #172]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	4928      	ldr	r1, [pc, #160]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a522:	4b27      	ldr	r3, [pc, #156]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a526:	4a26      	ldr	r2, [pc, #152]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a52c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a52e:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a532:	4b24      	ldr	r3, [pc, #144]	; (800a5c4 <RCCEx_PLL3_Config+0x160>)
 800a534:	4013      	ands	r3, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	69d2      	ldr	r2, [r2, #28]
 800a53a:	00d2      	lsls	r2, r2, #3
 800a53c:	4920      	ldr	r1, [pc, #128]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a542:	4b1f      	ldr	r3, [pc, #124]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a546:	4a1e      	ldr	r2, [pc, #120]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a54c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a554:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a558:	4a19      	ldr	r2, [pc, #100]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a55a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a55e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a560:	e00f      	b.n	800a582 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d106      	bne.n	800a576 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a568:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	4a14      	ldr	r2, [pc, #80]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a56e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a572:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a574:	e005      	b.n	800a582 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a576:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	4a11      	ldr	r2, [pc, #68]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a57c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a580:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a582:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a0e      	ldr	r2, [pc, #56]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a58c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58e:	f7fa fc73 	bl	8004e78 <HAL_GetTick>
 800a592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a594:	e008      	b.n	800a5a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a596:	f7fa fc6f 	bl	8004e78 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d901      	bls.n	800a5a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e006      	b.n	800a5b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0f0      	beq.n	800a596 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	58024400 	.word	0x58024400
 800a5c4:	ffff0007 	.word	0xffff0007

0800a5c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e049      	b.n	800a66e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d106      	bne.n	800a5f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7fa f864 	bl	80046bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3304      	adds	r3, #4
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f000 fdc0 	bl	800b18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d001      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e05e      	b.n	800a74e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a2b      	ldr	r2, [pc, #172]	; (800a75c <HAL_TIM_Base_Start_IT+0xe4>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d02c      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ba:	d027      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a27      	ldr	r2, [pc, #156]	; (800a760 <HAL_TIM_Base_Start_IT+0xe8>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d022      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a26      	ldr	r2, [pc, #152]	; (800a764 <HAL_TIM_Base_Start_IT+0xec>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d01d      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a24      	ldr	r2, [pc, #144]	; (800a768 <HAL_TIM_Base_Start_IT+0xf0>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d018      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a23      	ldr	r2, [pc, #140]	; (800a76c <HAL_TIM_Base_Start_IT+0xf4>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d013      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a21      	ldr	r2, [pc, #132]	; (800a770 <HAL_TIM_Base_Start_IT+0xf8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00e      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a20      	ldr	r2, [pc, #128]	; (800a774 <HAL_TIM_Base_Start_IT+0xfc>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d009      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <HAL_TIM_Base_Start_IT+0x100>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_TIM_Base_Start_IT+0x94>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1d      	ldr	r2, [pc, #116]	; (800a77c <HAL_TIM_Base_Start_IT+0x104>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d115      	bne.n	800a738 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <HAL_TIM_Base_Start_IT+0x108>)
 800a714:	4013      	ands	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b06      	cmp	r3, #6
 800a71c:	d015      	beq.n	800a74a <HAL_TIM_Base_Start_IT+0xd2>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a724:	d011      	beq.n	800a74a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0201 	orr.w	r2, r2, #1
 800a734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a736:	e008      	b.n	800a74a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f042 0201 	orr.w	r2, r2, #1
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e000      	b.n	800a74c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40010000 	.word	0x40010000
 800a760:	40000400 	.word	0x40000400
 800a764:	40000800 	.word	0x40000800
 800a768:	40000c00 	.word	0x40000c00
 800a76c:	40010400 	.word	0x40010400
 800a770:	40001800 	.word	0x40001800
 800a774:	40014000 	.word	0x40014000
 800a778:	4000e000 	.word	0x4000e000
 800a77c:	4000e400 	.word	0x4000e400
 800a780:	00010007 	.word	0x00010007

0800a784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e049      	b.n	800a82a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7f9 ffce 	bl	800474c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f000 fce2 	bl	800b18c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d109      	bne.n	800a858 <HAL_TIM_PWM_Start+0x24>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	bf14      	ite	ne
 800a850:	2301      	movne	r3, #1
 800a852:	2300      	moveq	r3, #0
 800a854:	b2db      	uxtb	r3, r3
 800a856:	e03c      	b.n	800a8d2 <HAL_TIM_PWM_Start+0x9e>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d109      	bne.n	800a872 <HAL_TIM_PWM_Start+0x3e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b01      	cmp	r3, #1
 800a868:	bf14      	ite	ne
 800a86a:	2301      	movne	r3, #1
 800a86c:	2300      	moveq	r3, #0
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	e02f      	b.n	800a8d2 <HAL_TIM_PWM_Start+0x9e>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b08      	cmp	r3, #8
 800a876:	d109      	bne.n	800a88c <HAL_TIM_PWM_Start+0x58>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b01      	cmp	r3, #1
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	e022      	b.n	800a8d2 <HAL_TIM_PWM_Start+0x9e>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b0c      	cmp	r3, #12
 800a890:	d109      	bne.n	800a8a6 <HAL_TIM_PWM_Start+0x72>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	bf14      	ite	ne
 800a89e:	2301      	movne	r3, #1
 800a8a0:	2300      	moveq	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	e015      	b.n	800a8d2 <HAL_TIM_PWM_Start+0x9e>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b10      	cmp	r3, #16
 800a8aa:	d109      	bne.n	800a8c0 <HAL_TIM_PWM_Start+0x8c>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	bf14      	ite	ne
 800a8b8:	2301      	movne	r3, #1
 800a8ba:	2300      	moveq	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	e008      	b.n	800a8d2 <HAL_TIM_PWM_Start+0x9e>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	bf14      	ite	ne
 800a8cc:	2301      	movne	r3, #1
 800a8ce:	2300      	moveq	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e0ab      	b.n	800aa32 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <HAL_TIM_PWM_Start+0xb6>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8e8:	e023      	b.n	800a932 <HAL_TIM_PWM_Start+0xfe>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d104      	bne.n	800a8fa <HAL_TIM_PWM_Start+0xc6>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8f8:	e01b      	b.n	800a932 <HAL_TIM_PWM_Start+0xfe>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d104      	bne.n	800a90a <HAL_TIM_PWM_Start+0xd6>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a908:	e013      	b.n	800a932 <HAL_TIM_PWM_Start+0xfe>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b0c      	cmp	r3, #12
 800a90e:	d104      	bne.n	800a91a <HAL_TIM_PWM_Start+0xe6>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a918:	e00b      	b.n	800a932 <HAL_TIM_PWM_Start+0xfe>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d104      	bne.n	800a92a <HAL_TIM_PWM_Start+0xf6>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a928:	e003      	b.n	800a932 <HAL_TIM_PWM_Start+0xfe>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2201      	movs	r2, #1
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 ffa2 	bl	800b884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a3d      	ldr	r2, [pc, #244]	; (800aa3c <HAL_TIM_PWM_Start+0x208>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d013      	beq.n	800a972 <HAL_TIM_PWM_Start+0x13e>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a3c      	ldr	r2, [pc, #240]	; (800aa40 <HAL_TIM_PWM_Start+0x20c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d00e      	beq.n	800a972 <HAL_TIM_PWM_Start+0x13e>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a3a      	ldr	r2, [pc, #232]	; (800aa44 <HAL_TIM_PWM_Start+0x210>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d009      	beq.n	800a972 <HAL_TIM_PWM_Start+0x13e>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a39      	ldr	r2, [pc, #228]	; (800aa48 <HAL_TIM_PWM_Start+0x214>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d004      	beq.n	800a972 <HAL_TIM_PWM_Start+0x13e>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a37      	ldr	r2, [pc, #220]	; (800aa4c <HAL_TIM_PWM_Start+0x218>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d101      	bne.n	800a976 <HAL_TIM_PWM_Start+0x142>
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <HAL_TIM_PWM_Start+0x144>
 800a976:	2300      	movs	r3, #0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d007      	beq.n	800a98c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a98a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a2a      	ldr	r2, [pc, #168]	; (800aa3c <HAL_TIM_PWM_Start+0x208>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d02c      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a99e:	d027      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a2a      	ldr	r2, [pc, #168]	; (800aa50 <HAL_TIM_PWM_Start+0x21c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d022      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a29      	ldr	r2, [pc, #164]	; (800aa54 <HAL_TIM_PWM_Start+0x220>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d01d      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a27      	ldr	r2, [pc, #156]	; (800aa58 <HAL_TIM_PWM_Start+0x224>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d018      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <HAL_TIM_PWM_Start+0x20c>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d013      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a23      	ldr	r2, [pc, #140]	; (800aa5c <HAL_TIM_PWM_Start+0x228>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00e      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <HAL_TIM_PWM_Start+0x210>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d009      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <HAL_TIM_PWM_Start+0x22c>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d004      	beq.n	800a9f0 <HAL_TIM_PWM_Start+0x1bc>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a1e      	ldr	r2, [pc, #120]	; (800aa64 <HAL_TIM_PWM_Start+0x230>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d115      	bne.n	800aa1c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	4b1c      	ldr	r3, [pc, #112]	; (800aa68 <HAL_TIM_PWM_Start+0x234>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2b06      	cmp	r3, #6
 800aa00:	d015      	beq.n	800aa2e <HAL_TIM_PWM_Start+0x1fa>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa08:	d011      	beq.n	800aa2e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f042 0201 	orr.w	r2, r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa1a:	e008      	b.n	800aa2e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f042 0201 	orr.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	e000      	b.n	800aa30 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	40010000 	.word	0x40010000
 800aa40:	40010400 	.word	0x40010400
 800aa44:	40014000 	.word	0x40014000
 800aa48:	40014400 	.word	0x40014400
 800aa4c:	40014800 	.word	0x40014800
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	40001800 	.word	0x40001800
 800aa60:	4000e000 	.word	0x4000e000
 800aa64:	4000e400 	.word	0x4000e400
 800aa68:	00010007 	.word	0x00010007

0800aa6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e08f      	b.n	800aba0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7f9 fd03 	bl	80044a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6899      	ldr	r1, [r3, #8]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	4b3e      	ldr	r3, [pc, #248]	; (800aba8 <HAL_TIM_Encoder_Init+0x13c>)
 800aaae:	400b      	ands	r3, r1
 800aab0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3304      	adds	r3, #4
 800aaba:	4619      	mov	r1, r3
 800aabc:	4610      	mov	r0, r2
 800aabe:	f000 fb65 	bl	800b18c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	4b31      	ldr	r3, [pc, #196]	; (800abac <HAL_TIM_Encoder_Init+0x140>)
 800aae8:	4013      	ands	r3, r2
 800aaea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	021b      	lsls	r3, r3, #8
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	4b2b      	ldr	r3, [pc, #172]	; (800abb0 <HAL_TIM_Encoder_Init+0x144>)
 800ab02:	4013      	ands	r3, r2
 800ab04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	4b2a      	ldr	r3, [pc, #168]	; (800abb4 <HAL_TIM_Encoder_Init+0x148>)
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	011a      	lsls	r2, r3, #4
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	031b      	lsls	r3, r3, #12
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ab3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ab42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	011b      	lsls	r3, r3, #4
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	fffebff8 	.word	0xfffebff8
 800abac:	fffffcfc 	.word	0xfffffcfc
 800abb0:	fffff3f3 	.word	0xfffff3f3
 800abb4:	ffff0f0f 	.word	0xffff0f0f

0800abb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800abd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d110      	bne.n	800ac0a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d102      	bne.n	800abf4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800abee:	7b7b      	ldrb	r3, [r7, #13]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d001      	beq.n	800abf8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e069      	b.n	800accc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac08:	e031      	b.n	800ac6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d110      	bne.n	800ac32 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d102      	bne.n	800ac1c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ac16:	7b3b      	ldrb	r3, [r7, #12]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d001      	beq.n	800ac20 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e055      	b.n	800accc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac30:	e01d      	b.n	800ac6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d108      	bne.n	800ac4a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d105      	bne.n	800ac4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac3e:	7b7b      	ldrb	r3, [r7, #13]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d102      	bne.n	800ac4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ac44:	7b3b      	ldrb	r3, [r7, #12]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d001      	beq.n	800ac4e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e03e      	b.n	800accc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2202      	movs	r2, #2
 800ac52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2202      	movs	r2, #2
 800ac5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2202      	movs	r2, #2
 800ac6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d003      	beq.n	800ac7c <HAL_TIM_Encoder_Start+0xc4>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d008      	beq.n	800ac8c <HAL_TIM_Encoder_Start+0xd4>
 800ac7a:	e00f      	b.n	800ac9c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2201      	movs	r2, #1
 800ac82:	2100      	movs	r1, #0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fdfd 	bl	800b884 <TIM_CCxChannelCmd>
      break;
 800ac8a:	e016      	b.n	800acba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2201      	movs	r2, #1
 800ac92:	2104      	movs	r1, #4
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 fdf5 	bl	800b884 <TIM_CCxChannelCmd>
      break;
 800ac9a:	e00e      	b.n	800acba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2201      	movs	r2, #1
 800aca2:	2100      	movs	r1, #0
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fded 	bl	800b884 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2201      	movs	r2, #1
 800acb0:	2104      	movs	r1, #4
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fde6 	bl	800b884 <TIM_CCxChannelCmd>
      break;
 800acb8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f042 0201 	orr.w	r2, r2, #1
 800acc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	f003 0302 	and.w	r3, r3, #2
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d122      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d11b      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f06f 0202 	mvn.w	r2, #2
 800ad00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa1a 	bl	800b150 <HAL_TIM_IC_CaptureCallback>
 800ad1c:	e005      	b.n	800ad2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa0c 	bl	800b13c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa1d 	bl	800b164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	d122      	bne.n	800ad84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d11b      	bne.n	800ad84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f06f 0204 	mvn.w	r2, #4
 800ad54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f9f0 	bl	800b150 <HAL_TIM_IC_CaptureCallback>
 800ad70:	e005      	b.n	800ad7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f9e2 	bl	800b13c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f9f3 	bl	800b164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	d122      	bne.n	800add8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b08      	cmp	r3, #8
 800ad9e:	d11b      	bne.n	800add8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f06f 0208 	mvn.w	r2, #8
 800ada8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2204      	movs	r2, #4
 800adae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	f003 0303 	and.w	r3, r3, #3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9c6 	bl	800b150 <HAL_TIM_IC_CaptureCallback>
 800adc4:	e005      	b.n	800add2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f9b8 	bl	800b13c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f9c9 	bl	800b164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f003 0310 	and.w	r3, r3, #16
 800ade2:	2b10      	cmp	r3, #16
 800ade4:	d122      	bne.n	800ae2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d11b      	bne.n	800ae2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f06f 0210 	mvn.w	r2, #16
 800adfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2208      	movs	r2, #8
 800ae02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	69db      	ldr	r3, [r3, #28]
 800ae0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f99c 	bl	800b150 <HAL_TIM_IC_CaptureCallback>
 800ae18:	e005      	b.n	800ae26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f98e 	bl	800b13c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f99f 	bl	800b164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d10e      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d107      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f06f 0201 	mvn.w	r2, #1
 800ae50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7f8 fdbc 	bl	80039d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae62:	2b80      	cmp	r3, #128	; 0x80
 800ae64:	d10e      	bne.n	800ae84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae70:	2b80      	cmp	r3, #128	; 0x80
 800ae72:	d107      	bne.n	800ae84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fe6c 	bl	800bb5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae92:	d10e      	bne.n	800aeb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae9e:	2b80      	cmp	r3, #128	; 0x80
 800aea0:	d107      	bne.n	800aeb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aeaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fe5f 	bl	800bb70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aebc:	2b40      	cmp	r3, #64	; 0x40
 800aebe:	d10e      	bne.n	800aede <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeca:	2b40      	cmp	r3, #64	; 0x40
 800aecc:	d107      	bne.n	800aede <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f94d 	bl	800b178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	f003 0320 	and.w	r3, r3, #32
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	d10e      	bne.n	800af0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d107      	bne.n	800af0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f06f 0220 	mvn.w	r2, #32
 800af02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fe1f 	bl	800bb48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d101      	bne.n	800af32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af2e:	2302      	movs	r3, #2
 800af30:	e0ff      	b.n	800b132 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b14      	cmp	r3, #20
 800af3e:	f200 80f0 	bhi.w	800b122 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800b123 	.word	0x0800b123
 800af50:	0800b123 	.word	0x0800b123
 800af54:	0800b123 	.word	0x0800b123
 800af58:	0800afdd 	.word	0x0800afdd
 800af5c:	0800b123 	.word	0x0800b123
 800af60:	0800b123 	.word	0x0800b123
 800af64:	0800b123 	.word	0x0800b123
 800af68:	0800b01f 	.word	0x0800b01f
 800af6c:	0800b123 	.word	0x0800b123
 800af70:	0800b123 	.word	0x0800b123
 800af74:	0800b123 	.word	0x0800b123
 800af78:	0800b05f 	.word	0x0800b05f
 800af7c:	0800b123 	.word	0x0800b123
 800af80:	0800b123 	.word	0x0800b123
 800af84:	0800b123 	.word	0x0800b123
 800af88:	0800b0a1 	.word	0x0800b0a1
 800af8c:	0800b123 	.word	0x0800b123
 800af90:	0800b123 	.word	0x0800b123
 800af94:	0800b123 	.word	0x0800b123
 800af98:	0800b0e1 	.word	0x0800b0e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 f998 	bl	800b2d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0208 	orr.w	r2, r2, #8
 800afb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0204 	bic.w	r2, r2, #4
 800afc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6999      	ldr	r1, [r3, #24]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	619a      	str	r2, [r3, #24]
      break;
 800afda:	e0a5      	b.n	800b128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fa08 	bl	800b3f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	699a      	ldr	r2, [r3, #24]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	699a      	ldr	r2, [r3, #24]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6999      	ldr	r1, [r3, #24]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	021a      	lsls	r2, r3, #8
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	619a      	str	r2, [r3, #24]
      break;
 800b01c:	e084      	b.n	800b128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fa71 	bl	800b50c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69da      	ldr	r2, [r3, #28]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f042 0208 	orr.w	r2, r2, #8
 800b038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69da      	ldr	r2, [r3, #28]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0204 	bic.w	r2, r2, #4
 800b048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69d9      	ldr	r1, [r3, #28]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	430a      	orrs	r2, r1
 800b05a:	61da      	str	r2, [r3, #28]
      break;
 800b05c:	e064      	b.n	800b128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fad9 	bl	800b61c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69da      	ldr	r2, [r3, #28]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69d9      	ldr	r1, [r3, #28]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	021a      	lsls	r2, r3, #8
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	61da      	str	r2, [r3, #28]
      break;
 800b09e:	e043      	b.n	800b128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fb22 	bl	800b6f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f042 0208 	orr.w	r2, r2, #8
 800b0ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0204 	bic.w	r2, r2, #4
 800b0ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0de:	e023      	b.n	800b128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fb66 	bl	800b7b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b10a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	021a      	lsls	r2, r3, #8
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	430a      	orrs	r2, r1
 800b11e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b120:	e002      	b.n	800b128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	75fb      	strb	r3, [r7, #23]
      break;
 800b126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b130:	7dfb      	ldrb	r3, [r7, #23]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop

0800b13c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a44      	ldr	r2, [pc, #272]	; (800b2b0 <TIM_Base_SetConfig+0x124>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d013      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1aa:	d00f      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a41      	ldr	r2, [pc, #260]	; (800b2b4 <TIM_Base_SetConfig+0x128>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a40      	ldr	r2, [pc, #256]	; (800b2b8 <TIM_Base_SetConfig+0x12c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d007      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a3f      	ldr	r2, [pc, #252]	; (800b2bc <TIM_Base_SetConfig+0x130>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a3e      	ldr	r2, [pc, #248]	; (800b2c0 <TIM_Base_SetConfig+0x134>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d108      	bne.n	800b1de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a33      	ldr	r2, [pc, #204]	; (800b2b0 <TIM_Base_SetConfig+0x124>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d027      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ec:	d023      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a30      	ldr	r2, [pc, #192]	; (800b2b4 <TIM_Base_SetConfig+0x128>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d01f      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a2f      	ldr	r2, [pc, #188]	; (800b2b8 <TIM_Base_SetConfig+0x12c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d01b      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a2e      	ldr	r2, [pc, #184]	; (800b2bc <TIM_Base_SetConfig+0x130>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d017      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a2d      	ldr	r2, [pc, #180]	; (800b2c0 <TIM_Base_SetConfig+0x134>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d013      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a2c      	ldr	r2, [pc, #176]	; (800b2c4 <TIM_Base_SetConfig+0x138>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d00f      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a2b      	ldr	r2, [pc, #172]	; (800b2c8 <TIM_Base_SetConfig+0x13c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00b      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a2a      	ldr	r2, [pc, #168]	; (800b2cc <TIM_Base_SetConfig+0x140>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d007      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a29      	ldr	r2, [pc, #164]	; (800b2d0 <TIM_Base_SetConfig+0x144>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d003      	beq.n	800b236 <TIM_Base_SetConfig+0xaa>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a28      	ldr	r2, [pc, #160]	; (800b2d4 <TIM_Base_SetConfig+0x148>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d108      	bne.n	800b248 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b23c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	689a      	ldr	r2, [r3, #8]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a10      	ldr	r2, [pc, #64]	; (800b2b0 <TIM_Base_SetConfig+0x124>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00f      	beq.n	800b294 <TIM_Base_SetConfig+0x108>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a12      	ldr	r2, [pc, #72]	; (800b2c0 <TIM_Base_SetConfig+0x134>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00b      	beq.n	800b294 <TIM_Base_SetConfig+0x108>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a11      	ldr	r2, [pc, #68]	; (800b2c4 <TIM_Base_SetConfig+0x138>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d007      	beq.n	800b294 <TIM_Base_SetConfig+0x108>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <TIM_Base_SetConfig+0x13c>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d003      	beq.n	800b294 <TIM_Base_SetConfig+0x108>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a0f      	ldr	r2, [pc, #60]	; (800b2cc <TIM_Base_SetConfig+0x140>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d103      	bne.n	800b29c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	615a      	str	r2, [r3, #20]
}
 800b2a2:	bf00      	nop
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40010000 	.word	0x40010000
 800b2b4:	40000400 	.word	0x40000400
 800b2b8:	40000800 	.word	0x40000800
 800b2bc:	40000c00 	.word	0x40000c00
 800b2c0:	40010400 	.word	0x40010400
 800b2c4:	40014000 	.word	0x40014000
 800b2c8:	40014400 	.word	0x40014400
 800b2cc:	40014800 	.word	0x40014800
 800b2d0:	4000e000 	.word	0x4000e000
 800b2d4:	4000e400 	.word	0x4000e400

0800b2d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b087      	sub	sp, #28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	f023 0201 	bic.w	r2, r3, #1
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4b37      	ldr	r3, [pc, #220]	; (800b3e0 <TIM_OC1_SetConfig+0x108>)
 800b304:	4013      	ands	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f023 0302 	bic.w	r3, r3, #2
 800b320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	4313      	orrs	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a2d      	ldr	r2, [pc, #180]	; (800b3e4 <TIM_OC1_SetConfig+0x10c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d00f      	beq.n	800b354 <TIM_OC1_SetConfig+0x7c>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a2c      	ldr	r2, [pc, #176]	; (800b3e8 <TIM_OC1_SetConfig+0x110>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00b      	beq.n	800b354 <TIM_OC1_SetConfig+0x7c>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a2b      	ldr	r2, [pc, #172]	; (800b3ec <TIM_OC1_SetConfig+0x114>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d007      	beq.n	800b354 <TIM_OC1_SetConfig+0x7c>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a2a      	ldr	r2, [pc, #168]	; (800b3f0 <TIM_OC1_SetConfig+0x118>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d003      	beq.n	800b354 <TIM_OC1_SetConfig+0x7c>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a29      	ldr	r2, [pc, #164]	; (800b3f4 <TIM_OC1_SetConfig+0x11c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d10c      	bne.n	800b36e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f023 0308 	bic.w	r3, r3, #8
 800b35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	4313      	orrs	r3, r2
 800b364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f023 0304 	bic.w	r3, r3, #4
 800b36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a1c      	ldr	r2, [pc, #112]	; (800b3e4 <TIM_OC1_SetConfig+0x10c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00f      	beq.n	800b396 <TIM_OC1_SetConfig+0xbe>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a1b      	ldr	r2, [pc, #108]	; (800b3e8 <TIM_OC1_SetConfig+0x110>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d00b      	beq.n	800b396 <TIM_OC1_SetConfig+0xbe>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a1a      	ldr	r2, [pc, #104]	; (800b3ec <TIM_OC1_SetConfig+0x114>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d007      	beq.n	800b396 <TIM_OC1_SetConfig+0xbe>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a19      	ldr	r2, [pc, #100]	; (800b3f0 <TIM_OC1_SetConfig+0x118>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d003      	beq.n	800b396 <TIM_OC1_SetConfig+0xbe>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a18      	ldr	r2, [pc, #96]	; (800b3f4 <TIM_OC1_SetConfig+0x11c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d111      	bne.n	800b3ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b39c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	621a      	str	r2, [r3, #32]
}
 800b3d4:	bf00      	nop
 800b3d6:	371c      	adds	r7, #28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	fffeff8f 	.word	0xfffeff8f
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40010400 	.word	0x40010400
 800b3ec:	40014000 	.word	0x40014000
 800b3f0:	40014400 	.word	0x40014400
 800b3f4:	40014800 	.word	0x40014800

0800b3f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	f023 0210 	bic.w	r2, r3, #16
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4b34      	ldr	r3, [pc, #208]	; (800b4f4 <TIM_OC2_SetConfig+0xfc>)
 800b424:	4013      	ands	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4313      	orrs	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f023 0320 	bic.w	r3, r3, #32
 800b442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a29      	ldr	r2, [pc, #164]	; (800b4f8 <TIM_OC2_SetConfig+0x100>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d003      	beq.n	800b460 <TIM_OC2_SetConfig+0x68>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a28      	ldr	r2, [pc, #160]	; (800b4fc <TIM_OC2_SetConfig+0x104>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d10d      	bne.n	800b47c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	011b      	lsls	r3, r3, #4
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	4313      	orrs	r3, r2
 800b472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b47a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a1e      	ldr	r2, [pc, #120]	; (800b4f8 <TIM_OC2_SetConfig+0x100>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00f      	beq.n	800b4a4 <TIM_OC2_SetConfig+0xac>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a1d      	ldr	r2, [pc, #116]	; (800b4fc <TIM_OC2_SetConfig+0x104>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d00b      	beq.n	800b4a4 <TIM_OC2_SetConfig+0xac>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <TIM_OC2_SetConfig+0x108>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d007      	beq.n	800b4a4 <TIM_OC2_SetConfig+0xac>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a1b      	ldr	r2, [pc, #108]	; (800b504 <TIM_OC2_SetConfig+0x10c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_OC2_SetConfig+0xac>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a1a      	ldr	r2, [pc, #104]	; (800b508 <TIM_OC2_SetConfig+0x110>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d113      	bne.n	800b4cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	621a      	str	r2, [r3, #32]
}
 800b4e6:	bf00      	nop
 800b4e8:	371c      	adds	r7, #28
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	feff8fff 	.word	0xfeff8fff
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40010400 	.word	0x40010400
 800b500:	40014000 	.word	0x40014000
 800b504:	40014400 	.word	0x40014400
 800b508:	40014800 	.word	0x40014800

0800b50c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	4b33      	ldr	r3, [pc, #204]	; (800b604 <TIM_OC3_SetConfig+0xf8>)
 800b538:	4013      	ands	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	4313      	orrs	r3, r2
 800b560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a28      	ldr	r2, [pc, #160]	; (800b608 <TIM_OC3_SetConfig+0xfc>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d003      	beq.n	800b572 <TIM_OC3_SetConfig+0x66>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a27      	ldr	r2, [pc, #156]	; (800b60c <TIM_OC3_SetConfig+0x100>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d10d      	bne.n	800b58e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	021b      	lsls	r3, r3, #8
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a1d      	ldr	r2, [pc, #116]	; (800b608 <TIM_OC3_SetConfig+0xfc>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00f      	beq.n	800b5b6 <TIM_OC3_SetConfig+0xaa>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a1c      	ldr	r2, [pc, #112]	; (800b60c <TIM_OC3_SetConfig+0x100>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d00b      	beq.n	800b5b6 <TIM_OC3_SetConfig+0xaa>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a1b      	ldr	r2, [pc, #108]	; (800b610 <TIM_OC3_SetConfig+0x104>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d007      	beq.n	800b5b6 <TIM_OC3_SetConfig+0xaa>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a1a      	ldr	r2, [pc, #104]	; (800b614 <TIM_OC3_SetConfig+0x108>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d003      	beq.n	800b5b6 <TIM_OC3_SetConfig+0xaa>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a19      	ldr	r2, [pc, #100]	; (800b618 <TIM_OC3_SetConfig+0x10c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d113      	bne.n	800b5de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	621a      	str	r2, [r3, #32]
}
 800b5f8:	bf00      	nop
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	fffeff8f 	.word	0xfffeff8f
 800b608:	40010000 	.word	0x40010000
 800b60c:	40010400 	.word	0x40010400
 800b610:	40014000 	.word	0x40014000
 800b614:	40014400 	.word	0x40014400
 800b618:	40014800 	.word	0x40014800

0800b61c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4b24      	ldr	r3, [pc, #144]	; (800b6d8 <TIM_OC4_SetConfig+0xbc>)
 800b648:	4013      	ands	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	021b      	lsls	r3, r3, #8
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	031b      	lsls	r3, r3, #12
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a19      	ldr	r2, [pc, #100]	; (800b6dc <TIM_OC4_SetConfig+0xc0>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d00f      	beq.n	800b69c <TIM_OC4_SetConfig+0x80>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a18      	ldr	r2, [pc, #96]	; (800b6e0 <TIM_OC4_SetConfig+0xc4>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d00b      	beq.n	800b69c <TIM_OC4_SetConfig+0x80>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a17      	ldr	r2, [pc, #92]	; (800b6e4 <TIM_OC4_SetConfig+0xc8>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d007      	beq.n	800b69c <TIM_OC4_SetConfig+0x80>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a16      	ldr	r2, [pc, #88]	; (800b6e8 <TIM_OC4_SetConfig+0xcc>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d003      	beq.n	800b69c <TIM_OC4_SetConfig+0x80>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a15      	ldr	r2, [pc, #84]	; (800b6ec <TIM_OC4_SetConfig+0xd0>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d109      	bne.n	800b6b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	019b      	lsls	r3, r3, #6
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	621a      	str	r2, [r3, #32]
}
 800b6ca:	bf00      	nop
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	feff8fff 	.word	0xfeff8fff
 800b6dc:	40010000 	.word	0x40010000
 800b6e0:	40010400 	.word	0x40010400
 800b6e4:	40014000 	.word	0x40014000
 800b6e8:	40014400 	.word	0x40014400
 800b6ec:	40014800 	.word	0x40014800

0800b6f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4b21      	ldr	r3, [pc, #132]	; (800b7a0 <TIM_OC5_SetConfig+0xb0>)
 800b71c:	4013      	ands	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a18      	ldr	r2, [pc, #96]	; (800b7a4 <TIM_OC5_SetConfig+0xb4>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d00f      	beq.n	800b766 <TIM_OC5_SetConfig+0x76>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <TIM_OC5_SetConfig+0xb8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d00b      	beq.n	800b766 <TIM_OC5_SetConfig+0x76>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a16      	ldr	r2, [pc, #88]	; (800b7ac <TIM_OC5_SetConfig+0xbc>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d007      	beq.n	800b766 <TIM_OC5_SetConfig+0x76>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a15      	ldr	r2, [pc, #84]	; (800b7b0 <TIM_OC5_SetConfig+0xc0>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d003      	beq.n	800b766 <TIM_OC5_SetConfig+0x76>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a14      	ldr	r2, [pc, #80]	; (800b7b4 <TIM_OC5_SetConfig+0xc4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d109      	bne.n	800b77a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b76c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	021b      	lsls	r3, r3, #8
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	4313      	orrs	r3, r2
 800b778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	621a      	str	r2, [r3, #32]
}
 800b794:	bf00      	nop
 800b796:	371c      	adds	r7, #28
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	fffeff8f 	.word	0xfffeff8f
 800b7a4:	40010000 	.word	0x40010000
 800b7a8:	40010400 	.word	0x40010400
 800b7ac:	40014000 	.word	0x40014000
 800b7b0:	40014400 	.word	0x40014400
 800b7b4:	40014800 	.word	0x40014800

0800b7b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	4b22      	ldr	r3, [pc, #136]	; (800b86c <TIM_OC6_SetConfig+0xb4>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	021b      	lsls	r3, r3, #8
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	051b      	lsls	r3, r3, #20
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a19      	ldr	r2, [pc, #100]	; (800b870 <TIM_OC6_SetConfig+0xb8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00f      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a18      	ldr	r2, [pc, #96]	; (800b874 <TIM_OC6_SetConfig+0xbc>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00b      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a17      	ldr	r2, [pc, #92]	; (800b878 <TIM_OC6_SetConfig+0xc0>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d007      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a16      	ldr	r2, [pc, #88]	; (800b87c <TIM_OC6_SetConfig+0xc4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d003      	beq.n	800b830 <TIM_OC6_SetConfig+0x78>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a15      	ldr	r2, [pc, #84]	; (800b880 <TIM_OC6_SetConfig+0xc8>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d109      	bne.n	800b844 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b836:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	029b      	lsls	r3, r3, #10
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	4313      	orrs	r3, r2
 800b842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	621a      	str	r2, [r3, #32]
}
 800b85e:	bf00      	nop
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	feff8fff 	.word	0xfeff8fff
 800b870:	40010000 	.word	0x40010000
 800b874:	40010400 	.word	0x40010400
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800

0800b884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f003 031f 	and.w	r3, r3, #31
 800b896:	2201      	movs	r2, #1
 800b898:	fa02 f303 	lsl.w	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a1a      	ldr	r2, [r3, #32]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	43db      	mvns	r3, r3
 800b8a6:	401a      	ands	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a1a      	ldr	r2, [r3, #32]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f003 031f 	and.w	r3, r3, #31
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	621a      	str	r2, [r3, #32]
}
 800b8c2:	bf00      	nop
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d101      	bne.n	800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e077      	b.n	800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a35      	ldr	r2, [pc, #212]	; (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d004      	beq.n	800b91c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a34      	ldr	r2, [pc, #208]	; (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d108      	bne.n	800b92e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b934:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a25      	ldr	r2, [pc, #148]	; (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d02c      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95a:	d027      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a22      	ldr	r2, [pc, #136]	; (800b9ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d022      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a21      	ldr	r2, [pc, #132]	; (800b9f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d01d      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a1f      	ldr	r2, [pc, #124]	; (800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d018      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a1a      	ldr	r2, [pc, #104]	; (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d013      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a1b      	ldr	r2, [pc, #108]	; (800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d00e      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a1a      	ldr	r2, [pc, #104]	; (800b9fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d009      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a18      	ldr	r2, [pc, #96]	; (800ba00 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d004      	beq.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a17      	ldr	r2, [pc, #92]	; (800ba04 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d10c      	bne.n	800b9c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	40010000 	.word	0x40010000
 800b9e8:	40010400 	.word	0x40010400
 800b9ec:	40000400 	.word	0x40000400
 800b9f0:	40000800 	.word	0x40000800
 800b9f4:	40000c00 	.word	0x40000c00
 800b9f8:	40001800 	.word	0x40001800
 800b9fc:	40014000 	.word	0x40014000
 800ba00:	4000e000 	.word	0x4000e000
 800ba04:	4000e400 	.word	0x4000e400

0800ba08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d101      	bne.n	800ba24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba20:	2302      	movs	r3, #2
 800ba22:	e087      	b.n	800bb34 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a27      	ldr	r2, [pc, #156]	; (800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d004      	beq.n	800bab2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a25      	ldr	r2, [pc, #148]	; (800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d106      	bne.n	800bac0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	69db      	ldr	r3, [r3, #28]
 800babc:	4313      	orrs	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a1e      	ldr	r2, [pc, #120]	; (800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d004      	beq.n	800bad4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a1d      	ldr	r2, [pc, #116]	; (800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d126      	bne.n	800bb22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	051b      	lsls	r3, r3, #20
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafc:	4313      	orrs	r3, r2
 800bafe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a0e      	ldr	r2, [pc, #56]	; (800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d004      	beq.n	800bb14 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a0d      	ldr	r2, [pc, #52]	; (800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d106      	bne.n	800bb22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400

0800bb48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e042      	b.n	800bc1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7f8 feb3 	bl	8004914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2224      	movs	r2, #36	; 0x24
 800bbb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 0201 	bic.w	r2, r2, #1
 800bbc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fcdc 	bl	800c584 <UART_SetConfig>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d101      	bne.n	800bbd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e022      	b.n	800bc1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f001 fb3c 	bl	800d25c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	689a      	ldr	r2, [r3, #8]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f042 0201 	orr.w	r2, r2, #1
 800bc12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 fbc3 	bl	800d3a0 <UART_CheckIdleState>
 800bc1a:	4603      	mov	r3, r0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	; 0x28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc38:	2b20      	cmp	r3, #32
 800bc3a:	d17a      	bne.n	800bd32 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <HAL_UART_Transmit_DMA+0x24>
 800bc42:	88fb      	ldrh	r3, [r7, #6]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e073      	b.n	800bd34 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d101      	bne.n	800bc5a <HAL_UART_Transmit_DMA+0x36>
 800bc56:	2302      	movs	r3, #2
 800bc58:	e06c      	b.n	800bd34 <HAL_UART_Transmit_DMA+0x110>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	88fa      	ldrh	r2, [r7, #6]
 800bc6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	88fa      	ldrh	r2, [r7, #6]
 800bc74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2221      	movs	r2, #33	; 0x21
 800bc84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d02c      	beq.n	800bcea <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc94:	4a29      	ldr	r2, [pc, #164]	; (800bd3c <HAL_UART_Transmit_DMA+0x118>)
 800bc96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc9c:	4a28      	ldr	r2, [pc, #160]	; (800bd40 <HAL_UART_Transmit_DMA+0x11c>)
 800bc9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bca4:	4a27      	ldr	r2, [pc, #156]	; (800bd44 <HAL_UART_Transmit_DMA+0x120>)
 800bca6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcac:	2200      	movs	r2, #0
 800bcae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb8:	4619      	mov	r1, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3328      	adds	r3, #40	; 0x28
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	f7f9 fd4e 	bl	8005764 <HAL_DMA_Start_IT>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00d      	beq.n	800bcea <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2210      	movs	r2, #16
 800bcd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e024      	b.n	800bd34 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2240      	movs	r2, #64	; 0x40
 800bcf0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3308      	adds	r3, #8
 800bd00:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	e853 3f00 	ldrex	r3, [r3]
 800bd08:	613b      	str	r3, [r7, #16]
   return(result);
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd10:	627b      	str	r3, [r7, #36]	; 0x24
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3308      	adds	r3, #8
 800bd18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1a:	623a      	str	r2, [r7, #32]
 800bd1c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1e:	69f9      	ldr	r1, [r7, #28]
 800bd20:	6a3a      	ldr	r2, [r7, #32]
 800bd22:	e841 2300 	strex	r3, r2, [r1]
 800bd26:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1e5      	bne.n	800bcfa <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e000      	b.n	800bd34 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bd32:	2302      	movs	r3, #2
  }
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3728      	adds	r7, #40	; 0x28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	0800d869 	.word	0x0800d869
 800bd40:	0800d8ff 	.word	0x0800d8ff
 800bd44:	0800da75 	.word	0x0800da75

0800bd48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08a      	sub	sp, #40	; 0x28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	4613      	mov	r3, r2
 800bd54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5c:	2b20      	cmp	r3, #32
 800bd5e:	d142      	bne.n	800bde6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <HAL_UART_Receive_DMA+0x24>
 800bd66:	88fb      	ldrh	r3, [r7, #6]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e03b      	b.n	800bde8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d101      	bne.n	800bd7e <HAL_UART_Receive_DMA+0x36>
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e034      	b.n	800bde8 <HAL_UART_Receive_DMA+0xa0>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a17      	ldr	r2, [pc, #92]	; (800bdf0 <HAL_UART_Receive_DMA+0xa8>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d01f      	beq.n	800bdd6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d018      	beq.n	800bdd6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	e853 3f00 	ldrex	r3, [r3]
 800bdb0:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	623b      	str	r3, [r7, #32]
 800bdc4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc6:	69f9      	ldr	r1, [r7, #28]
 800bdc8:	6a3a      	ldr	r2, [r7, #32]
 800bdca:	e841 2300 	strex	r3, r2, [r1]
 800bdce:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdd0:	69bb      	ldr	r3, [r7, #24]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e6      	bne.n	800bda4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f001 fbf3 	bl	800d5c8 <UART_Start_Receive_DMA>
 800bde2:	4603      	mov	r3, r0
 800bde4:	e000      	b.n	800bde8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bde6:	2302      	movs	r3, #2
  }
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3728      	adds	r7, #40	; 0x28
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	58000c00 	.word	0x58000c00

0800bdf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b0ba      	sub	sp, #232	; 0xe8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800be1e:	f640 030f 	movw	r3, #2063	; 0x80f
 800be22:	4013      	ands	r3, r2
 800be24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800be28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d11b      	bne.n	800be68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be34:	f003 0320 	and.w	r3, r3, #32
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d015      	beq.n	800be68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be40:	f003 0320 	and.w	r3, r3, #32
 800be44:	2b00      	cmp	r3, #0
 800be46:	d105      	bne.n	800be54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d009      	beq.n	800be68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 835a 	beq.w	800c512 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	4798      	blx	r3
      }
      return;
 800be66:	e354      	b.n	800c512 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 811f 	beq.w	800c0b0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be76:	4b8b      	ldr	r3, [pc, #556]	; (800c0a4 <HAL_UART_IRQHandler+0x2b0>)
 800be78:	4013      	ands	r3, r2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be82:	4b89      	ldr	r3, [pc, #548]	; (800c0a8 <HAL_UART_IRQHandler+0x2b4>)
 800be84:	4013      	ands	r3, r2
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 8112 	beq.w	800c0b0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d011      	beq.n	800bebc <HAL_UART_IRQHandler+0xc8>
 800be98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00b      	beq.n	800bebc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2201      	movs	r2, #1
 800beaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beb2:	f043 0201 	orr.w	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec0:	f003 0302 	and.w	r3, r3, #2
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d011      	beq.n	800beec <HAL_UART_IRQHandler+0xf8>
 800bec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00b      	beq.n	800beec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2202      	movs	r2, #2
 800beda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bee2:	f043 0204 	orr.w	r2, r3, #4
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d011      	beq.n	800bf1c <HAL_UART_IRQHandler+0x128>
 800bef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2204      	movs	r2, #4
 800bf0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf12:	f043 0202 	orr.w	r2, r3, #2
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf20:	f003 0308 	and.w	r3, r3, #8
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d017      	beq.n	800bf58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf2c:	f003 0320 	and.w	r3, r3, #32
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf38:	4b5a      	ldr	r3, [pc, #360]	; (800c0a4 <HAL_UART_IRQHandler+0x2b0>)
 800bf3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00b      	beq.n	800bf58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2208      	movs	r2, #8
 800bf46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf4e:	f043 0208 	orr.w	r2, r3, #8
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d012      	beq.n	800bf8a <HAL_UART_IRQHandler+0x196>
 800bf64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00c      	beq.n	800bf8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf80:	f043 0220 	orr.w	r2, r3, #32
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 82c0 	beq.w	800c516 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9a:	f003 0320 	and.w	r3, r3, #32
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d013      	beq.n	800bfca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d007      	beq.n	800bfca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfde:	2b40      	cmp	r3, #64	; 0x40
 800bfe0:	d005      	beq.n	800bfee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bfe6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d04f      	beq.n	800c08e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 fbd4 	bl	800d79c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bffe:	2b40      	cmp	r3, #64	; 0x40
 800c000:	d141      	bne.n	800c086 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3308      	adds	r3, #8
 800c008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3308      	adds	r3, #8
 800c02a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c02e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c03a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1d9      	bne.n	800c002 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d013      	beq.n	800c07e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c05a:	4a14      	ldr	r2, [pc, #80]	; (800c0ac <HAL_UART_IRQHandler+0x2b8>)
 800c05c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c062:	4618      	mov	r0, r3
 800c064:	f7fa f906 	bl	8006274 <HAL_DMA_Abort_IT>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d017      	beq.n	800c09e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c078:	4610      	mov	r0, r2
 800c07a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c07c:	e00f      	b.n	800c09e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa6a 	bl	800c558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c084:	e00b      	b.n	800c09e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa66 	bl	800c558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c08c:	e007      	b.n	800c09e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fa62 	bl	800c558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c09c:	e23b      	b.n	800c516 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c09e:	bf00      	nop
    return;
 800c0a0:	e239      	b.n	800c516 <HAL_UART_IRQHandler+0x722>
 800c0a2:	bf00      	nop
 800c0a4:	10000001 	.word	0x10000001
 800c0a8:	04000120 	.word	0x04000120
 800c0ac:	0800daf5 	.word	0x0800daf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	f040 81ce 	bne.w	800c456 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0be:	f003 0310 	and.w	r3, r3, #16
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 81c7 	beq.w	800c456 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0cc:	f003 0310 	and.w	r3, r3, #16
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 81c0 	beq.w	800c456 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2210      	movs	r2, #16
 800c0dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e8:	2b40      	cmp	r3, #64	; 0x40
 800c0ea:	f040 813b 	bne.w	800c364 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a8b      	ldr	r2, [pc, #556]	; (800c324 <HAL_UART_IRQHandler+0x530>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d059      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a89      	ldr	r2, [pc, #548]	; (800c328 <HAL_UART_IRQHandler+0x534>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d053      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a87      	ldr	r2, [pc, #540]	; (800c32c <HAL_UART_IRQHandler+0x538>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d04d      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a85      	ldr	r2, [pc, #532]	; (800c330 <HAL_UART_IRQHandler+0x53c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d047      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a83      	ldr	r2, [pc, #524]	; (800c334 <HAL_UART_IRQHandler+0x540>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d041      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a81      	ldr	r2, [pc, #516]	; (800c338 <HAL_UART_IRQHandler+0x544>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d03b      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a7f      	ldr	r2, [pc, #508]	; (800c33c <HAL_UART_IRQHandler+0x548>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d035      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a7d      	ldr	r2, [pc, #500]	; (800c340 <HAL_UART_IRQHandler+0x54c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d02f      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a7b      	ldr	r2, [pc, #492]	; (800c344 <HAL_UART_IRQHandler+0x550>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d029      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a79      	ldr	r2, [pc, #484]	; (800c348 <HAL_UART_IRQHandler+0x554>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d023      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a77      	ldr	r2, [pc, #476]	; (800c34c <HAL_UART_IRQHandler+0x558>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d01d      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a75      	ldr	r2, [pc, #468]	; (800c350 <HAL_UART_IRQHandler+0x55c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d017      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a73      	ldr	r2, [pc, #460]	; (800c354 <HAL_UART_IRQHandler+0x560>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d011      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a71      	ldr	r2, [pc, #452]	; (800c358 <HAL_UART_IRQHandler+0x564>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d00b      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a6f      	ldr	r2, [pc, #444]	; (800c35c <HAL_UART_IRQHandler+0x568>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d005      	beq.n	800c1ae <HAL_UART_IRQHandler+0x3ba>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a6d      	ldr	r2, [pc, #436]	; (800c360 <HAL_UART_IRQHandler+0x56c>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d105      	bne.n	800c1ba <HAL_UART_IRQHandler+0x3c6>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	e004      	b.n	800c1c4 <HAL_UART_IRQHandler+0x3d0>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c1c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 81a4 	beq.w	800c51a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f080 819c 	bcs.w	800c51a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f6:	f000 8086 	beq.w	800c306 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c206:	e853 3f00 	ldrex	r3, [r3]
 800c20a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c20e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c216:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c228:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c230:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c23c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1da      	bne.n	800c1fa <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3308      	adds	r3, #8
 800c24a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c256:	f023 0301 	bic.w	r3, r3, #1
 800c25a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3308      	adds	r3, #8
 800c264:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c268:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c26c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c270:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c274:	e841 2300 	strex	r3, r2, [r1]
 800c278:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c27a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1e1      	bne.n	800c244 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3308      	adds	r3, #8
 800c286:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c28a:	e853 3f00 	ldrex	r3, [r3]
 800c28e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c2a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e3      	bne.n	800c280 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2220      	movs	r2, #32
 800c2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ce:	e853 3f00 	ldrex	r3, [r3]
 800c2d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2d6:	f023 0310 	bic.w	r3, r3, #16
 800c2da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2f0:	e841 2300 	strex	r3, r2, [r1]
 800c2f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1e4      	bne.n	800c2c6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c300:	4618      	mov	r0, r3
 800c302:	f7f9 fc99 	bl	8005c38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c312:	b29b      	uxth	r3, r3
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	b29b      	uxth	r3, r3
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f926 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c320:	e0fb      	b.n	800c51a <HAL_UART_IRQHandler+0x726>
 800c322:	bf00      	nop
 800c324:	40020010 	.word	0x40020010
 800c328:	40020028 	.word	0x40020028
 800c32c:	40020040 	.word	0x40020040
 800c330:	40020058 	.word	0x40020058
 800c334:	40020070 	.word	0x40020070
 800c338:	40020088 	.word	0x40020088
 800c33c:	400200a0 	.word	0x400200a0
 800c340:	400200b8 	.word	0x400200b8
 800c344:	40020410 	.word	0x40020410
 800c348:	40020428 	.word	0x40020428
 800c34c:	40020440 	.word	0x40020440
 800c350:	40020458 	.word	0x40020458
 800c354:	40020470 	.word	0x40020470
 800c358:	40020488 	.word	0x40020488
 800c35c:	400204a0 	.word	0x400204a0
 800c360:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c370:	b29b      	uxth	r3, r3
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c37e:	b29b      	uxth	r3, r3
 800c380:	2b00      	cmp	r3, #0
 800c382:	f000 80cc 	beq.w	800c51e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80c7 	beq.w	800c51e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c3b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e4      	bne.n	800c390 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	e853 3f00 	ldrex	r3, [r3]
 800c3d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c3d6:	6a3a      	ldr	r2, [r7, #32]
 800c3d8:	4b54      	ldr	r3, [pc, #336]	; (800c52c <HAL_UART_IRQHandler+0x738>)
 800c3da:	4013      	ands	r3, r2
 800c3dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3ea:	633a      	str	r2, [r7, #48]	; 0x30
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e3      	bne.n	800c3c6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2220      	movs	r2, #32
 800c402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0310 	bic.w	r3, r3, #16
 800c426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c434:	61fb      	str	r3, [r7, #28]
 800c436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c438:	69b9      	ldr	r1, [r7, #24]
 800c43a:	69fa      	ldr	r2, [r7, #28]
 800c43c:	e841 2300 	strex	r3, r2, [r1]
 800c440:	617b      	str	r3, [r7, #20]
   return(result);
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e4      	bne.n	800c412 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c44c:	4619      	mov	r1, r3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f88c 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c454:	e063      	b.n	800c51e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c45a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <HAL_UART_IRQHandler+0x68c>
 800c462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d008      	beq.n	800c480 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c476:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 fb7c 	bl	800db76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c47e:	e051      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d014      	beq.n	800c4b6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c494:	2b00      	cmp	r3, #0
 800c496:	d105      	bne.n	800c4a4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d008      	beq.n	800c4b6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d03a      	beq.n	800c522 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	4798      	blx	r3
    }
    return;
 800c4b4:	e035      	b.n	800c522 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d009      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x6e2>
 800c4c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f001 fb26 	bl	800db20 <UART_EndTransmit_IT>
    return;
 800c4d4:	e026      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d009      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x702>
 800c4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f001 fb55 	bl	800db9e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4f4:	e016      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d010      	beq.n	800c524 <HAL_UART_IRQHandler+0x730>
 800c502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c506:	2b00      	cmp	r3, #0
 800c508:	da0c      	bge.n	800c524 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f001 fb3d 	bl	800db8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c510:	e008      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
      return;
 800c512:	bf00      	nop
 800c514:	e006      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
    return;
 800c516:	bf00      	nop
 800c518:	e004      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
      return;
 800c51a:	bf00      	nop
 800c51c:	e002      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
      return;
 800c51e:	bf00      	nop
 800c520:	e000      	b.n	800c524 <HAL_UART_IRQHandler+0x730>
    return;
 800c522:	bf00      	nop
  }
}
 800c524:	37e8      	adds	r7, #232	; 0xe8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	effffffe 	.word	0xeffffffe

0800c530 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c588:	b092      	sub	sp, #72	; 0x48
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	431a      	orrs	r2, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4bbe      	ldr	r3, [pc, #760]	; (800c8ac <UART_SetConfig+0x328>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	6812      	ldr	r2, [r2, #0]
 800c5ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	68da      	ldr	r2, [r3, #12]
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4ab3      	ldr	r2, [pc, #716]	; (800c8b0 <UART_SetConfig+0x32c>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d004      	beq.n	800c5f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689a      	ldr	r2, [r3, #8]
 800c5f6:	4baf      	ldr	r3, [pc, #700]	; (800c8b4 <UART_SetConfig+0x330>)
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	6812      	ldr	r2, [r2, #0]
 800c5fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c600:	430b      	orrs	r3, r1
 800c602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60a:	f023 010f 	bic.w	r1, r3, #15
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	430a      	orrs	r2, r1
 800c618:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4aa6      	ldr	r2, [pc, #664]	; (800c8b8 <UART_SetConfig+0x334>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d177      	bne.n	800c714 <UART_SetConfig+0x190>
 800c624:	4ba5      	ldr	r3, [pc, #660]	; (800c8bc <UART_SetConfig+0x338>)
 800c626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c62c:	2b28      	cmp	r3, #40	; 0x28
 800c62e:	d86d      	bhi.n	800c70c <UART_SetConfig+0x188>
 800c630:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <UART_SetConfig+0xb4>)
 800c632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c636:	bf00      	nop
 800c638:	0800c6dd 	.word	0x0800c6dd
 800c63c:	0800c70d 	.word	0x0800c70d
 800c640:	0800c70d 	.word	0x0800c70d
 800c644:	0800c70d 	.word	0x0800c70d
 800c648:	0800c70d 	.word	0x0800c70d
 800c64c:	0800c70d 	.word	0x0800c70d
 800c650:	0800c70d 	.word	0x0800c70d
 800c654:	0800c70d 	.word	0x0800c70d
 800c658:	0800c6e5 	.word	0x0800c6e5
 800c65c:	0800c70d 	.word	0x0800c70d
 800c660:	0800c70d 	.word	0x0800c70d
 800c664:	0800c70d 	.word	0x0800c70d
 800c668:	0800c70d 	.word	0x0800c70d
 800c66c:	0800c70d 	.word	0x0800c70d
 800c670:	0800c70d 	.word	0x0800c70d
 800c674:	0800c70d 	.word	0x0800c70d
 800c678:	0800c6ed 	.word	0x0800c6ed
 800c67c:	0800c70d 	.word	0x0800c70d
 800c680:	0800c70d 	.word	0x0800c70d
 800c684:	0800c70d 	.word	0x0800c70d
 800c688:	0800c70d 	.word	0x0800c70d
 800c68c:	0800c70d 	.word	0x0800c70d
 800c690:	0800c70d 	.word	0x0800c70d
 800c694:	0800c70d 	.word	0x0800c70d
 800c698:	0800c6f5 	.word	0x0800c6f5
 800c69c:	0800c70d 	.word	0x0800c70d
 800c6a0:	0800c70d 	.word	0x0800c70d
 800c6a4:	0800c70d 	.word	0x0800c70d
 800c6a8:	0800c70d 	.word	0x0800c70d
 800c6ac:	0800c70d 	.word	0x0800c70d
 800c6b0:	0800c70d 	.word	0x0800c70d
 800c6b4:	0800c70d 	.word	0x0800c70d
 800c6b8:	0800c6fd 	.word	0x0800c6fd
 800c6bc:	0800c70d 	.word	0x0800c70d
 800c6c0:	0800c70d 	.word	0x0800c70d
 800c6c4:	0800c70d 	.word	0x0800c70d
 800c6c8:	0800c70d 	.word	0x0800c70d
 800c6cc:	0800c70d 	.word	0x0800c70d
 800c6d0:	0800c70d 	.word	0x0800c70d
 800c6d4:	0800c70d 	.word	0x0800c70d
 800c6d8:	0800c705 	.word	0x0800c705
 800c6dc:	2301      	movs	r3, #1
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e2:	e326      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ea:	e322      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c6ec:	2308      	movs	r3, #8
 800c6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f2:	e31e      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c6f4:	2310      	movs	r3, #16
 800c6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fa:	e31a      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c702:	e316      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c704:	2340      	movs	r3, #64	; 0x40
 800c706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70a:	e312      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c70c:	2380      	movs	r3, #128	; 0x80
 800c70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c712:	e30e      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a69      	ldr	r2, [pc, #420]	; (800c8c0 <UART_SetConfig+0x33c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d130      	bne.n	800c780 <UART_SetConfig+0x1fc>
 800c71e:	4b67      	ldr	r3, [pc, #412]	; (800c8bc <UART_SetConfig+0x338>)
 800c720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	2b05      	cmp	r3, #5
 800c728:	d826      	bhi.n	800c778 <UART_SetConfig+0x1f4>
 800c72a:	a201      	add	r2, pc, #4	; (adr r2, 800c730 <UART_SetConfig+0x1ac>)
 800c72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c730:	0800c749 	.word	0x0800c749
 800c734:	0800c751 	.word	0x0800c751
 800c738:	0800c759 	.word	0x0800c759
 800c73c:	0800c761 	.word	0x0800c761
 800c740:	0800c769 	.word	0x0800c769
 800c744:	0800c771 	.word	0x0800c771
 800c748:	2300      	movs	r3, #0
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74e:	e2f0      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c750:	2304      	movs	r3, #4
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c756:	e2ec      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c758:	2308      	movs	r3, #8
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75e:	e2e8      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c760:	2310      	movs	r3, #16
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c766:	e2e4      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c768:	2320      	movs	r3, #32
 800c76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76e:	e2e0      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c770:	2340      	movs	r3, #64	; 0x40
 800c772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c776:	e2dc      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c778:	2380      	movs	r3, #128	; 0x80
 800c77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77e:	e2d8      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a4f      	ldr	r2, [pc, #316]	; (800c8c4 <UART_SetConfig+0x340>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d130      	bne.n	800c7ec <UART_SetConfig+0x268>
 800c78a:	4b4c      	ldr	r3, [pc, #304]	; (800c8bc <UART_SetConfig+0x338>)
 800c78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78e:	f003 0307 	and.w	r3, r3, #7
 800c792:	2b05      	cmp	r3, #5
 800c794:	d826      	bhi.n	800c7e4 <UART_SetConfig+0x260>
 800c796:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <UART_SetConfig+0x218>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c7b5 	.word	0x0800c7b5
 800c7a0:	0800c7bd 	.word	0x0800c7bd
 800c7a4:	0800c7c5 	.word	0x0800c7c5
 800c7a8:	0800c7cd 	.word	0x0800c7cd
 800c7ac:	0800c7d5 	.word	0x0800c7d5
 800c7b0:	0800c7dd 	.word	0x0800c7dd
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e2ba      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7bc:	2304      	movs	r3, #4
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c2:	e2b6      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7c4:	2308      	movs	r3, #8
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ca:	e2b2      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7cc:	2310      	movs	r3, #16
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d2:	e2ae      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7da:	e2aa      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7dc:	2340      	movs	r3, #64	; 0x40
 800c7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e2:	e2a6      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7e4:	2380      	movs	r3, #128	; 0x80
 800c7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ea:	e2a2      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a35      	ldr	r2, [pc, #212]	; (800c8c8 <UART_SetConfig+0x344>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d130      	bne.n	800c858 <UART_SetConfig+0x2d4>
 800c7f6:	4b31      	ldr	r3, [pc, #196]	; (800c8bc <UART_SetConfig+0x338>)
 800c7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fa:	f003 0307 	and.w	r3, r3, #7
 800c7fe:	2b05      	cmp	r3, #5
 800c800:	d826      	bhi.n	800c850 <UART_SetConfig+0x2cc>
 800c802:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <UART_SetConfig+0x284>)
 800c804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c808:	0800c821 	.word	0x0800c821
 800c80c:	0800c829 	.word	0x0800c829
 800c810:	0800c831 	.word	0x0800c831
 800c814:	0800c839 	.word	0x0800c839
 800c818:	0800c841 	.word	0x0800c841
 800c81c:	0800c849 	.word	0x0800c849
 800c820:	2300      	movs	r3, #0
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c826:	e284      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c828:	2304      	movs	r3, #4
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82e:	e280      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c830:	2308      	movs	r3, #8
 800c832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c836:	e27c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c838:	2310      	movs	r3, #16
 800c83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83e:	e278      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c840:	2320      	movs	r3, #32
 800c842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c846:	e274      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c848:	2340      	movs	r3, #64	; 0x40
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84e:	e270      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c850:	2380      	movs	r3, #128	; 0x80
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c856:	e26c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a1b      	ldr	r2, [pc, #108]	; (800c8cc <UART_SetConfig+0x348>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d142      	bne.n	800c8e8 <UART_SetConfig+0x364>
 800c862:	4b16      	ldr	r3, [pc, #88]	; (800c8bc <UART_SetConfig+0x338>)
 800c864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b05      	cmp	r3, #5
 800c86c:	d838      	bhi.n	800c8e0 <UART_SetConfig+0x35c>
 800c86e:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <UART_SetConfig+0x2f0>)
 800c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c874:	0800c88d 	.word	0x0800c88d
 800c878:	0800c895 	.word	0x0800c895
 800c87c:	0800c89d 	.word	0x0800c89d
 800c880:	0800c8a5 	.word	0x0800c8a5
 800c884:	0800c8d1 	.word	0x0800c8d1
 800c888:	0800c8d9 	.word	0x0800c8d9
 800c88c:	2300      	movs	r3, #0
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e24e      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c894:	2304      	movs	r3, #4
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89a:	e24a      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c89c:	2308      	movs	r3, #8
 800c89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a2:	e246      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8aa:	e242      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c8ac:	cfff69f3 	.word	0xcfff69f3
 800c8b0:	58000c00 	.word	0x58000c00
 800c8b4:	11fff4ff 	.word	0x11fff4ff
 800c8b8:	40011000 	.word	0x40011000
 800c8bc:	58024400 	.word	0x58024400
 800c8c0:	40004400 	.word	0x40004400
 800c8c4:	40004800 	.word	0x40004800
 800c8c8:	40004c00 	.word	0x40004c00
 800c8cc:	40005000 	.word	0x40005000
 800c8d0:	2320      	movs	r3, #32
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d6:	e22c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c8d8:	2340      	movs	r3, #64	; 0x40
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8de:	e228      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c8e0:	2380      	movs	r3, #128	; 0x80
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e6:	e224      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4ab1      	ldr	r2, [pc, #708]	; (800cbb4 <UART_SetConfig+0x630>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d176      	bne.n	800c9e0 <UART_SetConfig+0x45c>
 800c8f2:	4bb1      	ldr	r3, [pc, #708]	; (800cbb8 <UART_SetConfig+0x634>)
 800c8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8fa:	2b28      	cmp	r3, #40	; 0x28
 800c8fc:	d86c      	bhi.n	800c9d8 <UART_SetConfig+0x454>
 800c8fe:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <UART_SetConfig+0x380>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c9a9 	.word	0x0800c9a9
 800c908:	0800c9d9 	.word	0x0800c9d9
 800c90c:	0800c9d9 	.word	0x0800c9d9
 800c910:	0800c9d9 	.word	0x0800c9d9
 800c914:	0800c9d9 	.word	0x0800c9d9
 800c918:	0800c9d9 	.word	0x0800c9d9
 800c91c:	0800c9d9 	.word	0x0800c9d9
 800c920:	0800c9d9 	.word	0x0800c9d9
 800c924:	0800c9b1 	.word	0x0800c9b1
 800c928:	0800c9d9 	.word	0x0800c9d9
 800c92c:	0800c9d9 	.word	0x0800c9d9
 800c930:	0800c9d9 	.word	0x0800c9d9
 800c934:	0800c9d9 	.word	0x0800c9d9
 800c938:	0800c9d9 	.word	0x0800c9d9
 800c93c:	0800c9d9 	.word	0x0800c9d9
 800c940:	0800c9d9 	.word	0x0800c9d9
 800c944:	0800c9b9 	.word	0x0800c9b9
 800c948:	0800c9d9 	.word	0x0800c9d9
 800c94c:	0800c9d9 	.word	0x0800c9d9
 800c950:	0800c9d9 	.word	0x0800c9d9
 800c954:	0800c9d9 	.word	0x0800c9d9
 800c958:	0800c9d9 	.word	0x0800c9d9
 800c95c:	0800c9d9 	.word	0x0800c9d9
 800c960:	0800c9d9 	.word	0x0800c9d9
 800c964:	0800c9c1 	.word	0x0800c9c1
 800c968:	0800c9d9 	.word	0x0800c9d9
 800c96c:	0800c9d9 	.word	0x0800c9d9
 800c970:	0800c9d9 	.word	0x0800c9d9
 800c974:	0800c9d9 	.word	0x0800c9d9
 800c978:	0800c9d9 	.word	0x0800c9d9
 800c97c:	0800c9d9 	.word	0x0800c9d9
 800c980:	0800c9d9 	.word	0x0800c9d9
 800c984:	0800c9c9 	.word	0x0800c9c9
 800c988:	0800c9d9 	.word	0x0800c9d9
 800c98c:	0800c9d9 	.word	0x0800c9d9
 800c990:	0800c9d9 	.word	0x0800c9d9
 800c994:	0800c9d9 	.word	0x0800c9d9
 800c998:	0800c9d9 	.word	0x0800c9d9
 800c99c:	0800c9d9 	.word	0x0800c9d9
 800c9a0:	0800c9d9 	.word	0x0800c9d9
 800c9a4:	0800c9d1 	.word	0x0800c9d1
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ae:	e1c0      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b6:	e1bc      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9b8:	2308      	movs	r3, #8
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9be:	e1b8      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9c0:	2310      	movs	r3, #16
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c6:	e1b4      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9c8:	2320      	movs	r3, #32
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ce:	e1b0      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9d0:	2340      	movs	r3, #64	; 0x40
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e1ac      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9d8:	2380      	movs	r3, #128	; 0x80
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e1a8      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a75      	ldr	r2, [pc, #468]	; (800cbbc <UART_SetConfig+0x638>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d130      	bne.n	800ca4c <UART_SetConfig+0x4c8>
 800c9ea:	4b73      	ldr	r3, [pc, #460]	; (800cbb8 <UART_SetConfig+0x634>)
 800c9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ee:	f003 0307 	and.w	r3, r3, #7
 800c9f2:	2b05      	cmp	r3, #5
 800c9f4:	d826      	bhi.n	800ca44 <UART_SetConfig+0x4c0>
 800c9f6:	a201      	add	r2, pc, #4	; (adr r2, 800c9fc <UART_SetConfig+0x478>)
 800c9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fc:	0800ca15 	.word	0x0800ca15
 800ca00:	0800ca1d 	.word	0x0800ca1d
 800ca04:	0800ca25 	.word	0x0800ca25
 800ca08:	0800ca2d 	.word	0x0800ca2d
 800ca0c:	0800ca35 	.word	0x0800ca35
 800ca10:	0800ca3d 	.word	0x0800ca3d
 800ca14:	2300      	movs	r3, #0
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1a:	e18a      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca1c:	2304      	movs	r3, #4
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca22:	e186      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca24:	2308      	movs	r3, #8
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2a:	e182      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca32:	e17e      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca34:	2320      	movs	r3, #32
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3a:	e17a      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca3c:	2340      	movs	r3, #64	; 0x40
 800ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca42:	e176      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca44:	2380      	movs	r3, #128	; 0x80
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4a:	e172      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a5b      	ldr	r2, [pc, #364]	; (800cbc0 <UART_SetConfig+0x63c>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d130      	bne.n	800cab8 <UART_SetConfig+0x534>
 800ca56:	4b58      	ldr	r3, [pc, #352]	; (800cbb8 <UART_SetConfig+0x634>)
 800ca58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	2b05      	cmp	r3, #5
 800ca60:	d826      	bhi.n	800cab0 <UART_SetConfig+0x52c>
 800ca62:	a201      	add	r2, pc, #4	; (adr r2, 800ca68 <UART_SetConfig+0x4e4>)
 800ca64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca68:	0800ca81 	.word	0x0800ca81
 800ca6c:	0800ca89 	.word	0x0800ca89
 800ca70:	0800ca91 	.word	0x0800ca91
 800ca74:	0800ca99 	.word	0x0800ca99
 800ca78:	0800caa1 	.word	0x0800caa1
 800ca7c:	0800caa9 	.word	0x0800caa9
 800ca80:	2300      	movs	r3, #0
 800ca82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca86:	e154      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca88:	2304      	movs	r3, #4
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8e:	e150      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca90:	2308      	movs	r3, #8
 800ca92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca96:	e14c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ca98:	2310      	movs	r3, #16
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9e:	e148      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800caa0:	2320      	movs	r3, #32
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa6:	e144      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800caa8:	2340      	movs	r3, #64	; 0x40
 800caaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caae:	e140      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cab0:	2380      	movs	r3, #128	; 0x80
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e13c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a41      	ldr	r2, [pc, #260]	; (800cbc4 <UART_SetConfig+0x640>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	f040 8082 	bne.w	800cbc8 <UART_SetConfig+0x644>
 800cac4:	4b3c      	ldr	r3, [pc, #240]	; (800cbb8 <UART_SetConfig+0x634>)
 800cac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cacc:	2b28      	cmp	r3, #40	; 0x28
 800cace:	d86d      	bhi.n	800cbac <UART_SetConfig+0x628>
 800cad0:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <UART_SetConfig+0x554>)
 800cad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad6:	bf00      	nop
 800cad8:	0800cb7d 	.word	0x0800cb7d
 800cadc:	0800cbad 	.word	0x0800cbad
 800cae0:	0800cbad 	.word	0x0800cbad
 800cae4:	0800cbad 	.word	0x0800cbad
 800cae8:	0800cbad 	.word	0x0800cbad
 800caec:	0800cbad 	.word	0x0800cbad
 800caf0:	0800cbad 	.word	0x0800cbad
 800caf4:	0800cbad 	.word	0x0800cbad
 800caf8:	0800cb85 	.word	0x0800cb85
 800cafc:	0800cbad 	.word	0x0800cbad
 800cb00:	0800cbad 	.word	0x0800cbad
 800cb04:	0800cbad 	.word	0x0800cbad
 800cb08:	0800cbad 	.word	0x0800cbad
 800cb0c:	0800cbad 	.word	0x0800cbad
 800cb10:	0800cbad 	.word	0x0800cbad
 800cb14:	0800cbad 	.word	0x0800cbad
 800cb18:	0800cb8d 	.word	0x0800cb8d
 800cb1c:	0800cbad 	.word	0x0800cbad
 800cb20:	0800cbad 	.word	0x0800cbad
 800cb24:	0800cbad 	.word	0x0800cbad
 800cb28:	0800cbad 	.word	0x0800cbad
 800cb2c:	0800cbad 	.word	0x0800cbad
 800cb30:	0800cbad 	.word	0x0800cbad
 800cb34:	0800cbad 	.word	0x0800cbad
 800cb38:	0800cb95 	.word	0x0800cb95
 800cb3c:	0800cbad 	.word	0x0800cbad
 800cb40:	0800cbad 	.word	0x0800cbad
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cbad 	.word	0x0800cbad
 800cb4c:	0800cbad 	.word	0x0800cbad
 800cb50:	0800cbad 	.word	0x0800cbad
 800cb54:	0800cbad 	.word	0x0800cbad
 800cb58:	0800cb9d 	.word	0x0800cb9d
 800cb5c:	0800cbad 	.word	0x0800cbad
 800cb60:	0800cbad 	.word	0x0800cbad
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cbad 	.word	0x0800cbad
 800cb70:	0800cbad 	.word	0x0800cbad
 800cb74:	0800cbad 	.word	0x0800cbad
 800cb78:	0800cba5 	.word	0x0800cba5
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb82:	e0d6      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cb84:	2304      	movs	r3, #4
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8a:	e0d2      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cb8c:	2308      	movs	r3, #8
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb92:	e0ce      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cb94:	2310      	movs	r3, #16
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9a:	e0ca      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cb9c:	2320      	movs	r3, #32
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba2:	e0c6      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cba4:	2340      	movs	r3, #64	; 0x40
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbaa:	e0c2      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cbac:	2380      	movs	r3, #128	; 0x80
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb2:	e0be      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cbb4:	40011400 	.word	0x40011400
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	40007800 	.word	0x40007800
 800cbc0:	40007c00 	.word	0x40007c00
 800cbc4:	40011800 	.word	0x40011800
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4aad      	ldr	r2, [pc, #692]	; (800ce84 <UART_SetConfig+0x900>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d176      	bne.n	800ccc0 <UART_SetConfig+0x73c>
 800cbd2:	4bad      	ldr	r3, [pc, #692]	; (800ce88 <UART_SetConfig+0x904>)
 800cbd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbda:	2b28      	cmp	r3, #40	; 0x28
 800cbdc:	d86c      	bhi.n	800ccb8 <UART_SetConfig+0x734>
 800cbde:	a201      	add	r2, pc, #4	; (adr r2, 800cbe4 <UART_SetConfig+0x660>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cc89 	.word	0x0800cc89
 800cbe8:	0800ccb9 	.word	0x0800ccb9
 800cbec:	0800ccb9 	.word	0x0800ccb9
 800cbf0:	0800ccb9 	.word	0x0800ccb9
 800cbf4:	0800ccb9 	.word	0x0800ccb9
 800cbf8:	0800ccb9 	.word	0x0800ccb9
 800cbfc:	0800ccb9 	.word	0x0800ccb9
 800cc00:	0800ccb9 	.word	0x0800ccb9
 800cc04:	0800cc91 	.word	0x0800cc91
 800cc08:	0800ccb9 	.word	0x0800ccb9
 800cc0c:	0800ccb9 	.word	0x0800ccb9
 800cc10:	0800ccb9 	.word	0x0800ccb9
 800cc14:	0800ccb9 	.word	0x0800ccb9
 800cc18:	0800ccb9 	.word	0x0800ccb9
 800cc1c:	0800ccb9 	.word	0x0800ccb9
 800cc20:	0800ccb9 	.word	0x0800ccb9
 800cc24:	0800cc99 	.word	0x0800cc99
 800cc28:	0800ccb9 	.word	0x0800ccb9
 800cc2c:	0800ccb9 	.word	0x0800ccb9
 800cc30:	0800ccb9 	.word	0x0800ccb9
 800cc34:	0800ccb9 	.word	0x0800ccb9
 800cc38:	0800ccb9 	.word	0x0800ccb9
 800cc3c:	0800ccb9 	.word	0x0800ccb9
 800cc40:	0800ccb9 	.word	0x0800ccb9
 800cc44:	0800cca1 	.word	0x0800cca1
 800cc48:	0800ccb9 	.word	0x0800ccb9
 800cc4c:	0800ccb9 	.word	0x0800ccb9
 800cc50:	0800ccb9 	.word	0x0800ccb9
 800cc54:	0800ccb9 	.word	0x0800ccb9
 800cc58:	0800ccb9 	.word	0x0800ccb9
 800cc5c:	0800ccb9 	.word	0x0800ccb9
 800cc60:	0800ccb9 	.word	0x0800ccb9
 800cc64:	0800cca9 	.word	0x0800cca9
 800cc68:	0800ccb9 	.word	0x0800ccb9
 800cc6c:	0800ccb9 	.word	0x0800ccb9
 800cc70:	0800ccb9 	.word	0x0800ccb9
 800cc74:	0800ccb9 	.word	0x0800ccb9
 800cc78:	0800ccb9 	.word	0x0800ccb9
 800cc7c:	0800ccb9 	.word	0x0800ccb9
 800cc80:	0800ccb9 	.word	0x0800ccb9
 800cc84:	0800ccb1 	.word	0x0800ccb1
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8e:	e050      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cc90:	2304      	movs	r3, #4
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc96:	e04c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cc98:	2308      	movs	r3, #8
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e048      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cca0:	2310      	movs	r3, #16
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e044      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cca8:	2320      	movs	r3, #32
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccae:	e040      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ccb0:	2340      	movs	r3, #64	; 0x40
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb6:	e03c      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ccb8:	2380      	movs	r3, #128	; 0x80
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccbe:	e038      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a71      	ldr	r2, [pc, #452]	; (800ce8c <UART_SetConfig+0x908>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d130      	bne.n	800cd2c <UART_SetConfig+0x7a8>
 800ccca:	4b6f      	ldr	r3, [pc, #444]	; (800ce88 <UART_SetConfig+0x904>)
 800cccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d826      	bhi.n	800cd24 <UART_SetConfig+0x7a0>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <UART_SetConfig+0x758>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800ccf5 	.word	0x0800ccf5
 800cce0:	0800ccfd 	.word	0x0800ccfd
 800cce4:	0800cd05 	.word	0x0800cd05
 800cce8:	0800cd0d 	.word	0x0800cd0d
 800ccec:	0800cd15 	.word	0x0800cd15
 800ccf0:	0800cd1d 	.word	0x0800cd1d
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfa:	e01a      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800ccfc:	2304      	movs	r3, #4
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd02:	e016      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cd04:	2308      	movs	r3, #8
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0a:	e012      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cd0c:	2310      	movs	r3, #16
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e00e      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cd14:	2320      	movs	r3, #32
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1a:	e00a      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd22:	e006      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cd24:	2380      	movs	r3, #128	; 0x80
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2a:	e002      	b.n	800cd32 <UART_SetConfig+0x7ae>
 800cd2c:	2380      	movs	r3, #128	; 0x80
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a55      	ldr	r2, [pc, #340]	; (800ce8c <UART_SetConfig+0x908>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	f040 80f8 	bne.w	800cf2e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cd42:	2b20      	cmp	r3, #32
 800cd44:	dc46      	bgt.n	800cdd4 <UART_SetConfig+0x850>
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	db75      	blt.n	800ce36 <UART_SetConfig+0x8b2>
 800cd4a:	3b02      	subs	r3, #2
 800cd4c:	2b1e      	cmp	r3, #30
 800cd4e:	d872      	bhi.n	800ce36 <UART_SetConfig+0x8b2>
 800cd50:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <UART_SetConfig+0x7d4>)
 800cd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd56:	bf00      	nop
 800cd58:	0800cddb 	.word	0x0800cddb
 800cd5c:	0800ce37 	.word	0x0800ce37
 800cd60:	0800cde3 	.word	0x0800cde3
 800cd64:	0800ce37 	.word	0x0800ce37
 800cd68:	0800ce37 	.word	0x0800ce37
 800cd6c:	0800ce37 	.word	0x0800ce37
 800cd70:	0800cdf3 	.word	0x0800cdf3
 800cd74:	0800ce37 	.word	0x0800ce37
 800cd78:	0800ce37 	.word	0x0800ce37
 800cd7c:	0800ce37 	.word	0x0800ce37
 800cd80:	0800ce37 	.word	0x0800ce37
 800cd84:	0800ce37 	.word	0x0800ce37
 800cd88:	0800ce37 	.word	0x0800ce37
 800cd8c:	0800ce37 	.word	0x0800ce37
 800cd90:	0800ce03 	.word	0x0800ce03
 800cd94:	0800ce37 	.word	0x0800ce37
 800cd98:	0800ce37 	.word	0x0800ce37
 800cd9c:	0800ce37 	.word	0x0800ce37
 800cda0:	0800ce37 	.word	0x0800ce37
 800cda4:	0800ce37 	.word	0x0800ce37
 800cda8:	0800ce37 	.word	0x0800ce37
 800cdac:	0800ce37 	.word	0x0800ce37
 800cdb0:	0800ce37 	.word	0x0800ce37
 800cdb4:	0800ce37 	.word	0x0800ce37
 800cdb8:	0800ce37 	.word	0x0800ce37
 800cdbc:	0800ce37 	.word	0x0800ce37
 800cdc0:	0800ce37 	.word	0x0800ce37
 800cdc4:	0800ce37 	.word	0x0800ce37
 800cdc8:	0800ce37 	.word	0x0800ce37
 800cdcc:	0800ce37 	.word	0x0800ce37
 800cdd0:	0800ce29 	.word	0x0800ce29
 800cdd4:	2b40      	cmp	r3, #64	; 0x40
 800cdd6:	d02a      	beq.n	800ce2e <UART_SetConfig+0x8aa>
 800cdd8:	e02d      	b.n	800ce36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cdda:	f7fc ffd3 	bl	8009d84 <HAL_RCCEx_GetD3PCLK1Freq>
 800cdde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cde0:	e02f      	b.n	800ce42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fc ffe2 	bl	8009db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf0:	e027      	b.n	800ce42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdf2:	f107 0318 	add.w	r3, r7, #24
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fd f92e 	bl	800a058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce00:	e01f      	b.n	800ce42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce02:	4b21      	ldr	r3, [pc, #132]	; (800ce88 <UART_SetConfig+0x904>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 0320 	and.w	r3, r3, #32
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d009      	beq.n	800ce22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce0e:	4b1e      	ldr	r3, [pc, #120]	; (800ce88 <UART_SetConfig+0x904>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	08db      	lsrs	r3, r3, #3
 800ce14:	f003 0303 	and.w	r3, r3, #3
 800ce18:	4a1d      	ldr	r2, [pc, #116]	; (800ce90 <UART_SetConfig+0x90c>)
 800ce1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce20:	e00f      	b.n	800ce42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ce22:	4b1b      	ldr	r3, [pc, #108]	; (800ce90 <UART_SetConfig+0x90c>)
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce26:	e00c      	b.n	800ce42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce28:	4b1a      	ldr	r3, [pc, #104]	; (800ce94 <UART_SetConfig+0x910>)
 800ce2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce2c:	e009      	b.n	800ce42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce34:	e005      	b.n	800ce42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ce40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81ee 	beq.w	800d226 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	4a12      	ldr	r2, [pc, #72]	; (800ce98 <UART_SetConfig+0x914>)
 800ce50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce54:	461a      	mov	r2, r3
 800ce56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce5c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	4413      	add	r3, r2
 800ce68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d305      	bcc.n	800ce7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d910      	bls.n	800ce9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce80:	e1d1      	b.n	800d226 <UART_SetConfig+0xca2>
 800ce82:	bf00      	nop
 800ce84:	40011c00 	.word	0x40011c00
 800ce88:	58024400 	.word	0x58024400
 800ce8c:	58000c00 	.word	0x58000c00
 800ce90:	03d09000 	.word	0x03d09000
 800ce94:	003d0900 	.word	0x003d0900
 800ce98:	0800e47c 	.word	0x0800e47c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9e:	2200      	movs	r2, #0
 800cea0:	60bb      	str	r3, [r7, #8]
 800cea2:	60fa      	str	r2, [r7, #12]
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea8:	4ac0      	ldr	r2, [pc, #768]	; (800d1ac <UART_SetConfig+0xc28>)
 800ceaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	603b      	str	r3, [r7, #0]
 800ceb4:	607a      	str	r2, [r7, #4]
 800ceb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cebe:	f7f3 fa2f 	bl	8000320 <__aeabi_uldivmod>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4610      	mov	r0, r2
 800cec8:	4619      	mov	r1, r3
 800ceca:	f04f 0200 	mov.w	r2, #0
 800cece:	f04f 0300 	mov.w	r3, #0
 800ced2:	020b      	lsls	r3, r1, #8
 800ced4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ced8:	0202      	lsls	r2, r0, #8
 800ceda:	6979      	ldr	r1, [r7, #20]
 800cedc:	6849      	ldr	r1, [r1, #4]
 800cede:	0849      	lsrs	r1, r1, #1
 800cee0:	2000      	movs	r0, #0
 800cee2:	460c      	mov	r4, r1
 800cee4:	4605      	mov	r5, r0
 800cee6:	eb12 0804 	adds.w	r8, r2, r4
 800ceea:	eb43 0905 	adc.w	r9, r3, r5
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	469a      	mov	sl, r3
 800cef6:	4693      	mov	fp, r2
 800cef8:	4652      	mov	r2, sl
 800cefa:	465b      	mov	r3, fp
 800cefc:	4640      	mov	r0, r8
 800cefe:	4649      	mov	r1, r9
 800cf00:	f7f3 fa0e 	bl	8000320 <__aeabi_uldivmod>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4613      	mov	r3, r2
 800cf0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf12:	d308      	bcc.n	800cf26 <UART_SetConfig+0x9a2>
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf1a:	d204      	bcs.n	800cf26 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf22:	60da      	str	r2, [r3, #12]
 800cf24:	e17f      	b.n	800d226 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf2c:	e17b      	b.n	800d226 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf36:	f040 80bd 	bne.w	800d0b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cf3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf3e:	2b20      	cmp	r3, #32
 800cf40:	dc48      	bgt.n	800cfd4 <UART_SetConfig+0xa50>
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	db7b      	blt.n	800d03e <UART_SetConfig+0xaba>
 800cf46:	2b20      	cmp	r3, #32
 800cf48:	d879      	bhi.n	800d03e <UART_SetConfig+0xaba>
 800cf4a:	a201      	add	r2, pc, #4	; (adr r2, 800cf50 <UART_SetConfig+0x9cc>)
 800cf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf50:	0800cfdb 	.word	0x0800cfdb
 800cf54:	0800cfe3 	.word	0x0800cfe3
 800cf58:	0800d03f 	.word	0x0800d03f
 800cf5c:	0800d03f 	.word	0x0800d03f
 800cf60:	0800cfeb 	.word	0x0800cfeb
 800cf64:	0800d03f 	.word	0x0800d03f
 800cf68:	0800d03f 	.word	0x0800d03f
 800cf6c:	0800d03f 	.word	0x0800d03f
 800cf70:	0800cffb 	.word	0x0800cffb
 800cf74:	0800d03f 	.word	0x0800d03f
 800cf78:	0800d03f 	.word	0x0800d03f
 800cf7c:	0800d03f 	.word	0x0800d03f
 800cf80:	0800d03f 	.word	0x0800d03f
 800cf84:	0800d03f 	.word	0x0800d03f
 800cf88:	0800d03f 	.word	0x0800d03f
 800cf8c:	0800d03f 	.word	0x0800d03f
 800cf90:	0800d00b 	.word	0x0800d00b
 800cf94:	0800d03f 	.word	0x0800d03f
 800cf98:	0800d03f 	.word	0x0800d03f
 800cf9c:	0800d03f 	.word	0x0800d03f
 800cfa0:	0800d03f 	.word	0x0800d03f
 800cfa4:	0800d03f 	.word	0x0800d03f
 800cfa8:	0800d03f 	.word	0x0800d03f
 800cfac:	0800d03f 	.word	0x0800d03f
 800cfb0:	0800d03f 	.word	0x0800d03f
 800cfb4:	0800d03f 	.word	0x0800d03f
 800cfb8:	0800d03f 	.word	0x0800d03f
 800cfbc:	0800d03f 	.word	0x0800d03f
 800cfc0:	0800d03f 	.word	0x0800d03f
 800cfc4:	0800d03f 	.word	0x0800d03f
 800cfc8:	0800d03f 	.word	0x0800d03f
 800cfcc:	0800d03f 	.word	0x0800d03f
 800cfd0:	0800d031 	.word	0x0800d031
 800cfd4:	2b40      	cmp	r3, #64	; 0x40
 800cfd6:	d02e      	beq.n	800d036 <UART_SetConfig+0xab2>
 800cfd8:	e031      	b.n	800d03e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfda:	f7fb ffad 	bl	8008f38 <HAL_RCC_GetPCLK1Freq>
 800cfde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfe0:	e033      	b.n	800d04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfe2:	f7fb ffbf 	bl	8008f64 <HAL_RCC_GetPCLK2Freq>
 800cfe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfe8:	e02f      	b.n	800d04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fc fede 	bl	8009db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cff8:	e027      	b.n	800d04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cffa:	f107 0318 	add.w	r3, r7, #24
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fd f82a 	bl	800a058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d008:	e01f      	b.n	800d04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d00a:	4b69      	ldr	r3, [pc, #420]	; (800d1b0 <UART_SetConfig+0xc2c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 0320 	and.w	r3, r3, #32
 800d012:	2b00      	cmp	r3, #0
 800d014:	d009      	beq.n	800d02a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d016:	4b66      	ldr	r3, [pc, #408]	; (800d1b0 <UART_SetConfig+0xc2c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	08db      	lsrs	r3, r3, #3
 800d01c:	f003 0303 	and.w	r3, r3, #3
 800d020:	4a64      	ldr	r2, [pc, #400]	; (800d1b4 <UART_SetConfig+0xc30>)
 800d022:	fa22 f303 	lsr.w	r3, r2, r3
 800d026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d028:	e00f      	b.n	800d04a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d02a:	4b62      	ldr	r3, [pc, #392]	; (800d1b4 <UART_SetConfig+0xc30>)
 800d02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d02e:	e00c      	b.n	800d04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d030:	4b61      	ldr	r3, [pc, #388]	; (800d1b8 <UART_SetConfig+0xc34>)
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d034:	e009      	b.n	800d04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03c:	e005      	b.n	800d04a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d03e:	2300      	movs	r3, #0
 800d040:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f000 80ea 	beq.w	800d226 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d056:	4a55      	ldr	r2, [pc, #340]	; (800d1ac <UART_SetConfig+0xc28>)
 800d058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d05c:	461a      	mov	r2, r3
 800d05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d060:	fbb3 f3f2 	udiv	r3, r3, r2
 800d064:	005a      	lsls	r2, r3, #1
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	085b      	lsrs	r3, r3, #1
 800d06c:	441a      	add	r2, r3
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	fbb2 f3f3 	udiv	r3, r2, r3
 800d076:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07a:	2b0f      	cmp	r3, #15
 800d07c:	d916      	bls.n	800d0ac <UART_SetConfig+0xb28>
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d084:	d212      	bcs.n	800d0ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d088:	b29b      	uxth	r3, r3
 800d08a:	f023 030f 	bic.w	r3, r3, #15
 800d08e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d092:	085b      	lsrs	r3, r3, #1
 800d094:	b29b      	uxth	r3, r3
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d0a8:	60da      	str	r2, [r3, #12]
 800d0aa:	e0bc      	b.n	800d226 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d0b2:	e0b8      	b.n	800d226 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0b8:	2b20      	cmp	r3, #32
 800d0ba:	dc4b      	bgt.n	800d154 <UART_SetConfig+0xbd0>
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f2c0 8087 	blt.w	800d1d0 <UART_SetConfig+0xc4c>
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	f200 8084 	bhi.w	800d1d0 <UART_SetConfig+0xc4c>
 800d0c8:	a201      	add	r2, pc, #4	; (adr r2, 800d0d0 <UART_SetConfig+0xb4c>)
 800d0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ce:	bf00      	nop
 800d0d0:	0800d15b 	.word	0x0800d15b
 800d0d4:	0800d163 	.word	0x0800d163
 800d0d8:	0800d1d1 	.word	0x0800d1d1
 800d0dc:	0800d1d1 	.word	0x0800d1d1
 800d0e0:	0800d16b 	.word	0x0800d16b
 800d0e4:	0800d1d1 	.word	0x0800d1d1
 800d0e8:	0800d1d1 	.word	0x0800d1d1
 800d0ec:	0800d1d1 	.word	0x0800d1d1
 800d0f0:	0800d17b 	.word	0x0800d17b
 800d0f4:	0800d1d1 	.word	0x0800d1d1
 800d0f8:	0800d1d1 	.word	0x0800d1d1
 800d0fc:	0800d1d1 	.word	0x0800d1d1
 800d100:	0800d1d1 	.word	0x0800d1d1
 800d104:	0800d1d1 	.word	0x0800d1d1
 800d108:	0800d1d1 	.word	0x0800d1d1
 800d10c:	0800d1d1 	.word	0x0800d1d1
 800d110:	0800d18b 	.word	0x0800d18b
 800d114:	0800d1d1 	.word	0x0800d1d1
 800d118:	0800d1d1 	.word	0x0800d1d1
 800d11c:	0800d1d1 	.word	0x0800d1d1
 800d120:	0800d1d1 	.word	0x0800d1d1
 800d124:	0800d1d1 	.word	0x0800d1d1
 800d128:	0800d1d1 	.word	0x0800d1d1
 800d12c:	0800d1d1 	.word	0x0800d1d1
 800d130:	0800d1d1 	.word	0x0800d1d1
 800d134:	0800d1d1 	.word	0x0800d1d1
 800d138:	0800d1d1 	.word	0x0800d1d1
 800d13c:	0800d1d1 	.word	0x0800d1d1
 800d140:	0800d1d1 	.word	0x0800d1d1
 800d144:	0800d1d1 	.word	0x0800d1d1
 800d148:	0800d1d1 	.word	0x0800d1d1
 800d14c:	0800d1d1 	.word	0x0800d1d1
 800d150:	0800d1c3 	.word	0x0800d1c3
 800d154:	2b40      	cmp	r3, #64	; 0x40
 800d156:	d037      	beq.n	800d1c8 <UART_SetConfig+0xc44>
 800d158:	e03a      	b.n	800d1d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d15a:	f7fb feed 	bl	8008f38 <HAL_RCC_GetPCLK1Freq>
 800d15e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d160:	e03c      	b.n	800d1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d162:	f7fb feff 	bl	8008f64 <HAL_RCC_GetPCLK2Freq>
 800d166:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d168:	e038      	b.n	800d1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d16a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fc fe1e 	bl	8009db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d178:	e030      	b.n	800d1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d17a:	f107 0318 	add.w	r3, r7, #24
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fc ff6a 	bl	800a058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d188:	e028      	b.n	800d1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d18a:	4b09      	ldr	r3, [pc, #36]	; (800d1b0 <UART_SetConfig+0xc2c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 0320 	and.w	r3, r3, #32
 800d192:	2b00      	cmp	r3, #0
 800d194:	d012      	beq.n	800d1bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d196:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <UART_SetConfig+0xc2c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	08db      	lsrs	r3, r3, #3
 800d19c:	f003 0303 	and.w	r3, r3, #3
 800d1a0:	4a04      	ldr	r2, [pc, #16]	; (800d1b4 <UART_SetConfig+0xc30>)
 800d1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1a8:	e018      	b.n	800d1dc <UART_SetConfig+0xc58>
 800d1aa:	bf00      	nop
 800d1ac:	0800e47c 	.word	0x0800e47c
 800d1b0:	58024400 	.word	0x58024400
 800d1b4:	03d09000 	.word	0x03d09000
 800d1b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d1bc:	4b24      	ldr	r3, [pc, #144]	; (800d250 <UART_SetConfig+0xccc>)
 800d1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1c0:	e00c      	b.n	800d1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1c2:	4b24      	ldr	r3, [pc, #144]	; (800d254 <UART_SetConfig+0xcd0>)
 800d1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1c6:	e009      	b.n	800d1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ce:	e005      	b.n	800d1dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d1da:	bf00      	nop
    }

    if (pclk != 0U)
 800d1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d021      	beq.n	800d226 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e6:	4a1c      	ldr	r2, [pc, #112]	; (800d258 <UART_SetConfig+0xcd4>)
 800d1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	085b      	lsrs	r3, r3, #1
 800d1fa:	441a      	add	r2, r3
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	fbb2 f3f3 	udiv	r3, r2, r3
 800d204:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d208:	2b0f      	cmp	r3, #15
 800d20a:	d909      	bls.n	800d220 <UART_SetConfig+0xc9c>
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d212:	d205      	bcs.n	800d220 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d216:	b29a      	uxth	r2, r3
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	60da      	str	r2, [r3, #12]
 800d21e:	e002      	b.n	800d226 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2201      	movs	r2, #1
 800d22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	2201      	movs	r2, #1
 800d232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2200      	movs	r2, #0
 800d23a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	2200      	movs	r2, #0
 800d240:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d242:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d246:	4618      	mov	r0, r3
 800d248:	3748      	adds	r7, #72	; 0x48
 800d24a:	46bd      	mov	sp, r7
 800d24c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d250:	03d09000 	.word	0x03d09000
 800d254:	003d0900 	.word	0x003d0900
 800d258:	0800e47c 	.word	0x0800e47c

0800d25c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d268:	f003 0301 	and.w	r3, r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00a      	beq.n	800d286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00a      	beq.n	800d2a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	430a      	orrs	r2, r1
 800d2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ac:	f003 0304 	and.w	r3, r3, #4
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00a      	beq.n	800d2ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ce:	f003 0308 	and.w	r3, r3, #8
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f0:	f003 0310 	and.w	r3, r3, #16
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00a      	beq.n	800d30e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d312:	f003 0320 	and.w	r3, r3, #32
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	430a      	orrs	r2, r1
 800d32e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01a      	beq.n	800d372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	430a      	orrs	r2, r1
 800d350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d35a:	d10a      	bne.n	800d372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	430a      	orrs	r2, r1
 800d370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00a      	beq.n	800d394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	430a      	orrs	r2, r1
 800d392:	605a      	str	r2, [r3, #4]
  }
}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af02      	add	r7, sp, #8
 800d3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3b0:	f7f7 fd62 	bl	8004e78 <HAL_GetTick>
 800d3b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 0308 	and.w	r3, r3, #8
 800d3c0:	2b08      	cmp	r3, #8
 800d3c2:	d10e      	bne.n	800d3e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f82f 	bl	800d436 <UART_WaitOnFlagUntilTimeout>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e025      	b.n	800d42e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0304 	and.w	r3, r3, #4
 800d3ec:	2b04      	cmp	r3, #4
 800d3ee:	d10e      	bne.n	800d40e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f819 	bl	800d436 <UART_WaitOnFlagUntilTimeout>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d001      	beq.n	800d40e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	e00f      	b.n	800d42e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2220      	movs	r2, #32
 800d412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2220      	movs	r2, #32
 800d41a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b09c      	sub	sp, #112	; 0x70
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	60f8      	str	r0, [r7, #12]
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	603b      	str	r3, [r7, #0]
 800d442:	4613      	mov	r3, r2
 800d444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d446:	e0a9      	b.n	800d59c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d44a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d44e:	f000 80a5 	beq.w	800d59c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d452:	f7f7 fd11 	bl	8004e78 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d45e:	429a      	cmp	r2, r3
 800d460:	d302      	bcc.n	800d468 <UART_WaitOnFlagUntilTimeout+0x32>
 800d462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d464:	2b00      	cmp	r3, #0
 800d466:	d140      	bne.n	800d4ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d47c:	667b      	str	r3, [r7, #100]	; 0x64
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	461a      	mov	r2, r3
 800d484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d486:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d488:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d48c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e6      	bne.n	800d468 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3308      	adds	r3, #8
 800d4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a4:	e853 3f00 	ldrex	r3, [r3]
 800d4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ac:	f023 0301 	bic.w	r3, r3, #1
 800d4b0:	663b      	str	r3, [r7, #96]	; 0x60
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4c2:	e841 2300 	strex	r3, r2, [r1]
 800d4c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e5      	bne.n	800d49a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2220      	movs	r2, #32
 800d4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2220      	movs	r2, #32
 800d4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e069      	b.n	800d5be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 0304 	and.w	r3, r3, #4
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d051      	beq.n	800d59c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	69db      	ldr	r3, [r3, #28]
 800d4fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d506:	d149      	bne.n	800d59c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d510:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	e853 3f00 	ldrex	r3, [r3]
 800d51e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d526:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	461a      	mov	r2, r3
 800d52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d530:	637b      	str	r3, [r7, #52]	; 0x34
 800d532:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d538:	e841 2300 	strex	r3, r2, [r1]
 800d53c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1e6      	bne.n	800d512 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3308      	adds	r3, #8
 800d54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	613b      	str	r3, [r7, #16]
   return(result);
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f023 0301 	bic.w	r3, r3, #1
 800d55a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	3308      	adds	r3, #8
 800d562:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d564:	623a      	str	r2, [r7, #32]
 800d566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d568:	69f9      	ldr	r1, [r7, #28]
 800d56a:	6a3a      	ldr	r2, [r7, #32]
 800d56c:	e841 2300 	strex	r3, r2, [r1]
 800d570:	61bb      	str	r3, [r7, #24]
   return(result);
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1e5      	bne.n	800d544 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2220      	movs	r2, #32
 800d57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2220      	movs	r2, #32
 800d584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2220      	movs	r2, #32
 800d58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e010      	b.n	800d5be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	69da      	ldr	r2, [r3, #28]
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	bf0c      	ite	eq
 800d5ac:	2301      	moveq	r3, #1
 800d5ae:	2300      	movne	r3, #0
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	f43f af46 	beq.w	800d448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3770      	adds	r7, #112	; 0x70
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b096      	sub	sp, #88	; 0x58
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	88fa      	ldrh	r2, [r7, #6]
 800d5e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2222      	movs	r2, #34	; 0x22
 800d5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d02c      	beq.n	800d656 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d600:	4a42      	ldr	r2, [pc, #264]	; (800d70c <UART_Start_Receive_DMA+0x144>)
 800d602:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d608:	4a41      	ldr	r2, [pc, #260]	; (800d710 <UART_Start_Receive_DMA+0x148>)
 800d60a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d610:	4a40      	ldr	r2, [pc, #256]	; (800d714 <UART_Start_Receive_DMA+0x14c>)
 800d612:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d618:	2200      	movs	r2, #0
 800d61a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3324      	adds	r3, #36	; 0x24
 800d626:	4619      	mov	r1, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d62c:	461a      	mov	r2, r3
 800d62e:	88fb      	ldrh	r3, [r7, #6]
 800d630:	f7f8 f898 	bl	8005764 <HAL_DMA_Start_IT>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00d      	beq.n	800d656 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2210      	movs	r2, #16
 800d63e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2220      	movs	r2, #32
 800d64e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e055      	b.n	800d702 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d018      	beq.n	800d698 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66e:	e853 3f00 	ldrex	r3, [r3]
 800d672:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d67a:	657b      	str	r3, [r7, #84]	; 0x54
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	461a      	mov	r2, r3
 800d682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d684:	64bb      	str	r3, [r7, #72]	; 0x48
 800d686:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d688:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d68a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d68c:	e841 2300 	strex	r3, r2, [r1]
 800d690:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1e6      	bne.n	800d666 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3308      	adds	r3, #8
 800d69e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	e853 3f00 	ldrex	r3, [r3]
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	f043 0301 	orr.w	r3, r3, #1
 800d6ae:	653b      	str	r3, [r7, #80]	; 0x50
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6b8:	637a      	str	r2, [r7, #52]	; 0x34
 800d6ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6c0:	e841 2300 	strex	r3, r2, [r1]
 800d6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e5      	bne.n	800d698 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	613b      	str	r3, [r7, #16]
   return(result);
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6ec:	623a      	str	r2, [r7, #32]
 800d6ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	69f9      	ldr	r1, [r7, #28]
 800d6f2:	6a3a      	ldr	r2, [r7, #32]
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e5      	bne.n	800d6cc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3758      	adds	r7, #88	; 0x58
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	0800d91b 	.word	0x0800d91b
 800d710:	0800da3d 	.word	0x0800da3d
 800d714:	0800da75 	.word	0x0800da75

0800d718 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d718:	b480      	push	{r7}
 800d71a:	b08f      	sub	sp, #60	; 0x3c
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d734:	637b      	str	r3, [r7, #52]	; 0x34
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	461a      	mov	r2, r3
 800d73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d740:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d746:	e841 2300 	strex	r3, r2, [r1]
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1e6      	bne.n	800d720 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	3308      	adds	r3, #8
 800d758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	e853 3f00 	ldrex	r3, [r3]
 800d760:	60bb      	str	r3, [r7, #8]
   return(result);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d768:	633b      	str	r3, [r7, #48]	; 0x30
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3308      	adds	r3, #8
 800d770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d772:	61ba      	str	r2, [r7, #24]
 800d774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d776:	6979      	ldr	r1, [r7, #20]
 800d778:	69ba      	ldr	r2, [r7, #24]
 800d77a:	e841 2300 	strex	r3, r2, [r1]
 800d77e:	613b      	str	r3, [r7, #16]
   return(result);
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1e5      	bne.n	800d752 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2220      	movs	r2, #32
 800d78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d78e:	bf00      	nop
 800d790:	373c      	adds	r7, #60	; 0x3c
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
	...

0800d79c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b095      	sub	sp, #84	; 0x54
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ac:	e853 3f00 	ldrex	r3, [r3]
 800d7b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d7c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ca:	e841 2300 	strex	r3, r2, [r1]
 800d7ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1e6      	bne.n	800d7a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7e6:	69fa      	ldr	r2, [r7, #28]
 800d7e8:	4b1e      	ldr	r3, [pc, #120]	; (800d864 <UART_EndRxTransfer+0xc8>)
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7fe:	e841 2300 	strex	r3, r2, [r1]
 800d802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1e5      	bne.n	800d7d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d118      	bne.n	800d844 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	e853 3f00 	ldrex	r3, [r3]
 800d81e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f023 0310 	bic.w	r3, r3, #16
 800d826:	647b      	str	r3, [r7, #68]	; 0x44
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	461a      	mov	r2, r3
 800d82e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d830:	61bb      	str	r3, [r7, #24]
 800d832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d834:	6979      	ldr	r1, [r7, #20]
 800d836:	69ba      	ldr	r2, [r7, #24]
 800d838:	e841 2300 	strex	r3, r2, [r1]
 800d83c:	613b      	str	r3, [r7, #16]
   return(result);
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1e6      	bne.n	800d812 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2220      	movs	r2, #32
 800d848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d858:	bf00      	nop
 800d85a:	3754      	adds	r7, #84	; 0x54
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr
 800d864:	effffffe 	.word	0xeffffffe

0800d868 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b090      	sub	sp, #64	; 0x40
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d874:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	69db      	ldr	r3, [r3, #28]
 800d87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d87e:	d037      	beq.n	800d8f0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d882:	2200      	movs	r2, #0
 800d884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3308      	adds	r3, #8
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	e853 3f00 	ldrex	r3, [r3]
 800d896:	623b      	str	r3, [r7, #32]
   return(result);
 800d898:	6a3b      	ldr	r3, [r7, #32]
 800d89a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d89e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3308      	adds	r3, #8
 800d8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8a8:	633a      	str	r2, [r7, #48]	; 0x30
 800d8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8b0:	e841 2300 	strex	r3, r2, [r1]
 800d8b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1e5      	bne.n	800d888 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8da:	61fb      	str	r3, [r7, #28]
 800d8dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8de:	69b9      	ldr	r1, [r7, #24]
 800d8e0:	69fa      	ldr	r2, [r7, #28]
 800d8e2:	e841 2300 	strex	r3, r2, [r1]
 800d8e6:	617b      	str	r3, [r7, #20]
   return(result);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1e6      	bne.n	800d8bc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8ee:	e002      	b.n	800d8f6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d8f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8f2:	f7f5 fa19 	bl	8002d28 <HAL_UART_TxCpltCallback>
}
 800d8f6:	bf00      	nop
 800d8f8:	3740      	adds	r7, #64	; 0x40
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7fe fe0f 	bl	800c530 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d912:	bf00      	nop
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b09c      	sub	sp, #112	; 0x70
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d926:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	69db      	ldr	r3, [r3, #28]
 800d92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d930:	d071      	beq.n	800da16 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d934:	2200      	movs	r2, #0
 800d936:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d942:	e853 3f00 	ldrex	r3, [r3]
 800d946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d94a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d94e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	461a      	mov	r2, r3
 800d956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d958:	65bb      	str	r3, [r7, #88]	; 0x58
 800d95a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d95e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d960:	e841 2300 	strex	r3, r2, [r1]
 800d964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1e6      	bne.n	800d93a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3308      	adds	r3, #8
 800d972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d976:	e853 3f00 	ldrex	r3, [r3]
 800d97a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d97e:	f023 0301 	bic.w	r3, r3, #1
 800d982:	667b      	str	r3, [r7, #100]	; 0x64
 800d984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	3308      	adds	r3, #8
 800d98a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d98c:	647a      	str	r2, [r7, #68]	; 0x44
 800d98e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d994:	e841 2300 	strex	r3, r2, [r1]
 800d998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1e5      	bne.n	800d96c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	e853 3f00 	ldrex	r3, [r3]
 800d9ae:	623b      	str	r3, [r7, #32]
   return(result);
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9b6:	663b      	str	r3, [r7, #96]	; 0x60
 800d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9c0:	633a      	str	r2, [r7, #48]	; 0x30
 800d9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c8:	e841 2300 	strex	r3, r2, [r1]
 800d9cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1e5      	bne.n	800d9a0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d6:	2220      	movs	r2, #32
 800d9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d118      	bne.n	800da16 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	e853 3f00 	ldrex	r3, [r3]
 800d9f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f023 0310 	bic.w	r3, r3, #16
 800d9f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da02:	61fb      	str	r3, [r7, #28]
 800da04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da06:	69b9      	ldr	r1, [r7, #24]
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	e841 2300 	strex	r3, r2, [r1]
 800da0e:	617b      	str	r3, [r7, #20]
   return(result);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d1e6      	bne.n	800d9e4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d107      	bne.n	800da2e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da24:	4619      	mov	r1, r3
 800da26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da28:	f7fe fda0 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da2c:	e002      	b.n	800da34 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800da2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da30:	f7f5 f98c 	bl	8002d4c <HAL_UART_RxCpltCallback>
}
 800da34:	bf00      	nop
 800da36:	3770      	adds	r7, #112	; 0x70
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da48:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d109      	bne.n	800da66 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da58:	085b      	lsrs	r3, r3, #1
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	4619      	mov	r1, r3
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7fe fd84 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da64:	e002      	b.n	800da6c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7fe fd6c 	bl	800c544 <HAL_UART_RxHalfCpltCallback>
}
 800da6c:	bf00      	nop
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da9c:	2b80      	cmp	r3, #128	; 0x80
 800da9e:	d109      	bne.n	800dab4 <UART_DMAError+0x40>
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	2b21      	cmp	r3, #33	; 0x21
 800daa4:	d106      	bne.n	800dab4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800daae:	6978      	ldr	r0, [r7, #20]
 800dab0:	f7ff fe32 	bl	800d718 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dabe:	2b40      	cmp	r3, #64	; 0x40
 800dac0:	d109      	bne.n	800dad6 <UART_DMAError+0x62>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b22      	cmp	r3, #34	; 0x22
 800dac6:	d106      	bne.n	800dad6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	2200      	movs	r2, #0
 800dacc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dad0:	6978      	ldr	r0, [r7, #20]
 800dad2:	f7ff fe63 	bl	800d79c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dadc:	f043 0210 	orr.w	r2, r3, #16
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dae6:	6978      	ldr	r0, [r7, #20]
 800dae8:	f7fe fd36 	bl	800c558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daec:	bf00      	nop
 800daee:	3718      	adds	r7, #24
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f7fe fd20 	bl	800c558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db18:	bf00      	nop
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b088      	sub	sp, #32
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	e853 3f00 	ldrex	r3, [r3]
 800db34:	60bb      	str	r3, [r7, #8]
   return(result);
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db3c:	61fb      	str	r3, [r7, #28]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	461a      	mov	r2, r3
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	61bb      	str	r3, [r7, #24]
 800db48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db4a:	6979      	ldr	r1, [r7, #20]
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	e841 2300 	strex	r3, r2, [r1]
 800db52:	613b      	str	r3, [r7, #16]
   return(result);
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1e6      	bne.n	800db28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2220      	movs	r2, #32
 800db5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7f5 f8dd 	bl	8002d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db6e:	bf00      	nop
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db76:	b480      	push	{r7}
 800db78:	b083      	sub	sp, #12
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db7e:	bf00      	nop
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b083      	sub	sp, #12
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db92:	bf00      	nop
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dba6:	bf00      	nop
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d101      	bne.n	800dbc8 <HAL_UARTEx_DisableFifoMode+0x16>
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	e027      	b.n	800dc18 <HAL_UARTEx_DisableFifoMode+0x66>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2224      	movs	r2, #36	; 0x24
 800dbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f022 0201 	bic.w	r2, r2, #1
 800dbee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e02d      	b.n	800dc98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2224      	movs	r2, #36	; 0x24
 800dc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f022 0201 	bic.w	r2, r2, #1
 800dc62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f84f 	bl	800dd1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d101      	bne.n	800dcb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	e02d      	b.n	800dd14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2224      	movs	r2, #36	; 0x24
 800dcc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0201 	bic.w	r2, r2, #1
 800dcde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	683a      	ldr	r2, [r7, #0]
 800dcf0:	430a      	orrs	r2, r1
 800dcf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f811 	bl	800dd1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2220      	movs	r2, #32
 800dd06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d108      	bne.n	800dd3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd3c:	e031      	b.n	800dda2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd3e:	2310      	movs	r3, #16
 800dd40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd42:	2310      	movs	r3, #16
 800dd44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	689b      	ldr	r3, [r3, #8]
 800dd4c:	0e5b      	lsrs	r3, r3, #25
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 0307 	and.w	r3, r3, #7
 800dd54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	0f5b      	lsrs	r3, r3, #29
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	f003 0307 	and.w	r3, r3, #7
 800dd64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd66:	7bbb      	ldrb	r3, [r7, #14]
 800dd68:	7b3a      	ldrb	r2, [r7, #12]
 800dd6a:	4911      	ldr	r1, [pc, #68]	; (800ddb0 <UARTEx_SetNbDataToProcess+0x94>)
 800dd6c:	5c8a      	ldrb	r2, [r1, r2]
 800dd6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd72:	7b3a      	ldrb	r2, [r7, #12]
 800dd74:	490f      	ldr	r1, [pc, #60]	; (800ddb4 <UARTEx_SetNbDataToProcess+0x98>)
 800dd76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd78:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd84:	7bfb      	ldrb	r3, [r7, #15]
 800dd86:	7b7a      	ldrb	r2, [r7, #13]
 800dd88:	4909      	ldr	r1, [pc, #36]	; (800ddb0 <UARTEx_SetNbDataToProcess+0x94>)
 800dd8a:	5c8a      	ldrb	r2, [r1, r2]
 800dd8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd90:	7b7a      	ldrb	r2, [r7, #13]
 800dd92:	4908      	ldr	r1, [pc, #32]	; (800ddb4 <UARTEx_SetNbDataToProcess+0x98>)
 800dd94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd96:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dda2:	bf00      	nop
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	0800e494 	.word	0x0800e494
 800ddb4:	0800e49c 	.word	0x0800e49c

0800ddb8 <__cxa_pure_virtual>:
 800ddb8:	b508      	push	{r3, lr}
 800ddba:	f000 f80d 	bl	800ddd8 <_ZSt9terminatev>

0800ddbe <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ddbe:	b508      	push	{r3, lr}
 800ddc0:	4780      	blx	r0
 800ddc2:	f000 f80e 	bl	800dde2 <abort>
	...

0800ddc8 <_ZSt13get_terminatev>:
 800ddc8:	4b02      	ldr	r3, [pc, #8]	; (800ddd4 <_ZSt13get_terminatev+0xc>)
 800ddca:	6818      	ldr	r0, [r3, #0]
 800ddcc:	f3bf 8f5b 	dmb	ish
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	24000010 	.word	0x24000010

0800ddd8 <_ZSt9terminatev>:
 800ddd8:	b508      	push	{r3, lr}
 800ddda:	f7ff fff5 	bl	800ddc8 <_ZSt13get_terminatev>
 800ddde:	f7ff ffee 	bl	800ddbe <_ZN10__cxxabiv111__terminateEPFvvE>

0800dde2 <abort>:
 800dde2:	b508      	push	{r3, lr}
 800dde4:	2006      	movs	r0, #6
 800dde6:	f000 f873 	bl	800ded0 <raise>
 800ddea:	2001      	movs	r0, #1
 800ddec:	f7f6 fedc 	bl	8004ba8 <_exit>

0800ddf0 <__errno>:
 800ddf0:	4b01      	ldr	r3, [pc, #4]	; (800ddf8 <__errno+0x8>)
 800ddf2:	6818      	ldr	r0, [r3, #0]
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	24000014 	.word	0x24000014

0800ddfc <__libc_init_array>:
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	4d0d      	ldr	r5, [pc, #52]	; (800de34 <__libc_init_array+0x38>)
 800de00:	4c0d      	ldr	r4, [pc, #52]	; (800de38 <__libc_init_array+0x3c>)
 800de02:	1b64      	subs	r4, r4, r5
 800de04:	10a4      	asrs	r4, r4, #2
 800de06:	2600      	movs	r6, #0
 800de08:	42a6      	cmp	r6, r4
 800de0a:	d109      	bne.n	800de20 <__libc_init_array+0x24>
 800de0c:	4d0b      	ldr	r5, [pc, #44]	; (800de3c <__libc_init_array+0x40>)
 800de0e:	4c0c      	ldr	r4, [pc, #48]	; (800de40 <__libc_init_array+0x44>)
 800de10:	f000 f9b0 	bl	800e174 <_init>
 800de14:	1b64      	subs	r4, r4, r5
 800de16:	10a4      	asrs	r4, r4, #2
 800de18:	2600      	movs	r6, #0
 800de1a:	42a6      	cmp	r6, r4
 800de1c:	d105      	bne.n	800de2a <__libc_init_array+0x2e>
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	f855 3b04 	ldr.w	r3, [r5], #4
 800de24:	4798      	blx	r3
 800de26:	3601      	adds	r6, #1
 800de28:	e7ee      	b.n	800de08 <__libc_init_array+0xc>
 800de2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2e:	4798      	blx	r3
 800de30:	3601      	adds	r6, #1
 800de32:	e7f2      	b.n	800de1a <__libc_init_array+0x1e>
 800de34:	0800e4ac 	.word	0x0800e4ac
 800de38:	0800e4ac 	.word	0x0800e4ac
 800de3c:	0800e4ac 	.word	0x0800e4ac
 800de40:	0800e4b8 	.word	0x0800e4b8

0800de44 <memcpy>:
 800de44:	440a      	add	r2, r1
 800de46:	4291      	cmp	r1, r2
 800de48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de4c:	d100      	bne.n	800de50 <memcpy+0xc>
 800de4e:	4770      	bx	lr
 800de50:	b510      	push	{r4, lr}
 800de52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de5a:	4291      	cmp	r1, r2
 800de5c:	d1f9      	bne.n	800de52 <memcpy+0xe>
 800de5e:	bd10      	pop	{r4, pc}

0800de60 <memset>:
 800de60:	4402      	add	r2, r0
 800de62:	4603      	mov	r3, r0
 800de64:	4293      	cmp	r3, r2
 800de66:	d100      	bne.n	800de6a <memset+0xa>
 800de68:	4770      	bx	lr
 800de6a:	f803 1b01 	strb.w	r1, [r3], #1
 800de6e:	e7f9      	b.n	800de64 <memset+0x4>

0800de70 <realloc>:
 800de70:	4b02      	ldr	r3, [pc, #8]	; (800de7c <realloc+0xc>)
 800de72:	460a      	mov	r2, r1
 800de74:	4601      	mov	r1, r0
 800de76:	6818      	ldr	r0, [r3, #0]
 800de78:	f000 b8da 	b.w	800e030 <_realloc_r>
 800de7c:	24000014 	.word	0x24000014

0800de80 <_raise_r>:
 800de80:	291f      	cmp	r1, #31
 800de82:	b538      	push	{r3, r4, r5, lr}
 800de84:	4604      	mov	r4, r0
 800de86:	460d      	mov	r5, r1
 800de88:	d904      	bls.n	800de94 <_raise_r+0x14>
 800de8a:	2316      	movs	r3, #22
 800de8c:	6003      	str	r3, [r0, #0]
 800de8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de96:	b112      	cbz	r2, 800de9e <_raise_r+0x1e>
 800de98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de9c:	b94b      	cbnz	r3, 800deb2 <_raise_r+0x32>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 f830 	bl	800df04 <_getpid_r>
 800dea4:	462a      	mov	r2, r5
 800dea6:	4601      	mov	r1, r0
 800dea8:	4620      	mov	r0, r4
 800deaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deae:	f000 b817 	b.w	800dee0 <_kill_r>
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d00a      	beq.n	800decc <_raise_r+0x4c>
 800deb6:	1c59      	adds	r1, r3, #1
 800deb8:	d103      	bne.n	800dec2 <_raise_r+0x42>
 800deba:	2316      	movs	r3, #22
 800debc:	6003      	str	r3, [r0, #0]
 800debe:	2001      	movs	r0, #1
 800dec0:	e7e7      	b.n	800de92 <_raise_r+0x12>
 800dec2:	2400      	movs	r4, #0
 800dec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dec8:	4628      	mov	r0, r5
 800deca:	4798      	blx	r3
 800decc:	2000      	movs	r0, #0
 800dece:	e7e0      	b.n	800de92 <_raise_r+0x12>

0800ded0 <raise>:
 800ded0:	4b02      	ldr	r3, [pc, #8]	; (800dedc <raise+0xc>)
 800ded2:	4601      	mov	r1, r0
 800ded4:	6818      	ldr	r0, [r3, #0]
 800ded6:	f7ff bfd3 	b.w	800de80 <_raise_r>
 800deda:	bf00      	nop
 800dedc:	24000014 	.word	0x24000014

0800dee0 <_kill_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	; (800df00 <_kill_r+0x20>)
 800dee4:	2300      	movs	r3, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	f7f6 fe4b 	bl	8004b88 <_kill>
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	d102      	bne.n	800defc <_kill_r+0x1c>
 800def6:	682b      	ldr	r3, [r5, #0]
 800def8:	b103      	cbz	r3, 800defc <_kill_r+0x1c>
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	bd38      	pop	{r3, r4, r5, pc}
 800defe:	bf00      	nop
 800df00:	24010b1c 	.word	0x24010b1c

0800df04 <_getpid_r>:
 800df04:	f7f6 be38 	b.w	8004b78 <_getpid>

0800df08 <sbrk_aligned>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	4e0e      	ldr	r6, [pc, #56]	; (800df44 <sbrk_aligned+0x3c>)
 800df0c:	460c      	mov	r4, r1
 800df0e:	6831      	ldr	r1, [r6, #0]
 800df10:	4605      	mov	r5, r0
 800df12:	b911      	cbnz	r1, 800df1a <sbrk_aligned+0x12>
 800df14:	f000 f8bc 	bl	800e090 <_sbrk_r>
 800df18:	6030      	str	r0, [r6, #0]
 800df1a:	4621      	mov	r1, r4
 800df1c:	4628      	mov	r0, r5
 800df1e:	f000 f8b7 	bl	800e090 <_sbrk_r>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	d00a      	beq.n	800df3c <sbrk_aligned+0x34>
 800df26:	1cc4      	adds	r4, r0, #3
 800df28:	f024 0403 	bic.w	r4, r4, #3
 800df2c:	42a0      	cmp	r0, r4
 800df2e:	d007      	beq.n	800df40 <sbrk_aligned+0x38>
 800df30:	1a21      	subs	r1, r4, r0
 800df32:	4628      	mov	r0, r5
 800df34:	f000 f8ac 	bl	800e090 <_sbrk_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	d101      	bne.n	800df40 <sbrk_aligned+0x38>
 800df3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800df40:	4620      	mov	r0, r4
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	24010b18 	.word	0x24010b18

0800df48 <_malloc_r>:
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	1ccd      	adds	r5, r1, #3
 800df4e:	f025 0503 	bic.w	r5, r5, #3
 800df52:	3508      	adds	r5, #8
 800df54:	2d0c      	cmp	r5, #12
 800df56:	bf38      	it	cc
 800df58:	250c      	movcc	r5, #12
 800df5a:	2d00      	cmp	r5, #0
 800df5c:	4607      	mov	r7, r0
 800df5e:	db01      	blt.n	800df64 <_malloc_r+0x1c>
 800df60:	42a9      	cmp	r1, r5
 800df62:	d905      	bls.n	800df70 <_malloc_r+0x28>
 800df64:	230c      	movs	r3, #12
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	2600      	movs	r6, #0
 800df6a:	4630      	mov	r0, r6
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	4e2e      	ldr	r6, [pc, #184]	; (800e02c <_malloc_r+0xe4>)
 800df72:	f000 f89d 	bl	800e0b0 <__malloc_lock>
 800df76:	6833      	ldr	r3, [r6, #0]
 800df78:	461c      	mov	r4, r3
 800df7a:	bb34      	cbnz	r4, 800dfca <_malloc_r+0x82>
 800df7c:	4629      	mov	r1, r5
 800df7e:	4638      	mov	r0, r7
 800df80:	f7ff ffc2 	bl	800df08 <sbrk_aligned>
 800df84:	1c43      	adds	r3, r0, #1
 800df86:	4604      	mov	r4, r0
 800df88:	d14d      	bne.n	800e026 <_malloc_r+0xde>
 800df8a:	6834      	ldr	r4, [r6, #0]
 800df8c:	4626      	mov	r6, r4
 800df8e:	2e00      	cmp	r6, #0
 800df90:	d140      	bne.n	800e014 <_malloc_r+0xcc>
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	4631      	mov	r1, r6
 800df96:	4638      	mov	r0, r7
 800df98:	eb04 0803 	add.w	r8, r4, r3
 800df9c:	f000 f878 	bl	800e090 <_sbrk_r>
 800dfa0:	4580      	cmp	r8, r0
 800dfa2:	d13a      	bne.n	800e01a <_malloc_r+0xd2>
 800dfa4:	6821      	ldr	r1, [r4, #0]
 800dfa6:	3503      	adds	r5, #3
 800dfa8:	1a6d      	subs	r5, r5, r1
 800dfaa:	f025 0503 	bic.w	r5, r5, #3
 800dfae:	3508      	adds	r5, #8
 800dfb0:	2d0c      	cmp	r5, #12
 800dfb2:	bf38      	it	cc
 800dfb4:	250c      	movcc	r5, #12
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	4638      	mov	r0, r7
 800dfba:	f7ff ffa5 	bl	800df08 <sbrk_aligned>
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	d02b      	beq.n	800e01a <_malloc_r+0xd2>
 800dfc2:	6823      	ldr	r3, [r4, #0]
 800dfc4:	442b      	add	r3, r5
 800dfc6:	6023      	str	r3, [r4, #0]
 800dfc8:	e00e      	b.n	800dfe8 <_malloc_r+0xa0>
 800dfca:	6822      	ldr	r2, [r4, #0]
 800dfcc:	1b52      	subs	r2, r2, r5
 800dfce:	d41e      	bmi.n	800e00e <_malloc_r+0xc6>
 800dfd0:	2a0b      	cmp	r2, #11
 800dfd2:	d916      	bls.n	800e002 <_malloc_r+0xba>
 800dfd4:	1961      	adds	r1, r4, r5
 800dfd6:	42a3      	cmp	r3, r4
 800dfd8:	6025      	str	r5, [r4, #0]
 800dfda:	bf18      	it	ne
 800dfdc:	6059      	strne	r1, [r3, #4]
 800dfde:	6863      	ldr	r3, [r4, #4]
 800dfe0:	bf08      	it	eq
 800dfe2:	6031      	streq	r1, [r6, #0]
 800dfe4:	5162      	str	r2, [r4, r5]
 800dfe6:	604b      	str	r3, [r1, #4]
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f104 060b 	add.w	r6, r4, #11
 800dfee:	f000 f865 	bl	800e0bc <__malloc_unlock>
 800dff2:	f026 0607 	bic.w	r6, r6, #7
 800dff6:	1d23      	adds	r3, r4, #4
 800dff8:	1af2      	subs	r2, r6, r3
 800dffa:	d0b6      	beq.n	800df6a <_malloc_r+0x22>
 800dffc:	1b9b      	subs	r3, r3, r6
 800dffe:	50a3      	str	r3, [r4, r2]
 800e000:	e7b3      	b.n	800df6a <_malloc_r+0x22>
 800e002:	6862      	ldr	r2, [r4, #4]
 800e004:	42a3      	cmp	r3, r4
 800e006:	bf0c      	ite	eq
 800e008:	6032      	streq	r2, [r6, #0]
 800e00a:	605a      	strne	r2, [r3, #4]
 800e00c:	e7ec      	b.n	800dfe8 <_malloc_r+0xa0>
 800e00e:	4623      	mov	r3, r4
 800e010:	6864      	ldr	r4, [r4, #4]
 800e012:	e7b2      	b.n	800df7a <_malloc_r+0x32>
 800e014:	4634      	mov	r4, r6
 800e016:	6876      	ldr	r6, [r6, #4]
 800e018:	e7b9      	b.n	800df8e <_malloc_r+0x46>
 800e01a:	230c      	movs	r3, #12
 800e01c:	603b      	str	r3, [r7, #0]
 800e01e:	4638      	mov	r0, r7
 800e020:	f000 f84c 	bl	800e0bc <__malloc_unlock>
 800e024:	e7a1      	b.n	800df6a <_malloc_r+0x22>
 800e026:	6025      	str	r5, [r4, #0]
 800e028:	e7de      	b.n	800dfe8 <_malloc_r+0xa0>
 800e02a:	bf00      	nop
 800e02c:	24010b14 	.word	0x24010b14

0800e030 <_realloc_r>:
 800e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e034:	4680      	mov	r8, r0
 800e036:	4614      	mov	r4, r2
 800e038:	460e      	mov	r6, r1
 800e03a:	b921      	cbnz	r1, 800e046 <_realloc_r+0x16>
 800e03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e040:	4611      	mov	r1, r2
 800e042:	f7ff bf81 	b.w	800df48 <_malloc_r>
 800e046:	b92a      	cbnz	r2, 800e054 <_realloc_r+0x24>
 800e048:	f000 f83e 	bl	800e0c8 <_free_r>
 800e04c:	4625      	mov	r5, r4
 800e04e:	4628      	mov	r0, r5
 800e050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e054:	f000 f884 	bl	800e160 <_malloc_usable_size_r>
 800e058:	4284      	cmp	r4, r0
 800e05a:	4607      	mov	r7, r0
 800e05c:	d802      	bhi.n	800e064 <_realloc_r+0x34>
 800e05e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e062:	d812      	bhi.n	800e08a <_realloc_r+0x5a>
 800e064:	4621      	mov	r1, r4
 800e066:	4640      	mov	r0, r8
 800e068:	f7ff ff6e 	bl	800df48 <_malloc_r>
 800e06c:	4605      	mov	r5, r0
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0ed      	beq.n	800e04e <_realloc_r+0x1e>
 800e072:	42bc      	cmp	r4, r7
 800e074:	4622      	mov	r2, r4
 800e076:	4631      	mov	r1, r6
 800e078:	bf28      	it	cs
 800e07a:	463a      	movcs	r2, r7
 800e07c:	f7ff fee2 	bl	800de44 <memcpy>
 800e080:	4631      	mov	r1, r6
 800e082:	4640      	mov	r0, r8
 800e084:	f000 f820 	bl	800e0c8 <_free_r>
 800e088:	e7e1      	b.n	800e04e <_realloc_r+0x1e>
 800e08a:	4635      	mov	r5, r6
 800e08c:	e7df      	b.n	800e04e <_realloc_r+0x1e>
	...

0800e090 <_sbrk_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d06      	ldr	r5, [pc, #24]	; (800e0ac <_sbrk_r+0x1c>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	f7f6 fd8e 	bl	8004bbc <_sbrk>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d102      	bne.n	800e0aa <_sbrk_r+0x1a>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	b103      	cbz	r3, 800e0aa <_sbrk_r+0x1a>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	24010b1c 	.word	0x24010b1c

0800e0b0 <__malloc_lock>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	; (800e0b8 <__malloc_lock+0x8>)
 800e0b2:	f000 b85d 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	24010b20 	.word	0x24010b20

0800e0bc <__malloc_unlock>:
 800e0bc:	4801      	ldr	r0, [pc, #4]	; (800e0c4 <__malloc_unlock+0x8>)
 800e0be:	f000 b858 	b.w	800e172 <__retarget_lock_release_recursive>
 800e0c2:	bf00      	nop
 800e0c4:	24010b20 	.word	0x24010b20

0800e0c8 <_free_r>:
 800e0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ca:	2900      	cmp	r1, #0
 800e0cc:	d044      	beq.n	800e158 <_free_r+0x90>
 800e0ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d2:	9001      	str	r0, [sp, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f1a1 0404 	sub.w	r4, r1, #4
 800e0da:	bfb8      	it	lt
 800e0dc:	18e4      	addlt	r4, r4, r3
 800e0de:	f7ff ffe7 	bl	800e0b0 <__malloc_lock>
 800e0e2:	4a1e      	ldr	r2, [pc, #120]	; (800e15c <_free_r+0x94>)
 800e0e4:	9801      	ldr	r0, [sp, #4]
 800e0e6:	6813      	ldr	r3, [r2, #0]
 800e0e8:	b933      	cbnz	r3, 800e0f8 <_free_r+0x30>
 800e0ea:	6063      	str	r3, [r4, #4]
 800e0ec:	6014      	str	r4, [r2, #0]
 800e0ee:	b003      	add	sp, #12
 800e0f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0f4:	f7ff bfe2 	b.w	800e0bc <__malloc_unlock>
 800e0f8:	42a3      	cmp	r3, r4
 800e0fa:	d908      	bls.n	800e10e <_free_r+0x46>
 800e0fc:	6825      	ldr	r5, [r4, #0]
 800e0fe:	1961      	adds	r1, r4, r5
 800e100:	428b      	cmp	r3, r1
 800e102:	bf01      	itttt	eq
 800e104:	6819      	ldreq	r1, [r3, #0]
 800e106:	685b      	ldreq	r3, [r3, #4]
 800e108:	1949      	addeq	r1, r1, r5
 800e10a:	6021      	streq	r1, [r4, #0]
 800e10c:	e7ed      	b.n	800e0ea <_free_r+0x22>
 800e10e:	461a      	mov	r2, r3
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	b10b      	cbz	r3, 800e118 <_free_r+0x50>
 800e114:	42a3      	cmp	r3, r4
 800e116:	d9fa      	bls.n	800e10e <_free_r+0x46>
 800e118:	6811      	ldr	r1, [r2, #0]
 800e11a:	1855      	adds	r5, r2, r1
 800e11c:	42a5      	cmp	r5, r4
 800e11e:	d10b      	bne.n	800e138 <_free_r+0x70>
 800e120:	6824      	ldr	r4, [r4, #0]
 800e122:	4421      	add	r1, r4
 800e124:	1854      	adds	r4, r2, r1
 800e126:	42a3      	cmp	r3, r4
 800e128:	6011      	str	r1, [r2, #0]
 800e12a:	d1e0      	bne.n	800e0ee <_free_r+0x26>
 800e12c:	681c      	ldr	r4, [r3, #0]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	6053      	str	r3, [r2, #4]
 800e132:	4421      	add	r1, r4
 800e134:	6011      	str	r1, [r2, #0]
 800e136:	e7da      	b.n	800e0ee <_free_r+0x26>
 800e138:	d902      	bls.n	800e140 <_free_r+0x78>
 800e13a:	230c      	movs	r3, #12
 800e13c:	6003      	str	r3, [r0, #0]
 800e13e:	e7d6      	b.n	800e0ee <_free_r+0x26>
 800e140:	6825      	ldr	r5, [r4, #0]
 800e142:	1961      	adds	r1, r4, r5
 800e144:	428b      	cmp	r3, r1
 800e146:	bf04      	itt	eq
 800e148:	6819      	ldreq	r1, [r3, #0]
 800e14a:	685b      	ldreq	r3, [r3, #4]
 800e14c:	6063      	str	r3, [r4, #4]
 800e14e:	bf04      	itt	eq
 800e150:	1949      	addeq	r1, r1, r5
 800e152:	6021      	streq	r1, [r4, #0]
 800e154:	6054      	str	r4, [r2, #4]
 800e156:	e7ca      	b.n	800e0ee <_free_r+0x26>
 800e158:	b003      	add	sp, #12
 800e15a:	bd30      	pop	{r4, r5, pc}
 800e15c:	24010b14 	.word	0x24010b14

0800e160 <_malloc_usable_size_r>:
 800e160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e164:	1f18      	subs	r0, r3, #4
 800e166:	2b00      	cmp	r3, #0
 800e168:	bfbc      	itt	lt
 800e16a:	580b      	ldrlt	r3, [r1, r0]
 800e16c:	18c0      	addlt	r0, r0, r3
 800e16e:	4770      	bx	lr

0800e170 <__retarget_lock_acquire_recursive>:
 800e170:	4770      	bx	lr

0800e172 <__retarget_lock_release_recursive>:
 800e172:	4770      	bx	lr

0800e174 <_init>:
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e176:	bf00      	nop
 800e178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17a:	bc08      	pop	{r3}
 800e17c:	469e      	mov	lr, r3
 800e17e:	4770      	bx	lr

0800e180 <_fini>:
 800e180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e182:	bf00      	nop
 800e184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e186:	bc08      	pop	{r3}
 800e188:	469e      	mov	lr, r3
 800e18a:	4770      	bx	lr
