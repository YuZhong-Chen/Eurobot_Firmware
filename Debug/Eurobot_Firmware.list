
Eurobot_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de54  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800e128  0800e128  0001e128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e43c  0800e43c  0001e43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800e444  0800e444  0001e444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e450  0800e450  0001e450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010aac  24000078  0800e4cc  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24010b24  0800e4cc  00020b24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a106  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043cd  00000000  00000000  0004a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001570  00000000  00000000  0004e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  0004faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c7c  00000000  00000000  00050f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d74d  00000000  00000000  00086bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015674e  00000000  00000000  000a42f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001faa47  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f30  00000000  00000000  001faa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e10c 	.word	0x0800e10c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800e10c 	.word	0x0800e10c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_ZN8DC_Motor4InitEv>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

namespace DC_Motor {

void Init() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// Init interrupt for reading encoder's CNT
	HAL_TIM_Base_Start_IT(&htim13);
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <_ZN8DC_Motor4InitEv+0x50>)
 8000682:	f009 ffc5 	bl	800a610 <HAL_TIM_Base_Start_IT>

	// Init Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Motor[0]
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <_ZN8DC_Motor4InitEv+0x54>)
 800068a:	f00a fa61 	bl	800ab50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Motor[1]
 800068e:	213c      	movs	r1, #60	; 0x3c
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <_ZN8DC_Motor4InitEv+0x58>)
 8000692:	f00a fa5d 	bl	800ab50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Motor[2]
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <_ZN8DC_Motor4InitEv+0x5c>)
 800069a:	f00a fa59 	bl	800ab50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Motor[3]
 800069e:	213c      	movs	r1, #60	; 0x3c
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <_ZN8DC_Motor4InitEv+0x60>)
 80006a2:	f00a fa55 	bl	800ab50 <HAL_TIM_Encoder_Start>

	// Init Motor PWM
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Motor[0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006aa:	f00a f88f 	bl	800a7cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // Motor[1]
 80006ae:	2100      	movs	r1, #0
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006b2:	f00a f88b 	bl	800a7cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // Motor[2]
 80006b6:	2100      	movs	r1, #0
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006ba:	f00a f887 	bl	800a7cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Motor[3]
 80006be:	2104      	movs	r1, #4
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006c2:	f00a f883 	bl	800a7cc <HAL_TIM_PWM_Start>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	240108f4 	.word	0x240108f4
 80006d0:	240106e0 	.word	0x240106e0
 80006d4:	240107c4 	.word	0x240107c4
 80006d8:	2401072c 	.word	0x2401072c
 80006dc:	24010778 	.word	0x24010778
 80006e0:	240108a8 	.word	0x240108a8
 80006e4:	24010940 	.word	0x24010940

080006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>:

void Motor::Init(short num, TIM_HandleTypeDef *TIM, double P, double I, double D) {
 80006e8:	b480      	push	{r7}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6278      	str	r0, [r7, #36]	; 0x24
 80006f0:	460b      	mov	r3, r1
 80006f2:	61fa      	str	r2, [r7, #28]
 80006f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80006f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80006fc:	ed87 2b00 	vstr	d2, [r7]
 8000700:	847b      	strh	r3, [r7, #34]	; 0x22
	this->num = num;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000706:	821a      	strh	r2, [r3, #16]
	this->TIM = TIM;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	615a      	str	r2, [r3, #20]
	this->P = P;
 800070e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000714:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->I = I;
 8000718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800071a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800071e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	this->D = D;
 8000722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000728:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800072c:	bf00      	nop
 800072e:	372c      	adds	r7, #44	; 0x2c
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>:

void Motor::UpdatePID() {
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	double p = 0, d = 0;
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Record Prev error
	this->error_before = this->error;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// Count current error
	this->error = this->Vgoal - this->Vnow;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	ed93 7b08 	vldr	d7, [r3, #32]
 8000770:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58

	// Count P
	p = this->P * this->error;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000786:	ee26 7b07 	vmul.f64	d7, d6, d7
 800078a:	ed87 7b04 	vstr	d7, [r7, #16]

	// Count I
	this->i += this->I * this->error * COUNT_TIME;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007a4:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80007f8 <_ZN8DC_Motor5Motor9UpdatePIDEv+0xc0>
 80007a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
//	else if (this->i < 0 - this->I_lim)
//		this->i = 0 - this->I_lim;

	// Count D
//	d = this->D * (this->error - this->error_before) / COUNT_TIME;
	d = 0;
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	f04f 0300 	mov.w	r3, #0
 80007be:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Output = P + I + D
	this->u = (double) p + this->i + d;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80007c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80007cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80007d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80007d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	ed83 7b02 	vstr	d7, [r3, #8]
//	else if (this->u > 0.6) {
//		this->u = 0.6;
//	}

	// Record Prev output
	this->prev_u = this->u;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return;
 80007ea:	bf00      	nop
}
 80007ec:	371c      	adds	r7, #28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80007fc:	3f50624d 	.word	0x3f50624d

08000800 <_ZN8DC_Motor5Motor10UpdateVnowEv>:

void Motor::UpdateVnow() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	// First, get CNT for this loop
	CNT = __HAL_TIM_GET_COUNTER(TIM);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000810:	b21a      	sxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	839a      	strh	r2, [r3, #28]

	Record_CNT();
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f831 	bl	800087e <_ZN8DC_Motor5Motor10Record_CNTEv>
	Vnow = CNT * CONST_FOR_MOTOR[num];  // Unit : m / s
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <_ZN8DC_Motor5Motor10UpdateVnowEv+0x58>)
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4413      	add	r3, r2
 8000836:	ed93 7b00 	vldr	d7, [r3]
 800083a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	ed83 7b08 	vstr	d7, [r3, #32]
//	if (isMove && num == 0 && DC_index < 2000) {
//		DC_motor_Vnow[DC_index++] = Vnow;
//	}

	// Finally, reset the counter CNT
	__HAL_TIM_SET_COUNTER(TIM, 0);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800e2c0 	.word	0x0800e2c0

0800085c <_ZN8DC_Motor5Motor8SetVgoalEd>:

void Motor::SetVgoal(double Vgoal) {
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	ed87 0b00 	vstr	d0, [r7]
	this->Vgoal = Vgoal;
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800086e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <_ZN8DC_Motor5Motor10Record_CNTEv>:

void Motor::Record_CNT() {
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	continue_CNT += CNT;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8000890:	441a      	add	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	619a      	str	r2, [r3, #24]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <_ZN8DC_Motor5Motor9Reset_CNTEv>:

void Motor::Reset_CNT() {
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	continue_CNT = 0;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_ZN8DC_Motor5Motor7MoveDisEv>:

double Motor::MoveDis() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	double dis = continue_CNT * CONST_FOR_MOTOR[num];
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <_ZN8DC_Motor5Motor7MoveDisEv+0x44>)
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	4413      	add	r3, r2
 80008dc:	ed93 7b00 	vldr	d7, [r3]
 80008e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008e4:	ed87 7b02 	vstr	d7, [r7, #8]

	Reset_CNT();
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffda 	bl	80008a2 <_ZN8DC_Motor5Motor9Reset_CNTEv>

	return dis;
 80008ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80008f6:	eeb0 0b47 	vmov.f64	d0, d7
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	0800e2c0 	.word	0x0800e2c0

08000904 <_ZN8DC_Motor5Motor7GetVnowEv>:

double Motor::GetVnow() {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return Vnow;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000912:	ec43 2b17 	vmov	d7, r2, r3
}
 8000916:	eeb0 0b47 	vmov.f64	d0, d7
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_ZN8DC_Motor5MotorC1Ev>:

namespace DC_Motor {

class Motor {
public:
	Motor() {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	839a      	strh	r2, [r3, #28]
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 0200 	mov.w	r2, #0
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_ZN8DC_Motor5MotorC1Ev+0x98>)
 8000970:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80009a4:	461a      	mov	r2, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c2 3ef0 	str.w	r3, [r2, #3824]	; 0xef0
	}
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40440000 	.word	0x40440000

080009c0 <_ZN8CAR_INFOC1Ev>:

typedef struct {
	double Vx = 0.0;
	double Vy = 0.0;
	double Omega = 0.0;
} CAR_INFO;
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	f04f 0300 	mov.w	r3, #0
 80009d2:	e9c1 2300 	strd	r2, r3, [r1]
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_ZN4OmniC1Ev>:
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim15;

Omni omni;

Omni::Omni() {
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2403      	movs	r4, #3
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	db08      	blt.n	8000a24 <_ZN4OmniC1Ev+0x24>
 8000a12:	4628      	mov	r0, r5
 8000a14:	f7ff ff86 	bl	8000924 <_ZN8DC_Motor5MotorC1Ev>
 8000a18:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000a1c:	442b      	add	r3, r5
 8000a1e:	461d      	mov	r5, r3
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e7f4      	b.n	8000a0e <_ZN4OmniC1Ev+0xe>
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffc7 	bl	80009c0 <_ZN8CAR_INFOC1Ev>
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	f64f 33f8 	movw	r3, #64504	; 0xfbf8
 8000a38:	4413      	add	r3, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffc0 	bl	80009c0 <_ZN8CAR_INFOC1Ev>
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000a46:	4413      	add	r3, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ffb9 	bl	80009c0 <_ZN8CAR_INFOC1Ev>
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000a54:	4413      	add	r3, r2
 8000a56:	4619      	mov	r1, r3
 8000a58:	a305      	add	r3, pc, #20	; (adr r3, 8000a70 <_ZN4OmniC1Ev+0x70>)
 8000a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5e:	e941 2302 	strd	r2, r3, [r1, #-8]
}
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	f3af 8000 	nop.w
 8000a70:	3d70a3d7 	.word	0x3d70a3d7
 8000a74:	3fc3d70a 	.word	0x3fc3d70a

08000a78 <_ZN4Omni4InitEv>:

void Omni::Init() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	this->motors[0].Init(0, &htim2, 3.7, 471.0, 0.);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000a86:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000a8a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <_ZN4Omni4InitEv+0xa0>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe28 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[1].Init(1, &htim5, 3.7, 471.0, 0.);
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000a9e:	4413      	add	r3, r2
 8000aa0:	ed9f 2b17 	vldr	d2, [pc, #92]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000aa4:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000aa8:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <_ZN4Omni4InitEv+0xa4>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe19 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[2].Init(2, &htim3, 3.7, 471.0, 0.);
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000abc:	4413      	add	r3, r2
 8000abe:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000ac2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000ac6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <_ZN4Omni4InitEv+0xa8>)
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe0a 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[3].Init(3, &htim4, 3.7, 471.0, 0.);
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000ada:	4413      	add	r3, r2
 8000adc:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000ae0:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000ae4:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <_ZN4Omni4InitEv+0xac>)
 8000aea:	2103      	movs	r1, #3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdfb 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>

	DC_Motor::Init();
 8000af2:	f7ff fdc3 	bl	800067c <_ZN8DC_Motor4InitEv>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
	...
 8000b0c:	407d7000 	.word	0x407d7000
 8000b10:	9999999a 	.word	0x9999999a
 8000b14:	400d9999 	.word	0x400d9999
 8000b18:	240106e0 	.word	0x240106e0
 8000b1c:	240107c4 	.word	0x240107c4
 8000b20:	2401072c 	.word	0x2401072c
 8000b24:	24010778 	.word	0x24010778

08000b28 <_ZN4Omni16Get_Car_locationEv>:

void Omni::Get_Car_location() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	double m[4];
	for (int i = 0; i < 4; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dc16      	bgt.n	8000b68 <_ZN4Omni16Get_Car_locationEv+0x40>
		m[i] = this->motors[i].MoveDis();
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff feb7 	bl	80008bc <_ZN8DC_Motor5Motor7MoveDisEv>
 8000b4e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	3330      	adds	r3, #48	; 0x30
 8000b58:	443b      	add	r3, r7
 8000b5a:	3b28      	subs	r3, #40	; 0x28
 8000b5c:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	3301      	adds	r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b66:	e7e5      	b.n	8000b34 <_ZN4Omni16Get_Car_locationEv+0xc>
	}
//	NowCarLocation.Vx += -m[1] + m[3];
//	NowCarLocation.Vy += m[0] - m[2];
//	NowCarLocation.Omega += (m[0] + m[1] + m[2] + m[3]) / 4. / CarRadius;
}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZN4Omni16UpdateNowCarInfoEv>:

void Omni::UpdateNowCarInfo() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	ed2d 8b02 	vpush	{d8}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	// Get each motors' Vnow
	// Unit : m/s , rad/s
	this->UpdateMotorVnow();
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f8b9 	bl	8000cf4 <_ZN4Omni15UpdateMotorVnowEv>

	NowCarInfo.Vx = (motors[3].GetVnow() - motors[1].GetVnow()) / 2.;
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000b88:	4413      	add	r3, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff feba 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000b90:	eeb0 8b40 	vmov.f64	d8, d0
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff feb1 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba6:	ee38 6b47 	vsub.f64	d6, d8, d7
 8000baa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000bae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8000bb8:	4413      	add	r3, r2
 8000bba:	ed83 7b00 	vstr	d7, [r3]
	NowCarInfo.Vy = (motors[0].GetVnow() - motors[2].GetVnow()) / 2.;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe9f 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bc6:	eeb0 8b40 	vmov.f64	d8, d0
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe96 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bd8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bdc:	ee38 6b47 	vsub.f64	d6, d8, d7
 8000be0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000be4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f64f 33f0 	movw	r3, #64496	; 0xfbf0
 8000bee:	4413      	add	r3, r2
 8000bf0:	ed03 7b02 	vstr	d7, [r3, #-8]
	NowCarInfo.Omega = (motors[0].GetVnow() + motors[1].GetVnow() + motors[2].GetVnow() + motors[3].GetVnow()) * CarRadius;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fe84 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bfc:	eeb0 8b40 	vmov.f64	d8, d0
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000c06:	4413      	add	r3, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fe7b 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe70 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000c32:	4413      	add	r3, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe65 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c3e:	ee38 6b07 	vadd.f64	d6, d8, d7
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000c48:	4413      	add	r3, r2
 8000c4a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000c4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	f64f 33f0 	movw	r3, #64496	; 0xfbf0
 8000c58:	4413      	add	r3, r2
 8000c5a:	ed83 7b00 	vstr	d7, [r3]
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	ecbd 8b02 	vpop	{d8}
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZN4Omni14SetGoalCarInfoEddd>:

// Set all motors' velocity base on Car Vgoal.
void Omni::SetGoalCarInfo(double Vx, double Vy, double Omega) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b088      	sub	sp, #32
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	61f8      	str	r0, [r7, #28]
 8000c72:	ed87 0b04 	vstr	d0, [r7, #16]
 8000c76:	ed87 1b02 	vstr	d1, [r7, #8]
 8000c7a:	ed87 2b00 	vstr	d2, [r7]
	this->GoalCarInfo.Vx = Vx;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000c84:	4619      	mov	r1, r3
 8000c86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c8a:	e941 2302 	strd	r2, r3, [r1, #-8]
	this->GoalCarInfo.Vy = Vy;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000c94:	4619      	mov	r1, r3
 8000c96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c9a:	e9c1 2300 	strd	r2, r3, [r1]
	this->GoalCarInfo.Omega = Omega;
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cac:	e941 2302 	strd	r2, r3, [r1, #-8]

	SetMotorVgoal();
 8000cb0:	69f8      	ldr	r0, [r7, #28]
 8000cb2:	f000 f8f5 	bl	8000ea0 <_ZN4Omni13SetMotorVgoalEv>
}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_ZN4Omni10Update_PIDEv>:

void Omni::Update_PID() {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	dc0d      	bgt.n	8000cec <_ZN4Omni10Update_PIDEv+0x2e>
		this->motors[i].UpdatePID();
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd2a 	bl	8000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>
	for (int i = 0; i < 4; i++) {
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e7ee      	b.n	8000cca <_ZN4Omni10Update_PIDEv+0xc>
	}
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_ZN4Omni15UpdateMotorVnowEv>:

void Omni::UpdateMotorVnow() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	dc0d      	bgt.n	8000d22 <_ZN4Omni15UpdateMotorVnowEv+0x2e>
		this->motors[i].UpdateVnow();
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd73 	bl	8000800 <_ZN8DC_Motor5Motor10UpdateVnowEv>
	for (int i = 0; i < 4; i++) {
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	e7ee      	b.n	8000d00 <_ZN4Omni15UpdateMotorVnowEv+0xc>
	}
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	0000      	movs	r0, r0
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <_ZN4Omni4MoveEv>:

// TODO : Check for the DIR
void Omni::Move() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	// DIR
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (motors[0].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d46:	bfcc      	ite	gt
 8000d48:	2301      	movgt	r3, #1
 8000d4a:	2300      	movle	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f083 0301 	eor.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	461a      	mov	r2, r3
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	484b      	ldr	r0, [pc, #300]	; (8000e88 <_ZN4Omni4MoveEv+0x158>)
 8000d5c:	f007 f956 	bl	800800c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (motors[1].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8000d66:	ed93 7b00 	vldr	d7, [r3]
 8000d6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	bfcc      	ite	gt
 8000d74:	2301      	movgt	r3, #1
 8000d76:	2300      	movle	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f083 0301 	eor.w	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d86:	4841      	ldr	r0, [pc, #260]	; (8000e8c <_ZN4Omni4MoveEv+0x15c>)
 8000d88:	f007 f940 	bl	800800c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, (motors[2].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f503 43fc 	add.w	r3, r3, #32256	; 0x7e00
 8000d92:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000d96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	bfcc      	ite	gt
 8000da0:	2301      	movgt	r3, #1
 8000da2:	2300      	movle	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f083 0301 	eor.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	2108      	movs	r1, #8
 8000db0:	4837      	ldr	r0, [pc, #220]	; (8000e90 <_ZN4Omni4MoveEv+0x160>)
 8000db2:	f007 f92b 	bl	800800c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (motors[3].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	f64b 43f0 	movw	r3, #48368	; 0xbcf0
 8000dbc:	4413      	add	r3, r2
 8000dbe:	ed93 7b00 	vldr	d7, [r3]
 8000dc2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	bfcc      	ite	gt
 8000dcc:	2301      	movgt	r3, #1
 8000dce:	2300      	movle	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	482d      	ldr	r0, [pc, #180]	; (8000e94 <_ZN4Omni4MoveEv+0x164>)
 8000de0:	f007 f914 	bl	800800c <HAL_GPIO_WritePin>

	// PWM
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, int(fabs(motors[0].u) * MOTOR_PWM_PULSE));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	ed93 7b02 	vldr	d7, [r3, #8]
 8000dea:	eeb0 7bc7 	vabs.f64	d7, d7
 8000dee:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000e80 <_ZN4Omni4MoveEv+0x150>
 8000df2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000df6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <_ZN4Omni4MoveEv+0x168>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, int(fabs(motors[1].u) * MOTOR_PWM_PULSE));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8000e0a:	ed93 7b00 	vldr	d7, [r3]
 8000e0e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e12:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000e80 <_ZN4Omni4MoveEv+0x150>
 8000e16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <_ZN4Omni4MoveEv+0x168>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	ee17 2a90 	vmov	r2, s15
 8000e26:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, int(fabs(motors[2].u) * MOTOR_PWM_PULSE));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f503 43fc 	add.w	r3, r3, #32256	; 0x7e00
 8000e2e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000e32:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e36:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000e80 <_ZN4Omni4MoveEv+0x150>
 8000e3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e3e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <_ZN4Omni4MoveEv+0x16c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	ee17 2a90 	vmov	r2, s15
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, int(fabs(motors[3].u) * MOTOR_PWM_PULSE));
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	f64b 43f0 	movw	r3, #48368	; 0xbcf0
 8000e52:	4413      	add	r3, r2
 8000e54:	ed93 7b00 	vldr	d7, [r3]
 8000e58:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e5c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000e80 <_ZN4Omni4MoveEv+0x150>
 8000e60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <_ZN4Omni4MoveEv+0x16c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	ee17 2a90 	vmov	r2, s15
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	f3af 8000 	nop.w
 8000e80:	00000000 	.word	0x00000000
 8000e84:	40b90000 	.word	0x40b90000
 8000e88:	58020c00 	.word	0x58020c00
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58021000 	.word	0x58021000
 8000e94:	58020800 	.word	0x58020800
 8000e98:	240108a8 	.word	0x240108a8
 8000e9c:	24010940 	.word	0x24010940

08000ea0 <_ZN4Omni13SetMotorVgoalEv>:

void Omni::SetMotorVgoal() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	// Unit : m/s
	this->motors[0].SetVgoal(GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000eb0:	ed93 6b00 	vldr	d6, [r3]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000eba:	4413      	add	r3, r2
 8000ebc:	ed13 5b02 	vldr	d5, [r3, #-8]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000ec6:	4413      	add	r3, r2
 8000ec8:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000ecc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ed0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ed8:	4608      	mov	r0, r1
 8000eda:	f7ff fcbf 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[1].SetVgoal(-GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000ee4:	4413      	add	r3, r2
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000eec:	440a      	add	r2, r1
 8000eee:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000ef8:	440a      	add	r2, r1
 8000efa:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000efe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000f08:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f10:	eeb0 0b47 	vmov.f64	d0, d7
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fca1 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[2].SetVgoal(-GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000f20:	4413      	add	r3, r2
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000f28:	440a      	add	r2, r1
 8000f2a:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000f34:	440a      	add	r2, r1
 8000f36:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f3a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000f44:	ed92 7b00 	vldr	d7, [r2]
 8000f48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fc83 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[3].SetVgoal(GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000f5c:	4413      	add	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000f64:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000f6e:	440a      	add	r2, r1
 8000f70:	ed12 5b02 	vldr	d5, [r2, #-8]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000f7a:	440a      	add	r2, r1
 8000f7c:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f88:	eeb0 0b47 	vmov.f64	d0, d7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fc65 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZN4Omni13GetNowCarInfoEv>:

CAR_INFO Omni::GetNowCarInfo() {
 8000f9a:	b4b0      	push	{r4, r5, r7}
 8000f9c:	b08f      	sub	sp, #60	; 0x3c
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	61f8      	str	r0, [r7, #28]
	return NowCarInfo;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000fa8:	f107 0420 	add.w	r4, r7, #32
 8000fac:	f503 653e 	add.w	r5, r3, #3040	; 0xbe0
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb8:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fbc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000fc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fc8:	ec45 4b15 	vmov	d5, r4, r5
 8000fcc:	ec41 0b16 	vmov	d6, r0, r1
 8000fd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fd4:	eeb0 0b45 	vmov.f64	d0, d5
 8000fd8:	eeb0 1b46 	vmov.f64	d1, d6
 8000fdc:	eeb0 2b47 	vmov.f64	d2, d7
 8000fe0:	373c      	adds	r7, #60	; 0x3c
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bcb0      	pop	{r4, r5, r7}
 8000fe6:	4770      	bx	lr

08000fe8 <_Z41__static_initialization_and_destruction_0ii>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <_Z41__static_initialization_and_destruction_0ii+0x20>
Omni omni;
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001004:	f7ff fcfc 	bl	8000a00 <_ZN4OmniC1Ev>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	24000098 	.word	0x24000098

08001014 <_GLOBAL__sub_I_omni>:
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
 8001018:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff ffe3 	bl	8000fe8 <_Z41__static_initialization_and_destruction_0ii>
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <_ZN3ros3MsgC1Ev+0x1c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	0800e3ec 	.word	0x0800e3ec

08001044 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ffe8 	bl	8001024 <_ZN3ros3MsgC1Ev>
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	0800e3d4 	.word	0x0800e3d4

08001094 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001094:	b480      	push	{r7}
 8001096:	b08b      	sub	sp, #44	; 0x2c
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80010ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	4401      	add	r1, r0
 80010b6:	b2d3      	uxtb	r3, r2
 80010b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80010ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	0a02      	lsrs	r2, r0, #8
 80010c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010cc:	0a0b      	lsrs	r3, r1, #8
 80010ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010d0:	3101      	adds	r1, #1
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	4401      	add	r1, r0
 80010d6:	b2d3      	uxtb	r3, r2
 80010d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80010da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	0c02      	lsrs	r2, r0, #16
 80010e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f0:	3102      	adds	r1, #2
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	4401      	add	r1, r0
 80010f6:	b2d3      	uxtb	r3, r2
 80010f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80010fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	0e02      	lsrs	r2, r0, #24
 8001108:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800110c:	0e0b      	lsrs	r3, r1, #24
 800110e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001110:	3103      	adds	r1, #3
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	4401      	add	r1, r0
 8001116:	b2d3      	uxtb	r3, r2
 8001118:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800111a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	000a      	movs	r2, r1
 8001128:	2300      	movs	r3, #0
 800112a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800112c:	3104      	adds	r1, #4
 800112e:	6838      	ldr	r0, [r7, #0]
 8001130:	4401      	add	r1, r0
 8001132:	b2d3      	uxtb	r3, r2
 8001134:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	0a0a      	lsrs	r2, r1, #8
 8001144:	2300      	movs	r3, #0
 8001146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001148:	3105      	adds	r1, #5
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	4401      	add	r1, r0
 800114e:	b2d3      	uxtb	r3, r2
 8001150:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	0c0a      	lsrs	r2, r1, #16
 8001160:	2300      	movs	r3, #0
 8001162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001164:	3106      	adds	r1, #6
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	4401      	add	r1, r0
 800116a:	b2d3      	uxtb	r3, r2
 800116c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800116e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	0e0a      	lsrs	r2, r1, #24
 800117c:	2300      	movs	r3, #0
 800117e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001180:	3107      	adds	r1, #7
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	4401      	add	r1, r0
 8001186:	b2d3      	uxtb	r3, r2
 8001188:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	3308      	adds	r3, #8
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001196:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800119a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800119e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	4401      	add	r1, r0
 80011a4:	b2d3      	uxtb	r3, r2
 80011a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80011a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	0a02      	lsrs	r2, r0, #8
 80011b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011ba:	0a0b      	lsrs	r3, r1, #8
 80011bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011be:	3101      	adds	r1, #1
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	4401      	add	r1, r0
 80011c4:	b2d3      	uxtb	r3, r2
 80011c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80011c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	0c02      	lsrs	r2, r0, #16
 80011d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011da:	0c0b      	lsrs	r3, r1, #16
 80011dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011de:	3102      	adds	r1, #2
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	4401      	add	r1, r0
 80011e4:	b2d3      	uxtb	r3, r2
 80011e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80011e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	0e02      	lsrs	r2, r0, #24
 80011f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011fa:	0e0b      	lsrs	r3, r1, #24
 80011fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fe:	3103      	adds	r1, #3
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	4401      	add	r1, r0
 8001204:	b2d3      	uxtb	r3, r2
 8001206:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	000a      	movs	r2, r1
 8001216:	2300      	movs	r3, #0
 8001218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800121a:	3104      	adds	r1, #4
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	4401      	add	r1, r0
 8001220:	b2d3      	uxtb	r3, r2
 8001222:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001224:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	0a0a      	lsrs	r2, r1, #8
 8001232:	2300      	movs	r3, #0
 8001234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001236:	3105      	adds	r1, #5
 8001238:	6838      	ldr	r0, [r7, #0]
 800123a:	4401      	add	r1, r0
 800123c:	b2d3      	uxtb	r3, r2
 800123e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001240:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	0c0a      	lsrs	r2, r1, #16
 800124e:	2300      	movs	r3, #0
 8001250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001252:	3106      	adds	r1, #6
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	4401      	add	r1, r0
 8001258:	b2d3      	uxtb	r3, r2
 800125a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800125c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	0e0a      	lsrs	r2, r1, #24
 800126a:	2300      	movs	r3, #0
 800126c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800126e:	3107      	adds	r1, #7
 8001270:	6838      	ldr	r0, [r7, #0]
 8001272:	4401      	add	r1, r0
 8001274:	b2d3      	uxtb	r3, r2
 8001276:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	3308      	adds	r3, #8
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001284:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800128c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	4401      	add	r1, r0
 8001292:	b2d3      	uxtb	r3, r2
 8001294:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	0a02      	lsrs	r2, r0, #8
 80012a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012a8:	0a0b      	lsrs	r3, r1, #8
 80012aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ac:	3101      	adds	r1, #1
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	4401      	add	r1, r0
 80012b2:	b2d3      	uxtb	r3, r2
 80012b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80012b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	0c02      	lsrs	r2, r0, #16
 80012c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012c8:	0c0b      	lsrs	r3, r1, #16
 80012ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012cc:	3102      	adds	r1, #2
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	4401      	add	r1, r0
 80012d2:	b2d3      	uxtb	r3, r2
 80012d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80012d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	0e02      	lsrs	r2, r0, #24
 80012e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012e8:	0e0b      	lsrs	r3, r1, #24
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	3103      	adds	r1, #3
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	4401      	add	r1, r0
 80012f2:	b2d3      	uxtb	r3, r2
 80012f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80012f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	000a      	movs	r2, r1
 8001304:	2300      	movs	r3, #0
 8001306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001308:	3104      	adds	r1, #4
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	4401      	add	r1, r0
 800130e:	b2d3      	uxtb	r3, r2
 8001310:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001312:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	0a0a      	lsrs	r2, r1, #8
 8001320:	2300      	movs	r3, #0
 8001322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001324:	3105      	adds	r1, #5
 8001326:	6838      	ldr	r0, [r7, #0]
 8001328:	4401      	add	r1, r0
 800132a:	b2d3      	uxtb	r3, r2
 800132c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800132e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	0c0a      	lsrs	r2, r1, #16
 800133c:	2300      	movs	r3, #0
 800133e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001340:	3106      	adds	r1, #6
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	4401      	add	r1, r0
 8001346:	b2d3      	uxtb	r3, r2
 8001348:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800134a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	0e0a      	lsrs	r2, r1, #24
 8001358:	2300      	movs	r3, #0
 800135a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800135c:	3107      	adds	r1, #7
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	4401      	add	r1, r0
 8001362:	b2d3      	uxtb	r3, r2
 8001364:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3308      	adds	r3, #8
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800136e:	4618      	mov	r0, r3
 8001370:	372c      	adds	r7, #44	; 0x2c
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800137a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800137e:	b0eb      	sub	sp, #428	; 0x1ac
 8001380:	af00      	add	r7, sp, #0
 8001382:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8001386:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800139c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80013a0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80013a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2200      	movs	r2, #0
 80013b0:	461c      	mov	r4, r3
 80013b2:	4615      	mov	r5, r2
 80013b4:	ea40 0804 	orr.w	r8, r0, r4
 80013b8:	ea41 0905 	orr.w	r9, r1, r5
 80013bc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80013c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2200      	movs	r2, #0
 80013d6:	469a      	mov	sl, r3
 80013d8:	4693      	mov	fp, r2
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80013e6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80013ea:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80013ee:	ea40 0402 	orr.w	r4, r0, r2
 80013f2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80013f6:	430b      	orrs	r3, r1
 80013f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013fc:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8001400:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001404:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001408:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800140c:	1c9a      	adds	r2, r3, #2
 800140e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2200      	movs	r2, #0
 800141a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800141e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800142e:	464c      	mov	r4, r9
 8001430:	0423      	lsls	r3, r4, #16
 8001432:	4644      	mov	r4, r8
 8001434:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001438:	4644      	mov	r4, r8
 800143a:	0422      	lsls	r2, r4, #16
 800143c:	ea40 0402 	orr.w	r4, r0, r2
 8001440:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8001444:	430b      	orrs	r3, r1
 8001446:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800144a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800144e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001452:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001456:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800145a:	1cda      	adds	r2, r3, #3
 800145c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2200      	movs	r2, #0
 8001468:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800146c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001470:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001474:	4623      	mov	r3, r4
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800147c:	4623      	mov	r3, r4
 800147e:	061b      	lsls	r3, r3, #24
 8001480:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001484:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8001488:	4623      	mov	r3, r4
 800148a:	4303      	orrs	r3, r0
 800148c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001490:	462b      	mov	r3, r5
 8001492:	430b      	orrs	r3, r1
 8001494:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001498:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800149c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80014a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014a8:	1d1a      	adds	r2, r3, #4
 80014aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80014ba:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80014ca:	0023      	movs	r3, r4
 80014cc:	2200      	movs	r2, #0
 80014ce:	ea40 0402 	orr.w	r4, r0, r2
 80014d2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80014d6:	430b      	orrs	r3, r1
 80014d8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80014dc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80014e0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80014e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014ec:	1d5a      	adds	r2, r3, #5
 80014ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80014fe:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800150e:	0223      	lsls	r3, r4, #8
 8001510:	2200      	movs	r2, #0
 8001512:	ea40 0402 	orr.w	r4, r0, r2
 8001516:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800151a:	430b      	orrs	r3, r1
 800151c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001520:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001524:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001528:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800152c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001530:	1d9a      	adds	r2, r3, #6
 8001532:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2200      	movs	r2, #0
 800153e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001542:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001552:	0423      	lsls	r3, r4, #16
 8001554:	2200      	movs	r2, #0
 8001556:	ea40 0402 	orr.w	r4, r0, r2
 800155a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800155e:	430b      	orrs	r3, r1
 8001560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001564:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001568:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800156c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001570:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001574:	1dda      	adds	r2, r3, #7
 8001576:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2200      	movs	r2, #0
 8001582:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001586:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8001596:	0623      	lsls	r3, r4, #24
 8001598:	2200      	movs	r2, #0
 800159a:	ea40 0402 	orr.w	r4, r0, r2
 800159e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80015a2:	430b      	orrs	r3, r1
 80015a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015a8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80015ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80015b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80015b4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80015bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015c0:	3308      	adds	r3, #8
 80015c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80015d6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80015da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015ea:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80015ee:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80015f2:	4623      	mov	r3, r4
 80015f4:	4303      	orrs	r3, r0
 80015f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015fa:	462b      	mov	r3, r5
 80015fc:	430b      	orrs	r3, r1
 80015fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001602:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8001606:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800160a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800160e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2200      	movs	r2, #0
 8001620:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001624:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001634:	464c      	mov	r4, r9
 8001636:	0223      	lsls	r3, r4, #8
 8001638:	4644      	mov	r4, r8
 800163a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800163e:	4644      	mov	r4, r8
 8001640:	0222      	lsls	r2, r4, #8
 8001642:	ea40 0402 	orr.w	r4, r0, r2
 8001646:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800164a:	430b      	orrs	r3, r1
 800164c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001650:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001654:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001658:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800165c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001660:	1c9a      	adds	r2, r3, #2
 8001662:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2200      	movs	r2, #0
 800166e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001672:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001682:	464c      	mov	r4, r9
 8001684:	0423      	lsls	r3, r4, #16
 8001686:	4644      	mov	r4, r8
 8001688:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800168c:	4644      	mov	r4, r8
 800168e:	0422      	lsls	r2, r4, #16
 8001690:	ea40 0402 	orr.w	r4, r0, r2
 8001694:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8001698:	430b      	orrs	r3, r1
 800169a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800169e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80016a2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016a6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80016aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016ae:	1cda      	adds	r2, r3, #3
 80016b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80016c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80016c4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80016c8:	4623      	mov	r3, r4
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016d0:	4623      	mov	r3, r4
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80016d8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016dc:	4623      	mov	r3, r4
 80016de:	4303      	orrs	r3, r0
 80016e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016e4:	462b      	mov	r3, r5
 80016e6:	430b      	orrs	r3, r1
 80016e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016ec:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80016f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80016f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80016f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016fc:	1d1a      	adds	r2, r3, #4
 80016fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2200      	movs	r2, #0
 800170a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800170e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800171e:	0023      	movs	r3, r4
 8001720:	2200      	movs	r2, #0
 8001722:	ea40 0402 	orr.w	r4, r0, r2
 8001726:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800172a:	430b      	orrs	r3, r1
 800172c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001730:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8001734:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001738:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800173c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001740:	1d5a      	adds	r2, r3, #5
 8001742:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2200      	movs	r2, #0
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001752:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8001762:	0223      	lsls	r3, r4, #8
 8001764:	2200      	movs	r2, #0
 8001766:	ea40 0402 	orr.w	r4, r0, r2
 800176a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800176e:	430b      	orrs	r3, r1
 8001770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001774:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001778:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800177c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001780:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001784:	1d9a      	adds	r2, r3, #6
 8001786:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2200      	movs	r2, #0
 8001792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001796:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80017a6:	0423      	lsls	r3, r4, #16
 80017a8:	2200      	movs	r2, #0
 80017aa:	ea40 0402 	orr.w	r4, r0, r2
 80017ae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80017b2:	430b      	orrs	r3, r1
 80017b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80017b8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80017bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80017c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017c8:	1dda      	adds	r2, r3, #7
 80017ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2200      	movs	r2, #0
 80017d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80017ea:	0623      	lsls	r3, r4, #24
 80017ec:	2200      	movs	r2, #0
 80017ee:	ea40 0402 	orr.w	r4, r0, r2
 80017f2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80017f6:	430b      	orrs	r3, r1
 80017f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80017fc:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001800:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8001804:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001808:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800180c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8001810:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001814:	3308      	adds	r3, #8
 8001816:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001826:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800182a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800182e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2200      	movs	r2, #0
 800183a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800183e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001842:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001846:	4623      	mov	r3, r4
 8001848:	4303      	orrs	r3, r0
 800184a:	67bb      	str	r3, [r7, #120]	; 0x78
 800184c:	462b      	mov	r3, r5
 800184e:	430b      	orrs	r3, r1
 8001850:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001852:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001856:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800185a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800185e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2200      	movs	r2, #0
 8001870:	673b      	str	r3, [r7, #112]	; 0x70
 8001872:	677a      	str	r2, [r7, #116]	; 0x74
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001880:	464c      	mov	r4, r9
 8001882:	0223      	lsls	r3, r4, #8
 8001884:	4644      	mov	r4, r8
 8001886:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800188a:	4644      	mov	r4, r8
 800188c:	0222      	lsls	r2, r4, #8
 800188e:	ea40 0402 	orr.w	r4, r0, r2
 8001892:	66bc      	str	r4, [r7, #104]	; 0x68
 8001894:	430b      	orrs	r3, r1
 8001896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001898:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800189c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018a0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80018a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018a8:	1c9a      	adds	r2, r3, #2
 80018aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018ae:	4413      	add	r3, r2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2200      	movs	r2, #0
 80018b6:	663b      	str	r3, [r7, #96]	; 0x60
 80018b8:	667a      	str	r2, [r7, #100]	; 0x64
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80018c6:	464c      	mov	r4, r9
 80018c8:	0423      	lsls	r3, r4, #16
 80018ca:	4644      	mov	r4, r8
 80018cc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80018d0:	4644      	mov	r4, r8
 80018d2:	0422      	lsls	r2, r4, #16
 80018d4:	ea40 0402 	orr.w	r4, r0, r2
 80018d8:	65bc      	str	r4, [r7, #88]	; 0x58
 80018da:	430b      	orrs	r3, r1
 80018dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018de:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80018e2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80018ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018ee:	1cda      	adds	r2, r3, #3
 80018f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	653b      	str	r3, [r7, #80]	; 0x50
 80018fe:	657a      	str	r2, [r7, #84]	; 0x54
 8001900:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001904:	4623      	mov	r3, r4
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190a:	4623      	mov	r3, r4
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001914:	4623      	mov	r3, r4
 8001916:	4303      	orrs	r3, r0
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
 800191a:	462b      	mov	r3, r5
 800191c:	430b      	orrs	r3, r1
 800191e:	647b      	str	r3, [r7, #68]	; 0x44
 8001920:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001924:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001928:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800192c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001930:	1d1a      	adds	r2, r3, #4
 8001932:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2200      	movs	r2, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001940:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800194c:	0023      	movs	r3, r4
 800194e:	2200      	movs	r2, #0
 8001950:	ea40 0402 	orr.w	r4, r0, r2
 8001954:	633c      	str	r4, [r7, #48]	; 0x30
 8001956:	430b      	orrs	r3, r1
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800195e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001962:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001966:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800196a:	1d5a      	adds	r2, r3, #5
 800196c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001970:	4413      	add	r3, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2200      	movs	r2, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
 800197a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001986:	0223      	lsls	r3, r4, #8
 8001988:	2200      	movs	r2, #0
 800198a:	ea40 0402 	orr.w	r4, r0, r2
 800198e:	623c      	str	r4, [r7, #32]
 8001990:	430b      	orrs	r3, r1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
 8001994:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001998:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800199c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019a4:	3306      	adds	r3, #6
 80019a6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	61fa      	str	r2, [r7, #28]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	69bc      	ldr	r4, [r7, #24]
 80019c0:	0423      	lsls	r3, r4, #16
 80019c2:	2200      	movs	r2, #0
 80019c4:	ea40 0402 	orr.w	r4, r0, r2
 80019c8:	613c      	str	r4, [r7, #16]
 80019ca:	430b      	orrs	r3, r1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80019d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019de:	3307      	adds	r3, #7
 80019e0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	60fa      	str	r2, [r7, #12]
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	68bc      	ldr	r4, [r7, #8]
 80019fa:	0623      	lsls	r3, r4, #24
 80019fc:	2200      	movs	r2, #0
 80019fe:	ea40 0402 	orr.w	r4, r0, r2
 8001a02:	603c      	str	r4, [r7, #0]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a0c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8001a10:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001a14:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001a18:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8001a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a20:	3308      	adds	r3, #8
 8001a22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8001a26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001a30:	46bd      	mov	sp, r7
 8001a32:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a36:	4770      	bx	lr

08001a38 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	0800e128 	.word	0x0800e128

08001a54 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0800e140 	.word	0x0800e140

08001a70 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fad2 	bl	8001024 <_ZN3ros3MsgC1Ev>
 8001a80:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3308      	adds	r3, #8
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fada 	bl	8001044 <_ZN13geometry_msgs7Vector3C1Ev>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3328      	adds	r3, #40	; 0x28
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fad5 	bl	8001044 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0800e3bc 	.word	0x0800e3bc

08001aa8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0008 	add.w	r0, r3, #8
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff fae6 	bl	8001094 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff fad9 	bl	8001094 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001aea:	68fb      	ldr	r3, [r7, #12]
    }
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f103 0008 	add.w	r0, r3, #8
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff fc33 	bl	800137a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7ff fc26 	bl	800137a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
     return offset;
 8001b36:	68fb      	ldr	r3, [r7, #12]
    }
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	0800e164 	.word	0x0800e164

08001b5c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	0800e178 	.word	0x0800e178

08001b78 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
      data()
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fa3c 	bl	8001024 <_ZN3ros3MsgC1Ev>
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ffde 	bl	8001b78 <_ZN3ros4TimeC1Ev>
    {
    }
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0800e3a4 	.word	0x0800e3a4

08001bcc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0a19      	lsrs	r1, r3, #8
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	0c19      	lsrs	r1, r3, #16
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3302      	adds	r3, #2
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0e19      	lsrs	r1, r3, #24
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3303      	adds	r3, #3
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	0a19      	lsrs	r1, r3, #8
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2ca      	uxtb	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	0c19      	lsrs	r1, r3, #16
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0e19      	lsrs	r1, r3, #24
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3303      	adds	r3, #3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	b2ca      	uxtb	r2, r1
 8001c66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	440b      	add	r3, r1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	440b      	add	r3, r1
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3303      	adds	r3, #3
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	440b      	add	r3, r1
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	440b      	add	r3, r1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	440b      	add	r3, r1
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3303      	adds	r3, #3
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	440b      	add	r3, r1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3304      	adds	r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d36:	68fb      	ldr	r3, [r7, #12]
    }
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	0800e19c 	.word	0x0800e19c

08001d60 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	0800e1ac 	.word	0x0800e1ac

08001d7c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f94c 	bl	8001024 <_ZN3ros3MsgC1Ev>
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	809a      	strh	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
    {
    }
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	0800e38c 	.word	0x0800e38c
 8001dc0:	0800e1d0 	.word	0x0800e1d0

08001dc4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	8899      	ldrh	r1, [r3, #4]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	889b      	ldrh	r3, [r3, #4]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b299      	uxth	r1, r3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	3302      	adds	r3, #2
 8001df8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa86 	bl	8000310 <strlen>
 8001e04:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	69b9      	ldr	r1, [r7, #24]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 ff7a 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3304      	adds	r3, #4
 8001e18:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	18d0      	adds	r0, r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4619      	mov	r1, r3
 8001e28:	f00b ffd8 	bl	800dddc <memcpy>
      offset += length_topic_name;
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4413      	add	r3, r2
 8001e32:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fa69 	bl	8000310 <strlen>
 8001e3e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	6979      	ldr	r1, [r7, #20]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 ff5d 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	18d0      	adds	r0, r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f00b ffbb 	bl	800dddc <memcpy>
      offset += length_message_type;
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fa4c 	bl	8000310 <strlen>
 8001e78:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	6939      	ldr	r1, [r7, #16]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 ff40 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	18d0      	adds	r0, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f00b ff9e 	bl	800dddc <memcpy>
      offset += length_md5sum;
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	0a19      	lsrs	r1, r3, #8
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0c19      	lsrs	r1, r3, #16
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0e19      	lsrs	r1, r3, #24
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
    }
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b08a      	sub	sp, #40	; 0x28
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	889b      	ldrh	r3, [r3, #4]
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	440b      	add	r3, r1
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	3302      	adds	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	441a      	add	r2, r3
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fefc 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d20c      	bcs.n	8001f7c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	441a      	add	r2, r3
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	440b      	add	r3, r1
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3301      	adds	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e7ec      	b.n	8001f56 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	3b01      	subs	r3, #1
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	441a      	add	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	441a      	add	r2, r3
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fec9 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	6a3a      	ldr	r2, [r7, #32]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d20c      	bcs.n	8001fe2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	441a      	add	r2, r3
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	6839      	ldr	r1, [r7, #0]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	e7ec      	b.n	8001fbc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	441a      	add	r2, r3
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fe96 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3304      	adds	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20c      	bcs.n	8002048 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	441a      	add	r2, r3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3b01      	subs	r3, #1
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	440b      	add	r3, r1
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e7ec      	b.n	8002022 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	3b01      	subs	r3, #1
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	3b01      	subs	r3, #1
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	441a      	add	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	440a      	add	r2, r1
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	3301      	adds	r3, #1
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	440b      	add	r3, r1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	4313      	orrs	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	3302      	adds	r3, #2
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	440b      	add	r3, r1
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	4313      	orrs	r3, r2
 80020a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	3303      	adds	r3, #3
 80020a8:	6839      	ldr	r1, [r7, #0]
 80020aa:	440b      	add	r3, r1
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	061b      	lsls	r3, r3, #24
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	3304      	adds	r3, #4
 80020be:	61bb      	str	r3, [r7, #24]
     return offset;
 80020c0:	69bb      	ldr	r3, [r7, #24]
    }
 80020c2:	4618      	mov	r0, r3
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	0800e1d4 	.word	0x0800e1d4

080020e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	0800e1f0 	.word	0x0800e1f0

08002104 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe ff88 	bl	8001024 <_ZN3ros3MsgC1Ev>
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	711a      	strb	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002124:	609a      	str	r2, [r3, #8]
    {
    }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800e374 	.word	0x0800e374
 8002134:	0800e1d0 	.word	0x0800e1d0

08002138 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	7912      	ldrb	r2, [r2, #4]
 8002150:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f8d7 	bl	8000310 <strlen>
 8002162:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fdcb 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	18d0      	adds	r0, r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	4619      	mov	r1, r3
 8002186:	f00b fe29 	bl	800dddc <memcpy>
      offset += length_msg;
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
      return offset;
 8002192:	68fb      	ldr	r3, [r7, #12]
    }
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3301      	adds	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	441a      	add	r2, r3
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fdbb 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	3304      	adds	r3, #4
 80021d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d20c      	bcs.n	80021fe <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	441a      	add	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	440b      	add	r3, r1
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e7ec      	b.n	80021d8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	3b01      	subs	r3, #1
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3b01      	subs	r3, #1
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	441a      	add	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
     return offset;
 8002222:	693b      	ldr	r3, [r7, #16]
    }
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	0800e214 	.word	0x0800e214

08002248 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0800e228 	.word	0x0800e228

08002264 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fed8 	bl	8001024 <_ZN3ros3MsgC1Ev>
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	0800e35c 	.word	0x0800e35c

080022ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	b2ca      	uxtb	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	0a19      	lsrs	r1, r3, #8
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	3301      	adds	r3, #1
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c19      	lsrs	r1, r3, #16
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	3302      	adds	r3, #2
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0e19      	lsrs	r1, r3, #24
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	3303      	adds	r3, #3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3304      	adds	r3, #4
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	429a      	cmp	r2, r3
 8002310:	d22b      	bcs.n	800236a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002320:	6939      	ldr	r1, [r7, #16]
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4413      	add	r3, r2
 8002328:	b2ca      	uxtb	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	0a19      	lsrs	r1, r3, #8
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3301      	adds	r3, #1
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	b2ca      	uxtb	r2, r1
 800233a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	0c19      	lsrs	r1, r3, #16
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	3302      	adds	r3, #2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	b2ca      	uxtb	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	0e19      	lsrs	r1, r3, #24
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3303      	adds	r3, #3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4413      	add	r3, r2
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3304      	adds	r3, #4
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	3301      	adds	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	e7ce      	b.n	8002308 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6919      	ldr	r1, [r3, #16]
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4413      	add	r3, r2
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	0a19      	lsrs	r1, r3, #8
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	3301      	adds	r3, #1
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	b2ca      	uxtb	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	0c19      	lsrs	r1, r3, #16
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3302      	adds	r3, #2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4413      	add	r3, r2
 8002398:	b2ca      	uxtb	r2, r1
 800239a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	0e19      	lsrs	r1, r3, #24
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	3303      	adds	r3, #3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3304      	adds	r3, #4
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d22b      	bcs.n	800241a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023d0:	68f9      	ldr	r1, [r7, #12]
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	b2ca      	uxtb	r2, r1
 80023da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0a19      	lsrs	r1, r3, #8
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	3301      	adds	r3, #1
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	0c19      	lsrs	r1, r3, #16
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	3302      	adds	r3, #2
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0e19      	lsrs	r1, r3, #24
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3303      	adds	r3, #3
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	4413      	add	r3, r2
 8002408:	b2ca      	uxtb	r2, r1
 800240a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3304      	adds	r3, #4
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	e7ce      	b.n	80023b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69d9      	ldr	r1, [r3, #28]
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	b2ca      	uxtb	r2, r1
 8002426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	0a19      	lsrs	r1, r3, #8
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	b2ca      	uxtb	r2, r1
 8002438:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	0c19      	lsrs	r1, r3, #16
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	3302      	adds	r3, #2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	b2ca      	uxtb	r2, r1
 800244a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	0e19      	lsrs	r1, r3, #24
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3303      	adds	r3, #3
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3304      	adds	r3, #4
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	429a      	cmp	r2, r3
 8002470:	d228      	bcs.n	80024c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fd ff46 	bl	8000310 <strlen>
 8002484:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	6979      	ldr	r1, [r7, #20]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fc3a 	bl	8002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3304      	adds	r3, #4
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	18d0      	adds	r0, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4619      	mov	r1, r3
 80024b0:	f00b fc94 	bl	800dddc <memcpy>
      offset += length_stringsi;
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4413      	add	r3, r2
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	3301      	adds	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	e7d1      	b.n	8002468 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024c6:	4618      	mov	r0, r3
 80024c8:	3728      	adds	r7, #40	; 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b08e      	sub	sp, #56	; 0x38
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	3301      	adds	r3, #1
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	3302      	adds	r3, #2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	4313      	orrs	r3, r2
 8002508:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	3303      	adds	r3, #3
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	4313      	orrs	r3, r2
 800251a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	3304      	adds	r3, #4
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	d90a      	bls.n	8002542 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f00b fc66 	bl	800de08 <realloc>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002552:	429a      	cmp	r2, r3
 8002554:	d236      	bcs.n	80025c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	440a      	add	r2, r1
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	3301      	adds	r3, #1
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	440b      	add	r3, r1
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	3302      	adds	r3, #2
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	440b      	add	r3, r1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	3303      	adds	r3, #3
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	440b      	add	r3, r1
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	3304      	adds	r3, #4
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	3301      	adds	r3, #1
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	e7c3      	b.n	800254c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	3301      	adds	r3, #1
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	4413      	add	r3, r2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	3302      	adds	r3, #2
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f4:	3303      	adds	r3, #3
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	4313      	orrs	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	3304      	adds	r3, #4
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	d90a      	bls.n	800262a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f00b fbf2 	bl	800de08 <realloc>
 8002624:	4602      	mov	r2, r0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002630:	2300      	movs	r3, #0
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263a:	429a      	cmp	r2, r3
 800263c:	d236      	bcs.n	80026ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	440a      	add	r2, r1
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002654:	3301      	adds	r3, #1
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	440b      	add	r3, r1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	3302      	adds	r3, #2
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	440b      	add	r3, r1
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	041b      	lsls	r3, r3, #16
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	3303      	adds	r3, #3
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	440b      	add	r3, r1
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	3304      	adds	r3, #4
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	3214      	adds	r2, #20
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	3301      	adds	r3, #1
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026aa:	e7c3      	b.n	8002634 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b8:	3301      	adds	r3, #1
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	3302      	adds	r3, #2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	3303      	adds	r3, #3
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	3304      	adds	r3, #4
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d90a      	bls.n	8002712 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f00b fb7e 	bl	800de08 <realloc>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002722:	429a      	cmp	r2, r3
 8002724:	d23f      	bcs.n	80027a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	441a      	add	r2, r3
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fb06 	bl	8002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	3304      	adds	r3, #4
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	429a      	cmp	r2, r3
 800274c:	d20c      	bcs.n	8002768 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	441a      	add	r2, r3
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	3b01      	subs	r3, #1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	440b      	add	r3, r1
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	3301      	adds	r3, #1
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	e7ec      	b.n	8002742 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	3b01      	subs	r3, #1
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	3b01      	subs	r3, #1
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	441a      	add	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4413      	add	r3, r2
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	3220      	adds	r2, #32
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	3301      	adds	r3, #1
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a4:	e7ba      	b.n	800271c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80027a8:	4618      	mov	r0, r3
 80027aa:	3738      	adds	r7, #56	; 0x38
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	0800e2e0 	.word	0x0800e2e0

080027cc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	0800e24c 	.word	0x0800e24c

080027e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	611a      	str	r2, [r3, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68d8      	ldr	r0, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6891      	ldr	r1, [r2, #8]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4798      	blx	r3
 8002834:	4603      	mov	r3, r0
  };
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
  }
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d068      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a40      	ldr	r2, [pc, #256]	; (8002978 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d061      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3d      	ldr	r2, [pc, #244]	; (800297c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d05a      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d053      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a38      	ldr	r2, [pc, #224]	; (8002984 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d04c      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a36      	ldr	r2, [pc, #216]	; (8002988 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d045      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a33      	ldr	r2, [pc, #204]	; (800298c <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03e      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a31      	ldr	r2, [pc, #196]	; (8002990 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d037      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2e      	ldr	r2, [pc, #184]	; (8002994 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d030      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2c      	ldr	r2, [pc, #176]	; (8002998 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d029      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a29      	ldr	r2, [pc, #164]	; (800299c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d022      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d01b      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d014      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00d      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d006      	beq.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d109      	bne.n	8002954 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800294e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002952:	e008      	b.n	8002966 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40020010 	.word	0x40020010
 8002978:	40020028 	.word	0x40020028
 800297c:	40020040 	.word	0x40020040
 8002980:	40020058 	.word	0x40020058
 8002984:	40020070 	.word	0x40020070
 8002988:	40020088 	.word	0x40020088
 800298c:	400200a0 	.word	0x400200a0
 8002990:	400200b8 	.word	0x400200b8
 8002994:	40020410 	.word	0x40020410
 8002998:	40020428 	.word	0x40020428
 800299c:	40020440 	.word	0x40020440
 80029a0:	40020458 	.word	0x40020458
 80029a4:	40020470 	.word	0x40020470
 80029a8:	40020488 	.word	0x40020488
 80029ac:	400204a0 	.word	0x400204a0
 80029b0:	400204b8 	.word	0x400204b8

080029b4 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
			huart(&huart1), rind(0), twind(0), tfind(0) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <_ZN13STM32HardwareC1Ev+0x34>)
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	2401098c 	.word	0x2401098c

080029ec <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f804 	bl	8002a02 <_ZN13STM32Hardware10reset_rbufEv>
	}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a16:	4619      	mov	r1, r3
 8002a18:	f009 f962 	bl	800bce0 <HAL_UART_Receive_DMA>
	}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZN13STM32Hardware4readEv>:

	int read() {
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
		int c = -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a30:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff0d 	bl	8002858 <_ZN13STM32Hardware10getRdmaIndEv>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	429c      	cmp	r4, r3
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a54:	1c59      	adds	r1, r3, #1
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	791b      	ldrb	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8002a74:	68fb      	ldr	r3, [r7, #12]
	}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
	...

08002a80 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d108      	bne.n	8002aa6 <_ZN13STM32Hardware5flushEv+0x26>
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <_ZN13STM32Hardware5flushEv+0x26>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <_ZN13STM32Hardware5flushEv+0x28>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d03f      	beq.n	8002b2c <_ZN13STM32Hardware5flushEv+0xac>
			mutex = true;
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d031      	beq.n	8002b26 <_ZN13STM32Hardware5flushEv+0xa6>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d20a      	bcs.n	8002ae8 <_ZN13STM32Hardware5flushEv+0x68>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	e006      	b.n	8002af6 <_ZN13STM32Hardware5flushEv+0x76>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	89fa      	ldrh	r2, [r7, #14]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f009 f855 	bl	800bbbc <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b18:	89fb      	ldrh	r3, [r7, #14]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 8002b26:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
		}
	}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	2400fcc8 	.word	0x2400fcc8

08002b38 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
		int n = length;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4e:	bfa8      	it	ge
 8002b50:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b54:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b5c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	bf28      	it	cs
 8002b66:	4613      	movcs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f00b f92d 	bl	800dddc <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d00b      	beq.n	8002bb6 <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	18d1      	adds	r1, r2, r3
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f00b f913 	bl	800dddc <memcpy>
		}

		flush();
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7ff ff62 	bl	8002a80 <_ZN13STM32Hardware5flushEv>
	}
 8002bbc:	bf00      	nop
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 8002bcc:	f002 f920 	bl	8004e10 <HAL_GetTick>
 8002bd0:	4603      	mov	r3, r0
	}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE>:

ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);

ros::Publisher CarVelPub("Toposition", &CarVnow);

void ROS::GoalVel_CB(const geometry_msgs::Twist &msg) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	omni.SetGoalCarInfo(msg.linear.x, msg.linear.y, msg.angular.z);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	ed93 7b04 	vldr	d7, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	ed93 6b06 	vldr	d6, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8002bf6:	eeb0 2b45 	vmov.f64	d2, d5
 8002bfa:	eeb0 1b46 	vmov.f64	d1, d6
 8002bfe:	eeb0 0b47 	vmov.f64	d0, d7
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE+0x34>)
 8002c04:	f7fe f831 	bl	8000c6a <_ZN4Omni14SetGoalCarInfoEddd>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	24000098 	.word	0x24000098

08002c14 <_ZN3ROS5setupEv>:

void ROS::setup() {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	nh.initNode();
 8002c18:	4807      	ldr	r0, [pc, #28]	; (8002c38 <_ZN3ROS5setupEv+0x24>)
 8002c1a:	f000 f97d 	bl	8002f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(CarVelSub);
 8002c1e:	4907      	ldr	r1, [pc, #28]	; (8002c3c <_ZN3ROS5setupEv+0x28>)
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <_ZN3ROS5setupEv+0x24>)
 8002c22:	f000 f996 	bl	8002f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	nh.advertise(CarVelPub);
 8002c26:	4906      	ldr	r1, [pc, #24]	; (8002c40 <_ZN3ROS5setupEv+0x2c>)
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <_ZN3ROS5setupEv+0x24>)
 8002c2a:	f000 f9bd 	bl	8002fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	HAL_TIM_Base_Start_IT(&htim7);
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <_ZN3ROS5setupEv+0x30>)
 8002c30:	f007 fcee 	bl	800a610 <HAL_TIM_Base_Start_IT>
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	2400fccc 	.word	0x2400fccc
 8002c3c:	24010668 	.word	0x24010668
 8002c40:	240106c8 	.word	0x240106c8
 8002c44:	24010810 	.word	0x24010810

08002c48 <_ZN3ROS4loopEv>:

void ROS::loop() {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <_ZN3ROS4loopEv+0x10>)
 8002c4e:	f000 f9db 	bl	8003008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2400fccc 	.word	0x2400fccc

08002c5c <_ZN3ROS10PubCarVnowEv>:

void ROS::PubCarVnow() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	NowCarInfo = omni.GetNowCarInfo();
 8002c60:	4813      	ldr	r0, [pc, #76]	; (8002cb0 <_ZN3ROS10PubCarVnowEv+0x54>)
 8002c62:	f7fe f99a 	bl	8000f9a <_ZN4Omni13GetNowCarInfoEv>
 8002c66:	eeb0 5b40 	vmov.f64	d5, d0
 8002c6a:	eeb0 6b41 	vmov.f64	d6, d1
 8002c6e:	eeb0 7b42 	vmov.f64	d7, d2
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c74:	ed83 5b00 	vstr	d5, [r3]
 8002c78:	ed83 6b02 	vstr	d6, [r3, #8]
 8002c7c:	ed83 7b04 	vstr	d7, [r3, #16]

	CarVnow.linear.x = NowCarInfo.Vx;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002c88:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CarVnow.linear.y = NowCarInfo.Vy;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c92:	4909      	ldr	r1, [pc, #36]	; (8002cb8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002c94:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CarVnow.angular.z = NowCarInfo.Omega;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c9e:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002ca0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	CarVelPub.publish(&CarVnow);
 8002ca4:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <_ZN3ROS10PubCarVnowEv+0x60>)
 8002ca8:	f7ff fdb5 	bl	8002816 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	24000098 	.word	0x24000098
 8002cb4:	24010650 	.word	0x24010650
 8002cb8:	24010608 	.word	0x24010608
 8002cbc:	240106c8 	.word	0x240106c8

08002cc0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <HAL_UART_TxCpltCallback+0x20>)
 8002cca:	f000 fb76 	bl	80033ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fed5 	bl	8002a80 <_ZN13STM32Hardware5flushEv>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2400fccc 	.word	0x2400fccc

08002ce4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <HAL_UART_RxCpltCallback+0x20>)
 8002cee:	f000 fb64 	bl	80033ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fe84 	bl	8002a02 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2400fccc 	.word	0x2400fccc

08002d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d80d      	bhi.n	8002d38 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	fa22 f103 	lsr.w	r1, r2, r3
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b2ca      	uxtb	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e7ee      	b.n	8002d16 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d811      	bhi.n	8002d82 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	440a      	add	r2, r1
 8002d68:	7812      	ldrb	r2, [r2, #0]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	00d2      	lsls	r2, r2, #3
 8002d70:	fa01 f202 	lsl.w	r2, r1, r2
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e7ea      	b.n	8002d58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	0800e348 	.word	0x0800e348

08002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ffe8 	bl	8002d90 <_ZN3ros15NodeHandleBase_C1Ev>
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fdf2 	bl	80029b4 <_ZN13STM32HardwareC1Ev>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fa40 	bl	8002264 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b18      	cmp	r3, #24
 8002dec:	d80b      	bhi.n	8002e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e7f0      	b.n	8002de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b18      	cmp	r3, #24
 8002e0e:	d80a      	bhi.n	8002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	3301      	adds	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e7f1      	b.n	8002e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d20a      	bcs.n	8002e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	e7f0      	b.n	8002e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d20a      	bcs.n	8002e6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	e7f0      	b.n	8002e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	0800e31c 	.word	0x0800e31c

08002eb0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	0800e330 	.word	0x0800e330

08002ed0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ffe5 	bl	8002eb0 <_ZN3ros11Subscriber_C1Ev>
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3310      	adds	r3, #16
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fdbd 	bl	8001a70 <_ZN13geometry_msgs5TwistC1Ev>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	659a      	str	r2, [r3, #88]	; 0x58
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
  };
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	0800e304 	.word	0x0800e304

08002f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fd61 	bl	80029ec <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	dc19      	bgt.n	8002f9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
        return true;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e004      	b.n	8002f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e7e2      	b.n	8002f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002f9a:	2300      	movs	r3, #0
  }
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b18      	cmp	r3, #24
 8002fba:	dc1e      	bgt.n	8002ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	60da      	str	r2, [r3, #12]
        return true;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e004      	b.n	8002ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e7dd      	b.n	8002fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002ffa:	2300      	movs	r3, #0
  }
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fdd5 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 800301a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800302a:	4293      	cmp	r3, r2
 800302c:	d903      	bls.n	8003036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800303c:	2b00      	cmp	r3, #0
 800303e:	d009      	beq.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d903      	bls.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800305a:	2b00      	cmp	r3, #0
 800305c:	d014      	beq.n	8003088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fdae 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad2      	subs	r2, r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003074:	429a      	cmp	r2, r3
 8003076:	bf8c      	ite	hi
 8003078:	2301      	movhi	r3, #1
 800307a:	2300      	movls	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003082:	f06f 0301 	mvn.w	r3, #1
 8003086:	e194      	b.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fcc9 	bl	8002a24 <_ZN13STM32Hardware4readEv>
 8003092:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f2c0 8174 	blt.w	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	441a      	add	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	d11e      	bne.n	80030f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	b2d1      	uxtb	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	460a      	mov	r2, r1
 80030ce:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030d8:	1e5a      	subs	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1b4      	bne.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2208      	movs	r2, #8
 80030ee:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030f2:	e7af      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d128      	bne.n	8003150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2bff      	cmp	r3, #255	; 0xff
 8003102:	d10d      	bne.n	8003120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f103 0214 	add.w	r2, r3, #20
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800311e:	e799      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fd4d 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 800312a:	4602      	mov	r2, r0
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	bf8c      	ite	hi
 8003138:	2301      	movhi	r3, #1
 800313a:	2300      	movls	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d088      	beq.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800314a:	f06f 0301 	mvn.w	r3, #1
 800314e:	e130      	b.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003156:	2b01      	cmp	r3, #1
 8003158:	d118      	bne.n	800318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2bfe      	cmp	r3, #254	; 0xfe
 800315e:	d107      	bne.n	8003170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800316e:	e771      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800317e:	2b00      	cmp	r3, #0
 8003180:	f47f af68 	bne.w	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f924 	bl	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800318a:	e763      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003192:	2b02      	cmp	r3, #2
 8003194:	d113      	bne.n	80031be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80031bc:	e74a      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d110      	bne.n	80031ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031e8:	e734      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d116      	bne.n	8003222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80031fa:	425a      	negs	r2, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	bf58      	it	pl
 8003202:	4253      	negpl	r3, r2
 8003204:	2bff      	cmp	r3, #255	; 0xff
 8003206:	d107      	bne.n	8003218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003216:	e71d      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003220:	e718      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10f      	bne.n	800324c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800324a:	e703      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003252:	2b06      	cmp	r3, #6
 8003254:	d117      	bne.n	8003286 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2207      	movs	r2, #7
 800326c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f aeec 	bne.w	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2208      	movs	r2, #8
 8003280:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003284:	e6e6      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800328c:	2b08      	cmp	r3, #8
 800328e:	f47f aee1 	bne.w	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80032a0:	425a      	negs	r2, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	bf58      	it	pl
 80032a8:	4253      	negpl	r3, r2
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	f47f aed2 	bne.w	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d110      	bne.n	80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f889 	bl	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f8a4 	bl	800340e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032da:	e06a      	b.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032e2:	2b0a      	cmp	r3, #10
 80032e4:	d107      	bne.n	80032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f96c 	bl	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80032f4:	e6ae      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d10e      	bne.n	800331e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f7ff f8dd 	bl	80024ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800331c:	e69a      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003324:	2b0b      	cmp	r3, #11
 8003326:	d104      	bne.n	8003332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003330:	e690      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003338:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f43f ae84 	beq.w	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003352:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f202 2222 	addw	r2, r2, #546	; 0x222
 800335c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003366:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800337e:	4611      	mov	r1, r2
 8003380:	4798      	blx	r3
    while (true)
 8003382:	e667      	b.n	8003054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003384:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00f      	beq.n	80033b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800339e:	4293      	cmp	r3, r2
 80033a0:	d906      	bls.n	80033b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f815 	bl	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80033b0:	2300      	movs	r3, #0
  }
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
  }
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fbdc 	bl	8001b9c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f107 020c 	add.w	r2, r7, #12
 80033ee:	210a      	movs	r1, #10
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
    rt_time = hardware_.time();
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fbe3 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800340e:	b590      	push	{r4, r7, lr}
 8003410:	b08b      	sub	sp, #44	; 0x2c
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fcae 	bl	8001d7c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b18      	cmp	r3, #24
 8003428:	dc63      	bgt.n	80034f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d056      	beq.n	80034ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	b29b      	uxth	r3, r3
 800344e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4608      	mov	r0, r1
 800348a:	4798      	blx	r3
 800348c:	4603      	mov	r3, r0
 800348e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4608      	mov	r0, r1
 80034b8:	4798      	blx	r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80034be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681c      	ldr	r4, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f9b0 	bl	800283e <_ZN3ros9Publisher15getEndpointTypeEv>
 80034de:	4601      	mov	r1, r0
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	461a      	mov	r2, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e798      	b.n	8003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2b18      	cmp	r3, #24
 80034fa:	dc5f      	bgt.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d053      	beq.n	80035b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003510:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b29b      	uxth	r3, r3
 800351c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3308      	adds	r3, #8
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4608      	mov	r0, r1
 800354e:	4798      	blx	r3
 8003550:	4603      	mov	r3, r0
 8003552:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	f202 2222 	addw	r2, r2, #546	; 0x222
 800355c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4608      	mov	r0, r1
 8003574:	4798      	blx	r3
 8003576:	4603      	mov	r3, r0
 8003578:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800357a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681c      	ldr	r4, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800358e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	f202 2222 	addw	r2, r2, #546	; 0x222
 800359a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3304      	adds	r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4798      	blx	r3
 80035a8:	4601      	mov	r1, r0
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	461a      	mov	r2, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e79c      	b.n	80034f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80035c4:	bf00      	nop
 80035c6:	372c      	adds	r7, #44	; 0x2c
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd90      	pop	{r4, r7, pc}

080035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fade 	bl	8001b9c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff faed 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	6839      	ldr	r1, [r7, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fb3d 	bl	8001c7c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4915      	ldr	r1, [pc, #84]	; (800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003608:	fba1 1303 	umull	r1, r3, r1, r3
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003612:	6939      	ldr	r1, [r7, #16]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003618:	fba3 0302 	umull	r0, r3, r3, r2
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	440b      	add	r3, r1
 8003630:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003632:	f107 0308 	add.w	r3, r7, #8
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8a6 	bl	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fabd 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	10624dd3 	.word	0x10624dd3
 8003660:	000f4240 	.word	0x000f4240

08003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b63      	cmp	r3, #99	; 0x63
 8003674:	dd09      	ble.n	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003686:	2300      	movs	r3, #0
 8003688:	e079      	b.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003696:	3207      	adds	r2, #7
 8003698:	4611      	mov	r1, r2
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22fe      	movs	r2, #254	; 0xfe
 80036ac:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80036d6:	4413      	add	r3, r2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	b21b      	sxth	r3, r3
 80036f2:	121b      	asrs	r3, r3, #8
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003702:	2305      	movs	r3, #5
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3306      	adds	r3, #6
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	dc0d      	bgt.n	800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3301      	adds	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e7ec      	b.n	8003706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3307      	adds	r3, #7
 8003730:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	425a      	negs	r2, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	bf58      	it	pl
 800373c:	4253      	negpl	r3, r2
 800373e:	b2da      	uxtb	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	6179      	str	r1, [r7, #20]
 8003746:	43d2      	mvns	r2, r2
 8003748:	b2d1      	uxtb	r1, r2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	460a      	mov	r2, r1
 8003750:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375a:	dc0a      	bgt.n	8003772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1d18      	adds	r0, r3, #4
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4619      	mov	r1, r3
 800376a:	f7ff f9e5 	bl	8002b38 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	e005      	b.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003772:	4905      	ldr	r1, [pc, #20]	; (8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f849 	bl	800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0800e270 	.word	0x0800e270

0800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fa12 	bl	8002bc4 <_ZN13STM32Hardware4timeEv>
 80037a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4915      	ldr	r1, [pc, #84]	; (8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037aa:	fba1 1303 	umull	r1, r3, r1, r3
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037c2:	fba3 0302 	umull	r0, r3, r3, r2
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037cc:	fb00 f303 	mul.w	r3, r0, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	1aca      	subs	r2, r1, r3
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80037dc:	4413      	add	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fc ff16 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	10624dd3 	.word	0x10624dd3
 8003804:	000f4240 	.word	0x000f4240
 8003808:	3b9aca00 	.word	0x3b9aca00

0800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	2103      	movs	r1, #3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f804 	bl	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	460b      	mov	r3, r1
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003836:	f107 0314 	add.w	r3, r7, #20
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fc62 	bl	8002104 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f107 0214 	add.w	r2, r7, #20
 8003852:	2107      	movs	r1, #7
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	4798      	blx	r3
  }
 8003858:	bf00      	nop
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_Z41__static_initialization_and_destruction_0ii>:

void ROS::init(void) {
//	nh.getHardware()->init();
}
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d116      	bne.n	800389e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800387a:	480b      	ldr	r0, [pc, #44]	; (80038a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800387c:	f7ff fa98 	bl	8002db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist CarVnow;
 8003880:	480a      	ldr	r0, [pc, #40]	; (80038ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003882:	f7fe f8f5 	bl	8001a70 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);
 8003886:	2301      	movs	r3, #1
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800388a:	490a      	ldr	r1, [pc, #40]	; (80038b4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800388c:	480a      	ldr	r0, [pc, #40]	; (80038b8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800388e:	f7ff fb1f 	bl	8002ed0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher CarVelPub("Toposition", &CarVnow);
 8003892:	2300      	movs	r3, #0
 8003894:	4a05      	ldr	r2, [pc, #20]	; (80038ac <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003896:	4909      	ldr	r1, [pc, #36]	; (80038bc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003898:	4809      	ldr	r0, [pc, #36]	; (80038c0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800389a:	f7fe ffa5 	bl	80027e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2400fccc 	.word	0x2400fccc
 80038ac:	24010608 	.word	0x24010608
 80038b0:	08002bdd 	.word	0x08002bdd
 80038b4:	0800e2ac 	.word	0x0800e2ac
 80038b8:	24010668 	.word	0x24010668
 80038bc:	0800e2b4 	.word	0x0800e2b4
 80038c0:	240106c8 	.word	0x240106c8

080038c4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3310      	adds	r3, #16
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe f90d 	bl	8001af4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	3210      	adds	r2, #16
 80038e2:	4610      	mov	r0, r2
 80038e4:	4798      	blx	r3
  }
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3310      	adds	r3, #16
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe f914 	bl	8001b40 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003918:	4603      	mov	r3, r0
  }
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3310      	adds	r3, #16
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f914 	bl	8001b5c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003934:	4603      	mov	r3, r0
  }
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
    return configured_;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <_GLOBAL__sub_I_nh>:
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
 800395c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003960:	2001      	movs	r0, #1
 8003962:	f7ff ff7d 	bl	8003860 <_Z41__static_initialization_and_destruction_0ii>
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim12;

// Count ROS frequency.
static int ROS_CAR_FREQUENCY = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d122      	bne.n	80039c0 <HAL_TIM_PeriodElapsedCallback+0x58>

		// Update Car Vnow
		omni.UpdateNowCarInfo();
 800397a:	4818      	ldr	r0, [pc, #96]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800397c:	f7fd f8f8 	bl	8000b70 <_ZN4Omni16UpdateNowCarInfoEv>

		// Update four wheel's PID value.
		omni.Update_PID();
 8003980:	4816      	ldr	r0, [pc, #88]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003982:	f7fd f99c 	bl	8000cbe <_ZN4Omni10Update_PIDEv>

		// Output GPIO and PWM
		omni.Move();
 8003986:	4815      	ldr	r0, [pc, #84]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003988:	f7fd f9d2 	bl	8000d30 <_ZN4Omni4MoveEv>

		// Debug from Live Expressions ( Optional )
		omni.SetMotorVgoal();
 800398c:	4813      	ldr	r0, [pc, #76]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800398e:	f7fd fa87 	bl	8000ea0 <_ZN4Omni13SetMotorVgoalEv>

		// ROS pub -> Mecanum
		if (++ROS_CAR_FREQUENCY >= ROS_CAR_PUB_FREQUENCY) {
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	bfcc      	ite	gt
 80039a4:	2301      	movgt	r3, #1
 80039a6:	2300      	movle	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00f      	beq.n	80039ce <HAL_TIM_PeriodElapsedCallback+0x66>
			ROS_CAR_FREQUENCY = 0;
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
			omni.Get_Car_location();
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039b6:	f7fd f8b7 	bl	8000b28 <_ZN4Omni16Get_Car_locationEv>
			ROS::PubCarVnow();
 80039ba:	f7ff f94f 	bl	8002c5c <_ZN3ROS10PubCarVnowEv>
		}
	}
	else if (htim->Instance == TIM7) {
		ROS::loop();
	}
}
 80039be:	e006      	b.n	80039ce <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim->Instance == TIM7) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_PeriodElapsedCallback+0x66>
		ROS::loop();
 80039ca:	f7ff f93d 	bl	8002c48 <_ZN3ROS4loopEv>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40001c00 	.word	0x40001c00
 80039dc:	24000098 	.word	0x24000098
 80039e0:	240106dc 	.word	0x240106dc
 80039e4:	40001400 	.word	0x40001400

080039e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80039ec:	f001 f98a 	bl	8004d04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80039f0:	f000 f81c 	bl	8003a2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80039f4:	f000 fc2a 	bl	800424c <MX_GPIO_Init>
	MX_TIM2_Init();
 80039f8:	f000 f888 	bl	8003b0c <MX_TIM2_Init>
	MX_TIM3_Init();
 80039fc:	f000 f8da 	bl	8003bb4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003a00:	f000 f92e 	bl	8003c60 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003a04:	f000 f982 	bl	8003d0c <MX_TIM5_Init>
	MX_TIM12_Init();
 8003a08:	f000 fa9e 	bl	8003f48 <MX_TIM12_Init>
	MX_TIM15_Init();
 8003a0c:	f000 fb10 	bl	8004030 <MX_TIM15_Init>
	MX_TIM13_Init();
 8003a10:	f000 faea 	bl	8003fe8 <MX_TIM13_Init>
	MX_DMA_Init();
 8003a14:	f000 fbf2 	bl	80041fc <MX_DMA_Init>
	MX_USART1_UART_Init();
 8003a18:	f000 fb9c 	bl	8004154 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003a1c:	f000 f9cc 	bl	8003db8 <MX_TIM7_Init>
	MX_TIM8_Init();
 8003a20:	f000 fa00 	bl	8003e24 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */

	main_function();
 8003a24:	f000 fcde 	bl	80043e4 <main_function>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003a28:	e7fe      	b.n	8003a28 <main+0x40>
	...

08003a2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b09c      	sub	sp, #112	; 0x70
 8003a30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a36:	224c      	movs	r2, #76	; 0x4c
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f00a f9dc 	bl	800ddf8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	2220      	movs	r2, #32
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f00a f9d6 	bl	800ddf8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003a4c:	2002      	movs	r0, #2
 8003a4e:	f004 faf7 	bl	8008040 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a52:	2300      	movs	r3, #0
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <SystemClock_Config+0xdc>)
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a5e:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <SystemClock_Config+0xdc>)
 8003a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a64:	6193      	str	r3, [r2, #24]
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <SystemClock_Config+0xdc>)
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8003a72:	bf00      	nop
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <SystemClock_Config+0xdc>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d1f8      	bne.n	8003a74 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a90:	2302      	movs	r3, #2
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003a94:	2304      	movs	r3, #4
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 256;
 8003a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003aaa:	2304      	movs	r3, #4
 8003aac:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 fafa 	bl	80080b4 <HAL_RCC_OscConfig>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <SystemClock_Config+0x9e>
		Error_Handler();
 8003ac6:	f000 fc87 	bl	80043d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8003aca:	233f      	movs	r3, #63	; 0x3f
 8003acc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003ada:	2340      	movs	r3, #64	; 0x40
 8003adc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003ae8:	2340      	movs	r3, #64	; 0x40
 8003aea:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	2102      	movs	r1, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f004 fe8d 	bl	8008810 <HAL_RCC_ClockConfig>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <SystemClock_Config+0xd4>
		Error_Handler();
 8003afc:	f000 fc6c 	bl	80043d8 <Error_Handler>
	}
}
 8003b00:	bf00      	nop
 8003b02:	3770      	adds	r7, #112	; 0x70
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58024800 	.word	0x58024800

08003b0c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	; 0x30
 8003b10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003b12:	f107 030c 	add.w	r3, r7, #12
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f00a f96c 	bl	800ddf8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b20:	463b      	mov	r3, r7
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b2a:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b30:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b44:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4c:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b52:	2303      	movs	r3, #3
 8003b54:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b66:	2300      	movs	r3, #0
 8003b68:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8003b76:	f107 030c 	add.w	r3, r7, #12
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b7e:	f006 ff41 	bl	800aa04 <HAL_TIM_Encoder_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM2_Init+0x80>
		Error_Handler();
 8003b88:	f000 fc26 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003b94:	463b      	mov	r3, r7
 8003b96:	4619      	mov	r1, r3
 8003b98:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <MX_TIM2_Init+0xa4>)
 8003b9a:	f007 fe65 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM2_Init+0x9c>
		Error_Handler();
 8003ba4:	f000 fc18 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003ba8:	bf00      	nop
 8003baa:	3730      	adds	r7, #48	; 0x30
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	240106e0 	.word	0x240106e0

08003bb4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003bba:	f107 030c 	add.w	r3, r7, #12
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f00a f918 	bl	800ddf8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003bc8:	463b      	mov	r3, r7
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003bd2:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <MX_TIM3_Init+0xa8>)
 8003bd6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bea:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bec:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c10:	2301      	movs	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	4619      	mov	r1, r3
 8003c22:	480d      	ldr	r0, [pc, #52]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003c24:	f006 feee 	bl	800aa04 <HAL_TIM_Encoder_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003c2e:	f000 fbd3 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <MX_TIM3_Init+0xa4>)
 8003c40:	f007 fe12 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM3_Init+0x9a>
		Error_Handler();
 8003c4a:	f000 fbc5 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003c4e:	bf00      	nop
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2401072c 	.word	0x2401072c
 8003c5c:	40000400 	.word	0x40000400

08003c60 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	; 0x30
 8003c64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c66:	f107 030c 	add.w	r3, r7, #12
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00a f8c2 	bl	800ddf8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c74:	463b      	mov	r3, r7
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003c7e:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003c80:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <MX_TIM4_Init+0xa8>)
 8003c82:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003c90:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c96:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c98:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4619      	mov	r1, r3
 8003cce:	480d      	ldr	r0, [pc, #52]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003cd0:	f006 fe98 	bl	800aa04 <HAL_TIM_Encoder_Init>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003cda:	f000 fb7d 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4806      	ldr	r0, [pc, #24]	; (8003d04 <MX_TIM4_Init+0xa4>)
 8003cec:	f007 fdbc 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_TIM4_Init+0x9a>
		Error_Handler();
 8003cf6:	f000 fb6f 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003cfa:	bf00      	nop
 8003cfc:	3730      	adds	r7, #48	; 0x30
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	24010778 	.word	0x24010778
 8003d08:	40000800 	.word	0x40000800

08003d0c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	; 0x30
 8003d10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f00a f86c 	bl	800ddf8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d20:	463b      	mov	r3, r7
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d2c:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <MX_TIM5_Init+0xa8>)
 8003d2e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003d30:	4b1f      	ldr	r3, [pc, #124]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003d3c:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d42:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d50:	2303      	movs	r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d64:	2300      	movs	r3, #0
 8003d66:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	4619      	mov	r1, r3
 8003d7a:	480d      	ldr	r0, [pc, #52]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d7c:	f006 fe42 	bl	800aa04 <HAL_TIM_Encoder_Init>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM5_Init+0x7e>
		Error_Handler();
 8003d86:	f000 fb27 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003d92:	463b      	mov	r3, r7
 8003d94:	4619      	mov	r1, r3
 8003d96:	4806      	ldr	r0, [pc, #24]	; (8003db0 <MX_TIM5_Init+0xa4>)
 8003d98:	f007 fd66 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM5_Init+0x9a>
		Error_Handler();
 8003da2:	f000 fb19 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003da6:	bf00      	nop
 8003da8:	3730      	adds	r7, #48	; 0x30
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	240107c4 	.word	0x240107c4
 8003db4:	40000c00 	.word	0x40000c00

08003db8 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <MX_TIM7_Init+0x68>)
 8003dcc:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 127;
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003dd0:	227f      	movs	r2, #127	; 0x7f
 8003dd2:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9999;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003ddc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003de0:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003de8:	480c      	ldr	r0, [pc, #48]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003dea:	f006 fbb9 	bl	800a560 <HAL_TIM_Base_Init>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003df4:	f000 faf0 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4805      	ldr	r0, [pc, #20]	; (8003e1c <MX_TIM7_Init+0x64>)
 8003e06:	f007 fd2f 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM7_Init+0x5c>
		Error_Handler();
 8003e10:	f000 fae2 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	24010810 	.word	0x24010810
 8003e20:	40001400 	.word	0x40001400

08003e24 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b098      	sub	sp, #96	; 0x60
 8003e28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	611a      	str	r2, [r3, #16]
 8003e46:	615a      	str	r2, [r3, #20]
 8003e48:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	2234      	movs	r2, #52	; 0x34
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f009 ffd1 	bl	800ddf8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003e56:	4b3a      	ldr	r3, [pc, #232]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e58:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <MX_TIM8_Init+0x120>)
 8003e5a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 12799;
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e5e:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8003e62:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 9999;
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e70:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003e84:	482e      	ldr	r0, [pc, #184]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003e86:	f006 fc49 	bl	800a71c <HAL_TIM_PWM_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM8_Init+0x70>
		Error_Handler();
 8003e90:	f000 faa2 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e94:	2300      	movs	r3, #0
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8003ea0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4826      	ldr	r0, [pc, #152]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003ea8:	f007 fcde 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_TIM8_Init+0x92>
		Error_Handler();
 8003eb2:	f000 fa91 	bl	80043d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eb6:	2360      	movs	r3, #96	; 0x60
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 5000;
 8003eba:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4619      	mov	r1, r3
 8003edc:	4818      	ldr	r0, [pc, #96]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003ede:	f006 ffe5 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_TIM8_Init+0xc8>
		Error_Handler();
 8003ee8:	f000 fa76 	bl	80043d8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f04:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4807      	ldr	r0, [pc, #28]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003f22:	f007 fd3d 	bl	800b9a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM8_Init+0x10c>
		Error_Handler();
 8003f2c:	f000 fa54 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003f30:	4803      	ldr	r0, [pc, #12]	; (8003f40 <MX_TIM8_Init+0x11c>)
 8003f32:	f000 fc2d 	bl	8004790 <HAL_TIM_MspPostInit>

}
 8003f36:	bf00      	nop
 8003f38:	3760      	adds	r7, #96	; 0x60
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2401085c 	.word	0x2401085c
 8003f44:	40010400 	.word	0x40010400

08003f48 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
 8003f5c:	615a      	str	r2, [r3, #20]
 8003f5e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f62:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <MX_TIM12_Init+0x9c>)
 8003f64:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8003f66:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 6399;
 8003f72:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f74:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8003f78:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8003f86:	4816      	ldr	r0, [pc, #88]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003f88:	f006 fbc8 	bl	800a71c <HAL_TIM_PWM_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM12_Init+0x4e>
		Error_Handler();
 8003f92:	f000 fa21 	bl	80043d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f96:	2360      	movs	r3, #96	; 0x60
 8003f98:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4619      	mov	r1, r3
 8003fac:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003fae:	f006 ff7d 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM12_Init+0x74>
		Error_Handler();
 8003fb8:	f000 fa0e 	bl	80043d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4807      	ldr	r0, [pc, #28]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003fc4:	f006 ff72 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM12_Init+0x8a>
		Error_Handler();
 8003fce:	f000 fa03 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8003fd2:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <MX_TIM12_Init+0x98>)
 8003fd4:	f000 fbdc 	bl	8004790 <HAL_TIM_MspPostInit>

}
 8003fd8:	bf00      	nop
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	240108a8 	.word	0x240108a8
 8003fe4:	40001800 	.word	0x40001800

08003fe8 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <MX_TIM13_Init+0x40>)
 8003fee:	4a0f      	ldr	r2, [pc, #60]	; (800402c <MX_TIM13_Init+0x44>)
 8003ff0:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 127;
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <MX_TIM13_Init+0x40>)
 8003ff4:	227f      	movs	r2, #127	; 0x7f
 8003ff6:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <MX_TIM13_Init+0x40>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <MX_TIM13_Init+0x40>)
 8004000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004004:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <MX_TIM13_Init+0x40>)
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_TIM13_Init+0x40>)
 800400e:	2200      	movs	r2, #0
 8004010:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <MX_TIM13_Init+0x40>)
 8004014:	f006 faa4 	bl	800a560 <HAL_TIM_Base_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800401e:	f000 f9db 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	240108f4 	.word	0x240108f4
 800402c:	40001c00 	.word	0x40001c00

08004030 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b098      	sub	sp, #96	; 0x60
 8004034:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	611a      	str	r2, [r3, #16]
 8004052:	615a      	str	r2, [r3, #20]
 8004054:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	2234      	movs	r2, #52	; 0x34
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f009 fecb 	bl	800ddf8 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004062:	4b3a      	ldr	r3, [pc, #232]	; (800414c <MX_TIM15_Init+0x11c>)
 8004064:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <MX_TIM15_Init+0x120>)
 8004066:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8004068:	4b38      	ldr	r3, [pc, #224]	; (800414c <MX_TIM15_Init+0x11c>)
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <MX_TIM15_Init+0x11c>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 6399;
 8004074:	4b35      	ldr	r3, [pc, #212]	; (800414c <MX_TIM15_Init+0x11c>)
 8004076:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800407a:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407c:	4b33      	ldr	r3, [pc, #204]	; (800414c <MX_TIM15_Init+0x11c>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8004082:	4b32      	ldr	r3, [pc, #200]	; (800414c <MX_TIM15_Init+0x11c>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <MX_TIM15_Init+0x11c>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 800408e:	482f      	ldr	r0, [pc, #188]	; (800414c <MX_TIM15_Init+0x11c>)
 8004090:	f006 fb44 	bl	800a71c <HAL_TIM_PWM_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM15_Init+0x6e>
		Error_Handler();
 800409a:	f000 f99d 	bl	80043d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK) {
 80040a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040aa:	4619      	mov	r1, r3
 80040ac:	4827      	ldr	r0, [pc, #156]	; (800414c <MX_TIM15_Init+0x11c>)
 80040ae:	f007 fbdb 	bl	800b868 <HAL_TIMEx_MasterConfigSynchronization>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM15_Init+0x8c>
		Error_Handler();
 80040b8:	f000 f98e 	bl	80043d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040bc:	2360      	movs	r3, #96	; 0x60
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c4:	2300      	movs	r3, #0
 80040c6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040c8:	2300      	movs	r3, #0
 80040ca:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040d0:	2300      	movs	r3, #0
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040d4:	2300      	movs	r3, #0
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80040d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040dc:	2200      	movs	r2, #0
 80040de:	4619      	mov	r1, r3
 80040e0:	481a      	ldr	r0, [pc, #104]	; (800414c <MX_TIM15_Init+0x11c>)
 80040e2:	f006 fee3 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM15_Init+0xc0>
		Error_Handler();
 80040ec:	f000 f974 	bl	80043d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80040f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040f4:	2204      	movs	r2, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4814      	ldr	r0, [pc, #80]	; (800414c <MX_TIM15_Init+0x11c>)
 80040fa:	f006 fed7 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_TIM15_Init+0xd8>
		Error_Handler();
 8004104:	f000 f968 	bl	80043d8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004108:	2300      	movs	r3, #0
 800410a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800410c:	2300      	movs	r3, #0
 800410e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800411c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004120:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4807      	ldr	r0, [pc, #28]	; (800414c <MX_TIM15_Init+0x11c>)
 8004130:	f007 fc36 	bl	800b9a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_TIM15_Init+0x10e>
		Error_Handler();
 800413a:	f000 f94d 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 800413e:	4803      	ldr	r0, [pc, #12]	; (800414c <MX_TIM15_Init+0x11c>)
 8004140:	f000 fb26 	bl	8004790 <HAL_TIM_MspPostInit>

}
 8004144:	bf00      	nop
 8004146:	3760      	adds	r7, #96	; 0x60
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	24010940 	.word	0x24010940
 8004150:	40014000 	.word	0x40014000

08004154 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004158:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <MX_USART1_UART_Init+0xa4>)
 800415c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004164:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 800416e:	2200      	movs	r2, #0
 8004170:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004174:	2200      	movs	r2, #0
 8004176:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 800417a:	220c      	movs	r2, #12
 800417c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004186:	2200      	movs	r2, #0
 8004188:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 800418c:	2200      	movs	r2, #0
 800418e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004192:	2200      	movs	r2, #0
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8004196:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 8004198:	2240      	movs	r2, #64	; 0x40
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
	huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 800419e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
	huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80041a4:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	649a      	str	r2, [r3, #72]	; 0x48
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80041aa:	4812      	ldr	r0, [pc, #72]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 80041ac:	f007 fcb6 	bl	800bb1c <HAL_UART_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_USART1_UART_Init+0x66>
		Error_Handler();
 80041b6:	f000 f90f 	bl	80043d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80041ba:	2100      	movs	r1, #0
 80041bc:	480d      	ldr	r0, [pc, #52]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 80041be:	f009 fcfd 	bl	800dbbc <HAL_UARTEx_SetTxFifoThreshold>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_USART1_UART_Init+0x78>
		Error_Handler();
 80041c8:	f000 f906 	bl	80043d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80041cc:	2100      	movs	r1, #0
 80041ce:	4809      	ldr	r0, [pc, #36]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 80041d0:	f009 fd32 	bl	800dc38 <HAL_UARTEx_SetRxFifoThreshold>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_USART1_UART_Init+0x8a>
		Error_Handler();
 80041da:	f000 f8fd 	bl	80043d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80041de:	4805      	ldr	r0, [pc, #20]	; (80041f4 <MX_USART1_UART_Init+0xa0>)
 80041e0:	f009 fcb3 	bl	800db4a <HAL_UARTEx_DisableFifoMode>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_USART1_UART_Init+0x9a>
		Error_Handler();
 80041ea:	f000 f8f5 	bl	80043d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	2401098c 	.word	0x2401098c
 80041f8:	40011000 	.word	0x40011000

080041fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <MX_DMA_Init+0x4c>)
 8004204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004208:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <MX_DMA_Init+0x4c>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <MX_DMA_Init+0x4c>)
 8004214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	200b      	movs	r0, #11
 8004226:	f000 feda 	bl	8004fde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800422a:	200b      	movs	r0, #11
 800422c:	f000 fef1 	bl	8005012 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	200c      	movs	r0, #12
 8004236:	f000 fed2 	bl	8004fde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800423a:	200c      	movs	r0, #12
 800423c:	f000 fee9 	bl	8005012 <HAL_NVIC_EnableIRQ>

}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	58024400 	.word	0x58024400

0800424c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004252:	f107 031c 	add.w	r3, r7, #28
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <MX_GPIO_Init+0x178>)
 8004264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004268:	4a56      	ldr	r2, [pc, #344]	; (80043c4 <MX_GPIO_Init+0x178>)
 800426a:	f043 0310 	orr.w	r3, r3, #16
 800426e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004272:	4b54      	ldr	r3, [pc, #336]	; (80043c4 <MX_GPIO_Init+0x178>)
 8004274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <MX_GPIO_Init+0x178>)
 8004282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004286:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <MX_GPIO_Init+0x178>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004290:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <MX_GPIO_Init+0x178>)
 8004292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a4:	4a47      	ldr	r2, [pc, #284]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ae:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80042bc:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c2:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80042da:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ea:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80042f8:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <MX_GPIO_Init+0x178>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fe:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <MX_GPIO_Init+0x178>)
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004308:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <MX_GPIO_Init+0x178>)
 800430a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004316:	2200      	movs	r2, #0
 8004318:	2108      	movs	r1, #8
 800431a:	482b      	ldr	r0, [pc, #172]	; (80043c8 <MX_GPIO_Init+0x17c>)
 800431c:	f003 fe76 	bl	800800c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004326:	4829      	ldr	r0, [pc, #164]	; (80043cc <MX_GPIO_Init+0x180>)
 8004328:	f003 fe70 	bl	800800c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800432c:	2200      	movs	r2, #0
 800432e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004332:	4827      	ldr	r0, [pc, #156]	; (80043d0 <MX_GPIO_Init+0x184>)
 8004334:	f003 fe6a 	bl	800800c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800433e:	4825      	ldr	r0, [pc, #148]	; (80043d4 <MX_GPIO_Init+0x188>)
 8004340:	f003 fe64 	bl	800800c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004344:	2308      	movs	r3, #8
 8004346:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004348:	2301      	movs	r3, #1
 800434a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	2300      	movs	r3, #0
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004354:	f107 031c 	add.w	r3, r7, #28
 8004358:	4619      	mov	r1, r3
 800435a:	481b      	ldr	r0, [pc, #108]	; (80043c8 <MX_GPIO_Init+0x17c>)
 800435c:	f003 fcae 	bl	8007cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004364:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004366:	2301      	movs	r3, #1
 8004368:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	2300      	movs	r3, #0
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004372:	f107 031c 	add.w	r3, r7, #28
 8004376:	4619      	mov	r1, r3
 8004378:	4814      	ldr	r0, [pc, #80]	; (80043cc <MX_GPIO_Init+0x180>)
 800437a:	f003 fc9f 	bl	8007cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800437e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004382:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004384:	2301      	movs	r3, #1
 8004386:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438c:	2300      	movs	r3, #0
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	4619      	mov	r1, r3
 8004396:	480e      	ldr	r0, [pc, #56]	; (80043d0 <MX_GPIO_Init+0x184>)
 8004398:	f003 fc90 	bl	8007cbc <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800439c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a2:	2301      	movs	r3, #1
 80043a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2300      	movs	r3, #0
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ae:	f107 031c 	add.w	r3, r7, #28
 80043b2:	4619      	mov	r1, r3
 80043b4:	4807      	ldr	r0, [pc, #28]	; (80043d4 <MX_GPIO_Init+0x188>)
 80043b6:	f003 fc81 	bl	8007cbc <HAL_GPIO_Init>

}
 80043ba:	bf00      	nop
 80043bc:	3730      	adds	r7, #48	; 0x30
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	58024400 	.word	0x58024400
 80043c8:	58021000 	.word	0x58021000
 80043cc:	58020800 	.word	0x58020800
 80043d0:	58020400 	.word	0x58020400
 80043d4:	58020c00 	.word	0x58020c00

080043d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043dc:	b672      	cpsid	i
}
 80043de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80043e0:	e7fe      	b.n	80043e0 <Error_Handler+0x8>
	...

080043e4 <main_function>:
#include "Omni.h"

// For LED blink
extern TIM_HandleTypeDef htim8;

void main_function() {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	// Init
	ROS::setup();
 80043e8:	f7fe fc14 	bl	8002c14 <_ZN3ROS5setupEv>
	omni.Init();
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <main_function+0x18>)
 80043ee:	f7fc fb43 	bl	8000a78 <_ZN4Omni4InitEv>

	// For LED blink
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80043f2:	2100      	movs	r1, #0
 80043f4:	4802      	ldr	r0, [pc, #8]	; (8004400 <main_function+0x1c>)
 80043f6:	f006 f9e9 	bl	800a7cc <HAL_TIM_PWM_Start>
#ifdef DEBUGGER_MODE
	DebugMode.DebuggingMode();
	return;
#endif

	while (true) {
 80043fa:	e7fe      	b.n	80043fa <main_function+0x16>
 80043fc:	24000098 	.word	0x24000098
 8004400:	2401085c 	.word	0x2401085c

08004404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_MspInit+0x30>)
 800440c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <HAL_MspInit+0x30>)
 8004412:	f043 0302 	orr.w	r3, r3, #2
 8004416:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_MspInit+0x30>)
 800441c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	58024400 	.word	0x58024400

08004438 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b090      	sub	sp, #64	; 0x40
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d14e      	bne.n	80044f8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445a:	4b77      	ldr	r3, [pc, #476]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800445c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004460:	4a75      	ldr	r2, [pc, #468]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800446a:	4b73      	ldr	r3, [pc, #460]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800446c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004478:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800447a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800447e:	4a6e      	ldr	r2, [pc, #440]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004488:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800448a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004496:	4b68      	ldr	r3, [pc, #416]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800449c:	4a66      	ldr	r2, [pc, #408]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044a6:	4b64      	ldr	r3, [pc, #400]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 80044a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	2300      	movs	r3, #0
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044c6:	2301      	movs	r3, #1
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ce:	4619      	mov	r1, r3
 80044d0:	485a      	ldr	r0, [pc, #360]	; (800463c <HAL_TIM_Encoder_MspInit+0x204>)
 80044d2:	f003 fbf3 	bl	8007cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044d6:	2308      	movs	r3, #8
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044e6:	2301      	movs	r3, #1
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ee:	4619      	mov	r1, r3
 80044f0:	4853      	ldr	r0, [pc, #332]	; (8004640 <HAL_TIM_Encoder_MspInit+0x208>)
 80044f2:	f003 fbe3 	bl	8007cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80044f6:	e09b      	b.n	8004630 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a51      	ldr	r2, [pc, #324]	; (8004644 <HAL_TIM_Encoder_MspInit+0x20c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d12e      	bne.n	8004560 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004502:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004508:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004512:	4b49      	ldr	r3, [pc, #292]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004520:	4b45      	ldr	r3, [pc, #276]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004526:	4a44      	ldr	r2, [pc, #272]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800453e:	2330      	movs	r3, #48	; 0x30
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004542:	2302      	movs	r3, #2
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454a:	2300      	movs	r3, #0
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800454e:	2302      	movs	r3, #2
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004556:	4619      	mov	r1, r3
 8004558:	4839      	ldr	r0, [pc, #228]	; (8004640 <HAL_TIM_Encoder_MspInit+0x208>)
 800455a:	f003 fbaf 	bl	8007cbc <HAL_GPIO_Init>
}
 800455e:	e067      	b.n	8004630 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a38      	ldr	r2, [pc, #224]	; (8004648 <HAL_TIM_Encoder_MspInit+0x210>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12f      	bne.n	80045ca <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800456c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004570:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800457c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800458a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800458e:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 800459a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80045a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045b8:	2302      	movs	r3, #2
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045c0:	4619      	mov	r1, r3
 80045c2:	4822      	ldr	r0, [pc, #136]	; (800464c <HAL_TIM_Encoder_MspInit+0x214>)
 80045c4:	f003 fb7a 	bl	8007cbc <HAL_GPIO_Init>
}
 80045c8:	e032      	b.n	8004630 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_TIM_Encoder_MspInit+0x218>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d12d      	bne.n	8004630 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 80045d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 80045dc:	f043 0308 	orr.w	r3, r3, #8
 80045e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 80045e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 80045f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f8:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <HAL_TIM_Encoder_MspInit+0x200>)
 8004604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004610:	2303      	movs	r3, #3
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461c:	2300      	movs	r3, #0
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004620:	2302      	movs	r3, #2
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004628:	4619      	mov	r1, r3
 800462a:	4804      	ldr	r0, [pc, #16]	; (800463c <HAL_TIM_Encoder_MspInit+0x204>)
 800462c:	f003 fb46 	bl	8007cbc <HAL_GPIO_Init>
}
 8004630:	bf00      	nop
 8004632:	3740      	adds	r7, #64	; 0x40
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	58024400 	.word	0x58024400
 800463c:	58020000 	.word	0x58020000
 8004640:	58020400 	.word	0x58020400
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	58020c00 	.word	0x58020c00
 8004650:	40000c00 	.word	0x40000c00

08004654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_TIM_Base_MspInit+0x84>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d117      	bne.n	8004696 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_TIM_Base_MspInit+0x88>)
 8004668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <HAL_TIM_Base_MspInit+0x88>)
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_TIM_Base_MspInit+0x88>)
 8004678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004684:	2200      	movs	r2, #0
 8004686:	2100      	movs	r1, #0
 8004688:	2037      	movs	r0, #55	; 0x37
 800468a:	f000 fca8 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800468e:	2037      	movs	r0, #55	; 0x37
 8004690:	f000 fcbf 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004694:	e01b      	b.n	80046ce <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM13)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <HAL_TIM_Base_MspInit+0x8c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d116      	bne.n	80046ce <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_TIM_Base_MspInit+0x88>)
 80046a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046a6:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <HAL_TIM_Base_MspInit+0x88>)
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_TIM_Base_MspInit+0x88>)
 80046b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	202c      	movs	r0, #44	; 0x2c
 80046c4:	f000 fc8b 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80046c8:	202c      	movs	r0, #44	; 0x2c
 80046ca:	f000 fca2 	bl	8005012 <HAL_NVIC_EnableIRQ>
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40001400 	.word	0x40001400
 80046dc:	58024400 	.word	0x58024400
 80046e0:	40001c00 	.word	0x40001c00

080046e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	; (8004780 <HAL_TIM_PWM_MspInit+0x9c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d117      	bne.n	8004726 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 80046f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046fc:	4a21      	ldr	r2, [pc, #132]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004706:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 8004708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004714:	2200      	movs	r2, #0
 8004716:	2100      	movs	r1, #0
 8004718:	202c      	movs	r0, #44	; 0x2c
 800471a:	f000 fc60 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800471e:	202c      	movs	r0, #44	; 0x2c
 8004720:	f000 fc77 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004724:	e028      	b.n	8004778 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM12)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	; (8004788 <HAL_TIM_PWM_MspInit+0xa4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10f      	bne.n	8004750 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 8004732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 8004738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 8004742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
}
 800474e:	e013      	b.n	8004778 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM15)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0d      	ldr	r2, [pc, #52]	; (800478c <HAL_TIM_PWM_MspInit+0xa8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10e      	bne.n	8004778 <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 800475c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_TIM_PWM_MspInit+0xa0>)
 800476c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40010400 	.word	0x40010400
 8004784:	58024400 	.word	0x58024400
 8004788:	40001800 	.word	0x40001800
 800478c:	40014000 	.word	0x40014000

08004790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a38      	ldr	r2, [pc, #224]	; (8004890 <HAL_TIM_MspPostInit+0x100>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d11f      	bne.n	80047f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b2:	4b38      	ldr	r3, [pc, #224]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 80047b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047b8:	4a36      	ldr	r2, [pc, #216]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047c2:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 80047c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047e0:	2303      	movs	r3, #3
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e4:	f107 0314 	add.w	r3, r7, #20
 80047e8:	4619      	mov	r1, r3
 80047ea:	482b      	ldr	r0, [pc, #172]	; (8004898 <HAL_TIM_MspPostInit+0x108>)
 80047ec:	f003 fa66 	bl	8007cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80047f0:	e049      	b.n	8004886 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM12)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a29      	ldr	r2, [pc, #164]	; (800489c <HAL_TIM_MspPostInit+0x10c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 80047fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004802:	4a24      	ldr	r2, [pc, #144]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 800480e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800481a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800481e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004820:	2302      	movs	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800482c:	2302      	movs	r3, #2
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	4619      	mov	r1, r3
 8004836:	481a      	ldr	r0, [pc, #104]	; (80048a0 <HAL_TIM_MspPostInit+0x110>)
 8004838:	f003 fa40 	bl	8007cbc <HAL_GPIO_Init>
}
 800483c:	e023      	b.n	8004886 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <HAL_TIM_MspPostInit+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d11e      	bne.n	8004886 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 800484a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800484e:	4a11      	ldr	r2, [pc, #68]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 8004850:	f043 0310 	orr.w	r3, r3, #16
 8004854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004858:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <HAL_TIM_MspPostInit+0x104>)
 800485a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004866:	2360      	movs	r3, #96	; 0x60
 8004868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004876:	2304      	movs	r3, #4
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	4809      	ldr	r0, [pc, #36]	; (80048a8 <HAL_TIM_MspPostInit+0x118>)
 8004882:	f003 fa1b 	bl	8007cbc <HAL_GPIO_Init>
}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40010400 	.word	0x40010400
 8004894:	58024400 	.word	0x58024400
 8004898:	58020800 	.word	0x58020800
 800489c:	40001800 	.word	0x40001800
 80048a0:	58020400 	.word	0x58020400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	58021000 	.word	0x58021000

080048ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b0b6      	sub	sp, #216	; 0xd8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048c4:	f107 0310 	add.w	r3, r7, #16
 80048c8:	22b4      	movs	r2, #180	; 0xb4
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f009 fa93 	bl	800ddf8 <memset>
  if(huart->Instance==USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a57      	ldr	r2, [pc, #348]	; (8004a34 <HAL_UART_MspInit+0x188>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	f040 80a7 	bne.w	8004a2c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048de:	2301      	movs	r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	4618      	mov	r0, r3
 80048ee:	f004 fb1b 	bl	8008f28 <HAL_RCCEx_PeriphCLKConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80048f8:	f7ff fd6e 	bl	80043d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048fc:	4b4e      	ldr	r3, [pc, #312]	; (8004a38 <HAL_UART_MspInit+0x18c>)
 80048fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004902:	4a4d      	ldr	r2, [pc, #308]	; (8004a38 <HAL_UART_MspInit+0x18c>)
 8004904:	f043 0310 	orr.w	r3, r3, #16
 8004908:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800490c:	4b4a      	ldr	r3, [pc, #296]	; (8004a38 <HAL_UART_MspInit+0x18c>)
 800490e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_UART_MspInit+0x18c>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004920:	4a45      	ldr	r2, [pc, #276]	; (8004a38 <HAL_UART_MspInit+0x18c>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800492a:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <HAL_UART_MspInit+0x18c>)
 800492c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004938:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800493c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2302      	movs	r3, #2
 8004942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004952:	2307      	movs	r3, #7
 8004954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004958:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800495c:	4619      	mov	r1, r3
 800495e:	4837      	ldr	r0, [pc, #220]	; (8004a3c <HAL_UART_MspInit+0x190>)
 8004960:	f003 f9ac 	bl	8007cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_UART_MspInit+0x194>)
 8004966:	4a37      	ldr	r2, [pc, #220]	; (8004a44 <HAL_UART_MspInit+0x198>)
 8004968:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800496a:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <HAL_UART_MspInit+0x194>)
 800496c:	2229      	movs	r2, #41	; 0x29
 800496e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_UART_MspInit+0x194>)
 8004972:	2200      	movs	r2, #0
 8004974:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004976:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <HAL_UART_MspInit+0x194>)
 8004978:	2200      	movs	r2, #0
 800497a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800497c:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_UART_MspInit+0x194>)
 800497e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004982:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004984:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <HAL_UART_MspInit+0x194>)
 8004986:	2200      	movs	r2, #0
 8004988:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_UART_MspInit+0x194>)
 800498c:	2200      	movs	r2, #0
 800498e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <HAL_UART_MspInit+0x194>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_UART_MspInit+0x194>)
 8004998:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800499c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <HAL_UART_MspInit+0x194>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80049a4:	4826      	ldr	r0, [pc, #152]	; (8004a40 <HAL_UART_MspInit+0x194>)
 80049a6:	f000 fb4f 	bl	8005048 <HAL_DMA_Init>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80049b0:	f7ff fd12 	bl	80043d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <HAL_UART_MspInit+0x194>)
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_UART_MspInit+0x194>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049c2:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_UART_MspInit+0x1a0>)
 80049c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049c8:	222a      	movs	r2, #42	; 0x2a
 80049ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049ce:	2240      	movs	r2, #64	; 0x40
 80049d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d2:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049e0:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a00:	4811      	ldr	r0, [pc, #68]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 8004a02:	f000 fb21 	bl	8005048 <HAL_DMA_Init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004a0c:	f7ff fce4 	bl	80043d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 8004a14:	679a      	str	r2, [r3, #120]	; 0x78
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <HAL_UART_MspInit+0x19c>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2100      	movs	r1, #0
 8004a20:	2025      	movs	r0, #37	; 0x25
 8004a22:	f000 fadc 	bl	8004fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a26:	2025      	movs	r0, #37	; 0x25
 8004a28:	f000 faf3 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a2c:	bf00      	nop
 8004a2e:	37d8      	adds	r7, #216	; 0xd8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40011000 	.word	0x40011000
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	58020000 	.word	0x58020000
 8004a40:	24010a1c 	.word	0x24010a1c
 8004a44:	40020010 	.word	0x40020010
 8004a48:	24010a94 	.word	0x24010a94
 8004a4c:	40020028 	.word	0x40020028

08004a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <NMI_Handler+0x4>

08004a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a5a:	e7fe      	b.n	8004a5a <HardFault_Handler+0x4>

08004a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a60:	e7fe      	b.n	8004a60 <MemManage_Handler+0x4>

08004a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a66:	e7fe      	b.n	8004a66 <BusFault_Handler+0x4>

08004a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a6c:	e7fe      	b.n	8004a6c <UsageFault_Handler+0x4>

08004a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a9c:	f000 f9a4 	bl	8004de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004aa0:	bf00      	nop
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8004aaa:	f001 fdf5 	bl	8006698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	24010a1c 	.word	0x24010a1c

08004ab8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004abc:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8004abe:	f001 fdeb 	bl	8006698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	24010a94 	.word	0x24010a94

08004acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ad0:	4802      	ldr	r0, [pc, #8]	; (8004adc <USART1_IRQHandler+0x10>)
 8004ad2:	f007 f95b 	bl	800bd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	2401098c 	.word	0x2401098c

08004ae0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004ae4:	4803      	ldr	r0, [pc, #12]	; (8004af4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004ae6:	f006 f8c1 	bl	800ac6c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004aea:	4803      	ldr	r0, [pc, #12]	; (8004af8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004aec:	f006 f8be 	bl	800ac6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004af0:	bf00      	nop
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	2401085c 	.word	0x2401085c
 8004af8:	240108f4 	.word	0x240108f4

08004afc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b00:	4802      	ldr	r0, [pc, #8]	; (8004b0c <TIM7_IRQHandler+0x10>)
 8004b02:	f006 f8b3 	bl	800ac6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	24010810 	.word	0x24010810

08004b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
	return 1;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <_kill>:

int _kill(int pid, int sig)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b2a:	f009 f92d 	bl	800dd88 <__errno>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2216      	movs	r2, #22
 8004b32:	601a      	str	r2, [r3, #0]
	return -1;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_exit>:

void _exit (int status)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffe7 	bl	8004b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b52:	e7fe      	b.n	8004b52 <_exit+0x12>

08004b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <_sbrk+0x5c>)
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <_sbrk+0x60>)
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <_sbrk+0x64>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <_sbrk+0x64>)
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <_sbrk+0x68>)
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <_sbrk+0x64>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d207      	bcs.n	8004b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b84:	f009 f900 	bl	800dd88 <__errno>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b92:	e009      	b.n	8004ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <_sbrk+0x64>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <_sbrk+0x64>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <_sbrk+0x64>)
 8004ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	24050000 	.word	0x24050000
 8004bb4:	00000400 	.word	0x00000400
 8004bb8:	24010b0c 	.word	0x24010b0c
 8004bbc:	24010b28 	.word	0x24010b28

08004bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <SystemInit+0xd0>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	4a31      	ldr	r2, [pc, #196]	; (8004c90 <SystemInit+0xd0>)
 8004bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bd4:	4b2f      	ldr	r3, [pc, #188]	; (8004c94 <SystemInit+0xd4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d807      	bhi.n	8004bf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004be0:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <SystemInit+0xd4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 030f 	bic.w	r3, r3, #15
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <SystemInit+0xd4>)
 8004bea:	f043 0307 	orr.w	r3, r3, #7
 8004bee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <SystemInit+0xd8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <SystemInit+0xd8>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bfc:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <SystemInit+0xd8>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <SystemInit+0xd8>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4924      	ldr	r1, [pc, #144]	; (8004c98 <SystemInit+0xd8>)
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <SystemInit+0xdc>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c0e:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <SystemInit+0xd4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <SystemInit+0xd4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 030f 	bic.w	r3, r3, #15
 8004c22:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <SystemInit+0xd4>)
 8004c24:	f043 0307 	orr.w	r3, r3, #7
 8004c28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <SystemInit+0xd8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <SystemInit+0xd8>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c36:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <SystemInit+0xd8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <SystemInit+0xd8>)
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <SystemInit+0xe0>)
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <SystemInit+0xd8>)
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <SystemInit+0xe4>)
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <SystemInit+0xd8>)
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <SystemInit+0xe8>)
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <SystemInit+0xd8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <SystemInit+0xd8>)
 8004c56:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <SystemInit+0xe8>)
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <SystemInit+0xd8>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <SystemInit+0xd8>)
 8004c62:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <SystemInit+0xe8>)
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c66:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <SystemInit+0xd8>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <SystemInit+0xd8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <SystemInit+0xd8>)
 8004c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <SystemInit+0xd8>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <SystemInit+0xec>)
 8004c80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000ed00 	.word	0xe000ed00
 8004c94:	52002000 	.word	0x52002000
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004ca0:	02020200 	.word	0x02020200
 8004ca4:	01ff0000 	.word	0x01ff0000
 8004ca8:	01010280 	.word	0x01010280
 8004cac:	52004000 	.word	0x52004000

08004cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ce8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cb4:	f7ff ff84 	bl	8004bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cb8:	480c      	ldr	r0, [pc, #48]	; (8004cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cba:	490d      	ldr	r1, [pc, #52]	; (8004cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cc0:	e002      	b.n	8004cc8 <LoopCopyDataInit>

08004cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cc6:	3304      	adds	r3, #4

08004cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ccc:	d3f9      	bcc.n	8004cc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cce:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	; (8004cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd4:	e001      	b.n	8004cda <LoopFillZerobss>

08004cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cd8:	3204      	adds	r2, #4

08004cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cdc:	d3fb      	bcc.n	8004cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cde:	f009 f859 	bl	800dd94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ce2:	f7fe fe81 	bl	80039e8 <main>
  bx  lr
 8004ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ce8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004cec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004cf0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004cf4:	0800e454 	.word	0x0800e454
  ldr r2, =_sbss
 8004cf8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004cfc:	24010b24 	.word	0x24010b24

08004d00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d00:	e7fe      	b.n	8004d00 <ADC3_IRQHandler>
	...

08004d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d0a:	2003      	movs	r0, #3
 8004d0c:	f000 f95c 	bl	8004fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d10:	f003 ff34 	bl	8008b7c <HAL_RCC_GetSysClockFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <HAL_Init+0x68>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	4913      	ldr	r1, [pc, #76]	; (8004d70 <HAL_Init+0x6c>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_Init+0x68>)
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <HAL_Init+0x6c>)
 8004d38:	5cd3      	ldrb	r3, [r2, r3]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <HAL_Init+0x70>)
 8004d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <HAL_Init+0x74>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d4e:	200f      	movs	r0, #15
 8004d50:	f000 f814 	bl	8004d7c <HAL_InitTick>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e002      	b.n	8004d64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d5e:	f7ff fb51 	bl	8004404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	0800e3fc 	.word	0x0800e3fc
 8004d74:	24000004 	.word	0x24000004
 8004d78:	24000000 	.word	0x24000000

08004d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <HAL_InitTick+0x60>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e021      	b.n	8004dd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <HAL_InitTick+0x64>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_InitTick+0x60>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f941 	bl	800502e <HAL_SYSTICK_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e00e      	b.n	8004dd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0f      	cmp	r3, #15
 8004dba:	d80a      	bhi.n	8004dd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc4:	f000 f90b 	bl	8004fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dc8:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <HAL_InitTick+0x68>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	2400000c 	.word	0x2400000c
 8004de0:	24000000 	.word	0x24000000
 8004de4:	24000008 	.word	0x24000008

08004de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_IncTick+0x20>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_IncTick+0x24>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <HAL_IncTick+0x24>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	2400000c 	.word	0x2400000c
 8004e0c:	24010b10 	.word	0x24010b10

08004e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return uwTick;
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_GetTick+0x14>)
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	24010b10 	.word	0x24010b10

08004e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <__NVIC_SetPriorityGrouping+0x40>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e44:	4013      	ands	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <__NVIC_SetPriorityGrouping+0x44>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <__NVIC_SetPriorityGrouping+0x40>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60d3      	str	r3, [r2, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00
 8004e6c:	05fa0000 	.word	0x05fa0000

08004e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <__NVIC_GetPriorityGrouping+0x18>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	f003 0307 	and.w	r3, r3, #7
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	db0b      	blt.n	8004eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	f003 021f 	and.w	r2, r3, #31
 8004ea4:	4907      	ldr	r1, [pc, #28]	; (8004ec4 <__NVIC_EnableIRQ+0x38>)
 8004ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2001      	movs	r0, #1
 8004eae:	fa00 f202 	lsl.w	r2, r0, r2
 8004eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	e000e100 	.word	0xe000e100

08004ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	6039      	str	r1, [r7, #0]
 8004ed2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	db0a      	blt.n	8004ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	490c      	ldr	r1, [pc, #48]	; (8004f14 <__NVIC_SetPriority+0x4c>)
 8004ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee6:	0112      	lsls	r2, r2, #4
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	440b      	add	r3, r1
 8004eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ef0:	e00a      	b.n	8004f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	4908      	ldr	r1, [pc, #32]	; (8004f18 <__NVIC_SetPriority+0x50>)
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	3b04      	subs	r3, #4
 8004f00:	0112      	lsls	r2, r2, #4
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	440b      	add	r3, r1
 8004f06:	761a      	strb	r2, [r3, #24]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	e000e100 	.word	0xe000e100
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	; 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f1c3 0307 	rsb	r3, r3, #7
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	bf28      	it	cs
 8004f3a:	2304      	movcs	r3, #4
 8004f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	d902      	bls.n	8004f4c <NVIC_EncodePriority+0x30>
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3b03      	subs	r3, #3
 8004f4a:	e000      	b.n	8004f4e <NVIC_EncodePriority+0x32>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	401a      	ands	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6e:	43d9      	mvns	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f74:	4313      	orrs	r3, r2
         );
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3724      	adds	r7, #36	; 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f94:	d301      	bcc.n	8004f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00f      	b.n	8004fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <SysTick_Config+0x40>)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fa2:	210f      	movs	r1, #15
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa8:	f7ff ff8e 	bl	8004ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <SysTick_Config+0x40>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fb2:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <SysTick_Config+0x40>)
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	e000e010 	.word	0xe000e010

08004fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff29 	bl	8004e28 <__NVIC_SetPriorityGrouping>
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fec:	f7ff ff40 	bl	8004e70 <__NVIC_GetPriorityGrouping>
 8004ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f7ff ff90 	bl	8004f1c <NVIC_EncodePriority>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff5f 	bl	8004ec8 <__NVIC_SetPriority>
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	4603      	mov	r3, r0
 800501a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800501c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ff33 	bl	8004e8c <__NVIC_EnableIRQ>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ffa4 	bl	8004f84 <SysTick_Config>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005050:	f7ff fede 	bl	8004e10 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e314      	b.n	800568a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a66      	ldr	r2, [pc, #408]	; (8005200 <HAL_DMA_Init+0x1b8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d04a      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a65      	ldr	r2, [pc, #404]	; (8005204 <HAL_DMA_Init+0x1bc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d045      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_DMA_Init+0x1c0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d040      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a62      	ldr	r2, [pc, #392]	; (800520c <HAL_DMA_Init+0x1c4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d03b      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a60      	ldr	r2, [pc, #384]	; (8005210 <HAL_DMA_Init+0x1c8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d036      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5f      	ldr	r2, [pc, #380]	; (8005214 <HAL_DMA_Init+0x1cc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d031      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_DMA_Init+0x1d0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d02c      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_DMA_Init+0x1d4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d027      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5a      	ldr	r2, [pc, #360]	; (8005220 <HAL_DMA_Init+0x1d8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d022      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a59      	ldr	r2, [pc, #356]	; (8005224 <HAL_DMA_Init+0x1dc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d01d      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a57      	ldr	r2, [pc, #348]	; (8005228 <HAL_DMA_Init+0x1e0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d018      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a56      	ldr	r2, [pc, #344]	; (800522c <HAL_DMA_Init+0x1e4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a54      	ldr	r2, [pc, #336]	; (8005230 <HAL_DMA_Init+0x1e8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00e      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a53      	ldr	r2, [pc, #332]	; (8005234 <HAL_DMA_Init+0x1ec>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d009      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <HAL_DMA_Init+0x1f0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_DMA_Init+0xb8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_DMA_Init+0x1f4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_DMA_Init+0xbc>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_DMA_Init+0xbe>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 813c 	beq.w	8005384 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a37      	ldr	r2, [pc, #220]	; (8005200 <HAL_DMA_Init+0x1b8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d04a      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a36      	ldr	r2, [pc, #216]	; (8005204 <HAL_DMA_Init+0x1bc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d045      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a34      	ldr	r2, [pc, #208]	; (8005208 <HAL_DMA_Init+0x1c0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d040      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a33      	ldr	r2, [pc, #204]	; (800520c <HAL_DMA_Init+0x1c4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d03b      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a31      	ldr	r2, [pc, #196]	; (8005210 <HAL_DMA_Init+0x1c8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d036      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a30      	ldr	r2, [pc, #192]	; (8005214 <HAL_DMA_Init+0x1cc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d031      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2e      	ldr	r2, [pc, #184]	; (8005218 <HAL_DMA_Init+0x1d0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02c      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <HAL_DMA_Init+0x1d4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d027      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <HAL_DMA_Init+0x1d8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <HAL_DMA_Init+0x1dc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d01d      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_DMA_Init+0x1e0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a27      	ldr	r2, [pc, #156]	; (800522c <HAL_DMA_Init+0x1e4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_DMA_Init+0x174>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a25      	ldr	r2, [pc, #148]	; (8005230 <HAL_DMA_Init+0x1e8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_DMA_Init+0x174>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a24      	ldr	r2, [pc, #144]	; (8005234 <HAL_DMA_Init+0x1ec>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_DMA_Init+0x174>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a22      	ldr	r2, [pc, #136]	; (8005238 <HAL_DMA_Init+0x1f0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_Init+0x174>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a21      	ldr	r2, [pc, #132]	; (800523c <HAL_DMA_Init+0x1f4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d108      	bne.n	80051ce <HAL_DMA_Init+0x186>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e007      	b.n	80051de <HAL_DMA_Init+0x196>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051de:	e02f      	b.n	8005240 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051e0:	f7ff fe16 	bl	8004e10 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d928      	bls.n	8005240 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2203      	movs	r2, #3
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e244      	b.n	800568a <HAL_DMA_Init+0x642>
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1c8      	bne.n	80051e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4b84      	ldr	r3, [pc, #528]	; (800546c <HAL_DMA_Init+0x424>)
 800525a:	4013      	ands	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005266:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005272:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b04      	cmp	r3, #4
 8005292:	d107      	bne.n	80052a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	4313      	orrs	r3, r2
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b28      	cmp	r3, #40	; 0x28
 80052aa:	d903      	bls.n	80052b4 <HAL_DMA_Init+0x26c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b2e      	cmp	r3, #46	; 0x2e
 80052b2:	d91f      	bls.n	80052f4 <HAL_DMA_Init+0x2ac>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b3e      	cmp	r3, #62	; 0x3e
 80052ba:	d903      	bls.n	80052c4 <HAL_DMA_Init+0x27c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b42      	cmp	r3, #66	; 0x42
 80052c2:	d917      	bls.n	80052f4 <HAL_DMA_Init+0x2ac>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b46      	cmp	r3, #70	; 0x46
 80052ca:	d903      	bls.n	80052d4 <HAL_DMA_Init+0x28c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b48      	cmp	r3, #72	; 0x48
 80052d2:	d90f      	bls.n	80052f4 <HAL_DMA_Init+0x2ac>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b4e      	cmp	r3, #78	; 0x4e
 80052da:	d903      	bls.n	80052e4 <HAL_DMA_Init+0x29c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b52      	cmp	r3, #82	; 0x52
 80052e2:	d907      	bls.n	80052f4 <HAL_DMA_Init+0x2ac>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b73      	cmp	r3, #115	; 0x73
 80052ea:	d905      	bls.n	80052f8 <HAL_DMA_Init+0x2b0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b77      	cmp	r3, #119	; 0x77
 80052f2:	d801      	bhi.n	80052f8 <HAL_DMA_Init+0x2b0>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_DMA_Init+0x2b2>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005304:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b04      	cmp	r3, #4
 800532e:	d117      	bne.n	8005360 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f002 fb30 	bl	80079a8 <DMA_CheckFifoParam>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2240      	movs	r2, #64	; 0x40
 8005352:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e194      	b.n	800568a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f002 fa6b 	bl	8007844 <DMA_CalcBaseAndBitshift>
 800536e:	4603      	mov	r3, r0
 8005370:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	223f      	movs	r2, #63	; 0x3f
 800537c:	409a      	lsls	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	609a      	str	r2, [r3, #8]
 8005382:	e0ca      	b.n	800551a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a39      	ldr	r2, [pc, #228]	; (8005470 <HAL_DMA_Init+0x428>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a38      	ldr	r2, [pc, #224]	; (8005474 <HAL_DMA_Init+0x42c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d01d      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a36      	ldr	r2, [pc, #216]	; (8005478 <HAL_DMA_Init+0x430>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a35      	ldr	r2, [pc, #212]	; (800547c <HAL_DMA_Init+0x434>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a33      	ldr	r2, [pc, #204]	; (8005480 <HAL_DMA_Init+0x438>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a32      	ldr	r2, [pc, #200]	; (8005484 <HAL_DMA_Init+0x43c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a30      	ldr	r2, [pc, #192]	; (8005488 <HAL_DMA_Init+0x440>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_DMA_Init+0x38c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2f      	ldr	r2, [pc, #188]	; (800548c <HAL_DMA_Init+0x444>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA_Init+0x390>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_DMA_Init+0x392>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8094 	beq.w	8005508 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <HAL_DMA_Init+0x428>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d021      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <HAL_DMA_Init+0x42c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d01c      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_DMA_Init+0x430>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_DMA_Init+0x434>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d012      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <HAL_DMA_Init+0x438>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00d      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <HAL_DMA_Init+0x43c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d008      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_DMA_Init+0x440>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <HAL_DMA_Init+0x3e6>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_DMA_Init+0x444>)
 800542c:	4293      	cmp	r3, r2
 800542e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_DMA_Init+0x448>)
 800544c:	4013      	ands	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d01d      	beq.n	8005494 <HAL_DMA_Init+0x44c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d102      	bne.n	8005466 <HAL_DMA_Init+0x41e>
 8005460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005464:	e017      	b.n	8005496 <HAL_DMA_Init+0x44e>
 8005466:	2300      	movs	r3, #0
 8005468:	e015      	b.n	8005496 <HAL_DMA_Init+0x44e>
 800546a:	bf00      	nop
 800546c:	fe10803f 	.word	0xfe10803f
 8005470:	58025408 	.word	0x58025408
 8005474:	5802541c 	.word	0x5802541c
 8005478:	58025430 	.word	0x58025430
 800547c:	58025444 	.word	0x58025444
 8005480:	58025458 	.word	0x58025458
 8005484:	5802546c 	.word	0x5802546c
 8005488:	58025480 	.word	0x58025480
 800548c:	58025494 	.word	0x58025494
 8005490:	fffe000f 	.word	0xfffe000f
 8005494:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68d2      	ldr	r2, [r2, #12]
 800549a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800549c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	4b6e      	ldr	r3, [pc, #440]	; (8005694 <HAL_DMA_Init+0x64c>)
 80054dc:	4413      	add	r3, r2
 80054de:	4a6e      	ldr	r2, [pc, #440]	; (8005698 <HAL_DMA_Init+0x650>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	009a      	lsls	r2, r3, #2
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f002 f9a9 	bl	8007844 <DMA_CalcBaseAndBitshift>
 80054f2:	4603      	mov	r3, r0
 80054f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	409a      	lsls	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	e008      	b.n	800551a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2240      	movs	r2, #64	; 0x40
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2203      	movs	r2, #3
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e0b7      	b.n	800568a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5f      	ldr	r2, [pc, #380]	; (800569c <HAL_DMA_Init+0x654>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d072      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5d      	ldr	r2, [pc, #372]	; (80056a0 <HAL_DMA_Init+0x658>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d06d      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a5c      	ldr	r2, [pc, #368]	; (80056a4 <HAL_DMA_Init+0x65c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d068      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a5a      	ldr	r2, [pc, #360]	; (80056a8 <HAL_DMA_Init+0x660>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d063      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a59      	ldr	r2, [pc, #356]	; (80056ac <HAL_DMA_Init+0x664>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d05e      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a57      	ldr	r2, [pc, #348]	; (80056b0 <HAL_DMA_Init+0x668>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d059      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a56      	ldr	r2, [pc, #344]	; (80056b4 <HAL_DMA_Init+0x66c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d054      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a54      	ldr	r2, [pc, #336]	; (80056b8 <HAL_DMA_Init+0x670>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d04f      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a53      	ldr	r2, [pc, #332]	; (80056bc <HAL_DMA_Init+0x674>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a51      	ldr	r2, [pc, #324]	; (80056c0 <HAL_DMA_Init+0x678>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a50      	ldr	r2, [pc, #320]	; (80056c4 <HAL_DMA_Init+0x67c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a4e      	ldr	r2, [pc, #312]	; (80056c8 <HAL_DMA_Init+0x680>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4d      	ldr	r2, [pc, #308]	; (80056cc <HAL_DMA_Init+0x684>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <HAL_DMA_Init+0x688>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4a      	ldr	r2, [pc, #296]	; (80056d4 <HAL_DMA_Init+0x68c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a48      	ldr	r2, [pc, #288]	; (80056d8 <HAL_DMA_Init+0x690>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a47      	ldr	r2, [pc, #284]	; (80056dc <HAL_DMA_Init+0x694>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a45      	ldr	r2, [pc, #276]	; (80056e0 <HAL_DMA_Init+0x698>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a44      	ldr	r2, [pc, #272]	; (80056e4 <HAL_DMA_Init+0x69c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a42      	ldr	r2, [pc, #264]	; (80056e8 <HAL_DMA_Init+0x6a0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a41      	ldr	r2, [pc, #260]	; (80056ec <HAL_DMA_Init+0x6a4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3f      	ldr	r2, [pc, #252]	; (80056f0 <HAL_DMA_Init+0x6a8>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <HAL_DMA_Init+0x6ac>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_Init+0x5c2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a3c      	ldr	r2, [pc, #240]	; (80056f8 <HAL_DMA_Init+0x6b0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d101      	bne.n	800560e <HAL_DMA_Init+0x5c6>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_DMA_Init+0x5c8>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d032      	beq.n	800567a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f002 fa43 	bl	8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d102      	bne.n	8005628 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800563c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_DMA_Init+0x620>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d80c      	bhi.n	8005668 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 fac0 	bl	8007bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	e008      	b.n	800567a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	a7fdabf8 	.word	0xa7fdabf8
 8005698:	cccccccd 	.word	0xcccccccd
 800569c:	40020010 	.word	0x40020010
 80056a0:	40020028 	.word	0x40020028
 80056a4:	40020040 	.word	0x40020040
 80056a8:	40020058 	.word	0x40020058
 80056ac:	40020070 	.word	0x40020070
 80056b0:	40020088 	.word	0x40020088
 80056b4:	400200a0 	.word	0x400200a0
 80056b8:	400200b8 	.word	0x400200b8
 80056bc:	40020410 	.word	0x40020410
 80056c0:	40020428 	.word	0x40020428
 80056c4:	40020440 	.word	0x40020440
 80056c8:	40020458 	.word	0x40020458
 80056cc:	40020470 	.word	0x40020470
 80056d0:	40020488 	.word	0x40020488
 80056d4:	400204a0 	.word	0x400204a0
 80056d8:	400204b8 	.word	0x400204b8
 80056dc:	58025408 	.word	0x58025408
 80056e0:	5802541c 	.word	0x5802541c
 80056e4:	58025430 	.word	0x58025430
 80056e8:	58025444 	.word	0x58025444
 80056ec:	58025458 	.word	0x58025458
 80056f0:	5802546c 	.word	0x5802546c
 80056f4:	58025480 	.word	0x58025480
 80056f8:	58025494 	.word	0x58025494

080056fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e226      	b.n	8005b66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_DMA_Start_IT+0x2a>
 8005722:	2302      	movs	r3, #2
 8005724:	e21f      	b.n	8005b66 <HAL_DMA_Start_IT+0x46a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	f040 820a 	bne.w	8005b50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a68      	ldr	r2, [pc, #416]	; (80058f0 <HAL_DMA_Start_IT+0x1f4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d04a      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a66      	ldr	r2, [pc, #408]	; (80058f4 <HAL_DMA_Start_IT+0x1f8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d045      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_DMA_Start_IT+0x1fc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d040      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a63      	ldr	r2, [pc, #396]	; (80058fc <HAL_DMA_Start_IT+0x200>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d03b      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a62      	ldr	r2, [pc, #392]	; (8005900 <HAL_DMA_Start_IT+0x204>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d036      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a60      	ldr	r2, [pc, #384]	; (8005904 <HAL_DMA_Start_IT+0x208>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d031      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a5f      	ldr	r2, [pc, #380]	; (8005908 <HAL_DMA_Start_IT+0x20c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d02c      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a5d      	ldr	r2, [pc, #372]	; (800590c <HAL_DMA_Start_IT+0x210>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d027      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a5c      	ldr	r2, [pc, #368]	; (8005910 <HAL_DMA_Start_IT+0x214>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5a      	ldr	r2, [pc, #360]	; (8005914 <HAL_DMA_Start_IT+0x218>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01d      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a59      	ldr	r2, [pc, #356]	; (8005918 <HAL_DMA_Start_IT+0x21c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a57      	ldr	r2, [pc, #348]	; (800591c <HAL_DMA_Start_IT+0x220>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a56      	ldr	r2, [pc, #344]	; (8005920 <HAL_DMA_Start_IT+0x224>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a54      	ldr	r2, [pc, #336]	; (8005924 <HAL_DMA_Start_IT+0x228>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a53      	ldr	r2, [pc, #332]	; (8005928 <HAL_DMA_Start_IT+0x22c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_DMA_Start_IT+0xee>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a51      	ldr	r2, [pc, #324]	; (800592c <HAL_DMA_Start_IT+0x230>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d108      	bne.n	80057fc <HAL_DMA_Start_IT+0x100>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e007      	b.n	800580c <HAL_DMA_Start_IT+0x110>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f001 fe6a 	bl	80074ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a34      	ldr	r2, [pc, #208]	; (80058f0 <HAL_DMA_Start_IT+0x1f4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d04a      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <HAL_DMA_Start_IT+0x1f8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d045      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a31      	ldr	r2, [pc, #196]	; (80058f8 <HAL_DMA_Start_IT+0x1fc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d040      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a30      	ldr	r2, [pc, #192]	; (80058fc <HAL_DMA_Start_IT+0x200>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d03b      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2e      	ldr	r2, [pc, #184]	; (8005900 <HAL_DMA_Start_IT+0x204>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d036      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <HAL_DMA_Start_IT+0x208>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d031      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <HAL_DMA_Start_IT+0x20c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d02c      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2a      	ldr	r2, [pc, #168]	; (800590c <HAL_DMA_Start_IT+0x210>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d027      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a28      	ldr	r2, [pc, #160]	; (8005910 <HAL_DMA_Start_IT+0x214>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d022      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a27      	ldr	r2, [pc, #156]	; (8005914 <HAL_DMA_Start_IT+0x218>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d01d      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a25      	ldr	r2, [pc, #148]	; (8005918 <HAL_DMA_Start_IT+0x21c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d018      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a24      	ldr	r2, [pc, #144]	; (800591c <HAL_DMA_Start_IT+0x220>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_DMA_Start_IT+0x224>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a21      	ldr	r2, [pc, #132]	; (8005924 <HAL_DMA_Start_IT+0x228>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_DMA_Start_IT+0x22c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_DMA_Start_IT+0x1bc>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1e      	ldr	r2, [pc, #120]	; (800592c <HAL_DMA_Start_IT+0x230>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_DMA_Start_IT+0x1c0>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_DMA_Start_IT+0x1c2>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d036      	beq.n	8005930 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 021e 	bic.w	r2, r3, #30
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0216 	orr.w	r2, r2, #22
 80058d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d03e      	beq.n	800595c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0208 	orr.w	r2, r2, #8
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e035      	b.n	800595c <HAL_DMA_Start_IT+0x260>
 80058f0:	40020010 	.word	0x40020010
 80058f4:	40020028 	.word	0x40020028
 80058f8:	40020040 	.word	0x40020040
 80058fc:	40020058 	.word	0x40020058
 8005900:	40020070 	.word	0x40020070
 8005904:	40020088 	.word	0x40020088
 8005908:	400200a0 	.word	0x400200a0
 800590c:	400200b8 	.word	0x400200b8
 8005910:	40020410 	.word	0x40020410
 8005914:	40020428 	.word	0x40020428
 8005918:	40020440 	.word	0x40020440
 800591c:	40020458 	.word	0x40020458
 8005920:	40020470 	.word	0x40020470
 8005924:	40020488 	.word	0x40020488
 8005928:	400204a0 	.word	0x400204a0
 800592c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 020e 	bic.w	r2, r3, #14
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 020a 	orr.w	r2, r2, #10
 8005942:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0204 	orr.w	r2, r2, #4
 800595a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a83      	ldr	r2, [pc, #524]	; (8005b70 <HAL_DMA_Start_IT+0x474>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d072      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a82      	ldr	r2, [pc, #520]	; (8005b74 <HAL_DMA_Start_IT+0x478>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d06d      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a80      	ldr	r2, [pc, #512]	; (8005b78 <HAL_DMA_Start_IT+0x47c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d068      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a7f      	ldr	r2, [pc, #508]	; (8005b7c <HAL_DMA_Start_IT+0x480>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d063      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a7d      	ldr	r2, [pc, #500]	; (8005b80 <HAL_DMA_Start_IT+0x484>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d05e      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a7c      	ldr	r2, [pc, #496]	; (8005b84 <HAL_DMA_Start_IT+0x488>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d059      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a7a      	ldr	r2, [pc, #488]	; (8005b88 <HAL_DMA_Start_IT+0x48c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d054      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a79      	ldr	r2, [pc, #484]	; (8005b8c <HAL_DMA_Start_IT+0x490>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d04f      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a77      	ldr	r2, [pc, #476]	; (8005b90 <HAL_DMA_Start_IT+0x494>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d04a      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a76      	ldr	r2, [pc, #472]	; (8005b94 <HAL_DMA_Start_IT+0x498>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d045      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a74      	ldr	r2, [pc, #464]	; (8005b98 <HAL_DMA_Start_IT+0x49c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d040      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a73      	ldr	r2, [pc, #460]	; (8005b9c <HAL_DMA_Start_IT+0x4a0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d03b      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a71      	ldr	r2, [pc, #452]	; (8005ba0 <HAL_DMA_Start_IT+0x4a4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d036      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a70      	ldr	r2, [pc, #448]	; (8005ba4 <HAL_DMA_Start_IT+0x4a8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d031      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a6e      	ldr	r2, [pc, #440]	; (8005ba8 <HAL_DMA_Start_IT+0x4ac>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02c      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6d      	ldr	r2, [pc, #436]	; (8005bac <HAL_DMA_Start_IT+0x4b0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d027      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a6b      	ldr	r2, [pc, #428]	; (8005bb0 <HAL_DMA_Start_IT+0x4b4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d022      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a6a      	ldr	r2, [pc, #424]	; (8005bb4 <HAL_DMA_Start_IT+0x4b8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d01d      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a68      	ldr	r2, [pc, #416]	; (8005bb8 <HAL_DMA_Start_IT+0x4bc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d018      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a67      	ldr	r2, [pc, #412]	; (8005bbc <HAL_DMA_Start_IT+0x4c0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a65      	ldr	r2, [pc, #404]	; (8005bc0 <HAL_DMA_Start_IT+0x4c4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00e      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a64      	ldr	r2, [pc, #400]	; (8005bc4 <HAL_DMA_Start_IT+0x4c8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d009      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a62      	ldr	r2, [pc, #392]	; (8005bc8 <HAL_DMA_Start_IT+0x4cc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_DMA_Start_IT+0x350>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a61      	ldr	r2, [pc, #388]	; (8005bcc <HAL_DMA_Start_IT+0x4d0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_DMA_Start_IT+0x354>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_DMA_Start_IT+0x356>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01a      	beq.n	8005a8c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a72:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a37      	ldr	r2, [pc, #220]	; (8005b70 <HAL_DMA_Start_IT+0x474>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d04a      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a36      	ldr	r2, [pc, #216]	; (8005b74 <HAL_DMA_Start_IT+0x478>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d045      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <HAL_DMA_Start_IT+0x47c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d040      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a33      	ldr	r2, [pc, #204]	; (8005b7c <HAL_DMA_Start_IT+0x480>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d03b      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <HAL_DMA_Start_IT+0x484>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d036      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a30      	ldr	r2, [pc, #192]	; (8005b84 <HAL_DMA_Start_IT+0x488>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d031      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a2e      	ldr	r2, [pc, #184]	; (8005b88 <HAL_DMA_Start_IT+0x48c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d02c      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a2d      	ldr	r2, [pc, #180]	; (8005b8c <HAL_DMA_Start_IT+0x490>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d027      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <HAL_DMA_Start_IT+0x494>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <HAL_DMA_Start_IT+0x498>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d01d      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <HAL_DMA_Start_IT+0x49c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <HAL_DMA_Start_IT+0x4a0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <HAL_DMA_Start_IT+0x4a4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <HAL_DMA_Start_IT+0x4a8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <HAL_DMA_Start_IT+0x4ac>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_DMA_Start_IT+0x430>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a21      	ldr	r2, [pc, #132]	; (8005bac <HAL_DMA_Start_IT+0x4b0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <HAL_DMA_Start_IT+0x442>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e012      	b.n	8005b64 <HAL_DMA_Start_IT+0x468>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0201 	orr.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e009      	b.n	8005b64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
 8005bb0:	58025408 	.word	0x58025408
 8005bb4:	5802541c 	.word	0x5802541c
 8005bb8:	58025430 	.word	0x58025430
 8005bbc:	58025444 	.word	0x58025444
 8005bc0:	58025458 	.word	0x58025458
 8005bc4:	5802546c 	.word	0x5802546c
 8005bc8:	58025480 	.word	0x58025480
 8005bcc:	58025494 	.word	0x58025494

08005bd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005bd8:	f7ff f91a 	bl	8004e10 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e2dc      	b.n	80061a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d008      	beq.n	8005c06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2280      	movs	r2, #128	; 0x80
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e2cd      	b.n	80061a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a76      	ldr	r2, [pc, #472]	; (8005de4 <HAL_DMA_Abort+0x214>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d04a      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a74      	ldr	r2, [pc, #464]	; (8005de8 <HAL_DMA_Abort+0x218>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d045      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a73      	ldr	r2, [pc, #460]	; (8005dec <HAL_DMA_Abort+0x21c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d040      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a71      	ldr	r2, [pc, #452]	; (8005df0 <HAL_DMA_Abort+0x220>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d03b      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a70      	ldr	r2, [pc, #448]	; (8005df4 <HAL_DMA_Abort+0x224>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d036      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a6e      	ldr	r2, [pc, #440]	; (8005df8 <HAL_DMA_Abort+0x228>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d031      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a6d      	ldr	r2, [pc, #436]	; (8005dfc <HAL_DMA_Abort+0x22c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d02c      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a6b      	ldr	r2, [pc, #428]	; (8005e00 <HAL_DMA_Abort+0x230>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d027      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a6a      	ldr	r2, [pc, #424]	; (8005e04 <HAL_DMA_Abort+0x234>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a68      	ldr	r2, [pc, #416]	; (8005e08 <HAL_DMA_Abort+0x238>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a67      	ldr	r2, [pc, #412]	; (8005e0c <HAL_DMA_Abort+0x23c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a65      	ldr	r2, [pc, #404]	; (8005e10 <HAL_DMA_Abort+0x240>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a64      	ldr	r2, [pc, #400]	; (8005e14 <HAL_DMA_Abort+0x244>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a62      	ldr	r2, [pc, #392]	; (8005e18 <HAL_DMA_Abort+0x248>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a61      	ldr	r2, [pc, #388]	; (8005e1c <HAL_DMA_Abort+0x24c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_DMA_Abort+0xd6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a5f      	ldr	r2, [pc, #380]	; (8005e20 <HAL_DMA_Abort+0x250>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <HAL_DMA_Abort+0xda>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <HAL_DMA_Abort+0xdc>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 021e 	bic.w	r2, r2, #30
 8005cbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e00a      	b.n	8005cee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 020e 	bic.w	r2, r2, #14
 8005ce6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3c      	ldr	r2, [pc, #240]	; (8005de4 <HAL_DMA_Abort+0x214>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d072      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a3a      	ldr	r2, [pc, #232]	; (8005de8 <HAL_DMA_Abort+0x218>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d06d      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a39      	ldr	r2, [pc, #228]	; (8005dec <HAL_DMA_Abort+0x21c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d068      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a37      	ldr	r2, [pc, #220]	; (8005df0 <HAL_DMA_Abort+0x220>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d063      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a36      	ldr	r2, [pc, #216]	; (8005df4 <HAL_DMA_Abort+0x224>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d05e      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a34      	ldr	r2, [pc, #208]	; (8005df8 <HAL_DMA_Abort+0x228>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d059      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a33      	ldr	r2, [pc, #204]	; (8005dfc <HAL_DMA_Abort+0x22c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d054      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a31      	ldr	r2, [pc, #196]	; (8005e00 <HAL_DMA_Abort+0x230>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d04f      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a30      	ldr	r2, [pc, #192]	; (8005e04 <HAL_DMA_Abort+0x234>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d04a      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2e      	ldr	r2, [pc, #184]	; (8005e08 <HAL_DMA_Abort+0x238>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d045      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2d      	ldr	r2, [pc, #180]	; (8005e0c <HAL_DMA_Abort+0x23c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d040      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2b      	ldr	r2, [pc, #172]	; (8005e10 <HAL_DMA_Abort+0x240>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d03b      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <HAL_DMA_Abort+0x244>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d036      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <HAL_DMA_Abort+0x248>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d031      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <HAL_DMA_Abort+0x24c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d02c      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a25      	ldr	r2, [pc, #148]	; (8005e20 <HAL_DMA_Abort+0x250>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d027      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a24      	ldr	r2, [pc, #144]	; (8005e24 <HAL_DMA_Abort+0x254>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d022      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_DMA_Abort+0x258>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01d      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <HAL_DMA_Abort+0x25c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <HAL_DMA_Abort+0x260>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <HAL_DMA_Abort+0x264>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <HAL_DMA_Abort+0x268>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1b      	ldr	r2, [pc, #108]	; (8005e3c <HAL_DMA_Abort+0x26c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_DMA_Abort+0x20e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <HAL_DMA_Abort+0x270>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d132      	bne.n	8005e44 <HAL_DMA_Abort+0x274>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e031      	b.n	8005e46 <HAL_DMA_Abort+0x276>
 8005de2:	bf00      	nop
 8005de4:	40020010 	.word	0x40020010
 8005de8:	40020028 	.word	0x40020028
 8005dec:	40020040 	.word	0x40020040
 8005df0:	40020058 	.word	0x40020058
 8005df4:	40020070 	.word	0x40020070
 8005df8:	40020088 	.word	0x40020088
 8005dfc:	400200a0 	.word	0x400200a0
 8005e00:	400200b8 	.word	0x400200b8
 8005e04:	40020410 	.word	0x40020410
 8005e08:	40020428 	.word	0x40020428
 8005e0c:	40020440 	.word	0x40020440
 8005e10:	40020458 	.word	0x40020458
 8005e14:	40020470 	.word	0x40020470
 8005e18:	40020488 	.word	0x40020488
 8005e1c:	400204a0 	.word	0x400204a0
 8005e20:	400204b8 	.word	0x400204b8
 8005e24:	58025408 	.word	0x58025408
 8005e28:	5802541c 	.word	0x5802541c
 8005e2c:	58025430 	.word	0x58025430
 8005e30:	58025444 	.word	0x58025444
 8005e34:	58025458 	.word	0x58025458
 8005e38:	5802546c 	.word	0x5802546c
 8005e3c:	58025480 	.word	0x58025480
 8005e40:	58025494 	.word	0x58025494
 8005e44:	2300      	movs	r3, #0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6d      	ldr	r2, [pc, #436]	; (8006014 <HAL_DMA_Abort+0x444>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d04a      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6b      	ldr	r2, [pc, #428]	; (8006018 <HAL_DMA_Abort+0x448>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d045      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6a      	ldr	r2, [pc, #424]	; (800601c <HAL_DMA_Abort+0x44c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d040      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a68      	ldr	r2, [pc, #416]	; (8006020 <HAL_DMA_Abort+0x450>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d03b      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a67      	ldr	r2, [pc, #412]	; (8006024 <HAL_DMA_Abort+0x454>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d036      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a65      	ldr	r2, [pc, #404]	; (8006028 <HAL_DMA_Abort+0x458>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d031      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a64      	ldr	r2, [pc, #400]	; (800602c <HAL_DMA_Abort+0x45c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d02c      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a62      	ldr	r2, [pc, #392]	; (8006030 <HAL_DMA_Abort+0x460>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d027      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a61      	ldr	r2, [pc, #388]	; (8006034 <HAL_DMA_Abort+0x464>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a5f      	ldr	r2, [pc, #380]	; (8006038 <HAL_DMA_Abort+0x468>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01d      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5e      	ldr	r2, [pc, #376]	; (800603c <HAL_DMA_Abort+0x46c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d018      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a5c      	ldr	r2, [pc, #368]	; (8006040 <HAL_DMA_Abort+0x470>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a5b      	ldr	r2, [pc, #364]	; (8006044 <HAL_DMA_Abort+0x474>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00e      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a59      	ldr	r2, [pc, #356]	; (8006048 <HAL_DMA_Abort+0x478>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a58      	ldr	r2, [pc, #352]	; (800604c <HAL_DMA_Abort+0x47c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_DMA_Abort+0x32a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a56      	ldr	r2, [pc, #344]	; (8006050 <HAL_DMA_Abort+0x480>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <HAL_DMA_Abort+0x33c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e007      	b.n	8005f1c <HAL_DMA_Abort+0x34c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f1c:	e013      	b.n	8005f46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f1e:	f7fe ff77 	bl	8004e10 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d90c      	bls.n	8005f46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2203      	movs	r2, #3
 8005f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e12d      	b.n	80061a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2f      	ldr	r2, [pc, #188]	; (8006014 <HAL_DMA_Abort+0x444>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d04a      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2d      	ldr	r2, [pc, #180]	; (8006018 <HAL_DMA_Abort+0x448>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d045      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2c      	ldr	r2, [pc, #176]	; (800601c <HAL_DMA_Abort+0x44c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d040      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <HAL_DMA_Abort+0x450>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d03b      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a29      	ldr	r2, [pc, #164]	; (8006024 <HAL_DMA_Abort+0x454>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d036      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a27      	ldr	r2, [pc, #156]	; (8006028 <HAL_DMA_Abort+0x458>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d031      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a26      	ldr	r2, [pc, #152]	; (800602c <HAL_DMA_Abort+0x45c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d02c      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a24      	ldr	r2, [pc, #144]	; (8006030 <HAL_DMA_Abort+0x460>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d027      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a23      	ldr	r2, [pc, #140]	; (8006034 <HAL_DMA_Abort+0x464>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d022      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a21      	ldr	r2, [pc, #132]	; (8006038 <HAL_DMA_Abort+0x468>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a20      	ldr	r2, [pc, #128]	; (800603c <HAL_DMA_Abort+0x46c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d018      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <HAL_DMA_Abort+0x470>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_DMA_Abort+0x474>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_DMA_Abort+0x478>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_DMA_Abort+0x47c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_DMA_Abort+0x422>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_DMA_Abort+0x480>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <HAL_DMA_Abort+0x426>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <HAL_DMA_Abort+0x428>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d02b      	beq.n	8006054 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006000:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	223f      	movs	r2, #63	; 0x3f
 800600c:	409a      	lsls	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	e02a      	b.n	800606a <HAL_DMA_Abort+0x49a>
 8006014:	40020010 	.word	0x40020010
 8006018:	40020028 	.word	0x40020028
 800601c:	40020040 	.word	0x40020040
 8006020:	40020058 	.word	0x40020058
 8006024:	40020070 	.word	0x40020070
 8006028:	40020088 	.word	0x40020088
 800602c:	400200a0 	.word	0x400200a0
 8006030:	400200b8 	.word	0x400200b8
 8006034:	40020410 	.word	0x40020410
 8006038:	40020428 	.word	0x40020428
 800603c:	40020440 	.word	0x40020440
 8006040:	40020458 	.word	0x40020458
 8006044:	40020470 	.word	0x40020470
 8006048:	40020488 	.word	0x40020488
 800604c:	400204a0 	.word	0x400204a0
 8006050:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006058:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	2201      	movs	r2, #1
 8006064:	409a      	lsls	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a4f      	ldr	r2, [pc, #316]	; (80061ac <HAL_DMA_Abort+0x5dc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d072      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a4d      	ldr	r2, [pc, #308]	; (80061b0 <HAL_DMA_Abort+0x5e0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d06d      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a4c      	ldr	r2, [pc, #304]	; (80061b4 <HAL_DMA_Abort+0x5e4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d068      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a4a      	ldr	r2, [pc, #296]	; (80061b8 <HAL_DMA_Abort+0x5e8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d063      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a49      	ldr	r2, [pc, #292]	; (80061bc <HAL_DMA_Abort+0x5ec>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d05e      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a47      	ldr	r2, [pc, #284]	; (80061c0 <HAL_DMA_Abort+0x5f0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d059      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a46      	ldr	r2, [pc, #280]	; (80061c4 <HAL_DMA_Abort+0x5f4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d054      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a44      	ldr	r2, [pc, #272]	; (80061c8 <HAL_DMA_Abort+0x5f8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d04f      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a43      	ldr	r2, [pc, #268]	; (80061cc <HAL_DMA_Abort+0x5fc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d04a      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a41      	ldr	r2, [pc, #260]	; (80061d0 <HAL_DMA_Abort+0x600>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d045      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <HAL_DMA_Abort+0x604>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d040      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a3e      	ldr	r2, [pc, #248]	; (80061d8 <HAL_DMA_Abort+0x608>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d03b      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a3d      	ldr	r2, [pc, #244]	; (80061dc <HAL_DMA_Abort+0x60c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d036      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a3b      	ldr	r2, [pc, #236]	; (80061e0 <HAL_DMA_Abort+0x610>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d031      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a3a      	ldr	r2, [pc, #232]	; (80061e4 <HAL_DMA_Abort+0x614>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d02c      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a38      	ldr	r2, [pc, #224]	; (80061e8 <HAL_DMA_Abort+0x618>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d027      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a37      	ldr	r2, [pc, #220]	; (80061ec <HAL_DMA_Abort+0x61c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d022      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a35      	ldr	r2, [pc, #212]	; (80061f0 <HAL_DMA_Abort+0x620>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d01d      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a34      	ldr	r2, [pc, #208]	; (80061f4 <HAL_DMA_Abort+0x624>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d018      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a32      	ldr	r2, [pc, #200]	; (80061f8 <HAL_DMA_Abort+0x628>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a31      	ldr	r2, [pc, #196]	; (80061fc <HAL_DMA_Abort+0x62c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2f      	ldr	r2, [pc, #188]	; (8006200 <HAL_DMA_Abort+0x630>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2e      	ldr	r2, [pc, #184]	; (8006204 <HAL_DMA_Abort+0x634>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_DMA_Abort+0x58a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2c      	ldr	r2, [pc, #176]	; (8006208 <HAL_DMA_Abort+0x638>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <HAL_DMA_Abort+0x58e>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <HAL_DMA_Abort+0x590>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800616c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006184:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800618e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8
 80061ec:	58025408 	.word	0x58025408
 80061f0:	5802541c 	.word	0x5802541c
 80061f4:	58025430 	.word	0x58025430
 80061f8:	58025444 	.word	0x58025444
 80061fc:	58025458 	.word	0x58025458
 8006200:	5802546c 	.word	0x5802546c
 8006204:	58025480 	.word	0x58025480
 8006208:	58025494 	.word	0x58025494

0800620c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e237      	b.n	800668e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d004      	beq.n	8006234 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2280      	movs	r2, #128	; 0x80
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e22c      	b.n	800668e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a5c      	ldr	r2, [pc, #368]	; (80063ac <HAL_DMA_Abort_IT+0x1a0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d04a      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a5b      	ldr	r2, [pc, #364]	; (80063b0 <HAL_DMA_Abort_IT+0x1a4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d045      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a59      	ldr	r2, [pc, #356]	; (80063b4 <HAL_DMA_Abort_IT+0x1a8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d040      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a58      	ldr	r2, [pc, #352]	; (80063b8 <HAL_DMA_Abort_IT+0x1ac>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d03b      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a56      	ldr	r2, [pc, #344]	; (80063bc <HAL_DMA_Abort_IT+0x1b0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d036      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a55      	ldr	r2, [pc, #340]	; (80063c0 <HAL_DMA_Abort_IT+0x1b4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d031      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a53      	ldr	r2, [pc, #332]	; (80063c4 <HAL_DMA_Abort_IT+0x1b8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d02c      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a52      	ldr	r2, [pc, #328]	; (80063c8 <HAL_DMA_Abort_IT+0x1bc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d027      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a50      	ldr	r2, [pc, #320]	; (80063cc <HAL_DMA_Abort_IT+0x1c0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d022      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a4f      	ldr	r2, [pc, #316]	; (80063d0 <HAL_DMA_Abort_IT+0x1c4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d01d      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a4d      	ldr	r2, [pc, #308]	; (80063d4 <HAL_DMA_Abort_IT+0x1c8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d018      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a4c      	ldr	r2, [pc, #304]	; (80063d8 <HAL_DMA_Abort_IT+0x1cc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d013      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a4a      	ldr	r2, [pc, #296]	; (80063dc <HAL_DMA_Abort_IT+0x1d0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00e      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a49      	ldr	r2, [pc, #292]	; (80063e0 <HAL_DMA_Abort_IT+0x1d4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d009      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a47      	ldr	r2, [pc, #284]	; (80063e4 <HAL_DMA_Abort_IT+0x1d8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xc8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a46      	ldr	r2, [pc, #280]	; (80063e8 <HAL_DMA_Abort_IT+0x1dc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d101      	bne.n	80062d8 <HAL_DMA_Abort_IT+0xcc>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <HAL_DMA_Abort_IT+0xce>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8086 	beq.w	80063ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2204      	movs	r2, #4
 80062e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2f      	ldr	r2, [pc, #188]	; (80063ac <HAL_DMA_Abort_IT+0x1a0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d04a      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2e      	ldr	r2, [pc, #184]	; (80063b0 <HAL_DMA_Abort_IT+0x1a4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d045      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2c      	ldr	r2, [pc, #176]	; (80063b4 <HAL_DMA_Abort_IT+0x1a8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d040      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2b      	ldr	r2, [pc, #172]	; (80063b8 <HAL_DMA_Abort_IT+0x1ac>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d03b      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a29      	ldr	r2, [pc, #164]	; (80063bc <HAL_DMA_Abort_IT+0x1b0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d036      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a28      	ldr	r2, [pc, #160]	; (80063c0 <HAL_DMA_Abort_IT+0x1b4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d031      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a26      	ldr	r2, [pc, #152]	; (80063c4 <HAL_DMA_Abort_IT+0x1b8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d02c      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a25      	ldr	r2, [pc, #148]	; (80063c8 <HAL_DMA_Abort_IT+0x1bc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d027      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a23      	ldr	r2, [pc, #140]	; (80063cc <HAL_DMA_Abort_IT+0x1c0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d022      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <HAL_DMA_Abort_IT+0x1c4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d01d      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a20      	ldr	r2, [pc, #128]	; (80063d4 <HAL_DMA_Abort_IT+0x1c8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d018      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1f      	ldr	r2, [pc, #124]	; (80063d8 <HAL_DMA_Abort_IT+0x1cc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <HAL_DMA_Abort_IT+0x1d0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00e      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <HAL_DMA_Abort_IT+0x1d4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <HAL_DMA_Abort_IT+0x1d8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_DMA_Abort_IT+0x17c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <HAL_DMA_Abort_IT+0x1dc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <HAL_DMA_Abort_IT+0x18e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e178      	b.n	800668c <HAL_DMA_Abort_IT+0x480>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e16f      	b.n	800668c <HAL_DMA_Abort_IT+0x480>
 80063ac:	40020010 	.word	0x40020010
 80063b0:	40020028 	.word	0x40020028
 80063b4:	40020040 	.word	0x40020040
 80063b8:	40020058 	.word	0x40020058
 80063bc:	40020070 	.word	0x40020070
 80063c0:	40020088 	.word	0x40020088
 80063c4:	400200a0 	.word	0x400200a0
 80063c8:	400200b8 	.word	0x400200b8
 80063cc:	40020410 	.word	0x40020410
 80063d0:	40020428 	.word	0x40020428
 80063d4:	40020440 	.word	0x40020440
 80063d8:	40020458 	.word	0x40020458
 80063dc:	40020470 	.word	0x40020470
 80063e0:	40020488 	.word	0x40020488
 80063e4:	400204a0 	.word	0x400204a0
 80063e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 020e 	bic.w	r2, r2, #14
 80063fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6c      	ldr	r2, [pc, #432]	; (80065b4 <HAL_DMA_Abort_IT+0x3a8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d04a      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6b      	ldr	r2, [pc, #428]	; (80065b8 <HAL_DMA_Abort_IT+0x3ac>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d045      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a69      	ldr	r2, [pc, #420]	; (80065bc <HAL_DMA_Abort_IT+0x3b0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d040      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a68      	ldr	r2, [pc, #416]	; (80065c0 <HAL_DMA_Abort_IT+0x3b4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d03b      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a66      	ldr	r2, [pc, #408]	; (80065c4 <HAL_DMA_Abort_IT+0x3b8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d036      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a65      	ldr	r2, [pc, #404]	; (80065c8 <HAL_DMA_Abort_IT+0x3bc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d031      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a63      	ldr	r2, [pc, #396]	; (80065cc <HAL_DMA_Abort_IT+0x3c0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d02c      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a62      	ldr	r2, [pc, #392]	; (80065d0 <HAL_DMA_Abort_IT+0x3c4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d027      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a60      	ldr	r2, [pc, #384]	; (80065d4 <HAL_DMA_Abort_IT+0x3c8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d022      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a5f      	ldr	r2, [pc, #380]	; (80065d8 <HAL_DMA_Abort_IT+0x3cc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d01d      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a5d      	ldr	r2, [pc, #372]	; (80065dc <HAL_DMA_Abort_IT+0x3d0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d018      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a5c      	ldr	r2, [pc, #368]	; (80065e0 <HAL_DMA_Abort_IT+0x3d4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5a      	ldr	r2, [pc, #360]	; (80065e4 <HAL_DMA_Abort_IT+0x3d8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00e      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a59      	ldr	r2, [pc, #356]	; (80065e8 <HAL_DMA_Abort_IT+0x3dc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a57      	ldr	r2, [pc, #348]	; (80065ec <HAL_DMA_Abort_IT+0x3e0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_DMA_Abort_IT+0x290>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a56      	ldr	r2, [pc, #344]	; (80065f0 <HAL_DMA_Abort_IT+0x3e4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <HAL_DMA_Abort_IT+0x2a2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e007      	b.n	80064be <HAL_DMA_Abort_IT+0x2b2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3c      	ldr	r2, [pc, #240]	; (80065b4 <HAL_DMA_Abort_IT+0x3a8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d072      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <HAL_DMA_Abort_IT+0x3ac>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d06d      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a39      	ldr	r2, [pc, #228]	; (80065bc <HAL_DMA_Abort_IT+0x3b0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d068      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a37      	ldr	r2, [pc, #220]	; (80065c0 <HAL_DMA_Abort_IT+0x3b4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d063      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a36      	ldr	r2, [pc, #216]	; (80065c4 <HAL_DMA_Abort_IT+0x3b8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d05e      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a34      	ldr	r2, [pc, #208]	; (80065c8 <HAL_DMA_Abort_IT+0x3bc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d059      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a33      	ldr	r2, [pc, #204]	; (80065cc <HAL_DMA_Abort_IT+0x3c0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d054      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a31      	ldr	r2, [pc, #196]	; (80065d0 <HAL_DMA_Abort_IT+0x3c4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d04f      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a30      	ldr	r2, [pc, #192]	; (80065d4 <HAL_DMA_Abort_IT+0x3c8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d04a      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2e      	ldr	r2, [pc, #184]	; (80065d8 <HAL_DMA_Abort_IT+0x3cc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d045      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <HAL_DMA_Abort_IT+0x3d0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d040      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2b      	ldr	r2, [pc, #172]	; (80065e0 <HAL_DMA_Abort_IT+0x3d4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d03b      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <HAL_DMA_Abort_IT+0x3d8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d036      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <HAL_DMA_Abort_IT+0x3dc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d031      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a27      	ldr	r2, [pc, #156]	; (80065ec <HAL_DMA_Abort_IT+0x3e0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d02c      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <HAL_DMA_Abort_IT+0x3e4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d027      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <HAL_DMA_Abort_IT+0x3e8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <HAL_DMA_Abort_IT+0x3ec>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a21      	ldr	r2, [pc, #132]	; (80065fc <HAL_DMA_Abort_IT+0x3f0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_DMA_Abort_IT+0x3f4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <HAL_DMA_Abort_IT+0x3f8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_DMA_Abort_IT+0x3fc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_DMA_Abort_IT+0x400>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_DMA_Abort_IT+0x3a2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_DMA_Abort_IT+0x404>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d132      	bne.n	8006614 <HAL_DMA_Abort_IT+0x408>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e031      	b.n	8006616 <HAL_DMA_Abort_IT+0x40a>
 80065b2:	bf00      	nop
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8
 80065f4:	58025408 	.word	0x58025408
 80065f8:	5802541c 	.word	0x5802541c
 80065fc:	58025430 	.word	0x58025430
 8006600:	58025444 	.word	0x58025444
 8006604:	58025458 	.word	0x58025458
 8006608:	5802546c 	.word	0x5802546c
 800660c:	58025480 	.word	0x58025480
 8006610:	58025494 	.word	0x58025494
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d028      	beq.n	800666c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006628:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2201      	movs	r2, #1
 800663a:	409a      	lsls	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006648:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00c      	beq.n	800666c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006660:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800666a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop

08006698 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066a4:	4b67      	ldr	r3, [pc, #412]	; (8006844 <HAL_DMA_IRQHandler+0x1ac>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a67      	ldr	r2, [pc, #412]	; (8006848 <HAL_DMA_IRQHandler+0x1b0>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	0a9b      	lsrs	r3, r3, #10
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a5f      	ldr	r2, [pc, #380]	; (800684c <HAL_DMA_IRQHandler+0x1b4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d04a      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a5d      	ldr	r2, [pc, #372]	; (8006850 <HAL_DMA_IRQHandler+0x1b8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d045      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a5c      	ldr	r2, [pc, #368]	; (8006854 <HAL_DMA_IRQHandler+0x1bc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d040      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a5a      	ldr	r2, [pc, #360]	; (8006858 <HAL_DMA_IRQHandler+0x1c0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d03b      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a59      	ldr	r2, [pc, #356]	; (800685c <HAL_DMA_IRQHandler+0x1c4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d036      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a57      	ldr	r2, [pc, #348]	; (8006860 <HAL_DMA_IRQHandler+0x1c8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d031      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a56      	ldr	r2, [pc, #344]	; (8006864 <HAL_DMA_IRQHandler+0x1cc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d02c      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a54      	ldr	r2, [pc, #336]	; (8006868 <HAL_DMA_IRQHandler+0x1d0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d027      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a53      	ldr	r2, [pc, #332]	; (800686c <HAL_DMA_IRQHandler+0x1d4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a51      	ldr	r2, [pc, #324]	; (8006870 <HAL_DMA_IRQHandler+0x1d8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01d      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a50      	ldr	r2, [pc, #320]	; (8006874 <HAL_DMA_IRQHandler+0x1dc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a4e      	ldr	r2, [pc, #312]	; (8006878 <HAL_DMA_IRQHandler+0x1e0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a4d      	ldr	r2, [pc, #308]	; (800687c <HAL_DMA_IRQHandler+0x1e4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a4b      	ldr	r2, [pc, #300]	; (8006880 <HAL_DMA_IRQHandler+0x1e8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a4a      	ldr	r2, [pc, #296]	; (8006884 <HAL_DMA_IRQHandler+0x1ec>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_DMA_IRQHandler+0xd2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a48      	ldr	r2, [pc, #288]	; (8006888 <HAL_DMA_IRQHandler+0x1f0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_DMA_IRQHandler+0xd6>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <HAL_DMA_IRQHandler+0xd8>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 842b 	beq.w	8006fcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2208      	movs	r2, #8
 8006780:	409a      	lsls	r2, r3
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80a2 	beq.w	80068d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a2e      	ldr	r2, [pc, #184]	; (800684c <HAL_DMA_IRQHandler+0x1b4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d04a      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2d      	ldr	r2, [pc, #180]	; (8006850 <HAL_DMA_IRQHandler+0x1b8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d045      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2b      	ldr	r2, [pc, #172]	; (8006854 <HAL_DMA_IRQHandler+0x1bc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d040      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <HAL_DMA_IRQHandler+0x1c0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d03b      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a28      	ldr	r2, [pc, #160]	; (800685c <HAL_DMA_IRQHandler+0x1c4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d036      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a27      	ldr	r2, [pc, #156]	; (8006860 <HAL_DMA_IRQHandler+0x1c8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d031      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a25      	ldr	r2, [pc, #148]	; (8006864 <HAL_DMA_IRQHandler+0x1cc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02c      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a24      	ldr	r2, [pc, #144]	; (8006868 <HAL_DMA_IRQHandler+0x1d0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d027      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a22      	ldr	r2, [pc, #136]	; (800686c <HAL_DMA_IRQHandler+0x1d4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <HAL_DMA_IRQHandler+0x1d8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d01d      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <HAL_DMA_IRQHandler+0x1dc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d018      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <HAL_DMA_IRQHandler+0x1e0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_DMA_IRQHandler+0x1e4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_DMA_IRQHandler+0x1e8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a19      	ldr	r2, [pc, #100]	; (8006884 <HAL_DMA_IRQHandler+0x1ec>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_DMA_IRQHandler+0x194>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a18      	ldr	r2, [pc, #96]	; (8006888 <HAL_DMA_IRQHandler+0x1f0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d12f      	bne.n	800688c <HAL_DMA_IRQHandler+0x1f4>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bf14      	ite	ne
 800683a:	2301      	movne	r3, #1
 800683c:	2300      	moveq	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	e02e      	b.n	80068a0 <HAL_DMA_IRQHandler+0x208>
 8006842:	bf00      	nop
 8006844:	24000000 	.word	0x24000000
 8006848:	1b4e81b5 	.word	0x1b4e81b5
 800684c:	40020010 	.word	0x40020010
 8006850:	40020028 	.word	0x40020028
 8006854:	40020040 	.word	0x40020040
 8006858:	40020058 	.word	0x40020058
 800685c:	40020070 	.word	0x40020070
 8006860:	40020088 	.word	0x40020088
 8006864:	400200a0 	.word	0x400200a0
 8006868:	400200b8 	.word	0x400200b8
 800686c:	40020410 	.word	0x40020410
 8006870:	40020428 	.word	0x40020428
 8006874:	40020440 	.word	0x40020440
 8006878:	40020458 	.word	0x40020458
 800687c:	40020470 	.word	0x40020470
 8006880:	40020488 	.word	0x40020488
 8006884:	400204a0 	.word	0x400204a0
 8006888:	400204b8 	.word	0x400204b8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	bf14      	ite	ne
 800689a:	2301      	movne	r3, #1
 800689c:	2300      	moveq	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d015      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2208      	movs	r2, #8
 80068be:	409a      	lsls	r2, r3
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c8:	f043 0201 	orr.w	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	fa22 f303 	lsr.w	r3, r2, r3
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d06e      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a69      	ldr	r2, [pc, #420]	; (8006a90 <HAL_DMA_IRQHandler+0x3f8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d04a      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a67      	ldr	r2, [pc, #412]	; (8006a94 <HAL_DMA_IRQHandler+0x3fc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d045      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a66      	ldr	r2, [pc, #408]	; (8006a98 <HAL_DMA_IRQHandler+0x400>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d040      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a64      	ldr	r2, [pc, #400]	; (8006a9c <HAL_DMA_IRQHandler+0x404>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d03b      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a63      	ldr	r2, [pc, #396]	; (8006aa0 <HAL_DMA_IRQHandler+0x408>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d036      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a61      	ldr	r2, [pc, #388]	; (8006aa4 <HAL_DMA_IRQHandler+0x40c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d031      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a60      	ldr	r2, [pc, #384]	; (8006aa8 <HAL_DMA_IRQHandler+0x410>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d02c      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a5e      	ldr	r2, [pc, #376]	; (8006aac <HAL_DMA_IRQHandler+0x414>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d027      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a5d      	ldr	r2, [pc, #372]	; (8006ab0 <HAL_DMA_IRQHandler+0x418>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d022      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a5b      	ldr	r2, [pc, #364]	; (8006ab4 <HAL_DMA_IRQHandler+0x41c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01d      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a5a      	ldr	r2, [pc, #360]	; (8006ab8 <HAL_DMA_IRQHandler+0x420>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d018      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a58      	ldr	r2, [pc, #352]	; (8006abc <HAL_DMA_IRQHandler+0x424>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a57      	ldr	r2, [pc, #348]	; (8006ac0 <HAL_DMA_IRQHandler+0x428>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00e      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a55      	ldr	r2, [pc, #340]	; (8006ac4 <HAL_DMA_IRQHandler+0x42c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a54      	ldr	r2, [pc, #336]	; (8006ac8 <HAL_DMA_IRQHandler+0x430>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <HAL_DMA_IRQHandler+0x2ee>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a52      	ldr	r2, [pc, #328]	; (8006acc <HAL_DMA_IRQHandler+0x434>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10a      	bne.n	800699c <HAL_DMA_IRQHandler+0x304>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006990:	2b00      	cmp	r3, #0
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e003      	b.n	80069a4 <HAL_DMA_IRQHandler+0x30c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00d      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2201      	movs	r2, #1
 80069b2:	409a      	lsls	r2, r3
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f043 0202 	orr.w	r2, r3, #2
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	2204      	movs	r2, #4
 80069ce:	409a      	lsls	r2, r3
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 808f 	beq.w	8006af8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <HAL_DMA_IRQHandler+0x3f8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d04a      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a2a      	ldr	r2, [pc, #168]	; (8006a94 <HAL_DMA_IRQHandler+0x3fc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d045      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <HAL_DMA_IRQHandler+0x400>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d040      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <HAL_DMA_IRQHandler+0x404>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d03b      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <HAL_DMA_IRQHandler+0x408>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d036      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a24      	ldr	r2, [pc, #144]	; (8006aa4 <HAL_DMA_IRQHandler+0x40c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d031      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <HAL_DMA_IRQHandler+0x410>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d02c      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a21      	ldr	r2, [pc, #132]	; (8006aac <HAL_DMA_IRQHandler+0x414>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d027      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <HAL_DMA_IRQHandler+0x418>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d022      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1e      	ldr	r2, [pc, #120]	; (8006ab4 <HAL_DMA_IRQHandler+0x41c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1d      	ldr	r2, [pc, #116]	; (8006ab8 <HAL_DMA_IRQHandler+0x420>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d018      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <HAL_DMA_IRQHandler+0x424>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <HAL_DMA_IRQHandler+0x428>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a18      	ldr	r2, [pc, #96]	; (8006ac4 <HAL_DMA_IRQHandler+0x42c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <HAL_DMA_IRQHandler+0x430>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x3e2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a15      	ldr	r2, [pc, #84]	; (8006acc <HAL_DMA_IRQHandler+0x434>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d12a      	bne.n	8006ad0 <HAL_DMA_IRQHandler+0x438>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e023      	b.n	8006ad8 <HAL_DMA_IRQHandler+0x440>
 8006a90:	40020010 	.word	0x40020010
 8006a94:	40020028 	.word	0x40020028
 8006a98:	40020040 	.word	0x40020040
 8006a9c:	40020058 	.word	0x40020058
 8006aa0:	40020070 	.word	0x40020070
 8006aa4:	40020088 	.word	0x40020088
 8006aa8:	400200a0 	.word	0x400200a0
 8006aac:	400200b8 	.word	0x400200b8
 8006ab0:	40020410 	.word	0x40020410
 8006ab4:	40020428 	.word	0x40020428
 8006ab8:	40020440 	.word	0x40020440
 8006abc:	40020458 	.word	0x40020458
 8006ac0:	40020470 	.word	0x40020470
 8006ac4:	40020488 	.word	0x40020488
 8006ac8:	400204a0 	.word	0x400204a0
 8006acc:	400204b8 	.word	0x400204b8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00d      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	f043 0204 	orr.w	r2, r3, #4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2210      	movs	r2, #16
 8006b02:	409a      	lsls	r2, r3
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80a6 	beq.w	8006c5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a85      	ldr	r2, [pc, #532]	; (8006d28 <HAL_DMA_IRQHandler+0x690>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d04a      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a83      	ldr	r2, [pc, #524]	; (8006d2c <HAL_DMA_IRQHandler+0x694>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d045      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a82      	ldr	r2, [pc, #520]	; (8006d30 <HAL_DMA_IRQHandler+0x698>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d040      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a80      	ldr	r2, [pc, #512]	; (8006d34 <HAL_DMA_IRQHandler+0x69c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d03b      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a7f      	ldr	r2, [pc, #508]	; (8006d38 <HAL_DMA_IRQHandler+0x6a0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d036      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7d      	ldr	r2, [pc, #500]	; (8006d3c <HAL_DMA_IRQHandler+0x6a4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d031      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a7c      	ldr	r2, [pc, #496]	; (8006d40 <HAL_DMA_IRQHandler+0x6a8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d02c      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a7a      	ldr	r2, [pc, #488]	; (8006d44 <HAL_DMA_IRQHandler+0x6ac>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d027      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a79      	ldr	r2, [pc, #484]	; (8006d48 <HAL_DMA_IRQHandler+0x6b0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d022      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a77      	ldr	r2, [pc, #476]	; (8006d4c <HAL_DMA_IRQHandler+0x6b4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01d      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a76      	ldr	r2, [pc, #472]	; (8006d50 <HAL_DMA_IRQHandler+0x6b8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d018      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a74      	ldr	r2, [pc, #464]	; (8006d54 <HAL_DMA_IRQHandler+0x6bc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a73      	ldr	r2, [pc, #460]	; (8006d58 <HAL_DMA_IRQHandler+0x6c0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00e      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a71      	ldr	r2, [pc, #452]	; (8006d5c <HAL_DMA_IRQHandler+0x6c4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a70      	ldr	r2, [pc, #448]	; (8006d60 <HAL_DMA_IRQHandler+0x6c8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_DMA_IRQHandler+0x516>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a6e      	ldr	r2, [pc, #440]	; (8006d64 <HAL_DMA_IRQHandler+0x6cc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10a      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x52c>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e009      	b.n	8006bd8 <HAL_DMA_IRQHandler+0x540>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bf14      	ite	ne
 8006bd2:	2301      	movne	r3, #1
 8006bd4:	2300      	moveq	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d03e      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	2210      	movs	r2, #16
 8006be6:	409a      	lsls	r2, r3
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d024      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
 8006c18:	e01f      	b.n	8006c5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01b      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	e016      	b.n	8006c5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d107      	bne.n	8006c4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0208 	bic.w	r2, r2, #8
 8006c48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2220      	movs	r2, #32
 8006c64:	409a      	lsls	r2, r3
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8110 	beq.w	8006e90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2c      	ldr	r2, [pc, #176]	; (8006d28 <HAL_DMA_IRQHandler+0x690>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d04a      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2b      	ldr	r2, [pc, #172]	; (8006d2c <HAL_DMA_IRQHandler+0x694>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d045      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <HAL_DMA_IRQHandler+0x698>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d040      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <HAL_DMA_IRQHandler+0x69c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d03b      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <HAL_DMA_IRQHandler+0x6a0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d036      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <HAL_DMA_IRQHandler+0x6a4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d031      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <HAL_DMA_IRQHandler+0x6a8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02c      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a22      	ldr	r2, [pc, #136]	; (8006d44 <HAL_DMA_IRQHandler+0x6ac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d027      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	; (8006d48 <HAL_DMA_IRQHandler+0x6b0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_DMA_IRQHandler+0x6b4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <HAL_DMA_IRQHandler+0x6b8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_DMA_IRQHandler+0x6bc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <HAL_DMA_IRQHandler+0x6c0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_DMA_IRQHandler+0x6c4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <HAL_DMA_IRQHandler+0x6c8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x678>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_DMA_IRQHandler+0x6cc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d12b      	bne.n	8006d68 <HAL_DMA_IRQHandler+0x6d0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	e02a      	b.n	8006d7c <HAL_DMA_IRQHandler+0x6e4>
 8006d26:	bf00      	nop
 8006d28:	40020010 	.word	0x40020010
 8006d2c:	40020028 	.word	0x40020028
 8006d30:	40020040 	.word	0x40020040
 8006d34:	40020058 	.word	0x40020058
 8006d38:	40020070 	.word	0x40020070
 8006d3c:	40020088 	.word	0x40020088
 8006d40:	400200a0 	.word	0x400200a0
 8006d44:	400200b8 	.word	0x400200b8
 8006d48:	40020410 	.word	0x40020410
 8006d4c:	40020428 	.word	0x40020428
 8006d50:	40020440 	.word	0x40020440
 8006d54:	40020458 	.word	0x40020458
 8006d58:	40020470 	.word	0x40020470
 8006d5c:	40020488 	.word	0x40020488
 8006d60:	400204a0 	.word	0x400204a0
 8006d64:	400204b8 	.word	0x400204b8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bf14      	ite	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	2300      	moveq	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8087 	beq.w	8006e90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d139      	bne.n	8006e12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0216 	bic.w	r2, r2, #22
 8006dac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_DMA_IRQHandler+0x736>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0208 	bic.w	r2, r2, #8
 8006ddc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	223f      	movs	r2, #63	; 0x3f
 8006de8:	409a      	lsls	r2, r3
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 834a 	beq.w	800749c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
          }
          return;
 8006e10:	e344      	b.n	800749c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d018      	beq.n	8006e52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d108      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d02c      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
 8006e3e:	e027      	b.n	8006e90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d023      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
 8006e50:	e01e      	b.n	8006e90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10f      	bne.n	8006e80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0210 	bic.w	r2, r2, #16
 8006e6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8306 	beq.w	80074a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8088 	beq.w	8006fb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a7a      	ldr	r2, [pc, #488]	; (80070a0 <HAL_DMA_IRQHandler+0xa08>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d04a      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a79      	ldr	r2, [pc, #484]	; (80070a4 <HAL_DMA_IRQHandler+0xa0c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d045      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a77      	ldr	r2, [pc, #476]	; (80070a8 <HAL_DMA_IRQHandler+0xa10>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d040      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a76      	ldr	r2, [pc, #472]	; (80070ac <HAL_DMA_IRQHandler+0xa14>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d03b      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a74      	ldr	r2, [pc, #464]	; (80070b0 <HAL_DMA_IRQHandler+0xa18>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d036      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a73      	ldr	r2, [pc, #460]	; (80070b4 <HAL_DMA_IRQHandler+0xa1c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d031      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a71      	ldr	r2, [pc, #452]	; (80070b8 <HAL_DMA_IRQHandler+0xa20>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d02c      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a70      	ldr	r2, [pc, #448]	; (80070bc <HAL_DMA_IRQHandler+0xa24>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d027      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a6e      	ldr	r2, [pc, #440]	; (80070c0 <HAL_DMA_IRQHandler+0xa28>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d022      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a6d      	ldr	r2, [pc, #436]	; (80070c4 <HAL_DMA_IRQHandler+0xa2c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d01d      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a6b      	ldr	r2, [pc, #428]	; (80070c8 <HAL_DMA_IRQHandler+0xa30>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d018      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a6a      	ldr	r2, [pc, #424]	; (80070cc <HAL_DMA_IRQHandler+0xa34>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d013      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a68      	ldr	r2, [pc, #416]	; (80070d0 <HAL_DMA_IRQHandler+0xa38>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00e      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a67      	ldr	r2, [pc, #412]	; (80070d4 <HAL_DMA_IRQHandler+0xa3c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d009      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a65      	ldr	r2, [pc, #404]	; (80070d8 <HAL_DMA_IRQHandler+0xa40>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <HAL_DMA_IRQHandler+0x8b8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a64      	ldr	r2, [pc, #400]	; (80070dc <HAL_DMA_IRQHandler+0xa44>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d108      	bne.n	8006f62 <HAL_DMA_IRQHandler+0x8ca>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0201 	bic.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e007      	b.n	8006f72 <HAL_DMA_IRQHandler+0x8da>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3301      	adds	r3, #1
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d307      	bcc.n	8006f8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f2      	bne.n	8006f72 <HAL_DMA_IRQHandler+0x8da>
 8006f8c:	e000      	b.n	8006f90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006fa6:	e003      	b.n	8006fb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8272 	beq.w	80074a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	e26c      	b.n	80074a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a43      	ldr	r2, [pc, #268]	; (80070e0 <HAL_DMA_IRQHandler+0xa48>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d022      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a42      	ldr	r2, [pc, #264]	; (80070e4 <HAL_DMA_IRQHandler+0xa4c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d01d      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a40      	ldr	r2, [pc, #256]	; (80070e8 <HAL_DMA_IRQHandler+0xa50>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d018      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a3f      	ldr	r2, [pc, #252]	; (80070ec <HAL_DMA_IRQHandler+0xa54>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a3d      	ldr	r2, [pc, #244]	; (80070f0 <HAL_DMA_IRQHandler+0xa58>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00e      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a3c      	ldr	r2, [pc, #240]	; (80070f4 <HAL_DMA_IRQHandler+0xa5c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d009      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3a      	ldr	r2, [pc, #232]	; (80070f8 <HAL_DMA_IRQHandler+0xa60>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <HAL_DMA_IRQHandler+0x984>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a39      	ldr	r2, [pc, #228]	; (80070fc <HAL_DMA_IRQHandler+0xa64>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d101      	bne.n	8007020 <HAL_DMA_IRQHandler+0x988>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <HAL_DMA_IRQHandler+0x98a>
 8007020:	2300      	movs	r3, #0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 823f 	beq.w	80074a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2204      	movs	r2, #4
 800703a:	409a      	lsls	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80cd 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xb48>
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80c7 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	2204      	movs	r2, #4
 800705c:	409a      	lsls	r2, r3
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d049      	beq.n	8007100 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8210 	beq.w	80074a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007088:	e20a      	b.n	80074a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8206 	beq.w	80074a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800709c:	e200      	b.n	80074a0 <HAL_DMA_IRQHandler+0xe08>
 800709e:	bf00      	nop
 80070a0:	40020010 	.word	0x40020010
 80070a4:	40020028 	.word	0x40020028
 80070a8:	40020040 	.word	0x40020040
 80070ac:	40020058 	.word	0x40020058
 80070b0:	40020070 	.word	0x40020070
 80070b4:	40020088 	.word	0x40020088
 80070b8:	400200a0 	.word	0x400200a0
 80070bc:	400200b8 	.word	0x400200b8
 80070c0:	40020410 	.word	0x40020410
 80070c4:	40020428 	.word	0x40020428
 80070c8:	40020440 	.word	0x40020440
 80070cc:	40020458 	.word	0x40020458
 80070d0:	40020470 	.word	0x40020470
 80070d4:	40020488 	.word	0x40020488
 80070d8:	400204a0 	.word	0x400204a0
 80070dc:	400204b8 	.word	0x400204b8
 80070e0:	58025408 	.word	0x58025408
 80070e4:	5802541c 	.word	0x5802541c
 80070e8:	58025430 	.word	0x58025430
 80070ec:	58025444 	.word	0x58025444
 80070f0:	58025458 	.word	0x58025458
 80070f4:	5802546c 	.word	0x5802546c
 80070f8:	58025480 	.word	0x58025480
 80070fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d160      	bne.n	80071cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7f      	ldr	r2, [pc, #508]	; (800730c <HAL_DMA_IRQHandler+0xc74>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d04a      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a7d      	ldr	r2, [pc, #500]	; (8007310 <HAL_DMA_IRQHandler+0xc78>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d045      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a7c      	ldr	r2, [pc, #496]	; (8007314 <HAL_DMA_IRQHandler+0xc7c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d040      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a7a      	ldr	r2, [pc, #488]	; (8007318 <HAL_DMA_IRQHandler+0xc80>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d03b      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a79      	ldr	r2, [pc, #484]	; (800731c <HAL_DMA_IRQHandler+0xc84>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d036      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a77      	ldr	r2, [pc, #476]	; (8007320 <HAL_DMA_IRQHandler+0xc88>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d031      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a76      	ldr	r2, [pc, #472]	; (8007324 <HAL_DMA_IRQHandler+0xc8c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d02c      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a74      	ldr	r2, [pc, #464]	; (8007328 <HAL_DMA_IRQHandler+0xc90>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d027      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a73      	ldr	r2, [pc, #460]	; (800732c <HAL_DMA_IRQHandler+0xc94>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d022      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a71      	ldr	r2, [pc, #452]	; (8007330 <HAL_DMA_IRQHandler+0xc98>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01d      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a70      	ldr	r2, [pc, #448]	; (8007334 <HAL_DMA_IRQHandler+0xc9c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6e      	ldr	r2, [pc, #440]	; (8007338 <HAL_DMA_IRQHandler+0xca0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6d      	ldr	r2, [pc, #436]	; (800733c <HAL_DMA_IRQHandler+0xca4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a6b      	ldr	r2, [pc, #428]	; (8007340 <HAL_DMA_IRQHandler+0xca8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a6a      	ldr	r2, [pc, #424]	; (8007344 <HAL_DMA_IRQHandler+0xcac>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_DMA_IRQHandler+0xb12>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a68      	ldr	r2, [pc, #416]	; (8007348 <HAL_DMA_IRQHandler+0xcb0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d108      	bne.n	80071bc <HAL_DMA_IRQHandler+0xb24>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0208 	bic.w	r2, r2, #8
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e007      	b.n	80071cc <HAL_DMA_IRQHandler+0xb34>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0204 	bic.w	r2, r2, #4
 80071ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8165 	beq.w	80074a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071de:	e15f      	b.n	80074a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	2202      	movs	r2, #2
 80071ea:	409a      	lsls	r2, r3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	4013      	ands	r3, r2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80c5 	beq.w	8007380 <HAL_DMA_IRQHandler+0xce8>
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80bf 	beq.w	8007380 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2202      	movs	r2, #2
 800720c:	409a      	lsls	r2, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d018      	beq.n	800724e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 813a 	beq.w	80074a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007238:	e134      	b.n	80074a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8130 	beq.w	80074a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800724c:	e12a      	b.n	80074a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8089 	bne.w	800736c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a2b      	ldr	r2, [pc, #172]	; (800730c <HAL_DMA_IRQHandler+0xc74>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d04a      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a29      	ldr	r2, [pc, #164]	; (8007310 <HAL_DMA_IRQHandler+0xc78>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d045      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a28      	ldr	r2, [pc, #160]	; (8007314 <HAL_DMA_IRQHandler+0xc7c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d040      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a26      	ldr	r2, [pc, #152]	; (8007318 <HAL_DMA_IRQHandler+0xc80>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d03b      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_DMA_IRQHandler+0xc84>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d036      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a23      	ldr	r2, [pc, #140]	; (8007320 <HAL_DMA_IRQHandler+0xc88>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d031      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_DMA_IRQHandler+0xc8c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d02c      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a20      	ldr	r2, [pc, #128]	; (8007328 <HAL_DMA_IRQHandler+0xc90>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d027      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_DMA_IRQHandler+0xc94>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d022      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_DMA_IRQHandler+0xc98>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01d      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <HAL_DMA_IRQHandler+0xc9c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <HAL_DMA_IRQHandler+0xca0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a19      	ldr	r2, [pc, #100]	; (800733c <HAL_DMA_IRQHandler+0xca4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a17      	ldr	r2, [pc, #92]	; (8007340 <HAL_DMA_IRQHandler+0xca8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a16      	ldr	r2, [pc, #88]	; (8007344 <HAL_DMA_IRQHandler+0xcac>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_DMA_IRQHandler+0xc62>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a14      	ldr	r2, [pc, #80]	; (8007348 <HAL_DMA_IRQHandler+0xcb0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d128      	bne.n	800734c <HAL_DMA_IRQHandler+0xcb4>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0214 	bic.w	r2, r2, #20
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e027      	b.n	800735c <HAL_DMA_IRQHandler+0xcc4>
 800730c:	40020010 	.word	0x40020010
 8007310:	40020028 	.word	0x40020028
 8007314:	40020040 	.word	0x40020040
 8007318:	40020058 	.word	0x40020058
 800731c:	40020070 	.word	0x40020070
 8007320:	40020088 	.word	0x40020088
 8007324:	400200a0 	.word	0x400200a0
 8007328:	400200b8 	.word	0x400200b8
 800732c:	40020410 	.word	0x40020410
 8007330:	40020428 	.word	0x40020428
 8007334:	40020440 	.word	0x40020440
 8007338:	40020458 	.word	0x40020458
 800733c:	40020470 	.word	0x40020470
 8007340:	40020488 	.word	0x40020488
 8007344:	400204a0 	.word	0x400204a0
 8007348:	400204b8 	.word	0x400204b8
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 020a 	bic.w	r2, r2, #10
 800735a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8097 	beq.w	80074a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737e:	e091      	b.n	80074a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2208      	movs	r2, #8
 800738a:	409a      	lsls	r2, r3
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8088 	beq.w	80074a6 <HAL_DMA_IRQHandler+0xe0e>
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8082 	beq.w	80074a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a41      	ldr	r2, [pc, #260]	; (80074ac <HAL_DMA_IRQHandler+0xe14>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d04a      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a3f      	ldr	r2, [pc, #252]	; (80074b0 <HAL_DMA_IRQHandler+0xe18>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d045      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3e      	ldr	r2, [pc, #248]	; (80074b4 <HAL_DMA_IRQHandler+0xe1c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d040      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <HAL_DMA_IRQHandler+0xe20>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d03b      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a3b      	ldr	r2, [pc, #236]	; (80074bc <HAL_DMA_IRQHandler+0xe24>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d036      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a39      	ldr	r2, [pc, #228]	; (80074c0 <HAL_DMA_IRQHandler+0xe28>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d031      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a38      	ldr	r2, [pc, #224]	; (80074c4 <HAL_DMA_IRQHandler+0xe2c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d02c      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a36      	ldr	r2, [pc, #216]	; (80074c8 <HAL_DMA_IRQHandler+0xe30>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d027      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a35      	ldr	r2, [pc, #212]	; (80074cc <HAL_DMA_IRQHandler+0xe34>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d022      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a33      	ldr	r2, [pc, #204]	; (80074d0 <HAL_DMA_IRQHandler+0xe38>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01d      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a32      	ldr	r2, [pc, #200]	; (80074d4 <HAL_DMA_IRQHandler+0xe3c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d018      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a30      	ldr	r2, [pc, #192]	; (80074d8 <HAL_DMA_IRQHandler+0xe40>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2f      	ldr	r2, [pc, #188]	; (80074dc <HAL_DMA_IRQHandler+0xe44>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00e      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a2d      	ldr	r2, [pc, #180]	; (80074e0 <HAL_DMA_IRQHandler+0xe48>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2c      	ldr	r2, [pc, #176]	; (80074e4 <HAL_DMA_IRQHandler+0xe4c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_DMA_IRQHandler+0xdaa>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <HAL_DMA_IRQHandler+0xe50>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d108      	bne.n	8007454 <HAL_DMA_IRQHandler+0xdbc>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 021c 	bic.w	r2, r2, #28
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e007      	b.n	8007464 <HAL_DMA_IRQHandler+0xdcc>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 020e 	bic.w	r2, r2, #14
 8007462:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007468:	f003 031f 	and.w	r3, r3, #31
 800746c:	2201      	movs	r2, #1
 800746e:	409a      	lsls	r2, r3
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	e004      	b.n	80074a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800749c:	bf00      	nop
 800749e:	e002      	b.n	80074a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074a6:	3728      	adds	r7, #40	; 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40020010 	.word	0x40020010
 80074b0:	40020028 	.word	0x40020028
 80074b4:	40020040 	.word	0x40020040
 80074b8:	40020058 	.word	0x40020058
 80074bc:	40020070 	.word	0x40020070
 80074c0:	40020088 	.word	0x40020088
 80074c4:	400200a0 	.word	0x400200a0
 80074c8:	400200b8 	.word	0x400200b8
 80074cc:	40020410 	.word	0x40020410
 80074d0:	40020428 	.word	0x40020428
 80074d4:	40020440 	.word	0x40020440
 80074d8:	40020458 	.word	0x40020458
 80074dc:	40020470 	.word	0x40020470
 80074e0:	40020488 	.word	0x40020488
 80074e4:	400204a0 	.word	0x400204a0
 80074e8:	400204b8 	.word	0x400204b8

080074ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007504:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a7f      	ldr	r2, [pc, #508]	; (8007708 <DMA_SetConfig+0x21c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d072      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a7d      	ldr	r2, [pc, #500]	; (800770c <DMA_SetConfig+0x220>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d06d      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a7c      	ldr	r2, [pc, #496]	; (8007710 <DMA_SetConfig+0x224>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d068      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a7a      	ldr	r2, [pc, #488]	; (8007714 <DMA_SetConfig+0x228>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d063      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a79      	ldr	r2, [pc, #484]	; (8007718 <DMA_SetConfig+0x22c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d05e      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a77      	ldr	r2, [pc, #476]	; (800771c <DMA_SetConfig+0x230>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d059      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a76      	ldr	r2, [pc, #472]	; (8007720 <DMA_SetConfig+0x234>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d054      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a74      	ldr	r2, [pc, #464]	; (8007724 <DMA_SetConfig+0x238>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d04f      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a73      	ldr	r2, [pc, #460]	; (8007728 <DMA_SetConfig+0x23c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d04a      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a71      	ldr	r2, [pc, #452]	; (800772c <DMA_SetConfig+0x240>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d045      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a70      	ldr	r2, [pc, #448]	; (8007730 <DMA_SetConfig+0x244>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d040      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a6e      	ldr	r2, [pc, #440]	; (8007734 <DMA_SetConfig+0x248>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d03b      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a6d      	ldr	r2, [pc, #436]	; (8007738 <DMA_SetConfig+0x24c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d036      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a6b      	ldr	r2, [pc, #428]	; (800773c <DMA_SetConfig+0x250>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d031      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a6a      	ldr	r2, [pc, #424]	; (8007740 <DMA_SetConfig+0x254>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d02c      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a68      	ldr	r2, [pc, #416]	; (8007744 <DMA_SetConfig+0x258>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d027      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a67      	ldr	r2, [pc, #412]	; (8007748 <DMA_SetConfig+0x25c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d022      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a65      	ldr	r2, [pc, #404]	; (800774c <DMA_SetConfig+0x260>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01d      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a64      	ldr	r2, [pc, #400]	; (8007750 <DMA_SetConfig+0x264>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d018      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a62      	ldr	r2, [pc, #392]	; (8007754 <DMA_SetConfig+0x268>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a61      	ldr	r2, [pc, #388]	; (8007758 <DMA_SetConfig+0x26c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a5f      	ldr	r2, [pc, #380]	; (800775c <DMA_SetConfig+0x270>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d009      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a5e      	ldr	r2, [pc, #376]	; (8007760 <DMA_SetConfig+0x274>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <DMA_SetConfig+0x10a>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a5c      	ldr	r2, [pc, #368]	; (8007764 <DMA_SetConfig+0x278>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d101      	bne.n	80075fa <DMA_SetConfig+0x10e>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <DMA_SetConfig+0x110>
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00d      	beq.n	800761c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007608:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800761a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a39      	ldr	r2, [pc, #228]	; (8007708 <DMA_SetConfig+0x21c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d04a      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a38      	ldr	r2, [pc, #224]	; (800770c <DMA_SetConfig+0x220>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d045      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a36      	ldr	r2, [pc, #216]	; (8007710 <DMA_SetConfig+0x224>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d040      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a35      	ldr	r2, [pc, #212]	; (8007714 <DMA_SetConfig+0x228>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d03b      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a33      	ldr	r2, [pc, #204]	; (8007718 <DMA_SetConfig+0x22c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d036      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a32      	ldr	r2, [pc, #200]	; (800771c <DMA_SetConfig+0x230>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d031      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a30      	ldr	r2, [pc, #192]	; (8007720 <DMA_SetConfig+0x234>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d02c      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a2f      	ldr	r2, [pc, #188]	; (8007724 <DMA_SetConfig+0x238>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d027      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <DMA_SetConfig+0x23c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d022      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a2c      	ldr	r2, [pc, #176]	; (800772c <DMA_SetConfig+0x240>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d01d      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2a      	ldr	r2, [pc, #168]	; (8007730 <DMA_SetConfig+0x244>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d018      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a29      	ldr	r2, [pc, #164]	; (8007734 <DMA_SetConfig+0x248>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a27      	ldr	r2, [pc, #156]	; (8007738 <DMA_SetConfig+0x24c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a26      	ldr	r2, [pc, #152]	; (800773c <DMA_SetConfig+0x250>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a24      	ldr	r2, [pc, #144]	; (8007740 <DMA_SetConfig+0x254>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <DMA_SetConfig+0x1d0>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a23      	ldr	r2, [pc, #140]	; (8007744 <DMA_SetConfig+0x258>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d101      	bne.n	80076c0 <DMA_SetConfig+0x1d4>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <DMA_SetConfig+0x1d6>
 80076c0:	2300      	movs	r3, #0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d059      	beq.n	800777a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	223f      	movs	r2, #63	; 0x3f
 80076d0:	409a      	lsls	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d138      	bne.n	8007768 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007706:	e086      	b.n	8007816 <DMA_SetConfig+0x32a>
 8007708:	40020010 	.word	0x40020010
 800770c:	40020028 	.word	0x40020028
 8007710:	40020040 	.word	0x40020040
 8007714:	40020058 	.word	0x40020058
 8007718:	40020070 	.word	0x40020070
 800771c:	40020088 	.word	0x40020088
 8007720:	400200a0 	.word	0x400200a0
 8007724:	400200b8 	.word	0x400200b8
 8007728:	40020410 	.word	0x40020410
 800772c:	40020428 	.word	0x40020428
 8007730:	40020440 	.word	0x40020440
 8007734:	40020458 	.word	0x40020458
 8007738:	40020470 	.word	0x40020470
 800773c:	40020488 	.word	0x40020488
 8007740:	400204a0 	.word	0x400204a0
 8007744:	400204b8 	.word	0x400204b8
 8007748:	58025408 	.word	0x58025408
 800774c:	5802541c 	.word	0x5802541c
 8007750:	58025430 	.word	0x58025430
 8007754:	58025444 	.word	0x58025444
 8007758:	58025458 	.word	0x58025458
 800775c:	5802546c 	.word	0x5802546c
 8007760:	58025480 	.word	0x58025480
 8007764:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	60da      	str	r2, [r3, #12]
}
 8007778:	e04d      	b.n	8007816 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a29      	ldr	r2, [pc, #164]	; (8007824 <DMA_SetConfig+0x338>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d022      	beq.n	80077ca <DMA_SetConfig+0x2de>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a27      	ldr	r2, [pc, #156]	; (8007828 <DMA_SetConfig+0x33c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d01d      	beq.n	80077ca <DMA_SetConfig+0x2de>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a26      	ldr	r2, [pc, #152]	; (800782c <DMA_SetConfig+0x340>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d018      	beq.n	80077ca <DMA_SetConfig+0x2de>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a24      	ldr	r2, [pc, #144]	; (8007830 <DMA_SetConfig+0x344>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <DMA_SetConfig+0x2de>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a23      	ldr	r2, [pc, #140]	; (8007834 <DMA_SetConfig+0x348>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <DMA_SetConfig+0x2de>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a21      	ldr	r2, [pc, #132]	; (8007838 <DMA_SetConfig+0x34c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <DMA_SetConfig+0x2de>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a20      	ldr	r2, [pc, #128]	; (800783c <DMA_SetConfig+0x350>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <DMA_SetConfig+0x2de>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1e      	ldr	r2, [pc, #120]	; (8007840 <DMA_SetConfig+0x354>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d101      	bne.n	80077ce <DMA_SetConfig+0x2e2>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <DMA_SetConfig+0x2e4>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	2201      	movs	r2, #1
 80077de:	409a      	lsls	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d108      	bne.n	8007806 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	60da      	str	r2, [r3, #12]
}
 8007804:	e007      	b.n	8007816 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	58025408 	.word	0x58025408
 8007828:	5802541c 	.word	0x5802541c
 800782c:	58025430 	.word	0x58025430
 8007830:	58025444 	.word	0x58025444
 8007834:	58025458 	.word	0x58025458
 8007838:	5802546c 	.word	0x5802546c
 800783c:	58025480 	.word	0x58025480
 8007840:	58025494 	.word	0x58025494

08007844 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a42      	ldr	r2, [pc, #264]	; (800795c <DMA_CalcBaseAndBitshift+0x118>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d04a      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a41      	ldr	r2, [pc, #260]	; (8007960 <DMA_CalcBaseAndBitshift+0x11c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d045      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a3f      	ldr	r2, [pc, #252]	; (8007964 <DMA_CalcBaseAndBitshift+0x120>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d040      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a3e      	ldr	r2, [pc, #248]	; (8007968 <DMA_CalcBaseAndBitshift+0x124>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d03b      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a3c      	ldr	r2, [pc, #240]	; (800796c <DMA_CalcBaseAndBitshift+0x128>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d036      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a3b      	ldr	r2, [pc, #236]	; (8007970 <DMA_CalcBaseAndBitshift+0x12c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d031      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a39      	ldr	r2, [pc, #228]	; (8007974 <DMA_CalcBaseAndBitshift+0x130>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d02c      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a38      	ldr	r2, [pc, #224]	; (8007978 <DMA_CalcBaseAndBitshift+0x134>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d027      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a36      	ldr	r2, [pc, #216]	; (800797c <DMA_CalcBaseAndBitshift+0x138>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a35      	ldr	r2, [pc, #212]	; (8007980 <DMA_CalcBaseAndBitshift+0x13c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01d      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a33      	ldr	r2, [pc, #204]	; (8007984 <DMA_CalcBaseAndBitshift+0x140>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a32      	ldr	r2, [pc, #200]	; (8007988 <DMA_CalcBaseAndBitshift+0x144>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a30      	ldr	r2, [pc, #192]	; (800798c <DMA_CalcBaseAndBitshift+0x148>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a2f      	ldr	r2, [pc, #188]	; (8007990 <DMA_CalcBaseAndBitshift+0x14c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <DMA_CalcBaseAndBitshift+0x150>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <DMA_CalcBaseAndBitshift+0xa8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <DMA_CalcBaseAndBitshift+0x154>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d101      	bne.n	80078f0 <DMA_CalcBaseAndBitshift+0xac>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <DMA_CalcBaseAndBitshift+0xae>
 80078f0:	2300      	movs	r3, #0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d024      	beq.n	8007940 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3b10      	subs	r3, #16
 80078fe:	4a27      	ldr	r2, [pc, #156]	; (800799c <DMA_CalcBaseAndBitshift+0x158>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	4a24      	ldr	r2, [pc, #144]	; (80079a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007910:	5cd3      	ldrb	r3, [r2, r3]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b03      	cmp	r3, #3
 800791c:	d908      	bls.n	8007930 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	4b1f      	ldr	r3, [pc, #124]	; (80079a4 <DMA_CalcBaseAndBitshift+0x160>)
 8007926:	4013      	ands	r3, r2
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	659a      	str	r2, [r3, #88]	; 0x58
 800792e:	e00d      	b.n	800794c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <DMA_CalcBaseAndBitshift+0x160>)
 8007938:	4013      	ands	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6593      	str	r3, [r2, #88]	; 0x58
 800793e:	e005      	b.n	800794c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	40020010 	.word	0x40020010
 8007960:	40020028 	.word	0x40020028
 8007964:	40020040 	.word	0x40020040
 8007968:	40020058 	.word	0x40020058
 800796c:	40020070 	.word	0x40020070
 8007970:	40020088 	.word	0x40020088
 8007974:	400200a0 	.word	0x400200a0
 8007978:	400200b8 	.word	0x400200b8
 800797c:	40020410 	.word	0x40020410
 8007980:	40020428 	.word	0x40020428
 8007984:	40020440 	.word	0x40020440
 8007988:	40020458 	.word	0x40020458
 800798c:	40020470 	.word	0x40020470
 8007990:	40020488 	.word	0x40020488
 8007994:	400204a0 	.word	0x400204a0
 8007998:	400204b8 	.word	0x400204b8
 800799c:	aaaaaaab 	.word	0xaaaaaaab
 80079a0:	0800e40c 	.word	0x0800e40c
 80079a4:	fffffc00 	.word	0xfffffc00

080079a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d120      	bne.n	80079fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d858      	bhi.n	8007a76 <DMA_CheckFifoParam+0xce>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <DMA_CheckFifoParam+0x24>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079ef 	.word	0x080079ef
 80079d4:	080079dd 	.word	0x080079dd
 80079d8:	08007a77 	.word	0x08007a77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d048      	beq.n	8007a7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079ec:	e045      	b.n	8007a7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079f6:	d142      	bne.n	8007a7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079fc:	e03f      	b.n	8007a7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a06:	d123      	bne.n	8007a50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d838      	bhi.n	8007a82 <DMA_CheckFifoParam+0xda>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <DMA_CheckFifoParam+0x70>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a29 	.word	0x08007a29
 8007a1c:	08007a2f 	.word	0x08007a2f
 8007a20:	08007a29 	.word	0x08007a29
 8007a24:	08007a41 	.word	0x08007a41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
        break;
 8007a2c:	e030      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d025      	beq.n	8007a86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a3e:	e022      	b.n	8007a86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a48:	d11f      	bne.n	8007a8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a4e:	e01c      	b.n	8007a8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d902      	bls.n	8007a5e <DMA_CheckFifoParam+0xb6>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d003      	beq.n	8007a64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a5c:	e018      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	73fb      	strb	r3, [r7, #15]
        break;
 8007a62:	e015      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00e      	beq.n	8007a8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
    break;
 8007a74:	e00b      	b.n	8007a8e <DMA_CheckFifoParam+0xe6>
        break;
 8007a76:	bf00      	nop
 8007a78:	e00a      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e008      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        break;
 8007a7e:	bf00      	nop
 8007a80:	e006      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        break;
 8007a82:	bf00      	nop
 8007a84:	e004      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        break;
 8007a86:	bf00      	nop
 8007a88:	e002      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <DMA_CheckFifoParam+0xe8>
    break;
 8007a8e:	bf00      	nop
    }
  }

  return status;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop

08007aa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a38      	ldr	r2, [pc, #224]	; (8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d022      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a36      	ldr	r2, [pc, #216]	; (8007b98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01d      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a35      	ldr	r2, [pc, #212]	; (8007b9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d018      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a33      	ldr	r2, [pc, #204]	; (8007ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a32      	ldr	r2, [pc, #200]	; (8007ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a30      	ldr	r2, [pc, #192]	; (8007ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a2f      	ldr	r2, [pc, #188]	; (8007bac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a2d      	ldr	r2, [pc, #180]	; (8007bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01a      	beq.n	8007b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	3b08      	subs	r3, #8
 8007b10:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	091b      	lsrs	r3, r3, #4
 8007b18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a24      	ldr	r2, [pc, #144]	; (8007bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	2201      	movs	r2, #1
 8007b36:	409a      	lsls	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b3c:	e024      	b.n	8007b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	3b10      	subs	r3, #16
 8007b46:	4a1e      	ldr	r2, [pc, #120]	; (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4a1c      	ldr	r2, [pc, #112]	; (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d806      	bhi.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d902      	bls.n	8007b66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3308      	adds	r3, #8
 8007b64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a16      	ldr	r2, [pc, #88]	; (8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2201      	movs	r2, #1
 8007b82:	409a      	lsls	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	58025408 	.word	0x58025408
 8007b98:	5802541c 	.word	0x5802541c
 8007b9c:	58025430 	.word	0x58025430
 8007ba0:	58025444 	.word	0x58025444
 8007ba4:	58025458 	.word	0x58025458
 8007ba8:	5802546c 	.word	0x5802546c
 8007bac:	58025480 	.word	0x58025480
 8007bb0:	58025494 	.word	0x58025494
 8007bb4:	cccccccd 	.word	0xcccccccd
 8007bb8:	16009600 	.word	0x16009600
 8007bbc:	58025880 	.word	0x58025880
 8007bc0:	aaaaaaab 	.word	0xaaaaaaab
 8007bc4:	400204b8 	.word	0x400204b8
 8007bc8:	4002040f 	.word	0x4002040f
 8007bcc:	10008200 	.word	0x10008200
 8007bd0:	40020880 	.word	0x40020880

08007bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d04a      	beq.n	8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d847      	bhi.n	8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d022      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a24      	ldr	r2, [pc, #144]	; (8007c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d01d      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d018      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d013      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00e      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1e      	ldr	r2, [pc, #120]	; (8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d009      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1c      	ldr	r2, [pc, #112]	; (8007ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d101      	bne.n	8007c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4b17      	ldr	r3, [pc, #92]	; (8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c5c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c5e:	e009      	b.n	8007c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a11      	ldr	r2, [pc, #68]	; (8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c72:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	2201      	movs	r2, #1
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	58025408 	.word	0x58025408
 8007c90:	5802541c 	.word	0x5802541c
 8007c94:	58025430 	.word	0x58025430
 8007c98:	58025444 	.word	0x58025444
 8007c9c:	58025458 	.word	0x58025458
 8007ca0:	5802546c 	.word	0x5802546c
 8007ca4:	58025480 	.word	0x58025480
 8007ca8:	58025494 	.word	0x58025494
 8007cac:	1600963f 	.word	0x1600963f
 8007cb0:	58025940 	.word	0x58025940
 8007cb4:	1000823f 	.word	0x1000823f
 8007cb8:	40020940 	.word	0x40020940

08007cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b089      	sub	sp, #36	; 0x24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cca:	4b86      	ldr	r3, [pc, #536]	; (8007ee4 <HAL_GPIO_Init+0x228>)
 8007ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cce:	e18c      	b.n	8007fea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	4013      	ands	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 817e 	beq.w	8007fe4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d005      	beq.n	8007d00 <HAL_GPIO_Init+0x44>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d130      	bne.n	8007d62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d36:	2201      	movs	r2, #1
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	f003 0201 	and.w	r2, r3, #1
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d017      	beq.n	8007d9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	2203      	movs	r2, #3
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d123      	bne.n	8007df2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	08da      	lsrs	r2, r3, #3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3208      	adds	r2, #8
 8007db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	220f      	movs	r2, #15
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	08da      	lsrs	r2, r3, #3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3208      	adds	r2, #8
 8007dec:	69b9      	ldr	r1, [r7, #24]
 8007dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	43db      	mvns	r3, r3
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	4013      	ands	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 0203 	and.w	r2, r3, #3
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80d8 	beq.w	8007fe4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e34:	4b2c      	ldr	r3, [pc, #176]	; (8007ee8 <HAL_GPIO_Init+0x22c>)
 8007e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e3a:	4a2b      	ldr	r2, [pc, #172]	; (8007ee8 <HAL_GPIO_Init+0x22c>)
 8007e3c:	f043 0302 	orr.w	r3, r3, #2
 8007e40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e44:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <HAL_GPIO_Init+0x22c>)
 8007e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e52:	4a26      	ldr	r2, [pc, #152]	; (8007eec <HAL_GPIO_Init+0x230>)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	089b      	lsrs	r3, r3, #2
 8007e58:	3302      	adds	r3, #2
 8007e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	220f      	movs	r2, #15
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a1d      	ldr	r2, [pc, #116]	; (8007ef0 <HAL_GPIO_Init+0x234>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d04a      	beq.n	8007f14 <HAL_GPIO_Init+0x258>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1c      	ldr	r2, [pc, #112]	; (8007ef4 <HAL_GPIO_Init+0x238>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d02b      	beq.n	8007ede <HAL_GPIO_Init+0x222>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1b      	ldr	r2, [pc, #108]	; (8007ef8 <HAL_GPIO_Init+0x23c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d025      	beq.n	8007eda <HAL_GPIO_Init+0x21e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a1a      	ldr	r2, [pc, #104]	; (8007efc <HAL_GPIO_Init+0x240>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d01f      	beq.n	8007ed6 <HAL_GPIO_Init+0x21a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <HAL_GPIO_Init+0x244>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d019      	beq.n	8007ed2 <HAL_GPIO_Init+0x216>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <HAL_GPIO_Init+0x248>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_GPIO_Init+0x212>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <HAL_GPIO_Init+0x24c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00d      	beq.n	8007eca <HAL_GPIO_Init+0x20e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <HAL_GPIO_Init+0x250>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d007      	beq.n	8007ec6 <HAL_GPIO_Init+0x20a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <HAL_GPIO_Init+0x254>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d101      	bne.n	8007ec2 <HAL_GPIO_Init+0x206>
 8007ebe:	2309      	movs	r3, #9
 8007ec0:	e029      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ec2:	230a      	movs	r3, #10
 8007ec4:	e027      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ec6:	2307      	movs	r3, #7
 8007ec8:	e025      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007eca:	2306      	movs	r3, #6
 8007ecc:	e023      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ece:	2305      	movs	r3, #5
 8007ed0:	e021      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	e01f      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e01d      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e01b      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e019      	b.n	8007f16 <HAL_GPIO_Init+0x25a>
 8007ee2:	bf00      	nop
 8007ee4:	58000080 	.word	0x58000080
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	58000400 	.word	0x58000400
 8007ef0:	58020000 	.word	0x58020000
 8007ef4:	58020400 	.word	0x58020400
 8007ef8:	58020800 	.word	0x58020800
 8007efc:	58020c00 	.word	0x58020c00
 8007f00:	58021000 	.word	0x58021000
 8007f04:	58021400 	.word	0x58021400
 8007f08:	58021800 	.word	0x58021800
 8007f0c:	58021c00 	.word	0x58021c00
 8007f10:	58022400 	.word	0x58022400
 8007f14:	2300      	movs	r3, #0
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	f002 0203 	and.w	r2, r2, #3
 8007f1c:	0092      	lsls	r2, r2, #2
 8007f1e:	4093      	lsls	r3, r2
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f26:	4938      	ldr	r1, [pc, #224]	; (8008008 <HAL_GPIO_Init+0x34c>)
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	089b      	lsrs	r3, r3, #2
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	4013      	ands	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4013      	ands	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	43db      	mvns	r3, r3
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f47f ae6b 	bne.w	8007cd0 <HAL_GPIO_Init+0x14>
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	3724      	adds	r7, #36	; 0x24
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	58000400 	.word	0x58000400

0800800c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
 8008018:	4613      	mov	r3, r2
 800801a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800801c:	787b      	ldrb	r3, [r7, #1]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008022:	887a      	ldrh	r2, [r7, #2]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008028:	e003      	b.n	8008032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800802a:	887b      	ldrh	r3, [r7, #2]
 800802c:	041a      	lsls	r2, r3, #16
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	619a      	str	r2, [r3, #24]
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
	...

08008040 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008048:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <HAL_PWREx_ConfigSupply+0x70>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b04      	cmp	r3, #4
 8008052:	d00a      	beq.n	800806a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008054:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <HAL_PWREx_ConfigSupply+0x70>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d001      	beq.n	8008066 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e01f      	b.n	80080a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	e01d      	b.n	80080a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800806a:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <HAL_PWREx_ConfigSupply+0x70>)
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f023 0207 	bic.w	r2, r3, #7
 8008072:	490f      	ldr	r1, [pc, #60]	; (80080b0 <HAL_PWREx_ConfigSupply+0x70>)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4313      	orrs	r3, r2
 8008078:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800807a:	f7fc fec9 	bl	8004e10 <HAL_GetTick>
 800807e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008080:	e009      	b.n	8008096 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008082:	f7fc fec5 	bl	8004e10 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008090:	d901      	bls.n	8008096 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e007      	b.n	80080a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <HAL_PWREx_ConfigSupply+0x70>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a2:	d1ee      	bne.n	8008082 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	58024800 	.word	0x58024800

080080b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	; 0x30
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e39d      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8087 	beq.w	80081e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d4:	4b88      	ldr	r3, [pc, #544]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080de:	4b86      	ldr	r3, [pc, #536]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	2b10      	cmp	r3, #16
 80080e8:	d007      	beq.n	80080fa <HAL_RCC_OscConfig+0x46>
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	2b18      	cmp	r3, #24
 80080ee:	d110      	bne.n	8008112 <HAL_RCC_OscConfig+0x5e>
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d10b      	bne.n	8008112 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080fa:	4b7f      	ldr	r3, [pc, #508]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d06c      	beq.n	80081e0 <HAL_RCC_OscConfig+0x12c>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d168      	bne.n	80081e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e377      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811a:	d106      	bne.n	800812a <HAL_RCC_OscConfig+0x76>
 800811c:	4b76      	ldr	r3, [pc, #472]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a75      	ldr	r2, [pc, #468]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	e02e      	b.n	8008188 <HAL_RCC_OscConfig+0xd4>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10c      	bne.n	800814c <HAL_RCC_OscConfig+0x98>
 8008132:	4b71      	ldr	r3, [pc, #452]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a70      	ldr	r2, [pc, #448]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4b6e      	ldr	r3, [pc, #440]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a6d      	ldr	r2, [pc, #436]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	e01d      	b.n	8008188 <HAL_RCC_OscConfig+0xd4>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008154:	d10c      	bne.n	8008170 <HAL_RCC_OscConfig+0xbc>
 8008156:	4b68      	ldr	r3, [pc, #416]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a67      	ldr	r2, [pc, #412]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 800815c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	4b65      	ldr	r3, [pc, #404]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a64      	ldr	r2, [pc, #400]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	e00b      	b.n	8008188 <HAL_RCC_OscConfig+0xd4>
 8008170:	4b61      	ldr	r3, [pc, #388]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a60      	ldr	r2, [pc, #384]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	4b5e      	ldr	r3, [pc, #376]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a5d      	ldr	r2, [pc, #372]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d013      	beq.n	80081b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008190:	f7fc fe3e 	bl	8004e10 <HAL_GetTick>
 8008194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008198:	f7fc fe3a 	bl	8004e10 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b64      	cmp	r3, #100	; 0x64
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e32b      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081aa:	4b53      	ldr	r3, [pc, #332]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f0      	beq.n	8008198 <HAL_RCC_OscConfig+0xe4>
 80081b6:	e014      	b.n	80081e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fc fe2a 	bl	8004e10 <HAL_GetTick>
 80081bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081c0:	f7fc fe26 	bl	8004e10 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b64      	cmp	r3, #100	; 0x64
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e317      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081d2:	4b49      	ldr	r3, [pc, #292]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x10c>
 80081de:	e000      	b.n	80081e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 808c 	beq.w	8008308 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081f0:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081fa:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <HAL_RCC_OscConfig+0x162>
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	2b18      	cmp	r3, #24
 800820a:	d137      	bne.n	800827c <HAL_RCC_OscConfig+0x1c8>
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d132      	bne.n	800827c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008216:	4b38      	ldr	r3, [pc, #224]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <HAL_RCC_OscConfig+0x17a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e2e9      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800822e:	4b32      	ldr	r3, [pc, #200]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f023 0219 	bic.w	r2, r3, #25
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	492f      	ldr	r1, [pc, #188]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 800823c:	4313      	orrs	r3, r2
 800823e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008240:	f7fc fde6 	bl	8004e10 <HAL_GetTick>
 8008244:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008248:	f7fc fde2 	bl	8004e10 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e2d3      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800825a:	4b27      	ldr	r3, [pc, #156]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008266:	4b24      	ldr	r3, [pc, #144]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	061b      	lsls	r3, r3, #24
 8008274:	4920      	ldr	r1, [pc, #128]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008276:	4313      	orrs	r3, r2
 8008278:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800827a:	e045      	b.n	8008308 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d026      	beq.n	80082d2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008284:	4b1c      	ldr	r3, [pc, #112]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f023 0219 	bic.w	r2, r3, #25
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	4919      	ldr	r1, [pc, #100]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008292:	4313      	orrs	r3, r2
 8008294:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7fc fdbb 	bl	8004e10 <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800829e:	f7fc fdb7 	bl	8004e10 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e2a8      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0f0      	beq.n	800829e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082bc:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	061b      	lsls	r3, r3, #24
 80082ca:	490b      	ldr	r1, [pc, #44]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	604b      	str	r3, [r1, #4]
 80082d0:	e01a      	b.n	8008308 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a08      	ldr	r2, [pc, #32]	; (80082f8 <HAL_RCC_OscConfig+0x244>)
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082de:	f7fc fd97 	bl	8004e10 <HAL_GetTick>
 80082e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082e4:	e00a      	b.n	80082fc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082e6:	f7fc fd93 	bl	8004e10 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d903      	bls.n	80082fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e284      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
 80082f8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082fc:	4b96      	ldr	r3, [pc, #600]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1ee      	bne.n	80082e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	2b00      	cmp	r3, #0
 8008312:	d06a      	beq.n	80083ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008314:	4b90      	ldr	r3, [pc, #576]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800831c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800831e:	4b8e      	ldr	r3, [pc, #568]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	2b08      	cmp	r3, #8
 8008328:	d007      	beq.n	800833a <HAL_RCC_OscConfig+0x286>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b18      	cmp	r3, #24
 800832e:	d11b      	bne.n	8008368 <HAL_RCC_OscConfig+0x2b4>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	2b01      	cmp	r3, #1
 8008338:	d116      	bne.n	8008368 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800833a:	4b87      	ldr	r3, [pc, #540]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_RCC_OscConfig+0x29e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	2b80      	cmp	r3, #128	; 0x80
 800834c:	d001      	beq.n	8008352 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e257      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008352:	4b81      	ldr	r3, [pc, #516]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	061b      	lsls	r3, r3, #24
 8008360:	497d      	ldr	r1, [pc, #500]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008362:	4313      	orrs	r3, r2
 8008364:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008366:	e040      	b.n	80083ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d023      	beq.n	80083b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008370:	4b79      	ldr	r3, [pc, #484]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a78      	ldr	r2, [pc, #480]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fc fd48 	bl	8004e10 <HAL_GetTick>
 8008380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008384:	f7fc fd44 	bl	8004e10 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e235      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008396:	4b70      	ldr	r3, [pc, #448]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0f0      	beq.n	8008384 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083a2:	4b6d      	ldr	r3, [pc, #436]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	061b      	lsls	r3, r3, #24
 80083b0:	4969      	ldr	r1, [pc, #420]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60cb      	str	r3, [r1, #12]
 80083b6:	e018      	b.n	80083ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083b8:	4b67      	ldr	r3, [pc, #412]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a66      	ldr	r2, [pc, #408]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80083be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c4:	f7fc fd24 	bl	8004e10 <HAL_GetTick>
 80083c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083cc:	f7fc fd20 	bl	8004e10 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e211      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083de:	4b5e      	ldr	r3, [pc, #376]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d036      	beq.n	8008464 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d019      	beq.n	8008432 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083fe:	4b56      	ldr	r3, [pc, #344]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008402:	4a55      	ldr	r2, [pc, #340]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008404:	f043 0301 	orr.w	r3, r3, #1
 8008408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840a:	f7fc fd01 	bl	8004e10 <HAL_GetTick>
 800840e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008410:	e008      	b.n	8008424 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008412:	f7fc fcfd 	bl	8004e10 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e1ee      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008424:	4b4c      	ldr	r3, [pc, #304]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0f0      	beq.n	8008412 <HAL_RCC_OscConfig+0x35e>
 8008430:	e018      	b.n	8008464 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008432:	4b49      	ldr	r3, [pc, #292]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008436:	4a48      	ldr	r2, [pc, #288]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843e:	f7fc fce7 	bl	8004e10 <HAL_GetTick>
 8008442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008444:	e008      	b.n	8008458 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008446:	f7fc fce3 	bl	8004e10 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e1d4      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008458:	4b3f      	ldr	r3, [pc, #252]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800845a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f0      	bne.n	8008446 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d036      	beq.n	80084de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d019      	beq.n	80084ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008478:	4b37      	ldr	r3, [pc, #220]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a36      	ldr	r2, [pc, #216]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800847e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008482:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008484:	f7fc fcc4 	bl	8004e10 <HAL_GetTick>
 8008488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800848c:	f7fc fcc0 	bl	8004e10 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e1b1      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800849e:	4b2e      	ldr	r3, [pc, #184]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f0      	beq.n	800848c <HAL_RCC_OscConfig+0x3d8>
 80084aa:	e018      	b.n	80084de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084ac:	4b2a      	ldr	r3, [pc, #168]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a29      	ldr	r2, [pc, #164]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80084b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084b8:	f7fc fcaa 	bl	8004e10 <HAL_GetTick>
 80084bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084c0:	f7fc fca6 	bl	8004e10 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e197      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084d2:	4b21      	ldr	r3, [pc, #132]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f0      	bne.n	80084c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8086 	beq.w	80085f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <HAL_RCC_OscConfig+0x4a8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	; (800855c <HAL_RCC_OscConfig+0x4a8>)
 80084f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084f8:	f7fc fc8a 	bl	8004e10 <HAL_GetTick>
 80084fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008500:	f7fc fc86 	bl	8004e10 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b64      	cmp	r3, #100	; 0x64
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e177      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <HAL_RCC_OscConfig+0x4a8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f0      	beq.n	8008500 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d106      	bne.n	8008534 <HAL_RCC_OscConfig+0x480>
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	4a0b      	ldr	r2, [pc, #44]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800852c:	f043 0301 	orr.w	r3, r3, #1
 8008530:	6713      	str	r3, [r2, #112]	; 0x70
 8008532:	e032      	b.n	800859a <HAL_RCC_OscConfig+0x4e6>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d111      	bne.n	8008560 <HAL_RCC_OscConfig+0x4ac>
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800853e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008540:	4a05      	ldr	r2, [pc, #20]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 8008542:	f023 0301 	bic.w	r3, r3, #1
 8008546:	6713      	str	r3, [r2, #112]	; 0x70
 8008548:	4b03      	ldr	r3, [pc, #12]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	4a02      	ldr	r2, [pc, #8]	; (8008558 <HAL_RCC_OscConfig+0x4a4>)
 800854e:	f023 0304 	bic.w	r3, r3, #4
 8008552:	6713      	str	r3, [r2, #112]	; 0x70
 8008554:	e021      	b.n	800859a <HAL_RCC_OscConfig+0x4e6>
 8008556:	bf00      	nop
 8008558:	58024400 	.word	0x58024400
 800855c:	58024800 	.word	0x58024800
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2b05      	cmp	r3, #5
 8008566:	d10c      	bne.n	8008582 <HAL_RCC_OscConfig+0x4ce>
 8008568:	4b83      	ldr	r3, [pc, #524]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800856a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856c:	4a82      	ldr	r2, [pc, #520]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800856e:	f043 0304 	orr.w	r3, r3, #4
 8008572:	6713      	str	r3, [r2, #112]	; 0x70
 8008574:	4b80      	ldr	r3, [pc, #512]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008578:	4a7f      	ldr	r2, [pc, #508]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	6713      	str	r3, [r2, #112]	; 0x70
 8008580:	e00b      	b.n	800859a <HAL_RCC_OscConfig+0x4e6>
 8008582:	4b7d      	ldr	r3, [pc, #500]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	4a7c      	ldr	r2, [pc, #496]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	6713      	str	r3, [r2, #112]	; 0x70
 800858e:	4b7a      	ldr	r3, [pc, #488]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	4a79      	ldr	r2, [pc, #484]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008594:	f023 0304 	bic.w	r3, r3, #4
 8008598:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d015      	beq.n	80085ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a2:	f7fc fc35 	bl	8004e10 <HAL_GetTick>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085a8:	e00a      	b.n	80085c0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085aa:	f7fc fc31 	bl	8004e10 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e120      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085c0:	4b6d      	ldr	r3, [pc, #436]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80085c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0ee      	beq.n	80085aa <HAL_RCC_OscConfig+0x4f6>
 80085cc:	e014      	b.n	80085f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ce:	f7fc fc1f 	bl	8004e10 <HAL_GetTick>
 80085d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085d4:	e00a      	b.n	80085ec <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085d6:	f7fc fc1b 	bl	8004e10 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d901      	bls.n	80085ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e10a      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085ec:	4b62      	ldr	r3, [pc, #392]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80085ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1ee      	bne.n	80085d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80ff 	beq.w	8008800 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008602:	4b5d      	ldr	r3, [pc, #372]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800860a:	2b18      	cmp	r3, #24
 800860c:	f000 80ba 	beq.w	8008784 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b02      	cmp	r3, #2
 8008616:	f040 8095 	bne.w	8008744 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800861a:	4b57      	ldr	r3, [pc, #348]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a56      	ldr	r2, [pc, #344]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008626:	f7fc fbf3 	bl	8004e10 <HAL_GetTick>
 800862a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800862c:	e008      	b.n	8008640 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800862e:	f7fc fbef 	bl	8004e10 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e0e0      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008640:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1f0      	bne.n	800862e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800864c:	4b4a      	ldr	r3, [pc, #296]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800864e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008650:	4b4a      	ldr	r3, [pc, #296]	; (800877c <HAL_RCC_OscConfig+0x6c8>)
 8008652:	4013      	ands	r3, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800865c:	0112      	lsls	r2, r2, #4
 800865e:	430a      	orrs	r2, r1
 8008660:	4945      	ldr	r1, [pc, #276]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008662:	4313      	orrs	r3, r2
 8008664:	628b      	str	r3, [r1, #40]	; 0x28
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	3b01      	subs	r3, #1
 800866c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008674:	3b01      	subs	r3, #1
 8008676:	025b      	lsls	r3, r3, #9
 8008678:	b29b      	uxth	r3, r3
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	3b01      	subs	r3, #1
 8008682:	041b      	lsls	r3, r3, #16
 8008684:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	3b01      	subs	r3, #1
 8008690:	061b      	lsls	r3, r3, #24
 8008692:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008696:	4938      	ldr	r1, [pc, #224]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008698:	4313      	orrs	r3, r2
 800869a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800869c:	4b36      	ldr	r3, [pc, #216]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a35      	ldr	r2, [pc, #212]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086a8:	4b33      	ldr	r3, [pc, #204]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ac:	4b34      	ldr	r3, [pc, #208]	; (8008780 <HAL_RCC_OscConfig+0x6cc>)
 80086ae:	4013      	ands	r3, r2
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086b4:	00d2      	lsls	r2, r2, #3
 80086b6:	4930      	ldr	r1, [pc, #192]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086bc:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	f023 020c 	bic.w	r2, r3, #12
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	492b      	ldr	r1, [pc, #172]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	f023 0202 	bic.w	r2, r3, #2
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086da:	4927      	ldr	r1, [pc, #156]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086e0:	4b25      	ldr	r3, [pc, #148]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	4a24      	ldr	r2, [pc, #144]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ec:	4b22      	ldr	r3, [pc, #136]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086f8:	4b1f      	ldr	r3, [pc, #124]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 80086fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008704:	4b1c      	ldr	r3, [pc, #112]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a1b      	ldr	r2, [pc, #108]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800870a:	f043 0301 	orr.w	r3, r3, #1
 800870e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008710:	4b19      	ldr	r3, [pc, #100]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a18      	ldr	r2, [pc, #96]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800871a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871c:	f7fc fb78 	bl	8004e10 <HAL_GetTick>
 8008720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008724:	f7fc fb74 	bl	8004e10 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e065      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0f0      	beq.n	8008724 <HAL_RCC_OscConfig+0x670>
 8008742:	e05d      	b.n	8008800 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a0b      	ldr	r2, [pc, #44]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800874a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800874e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fc fb5e 	bl	8004e10 <HAL_GetTick>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008758:	f7fc fb5a 	bl	8004e10 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e04b      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800876a:	4b03      	ldr	r3, [pc, #12]	; (8008778 <HAL_RCC_OscConfig+0x6c4>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x6a4>
 8008776:	e043      	b.n	8008800 <HAL_RCC_OscConfig+0x74c>
 8008778:	58024400 	.word	0x58024400
 800877c:	fffffc0c 	.word	0xfffffc0c
 8008780:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008784:	4b21      	ldr	r3, [pc, #132]	; (800880c <HAL_RCC_OscConfig+0x758>)
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800878a:	4b20      	ldr	r3, [pc, #128]	; (800880c <HAL_RCC_OscConfig+0x758>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b01      	cmp	r3, #1
 8008796:	d031      	beq.n	80087fc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f003 0203 	and.w	r2, r3, #3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d12a      	bne.n	80087fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	091b      	lsrs	r3, r3, #4
 80087aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d122      	bne.n	80087fc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d11a      	bne.n	80087fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	0a5b      	lsrs	r3, r3, #9
 80087ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d111      	bne.n	80087fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d108      	bne.n	80087fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	0e1b      	lsrs	r3, r3, #24
 80087ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d001      	beq.n	8008800 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e000      	b.n	8008802 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3730      	adds	r7, #48	; 0x30
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400

08008810 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e19c      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008824:	4b8a      	ldr	r3, [pc, #552]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 030f 	and.w	r3, r3, #15
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d910      	bls.n	8008854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008832:	4b87      	ldr	r3, [pc, #540]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 020f 	bic.w	r2, r3, #15
 800883a:	4985      	ldr	r1, [pc, #532]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	4313      	orrs	r3, r2
 8008840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008842:	4b83      	ldr	r3, [pc, #524]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d001      	beq.n	8008854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e184      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d010      	beq.n	8008882 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	4b7b      	ldr	r3, [pc, #492]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800886c:	429a      	cmp	r2, r3
 800886e:	d908      	bls.n	8008882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008870:	4b78      	ldr	r3, [pc, #480]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	4975      	ldr	r1, [pc, #468]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 800887e:	4313      	orrs	r3, r2
 8008880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d010      	beq.n	80088b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695a      	ldr	r2, [r3, #20]
 8008892:	4b70      	ldr	r3, [pc, #448]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800889a:	429a      	cmp	r2, r3
 800889c:	d908      	bls.n	80088b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800889e:	4b6d      	ldr	r3, [pc, #436]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	496a      	ldr	r1, [pc, #424]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	4b64      	ldr	r3, [pc, #400]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d908      	bls.n	80088de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088cc:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	495e      	ldr	r1, [pc, #376]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d010      	beq.n	800890c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69da      	ldr	r2, [r3, #28]
 80088ee:	4b59      	ldr	r3, [pc, #356]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d908      	bls.n	800890c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088fa:	4b56      	ldr	r3, [pc, #344]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	4953      	ldr	r1, [pc, #332]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008908:	4313      	orrs	r3, r2
 800890a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d010      	beq.n	800893a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	4b4d      	ldr	r3, [pc, #308]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	429a      	cmp	r2, r3
 8008926:	d908      	bls.n	800893a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008928:	4b4a      	ldr	r3, [pc, #296]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	f023 020f 	bic.w	r2, r3, #15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	4947      	ldr	r1, [pc, #284]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008936:	4313      	orrs	r3, r2
 8008938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d055      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008946:	4b43      	ldr	r3, [pc, #268]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	4940      	ldr	r1, [pc, #256]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008954:	4313      	orrs	r3, r2
 8008956:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d107      	bne.n	8008970 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008960:	4b3c      	ldr	r3, [pc, #240]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d121      	bne.n	80089b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e0f6      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d107      	bne.n	8008988 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008978:	4b36      	ldr	r3, [pc, #216]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d115      	bne.n	80089b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e0ea      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d107      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008990:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e0de      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089a0:	4b2c      	ldr	r3, [pc, #176]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e0d6      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089b0:	4b28      	ldr	r3, [pc, #160]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f023 0207 	bic.w	r2, r3, #7
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	4925      	ldr	r1, [pc, #148]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c2:	f7fc fa25 	bl	8004e10 <HAL_GetTick>
 80089c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089c8:	e00a      	b.n	80089e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ca:	f7fc fa21 	bl	8004e10 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d8:	4293      	cmp	r3, r2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e0be      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e0:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d1eb      	bne.n	80089ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d010      	beq.n	8008a20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d208      	bcs.n	8008a20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a0e:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f023 020f 	bic.w	r2, r3, #15
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	490e      	ldr	r1, [pc, #56]	; (8008a54 <HAL_RCC_ClockConfig+0x244>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a20:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d214      	bcs.n	8008a58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a2e:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f023 020f 	bic.w	r2, r3, #15
 8008a36:	4906      	ldr	r1, [pc, #24]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a3e:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <HAL_RCC_ClockConfig+0x240>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 030f 	and.w	r3, r3, #15
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d005      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e086      	b.n	8008b5e <HAL_RCC_ClockConfig+0x34e>
 8008a50:	52002000 	.word	0x52002000
 8008a54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	4b3f      	ldr	r3, [pc, #252]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d208      	bcs.n	8008a86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a74:	4b3c      	ldr	r3, [pc, #240]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	4939      	ldr	r1, [pc, #228]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d010      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	4b34      	ldr	r3, [pc, #208]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d208      	bcs.n	8008ab4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aa2:	4b31      	ldr	r3, [pc, #196]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	492e      	ldr	r1, [pc, #184]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d010      	beq.n	8008ae2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699a      	ldr	r2, [r3, #24]
 8008ac4:	4b28      	ldr	r3, [pc, #160]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d208      	bcs.n	8008ae2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ad0:	4b25      	ldr	r3, [pc, #148]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	4922      	ldr	r1, [pc, #136]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d010      	beq.n	8008b10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69da      	ldr	r2, [r3, #28]
 8008af2:	4b1d      	ldr	r3, [pc, #116]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d208      	bcs.n	8008b10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	4917      	ldr	r1, [pc, #92]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b10:	f000 f834 	bl	8008b7c <HAL_RCC_GetSysClockFreq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	0a1b      	lsrs	r3, r3, #8
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	4912      	ldr	r1, [pc, #72]	; (8008b6c <HAL_RCC_ClockConfig+0x35c>)
 8008b22:	5ccb      	ldrb	r3, [r1, r3]
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b2e:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <HAL_RCC_ClockConfig+0x358>)
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <HAL_RCC_ClockConfig+0x35c>)
 8008b38:	5cd3      	ldrb	r3, [r2, r3]
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	fa22 f303 	lsr.w	r3, r2, r3
 8008b44:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <HAL_RCC_ClockConfig+0x360>)
 8008b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b48:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <HAL_RCC_ClockConfig+0x364>)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008b4e:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <HAL_RCC_ClockConfig+0x368>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fc f912 	bl	8004d7c <HAL_InitTick>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	58024400 	.word	0x58024400
 8008b6c:	0800e3fc 	.word	0x0800e3fc
 8008b70:	24000004 	.word	0x24000004
 8008b74:	24000000 	.word	0x24000000
 8008b78:	24000008 	.word	0x24000008

08008b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b089      	sub	sp, #36	; 0x24
 8008b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b82:	4bb3      	ldr	r3, [pc, #716]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b8a:	2b18      	cmp	r3, #24
 8008b8c:	f200 8155 	bhi.w	8008e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8008b90:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008bfd 	.word	0x08008bfd
 8008b9c:	08008e3b 	.word	0x08008e3b
 8008ba0:	08008e3b 	.word	0x08008e3b
 8008ba4:	08008e3b 	.word	0x08008e3b
 8008ba8:	08008e3b 	.word	0x08008e3b
 8008bac:	08008e3b 	.word	0x08008e3b
 8008bb0:	08008e3b 	.word	0x08008e3b
 8008bb4:	08008e3b 	.word	0x08008e3b
 8008bb8:	08008c23 	.word	0x08008c23
 8008bbc:	08008e3b 	.word	0x08008e3b
 8008bc0:	08008e3b 	.word	0x08008e3b
 8008bc4:	08008e3b 	.word	0x08008e3b
 8008bc8:	08008e3b 	.word	0x08008e3b
 8008bcc:	08008e3b 	.word	0x08008e3b
 8008bd0:	08008e3b 	.word	0x08008e3b
 8008bd4:	08008e3b 	.word	0x08008e3b
 8008bd8:	08008c29 	.word	0x08008c29
 8008bdc:	08008e3b 	.word	0x08008e3b
 8008be0:	08008e3b 	.word	0x08008e3b
 8008be4:	08008e3b 	.word	0x08008e3b
 8008be8:	08008e3b 	.word	0x08008e3b
 8008bec:	08008e3b 	.word	0x08008e3b
 8008bf0:	08008e3b 	.word	0x08008e3b
 8008bf4:	08008e3b 	.word	0x08008e3b
 8008bf8:	08008c2f 	.word	0x08008c2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bfc:	4b94      	ldr	r3, [pc, #592]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c08:	4b91      	ldr	r3, [pc, #580]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	08db      	lsrs	r3, r3, #3
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	4a90      	ldr	r2, [pc, #576]	; (8008e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c14:	fa22 f303 	lsr.w	r3, r2, r3
 8008c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008c1a:	e111      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c1c:	4b8d      	ldr	r3, [pc, #564]	; (8008e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c1e:	61bb      	str	r3, [r7, #24]
    break;
 8008c20:	e10e      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008c22:	4b8d      	ldr	r3, [pc, #564]	; (8008e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c24:	61bb      	str	r3, [r7, #24]
    break;
 8008c26:	e10b      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008c28:	4b8c      	ldr	r3, [pc, #560]	; (8008e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c2a:	61bb      	str	r3, [r7, #24]
    break;
 8008c2c:	e108      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c2e:	4b88      	ldr	r3, [pc, #544]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c38:	4b85      	ldr	r3, [pc, #532]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	091b      	lsrs	r3, r3, #4
 8008c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c44:	4b82      	ldr	r3, [pc, #520]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c4e:	4b80      	ldr	r3, [pc, #512]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c52:	08db      	lsrs	r3, r3, #3
 8008c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	fb02 f303 	mul.w	r3, r2, r3
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80e1 	beq.w	8008e34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	f000 8083 	beq.w	8008d80 <HAL_RCC_GetSysClockFreq+0x204>
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	f200 80a1 	bhi.w	8008dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <HAL_RCC_GetSysClockFreq+0x114>
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d056      	beq.n	8008d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c8e:	e099      	b.n	8008dc4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c90:	4b6f      	ldr	r3, [pc, #444]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d02d      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c9c:	4b6c      	ldr	r3, [pc, #432]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	08db      	lsrs	r3, r3, #3
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	4a6b      	ldr	r2, [pc, #428]	; (8008e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc6:	4b62      	ldr	r3, [pc, #392]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008cf6:	e087      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0a:	4b51      	ldr	r3, [pc, #324]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d3a:	e065      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4e:	4b40      	ldr	r3, [pc, #256]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d7e:	e043      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d92:	4b2f      	ldr	r3, [pc, #188]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008da6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dc2:	e021      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd6:	4b1e      	ldr	r3, [pc, #120]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008e08:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	0a5b      	lsrs	r3, r3, #9
 8008e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e12:	3301      	adds	r3, #1
 8008e14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e2c:	ee17 3a90 	vmov	r3, s15
 8008e30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e32:	e005      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	61bb      	str	r3, [r7, #24]
    break;
 8008e38:	e002      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e3c:	61bb      	str	r3, [r7, #24]
    break;
 8008e3e:	bf00      	nop
  }

  return sysclockfreq;
 8008e40:	69bb      	ldr	r3, [r7, #24]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3724      	adds	r7, #36	; 0x24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	58024400 	.word	0x58024400
 8008e54:	03d09000 	.word	0x03d09000
 8008e58:	003d0900 	.word	0x003d0900
 8008e5c:	007a1200 	.word	0x007a1200
 8008e60:	46000000 	.word	0x46000000
 8008e64:	4c742400 	.word	0x4c742400
 8008e68:	4a742400 	.word	0x4a742400
 8008e6c:	4af42400 	.word	0x4af42400

08008e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e76:	f7ff fe81 	bl	8008b7c <HAL_RCC_GetSysClockFreq>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	490f      	ldr	r1, [pc, #60]	; (8008ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e88:	5ccb      	ldrb	r3, [r1, r3]
 8008e8a:	f003 031f 	and.w	r3, r3, #31
 8008e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e94:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	f003 030f 	and.w	r3, r3, #15
 8008e9c:	4a09      	ldr	r2, [pc, #36]	; (8008ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eaa:	4a07      	ldr	r2, [pc, #28]	; (8008ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008eac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008eae:	4a07      	ldr	r2, [pc, #28]	; (8008ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	0800e3fc 	.word	0x0800e3fc
 8008ec8:	24000004 	.word	0x24000004
 8008ecc:	24000000 	.word	0x24000000

08008ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ed4:	f7ff ffcc 	bl	8008e70 <HAL_RCC_GetHCLKFreq>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	091b      	lsrs	r3, r3, #4
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	4904      	ldr	r1, [pc, #16]	; (8008ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ee6:	5ccb      	ldrb	r3, [r1, r3]
 8008ee8:	f003 031f 	and.w	r3, r3, #31
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	0800e3fc 	.word	0x0800e3fc

08008efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f00:	f7ff ffb6 	bl	8008e70 <HAL_RCC_GetHCLKFreq>
 8008f04:	4602      	mov	r2, r0
 8008f06:	4b06      	ldr	r3, [pc, #24]	; (8008f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	4904      	ldr	r1, [pc, #16]	; (8008f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f12:	5ccb      	ldrb	r3, [r1, r3]
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	58024400 	.word	0x58024400
 8008f24:	0800e3fc 	.word	0x0800e3fc

08008f28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f30:	2300      	movs	r3, #0
 8008f32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f34:	2300      	movs	r3, #0
 8008f36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d03f      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f4c:	d02a      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f52:	d824      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f58:	d018      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f5e:	d81e      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f68:	d007      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f6a:	e018      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f6c:	4ba4      	ldr	r3, [pc, #656]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	4aa3      	ldr	r2, [pc, #652]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f78:	e015      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	2102      	movs	r1, #2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f989 	bl	800a298 <RCCEx_PLL2_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f8a:	e00c      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	2102      	movs	r1, #2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 fa32 	bl	800a3fc <RCCEx_PLL3_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d109      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008fac:	4b94      	ldr	r3, [pc, #592]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb8:	4991      	ldr	r1, [pc, #580]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	650b      	str	r3, [r1, #80]	; 0x50
 8008fbe:	e001      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d03d      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d826      	bhi.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08008ff5 	.word	0x08008ff5
 8008fe4:	08009003 	.word	0x08009003
 8008fe8:	08009015 	.word	0x08009015
 8008fec:	0800902d 	.word	0x0800902d
 8008ff0:	0800902d 	.word	0x0800902d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff4:	4b82      	ldr	r3, [pc, #520]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	4a81      	ldr	r2, [pc, #516]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009000:	e015      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3304      	adds	r3, #4
 8009006:	2100      	movs	r1, #0
 8009008:	4618      	mov	r0, r3
 800900a:	f001 f945 	bl	800a298 <RCCEx_PLL2_Config>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009012:	e00c      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3324      	adds	r3, #36	; 0x24
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f001 f9ee 	bl	800a3fc <RCCEx_PLL3_Config>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009024:	e003      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	75fb      	strb	r3, [r7, #23]
      break;
 800902a:	e000      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800902c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009034:	4b72      	ldr	r3, [pc, #456]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009038:	f023 0207 	bic.w	r2, r3, #7
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009040:	496f      	ldr	r1, [pc, #444]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009042:	4313      	orrs	r3, r2
 8009044:	650b      	str	r3, [r1, #80]	; 0x50
 8009046:	e001      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009054:	2b00      	cmp	r3, #0
 8009056:	d051      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800905e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009062:	d036      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009064:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009068:	d830      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800906a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800906e:	d032      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009074:	d82a      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009076:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800907a:	d02e      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800907c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009080:	d824      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009086:	d018      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800908c:	d81e      	bhi.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009096:	d007      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009098:	e018      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800909a:	4b59      	ldr	r3, [pc, #356]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a58      	ldr	r2, [pc, #352]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090a6:	e019      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3304      	adds	r3, #4
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f8f2 	bl	800a298 <RCCEx_PLL2_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80090b8:	e010      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3324      	adds	r3, #36	; 0x24
 80090be:	2100      	movs	r1, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 f99b 	bl	800a3fc <RCCEx_PLL3_Config>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090ca:	e007      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]
      break;
 80090d0:	e004      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090d2:	bf00      	nop
 80090d4:	e002      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090d6:	bf00      	nop
 80090d8:	e000      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090e2:	4b47      	ldr	r3, [pc, #284]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090f0:	4943      	ldr	r1, [pc, #268]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	658b      	str	r3, [r1, #88]	; 0x58
 80090f6:	e001      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009104:	2b00      	cmp	r3, #0
 8009106:	d051      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800910e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009112:	d036      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009114:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009118:	d830      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800911a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800911e:	d032      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009124:	d82a      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009126:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800912a:	d02e      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800912c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009130:	d824      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009136:	d018      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800913c:	d81e      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009142:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009146:	d007      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009148:	e018      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800914a:	4b2d      	ldr	r3, [pc, #180]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	4a2c      	ldr	r2, [pc, #176]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009154:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009156:	e019      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3304      	adds	r3, #4
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f001 f89a 	bl	800a298 <RCCEx_PLL2_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009168:	e010      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3324      	adds	r3, #36	; 0x24
 800916e:	2100      	movs	r1, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f001 f943 	bl	800a3fc <RCCEx_PLL3_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800917a:	e007      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	75fb      	strb	r3, [r7, #23]
      break;
 8009180:	e004      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009182:	bf00      	nop
 8009184:	e002      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800918a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009192:	4b1b      	ldr	r3, [pc, #108]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009196:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091a0:	4917      	ldr	r1, [pc, #92]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	658b      	str	r3, [r1, #88]	; 0x58
 80091a6:	e001      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d035      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091bc:	2b30      	cmp	r3, #48	; 0x30
 80091be:	d01c      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091c0:	2b30      	cmp	r3, #48	; 0x30
 80091c2:	d817      	bhi.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d00c      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d813      	bhi.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d019      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80091d0:	2b10      	cmp	r3, #16
 80091d2:	d10f      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	4a09      	ldr	r2, [pc, #36]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80091e0:	e011      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3304      	adds	r3, #4
 80091e6:	2102      	movs	r1, #2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 f855 	bl	800a298 <RCCEx_PLL2_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80091f2:	e008      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
      break;
 80091f8:	e005      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80091fa:	bf00      	nop
 80091fc:	e003      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80091fe:	bf00      	nop
 8009200:	58024400 	.word	0x58024400
      break;
 8009204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d109      	bne.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800920c:	4ba3      	ldr	r3, [pc, #652]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800920e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009210:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009218:	49a0      	ldr	r1, [pc, #640]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800921a:	4313      	orrs	r3, r2
 800921c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800921e:	e001      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d047      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009238:	d030      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800923a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800923e:	d82a      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009244:	d02c      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800924a:	d824      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800924c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009250:	d018      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009256:	d81e      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800925c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009260:	d007      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009262:	e018      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009264:	4b8d      	ldr	r3, [pc, #564]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	4a8c      	ldr	r2, [pc, #560]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800926a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800926e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009270:	e017      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3304      	adds	r3, #4
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f80d 	bl	800a298 <RCCEx_PLL2_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009282:	e00e      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f001 f8b6 	bl	800a3fc <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009294:	e005      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75fb      	strb	r3, [r7, #23]
      break;
 800929a:	e002      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800929c:	bf00      	nop
 800929e:	e000      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80092a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092a8:	4b7c      	ldr	r3, [pc, #496]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b4:	4979      	ldr	r1, [pc, #484]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	650b      	str	r3, [r1, #80]	; 0x50
 80092ba:	e001      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d049      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092d4:	d02e      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80092d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092da:	d828      	bhi.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092e0:	d02a      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80092e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092e6:	d822      	bhi.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092ec:	d026      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80092ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092f2:	d81c      	bhi.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f8:	d010      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80092fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092fe:	d816      	bhi.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01d      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009308:	d111      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3304      	adds	r3, #4
 800930e:	2101      	movs	r1, #1
 8009310:	4618      	mov	r0, r3
 8009312:	f000 ffc1 	bl	800a298 <RCCEx_PLL2_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800931a:	e012      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3324      	adds	r3, #36	; 0x24
 8009320:	2101      	movs	r1, #1
 8009322:	4618      	mov	r0, r3
 8009324:	f001 f86a 	bl	800a3fc <RCCEx_PLL3_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800932c:	e009      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
      break;
 8009332:	e006      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009334:	bf00      	nop
 8009336:	e004      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009338:	bf00      	nop
 800933a:	e002      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800933c:	bf00      	nop
 800933e:	e000      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d109      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009348:	4b54      	ldr	r3, [pc, #336]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009354:	4951      	ldr	r1, [pc, #324]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009356:	4313      	orrs	r3, r2
 8009358:	650b      	str	r3, [r1, #80]	; 0x50
 800935a:	e001      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d04b      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009376:	d02e      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800937c:	d828      	bhi.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800937e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009382:	d02a      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009388:	d822      	bhi.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800938a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800938e:	d026      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009390:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009394:	d81c      	bhi.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939a:	d010      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x496>
 800939c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a0:	d816      	bhi.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01d      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80093a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093aa:	d111      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3304      	adds	r3, #4
 80093b0:	2101      	movs	r1, #1
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 ff70 	bl	800a298 <RCCEx_PLL2_Config>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093bc:	e012      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3324      	adds	r3, #36	; 0x24
 80093c2:	2101      	movs	r1, #1
 80093c4:	4618      	mov	r0, r3
 80093c6:	f001 f819 	bl	800a3fc <RCCEx_PLL3_Config>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093ce:	e009      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	75fb      	strb	r3, [r7, #23]
      break;
 80093d4:	e006      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093d6:	bf00      	nop
 80093d8:	e004      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093da:	bf00      	nop
 80093dc:	e002      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093de:	bf00      	nop
 80093e0:	e000      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10a      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093ea:	4b2c      	ldr	r3, [pc, #176]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093f8:	4928      	ldr	r1, [pc, #160]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	658b      	str	r3, [r1, #88]	; 0x58
 80093fe:	e001      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d02f      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009418:	d00e      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800941a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800941e:	d814      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d015      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009428:	d10f      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	4a1b      	ldr	r2, [pc, #108]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009436:	e00c      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	2101      	movs	r1, #1
 800943e:	4618      	mov	r0, r3
 8009440:	f000 ff2a 	bl	800a298 <RCCEx_PLL2_Config>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009448:	e003      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	75fb      	strb	r3, [r7, #23]
      break;
 800944e:	e000      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009458:	4b10      	ldr	r3, [pc, #64]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800945a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009464:	490d      	ldr	r1, [pc, #52]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009466:	4313      	orrs	r3, r2
 8009468:	650b      	str	r3, [r1, #80]	; 0x50
 800946a:	e001      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d034      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009480:	2b03      	cmp	r3, #3
 8009482:	d81d      	bhi.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009484:	a201      	add	r2, pc, #4	; (adr r2, 800948c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080094c7 	.word	0x080094c7
 8009490:	080094a1 	.word	0x080094a1
 8009494:	080094af 	.word	0x080094af
 8009498:	080094c7 	.word	0x080094c7
 800949c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a0:	4bb1      	ldr	r3, [pc, #708]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	4ab0      	ldr	r2, [pc, #704]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094ac:	e00c      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3304      	adds	r3, #4
 80094b2:	2102      	movs	r1, #2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 feef 	bl	800a298 <RCCEx_PLL2_Config>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094be:	e003      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	75fb      	strb	r3, [r7, #23]
      break;
 80094c4:	e000      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80094c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d109      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094ce:	4ba6      	ldr	r3, [pc, #664]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d2:	f023 0203 	bic.w	r2, r3, #3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094da:	49a3      	ldr	r1, [pc, #652]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094e0:	e001      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 8086 	beq.w	8009600 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094f4:	4b9d      	ldr	r3, [pc, #628]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a9c      	ldr	r2, [pc, #624]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80094fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009500:	f7fb fc86 	bl	8004e10 <HAL_GetTick>
 8009504:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009506:	e009      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009508:	f7fb fc82 	bl	8004e10 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b64      	cmp	r3, #100	; 0x64
 8009514:	d902      	bls.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	75fb      	strb	r3, [r7, #23]
        break;
 800951a:	e005      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800951c:	4b93      	ldr	r3, [pc, #588]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0ef      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d166      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800952e:	4b8e      	ldr	r3, [pc, #568]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009538:	4053      	eors	r3, r2
 800953a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800953e:	2b00      	cmp	r3, #0
 8009540:	d013      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009542:	4b89      	ldr	r3, [pc, #548]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800954c:	4b86      	ldr	r3, [pc, #536]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800954e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009550:	4a85      	ldr	r2, [pc, #532]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009556:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009558:	4b83      	ldr	r3, [pc, #524]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800955a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955c:	4a82      	ldr	r2, [pc, #520]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800955e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009562:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009564:	4a80      	ldr	r2, [pc, #512]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009574:	d115      	bne.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009576:	f7fb fc4b 	bl	8004e10 <HAL_GetTick>
 800957a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800957c:	e00b      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800957e:	f7fb fc47 	bl	8004e10 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	f241 3288 	movw	r2, #5000	; 0x1388
 800958c:	4293      	cmp	r3, r2
 800958e:	d902      	bls.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	75fb      	strb	r3, [r7, #23]
            break;
 8009594:	e005      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009596:	4b74      	ldr	r3, [pc, #464]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0ed      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d126      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b6:	d10d      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80095b8:	4b6b      	ldr	r3, [pc, #428]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095c6:	0919      	lsrs	r1, r3, #4
 80095c8:	4b69      	ldr	r3, [pc, #420]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80095ca:	400b      	ands	r3, r1
 80095cc:	4966      	ldr	r1, [pc, #408]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	610b      	str	r3, [r1, #16]
 80095d2:	e005      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80095d4:	4b64      	ldr	r3, [pc, #400]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	4a63      	ldr	r2, [pc, #396]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095de:	6113      	str	r3, [r2, #16]
 80095e0:	4b61      	ldr	r3, [pc, #388]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ee:	495e      	ldr	r1, [pc, #376]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	670b      	str	r3, [r1, #112]	; 0x70
 80095f4:	e004      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	75bb      	strb	r3, [r7, #22]
 80095fa:	e001      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d07e      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009610:	2b28      	cmp	r3, #40	; 0x28
 8009612:	d867      	bhi.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009614:	a201      	add	r2, pc, #4	; (adr r2, 800961c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	080096eb 	.word	0x080096eb
 8009620:	080096e5 	.word	0x080096e5
 8009624:	080096e5 	.word	0x080096e5
 8009628:	080096e5 	.word	0x080096e5
 800962c:	080096e5 	.word	0x080096e5
 8009630:	080096e5 	.word	0x080096e5
 8009634:	080096e5 	.word	0x080096e5
 8009638:	080096e5 	.word	0x080096e5
 800963c:	080096c1 	.word	0x080096c1
 8009640:	080096e5 	.word	0x080096e5
 8009644:	080096e5 	.word	0x080096e5
 8009648:	080096e5 	.word	0x080096e5
 800964c:	080096e5 	.word	0x080096e5
 8009650:	080096e5 	.word	0x080096e5
 8009654:	080096e5 	.word	0x080096e5
 8009658:	080096e5 	.word	0x080096e5
 800965c:	080096d3 	.word	0x080096d3
 8009660:	080096e5 	.word	0x080096e5
 8009664:	080096e5 	.word	0x080096e5
 8009668:	080096e5 	.word	0x080096e5
 800966c:	080096e5 	.word	0x080096e5
 8009670:	080096e5 	.word	0x080096e5
 8009674:	080096e5 	.word	0x080096e5
 8009678:	080096e5 	.word	0x080096e5
 800967c:	080096eb 	.word	0x080096eb
 8009680:	080096e5 	.word	0x080096e5
 8009684:	080096e5 	.word	0x080096e5
 8009688:	080096e5 	.word	0x080096e5
 800968c:	080096e5 	.word	0x080096e5
 8009690:	080096e5 	.word	0x080096e5
 8009694:	080096e5 	.word	0x080096e5
 8009698:	080096e5 	.word	0x080096e5
 800969c:	080096eb 	.word	0x080096eb
 80096a0:	080096e5 	.word	0x080096e5
 80096a4:	080096e5 	.word	0x080096e5
 80096a8:	080096e5 	.word	0x080096e5
 80096ac:	080096e5 	.word	0x080096e5
 80096b0:	080096e5 	.word	0x080096e5
 80096b4:	080096e5 	.word	0x080096e5
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	080096eb 	.word	0x080096eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	2101      	movs	r1, #1
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fde6 	bl	800a298 <RCCEx_PLL2_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096d0:	e00c      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3324      	adds	r3, #36	; 0x24
 80096d6:	2101      	movs	r1, #1
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fe8f 	bl	800a3fc <RCCEx_PLL3_Config>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096e2:	e003      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	75fb      	strb	r3, [r7, #23]
      break;
 80096e8:	e000      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80096ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096fe:	491a      	ldr	r1, [pc, #104]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009700:	4313      	orrs	r3, r2
 8009702:	654b      	str	r3, [r1, #84]	; 0x54
 8009704:	e001      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d03e      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	2b05      	cmp	r3, #5
 800971c:	d820      	bhi.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800971e:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	08009775 	.word	0x08009775
 8009728:	0800973d 	.word	0x0800973d
 800972c:	0800974f 	.word	0x0800974f
 8009730:	08009775 	.word	0x08009775
 8009734:	08009775 	.word	0x08009775
 8009738:	08009775 	.word	0x08009775
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3304      	adds	r3, #4
 8009740:	2101      	movs	r1, #1
 8009742:	4618      	mov	r0, r3
 8009744:	f000 fda8 	bl	800a298 <RCCEx_PLL2_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800974c:	e013      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3324      	adds	r3, #36	; 0x24
 8009752:	2101      	movs	r1, #1
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fe51 	bl	800a3fc <RCCEx_PLL3_Config>
 800975a:	4603      	mov	r3, r0
 800975c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800975e:	e00a      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	75fb      	strb	r3, [r7, #23]
      break;
 8009764:	e007      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
 800976c:	58024800 	.word	0x58024800
 8009770:	00ffffcf 	.word	0x00ffffcf
      break;
 8009774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d109      	bne.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800977c:	4b9f      	ldr	r3, [pc, #636]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800977e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009780:	f023 0207 	bic.w	r2, r3, #7
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009788:	499c      	ldr	r1, [pc, #624]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800978a:	4313      	orrs	r3, r2
 800978c:	654b      	str	r3, [r1, #84]	; 0x54
 800978e:	e001      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d039      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d820      	bhi.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097f3 	.word	0x080097f3
 80097b4:	080097c9 	.word	0x080097c9
 80097b8:	080097db 	.word	0x080097db
 80097bc:	080097f3 	.word	0x080097f3
 80097c0:	080097f3 	.word	0x080097f3
 80097c4:	080097f3 	.word	0x080097f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	2101      	movs	r1, #1
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fd62 	bl	800a298 <RCCEx_PLL2_Config>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097d8:	e00c      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3324      	adds	r3, #36	; 0x24
 80097de:	2101      	movs	r1, #1
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fe0b 	bl	800a3fc <RCCEx_PLL3_Config>
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097ea:	e003      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	75fb      	strb	r3, [r7, #23]
      break;
 80097f0:	e000      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80097f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097fa:	4b80      	ldr	r3, [pc, #512]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fe:	f023 0207 	bic.w	r2, r3, #7
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009808:	497c      	ldr	r1, [pc, #496]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800980a:	4313      	orrs	r3, r2
 800980c:	658b      	str	r3, [r1, #88]	; 0x58
 800980e:	e001      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b00      	cmp	r3, #0
 800981e:	d04b      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800982a:	d02e      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800982c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009830:	d828      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009836:	d02a      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983c:	d822      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800983e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009842:	d026      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009844:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009848:	d81c      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800984a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984e:	d010      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009854:	d816      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01d      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800985a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800985e:	d111      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3304      	adds	r3, #4
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fd16 	bl	800a298 <RCCEx_PLL2_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009870:	e012      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	3324      	adds	r3, #36	; 0x24
 8009876:	2102      	movs	r1, #2
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fdbf 	bl	800a3fc <RCCEx_PLL3_Config>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009882:	e009      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	75fb      	strb	r3, [r7, #23]
      break;
 8009888:	e006      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800988a:	bf00      	nop
 800988c:	e004      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800988e:	bf00      	nop
 8009890:	e002      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009892:	bf00      	nop
 8009894:	e000      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800989e:	4b57      	ldr	r3, [pc, #348]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80098a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	4953      	ldr	r1, [pc, #332]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	654b      	str	r3, [r1, #84]	; 0x54
 80098b2:	e001      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d04b      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098ce:	d02e      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80098d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098d4:	d828      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098da:	d02a      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80098dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e0:	d822      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098e6:	d026      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80098e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098ec:	d81c      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f2:	d010      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80098f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f8:	d816      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d01d      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80098fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009902:	d111      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3304      	adds	r3, #4
 8009908:	2100      	movs	r1, #0
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fcc4 	bl	800a298 <RCCEx_PLL2_Config>
 8009910:	4603      	mov	r3, r0
 8009912:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009914:	e012      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3324      	adds	r3, #36	; 0x24
 800991a:	2102      	movs	r1, #2
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fd6d 	bl	800a3fc <RCCEx_PLL3_Config>
 8009922:	4603      	mov	r3, r0
 8009924:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009926:	e009      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	75fb      	strb	r3, [r7, #23]
      break;
 800992c:	e006      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800992e:	bf00      	nop
 8009930:	e004      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800993a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009942:	4b2e      	ldr	r3, [pc, #184]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009946:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009950:	492a      	ldr	r1, [pc, #168]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009952:	4313      	orrs	r3, r2
 8009954:	658b      	str	r3, [r1, #88]	; 0x58
 8009956:	e001      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009964:	2b00      	cmp	r3, #0
 8009966:	d04d      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800996e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009972:	d02e      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009974:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009978:	d828      	bhi.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800997a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800997e:	d02a      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009984:	d822      	bhi.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009986:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800998a:	d026      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800998c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009990:	d81c      	bhi.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009996:	d010      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800999c:	d816      	bhi.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01d      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80099a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099a6:	d111      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fc72 	bl	800a298 <RCCEx_PLL2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099b8:	e012      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3324      	adds	r3, #36	; 0x24
 80099be:	2102      	movs	r1, #2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 fd1b 	bl	800a3fc <RCCEx_PLL3_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099ca:	e009      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	75fb      	strb	r3, [r7, #23]
      break;
 80099d0:	e006      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099d2:	bf00      	nop
 80099d4:	e004      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099d6:	bf00      	nop
 80099d8:	e002      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099da:	bf00      	nop
 80099dc:	e000      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10c      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099f4:	4901      	ldr	r1, [pc, #4]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	658b      	str	r3, [r1, #88]	; 0x58
 80099fa:	e003      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80099fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d018      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a18:	d10a      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3324      	adds	r3, #36	; 0x24
 8009a1e:	2102      	movs	r1, #2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fceb 	bl	800a3fc <RCCEx_PLL3_Config>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a30:	4b8a      	ldr	r3, [pc, #552]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a3c:	4987      	ldr	r1, [pc, #540]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0310 	and.w	r3, r3, #16
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d01a      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a58:	d10a      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3324      	adds	r3, #36	; 0x24
 8009a5e:	2102      	movs	r1, #2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fccb 	bl	800a3fc <RCCEx_PLL3_Config>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a70:	4b7a      	ldr	r3, [pc, #488]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7e:	4977      	ldr	r1, [pc, #476]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d034      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a9a:	d01d      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aa0:	d817      	bhi.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aaa:	d009      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009aac:	e011      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fbef 	bl	800a298 <RCCEx_PLL2_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009abe:	e00c      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3324      	adds	r3, #36	; 0x24
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fc98 	bl	800a3fc <RCCEx_PLL3_Config>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ad0:	e003      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad6:	e000      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ae0:	4b5e      	ldr	r3, [pc, #376]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009aee:	495b      	ldr	r1, [pc, #364]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009af0:	4313      	orrs	r3, r2
 8009af2:	658b      	str	r3, [r1, #88]	; 0x58
 8009af4:	e001      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d033      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b10:	d01c      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009b12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b16:	d816      	bhi.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b1c:	d003      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b22:	d007      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009b24:	e00f      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b26:	4b4d      	ldr	r3, [pc, #308]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	4a4c      	ldr	r2, [pc, #304]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b32:	e00c      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3324      	adds	r3, #36	; 0x24
 8009b38:	2101      	movs	r1, #1
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fc5e 	bl	800a3fc <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b44:	e003      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]
      break;
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b54:	4b41      	ldr	r3, [pc, #260]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b62:	493e      	ldr	r1, [pc, #248]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b64:	4313      	orrs	r3, r2
 8009b66:	654b      	str	r3, [r1, #84]	; 0x54
 8009b68:	e001      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d029      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b86:	d007      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009b88:	e00f      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b8a:	4b34      	ldr	r3, [pc, #208]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	4a33      	ldr	r2, [pc, #204]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b96:	e00b      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fb7a 	bl	800a298 <RCCEx_PLL2_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	75fb      	strb	r3, [r7, #23]
      break;
 8009bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d109      	bne.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc2:	4926      	ldr	r1, [pc, #152]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bc8:	e001      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3324      	adds	r3, #36	; 0x24
 8009bde:	2102      	movs	r1, #2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fc0b 	bl	800a3fc <RCCEx_PLL3_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d033      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c04:	d017      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c0a:	d811      	bhi.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c10:	d013      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c16:	d80b      	bhi.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d010      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c20:	d106      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c22:	4b0e      	ldr	r3, [pc, #56]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	4a0d      	ldr	r2, [pc, #52]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c2e:	e007      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	75fb      	strb	r3, [r7, #23]
      break;
 8009c34:	e004      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c36:	bf00      	nop
 8009c38:	e002      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c3a:	bf00      	nop
 8009c3c:	e000      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10c      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c46:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c52:	4902      	ldr	r1, [pc, #8]	; (8009c5c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	654b      	str	r3, [r1, #84]	; 0x54
 8009c58:	e004      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009c5a:	bf00      	nop
 8009c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d008      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c70:	4b29      	ldr	r3, [pc, #164]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7c:	4926      	ldr	r1, [pc, #152]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d008      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c8e:	4b22      	ldr	r3, [pc, #136]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c9a:	491f      	ldr	r1, [pc, #124]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00d      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cac:	4b1a      	ldr	r3, [pc, #104]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	4a19      	ldr	r2, [pc, #100]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cb6:	6113      	str	r3, [r2, #16]
 8009cb8:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cba:	691a      	ldr	r2, [r3, #16]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cc2:	4915      	ldr	r1, [pc, #84]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da08      	bge.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cd0:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cdc:	490e      	ldr	r1, [pc, #56]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009cee:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cfc:	4906      	ldr	r1, [pc, #24]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009d02:	7dbb      	ldrb	r3, [r7, #22]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e000      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400

08009d1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d20:	f7ff f8a6 	bl	8008e70 <HAL_RCC_GetHCLKFreq>
 8009d24:	4602      	mov	r2, r0
 8009d26:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	091b      	lsrs	r3, r3, #4
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	4904      	ldr	r1, [pc, #16]	; (8009d44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d32:	5ccb      	ldrb	r3, [r1, r3]
 8009d34:	f003 031f 	and.w	r3, r3, #31
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	58024400 	.word	0x58024400
 8009d44:	0800e3fc 	.word	0x0800e3fc

08009d48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b089      	sub	sp, #36	; 0x24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d50:	4ba1      	ldr	r3, [pc, #644]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d54:	f003 0303 	and.w	r3, r3, #3
 8009d58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d5a:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	0b1b      	lsrs	r3, r3, #12
 8009d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d66:	4b9c      	ldr	r3, [pc, #624]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	091b      	lsrs	r3, r3, #4
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d72:	4b99      	ldr	r3, [pc, #612]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d76:	08db      	lsrs	r3, r3, #3
 8009d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	fb02 f303 	mul.w	r3, r2, r3
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 8111 	beq.w	8009fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	f000 8083 	beq.w	8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	f200 80a1 	bhi.w	8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d056      	beq.n	8009e60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009db2:	e099      	b.n	8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009db4:	4b88      	ldr	r3, [pc, #544]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02d      	beq.n	8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dc0:	4b85      	ldr	r3, [pc, #532]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	08db      	lsrs	r3, r3, #3
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	4a84      	ldr	r2, [pc, #528]	; (8009fdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dea:	4b7b      	ldr	r3, [pc, #492]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e1a:	e087      	b.n	8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2e:	4b6a      	ldr	r3, [pc, #424]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e5e:	e065      	b.n	8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e72:	4b59      	ldr	r3, [pc, #356]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7a:	ee07 3a90 	vmov	s15, r3
 8009e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ea2:	e043      	b.n	8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb6:	4b48      	ldr	r3, [pc, #288]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ee6:	e021      	b.n	8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efa:	4b37      	ldr	r3, [pc, #220]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f02:	ee07 3a90 	vmov	s15, r3
 8009f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f2c:	4b2a      	ldr	r3, [pc, #168]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f30:	0a5b      	lsrs	r3, r3, #9
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f52:	ee17 2a90 	vmov	r2, s15
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f5a:	4b1f      	ldr	r3, [pc, #124]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f64:	ee07 3a90 	vmov	s15, r3
 8009f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f80:	ee17 2a90 	vmov	r2, s15
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009f88:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	0e1b      	lsrs	r3, r3, #24
 8009f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fae:	ee17 2a90 	vmov	r2, s15
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009fb6:	e008      	b.n	8009fca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	609a      	str	r2, [r3, #8]
}
 8009fca:	bf00      	nop
 8009fcc:	3724      	adds	r7, #36	; 0x24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	58024400 	.word	0x58024400
 8009fdc:	03d09000 	.word	0x03d09000
 8009fe0:	46000000 	.word	0x46000000
 8009fe4:	4c742400 	.word	0x4c742400
 8009fe8:	4a742400 	.word	0x4a742400
 8009fec:	4af42400 	.word	0x4af42400

08009ff0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b089      	sub	sp, #36	; 0x24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ff8:	4ba1      	ldr	r3, [pc, #644]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	f003 0303 	and.w	r3, r3, #3
 800a000:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a002:	4b9f      	ldr	r3, [pc, #636]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a006:	0d1b      	lsrs	r3, r3, #20
 800a008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a00c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a00e:	4b9c      	ldr	r3, [pc, #624]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	0a1b      	lsrs	r3, r3, #8
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a01a:	4b99      	ldr	r3, [pc, #612]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01e:	08db      	lsrs	r3, r3, #3
 800a020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	fb02 f303 	mul.w	r3, r2, r3
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8111 	beq.w	800a260 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b02      	cmp	r3, #2
 800a042:	f000 8083 	beq.w	800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	f200 80a1 	bhi.w	800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d056      	beq.n	800a108 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a05a:	e099      	b.n	800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a05c:	4b88      	ldr	r3, [pc, #544]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0320 	and.w	r3, r3, #32
 800a064:	2b00      	cmp	r3, #0
 800a066:	d02d      	beq.n	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a068:	4b85      	ldr	r3, [pc, #532]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	08db      	lsrs	r3, r3, #3
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	4a84      	ldr	r2, [pc, #528]	; (800a284 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a074:	fa22 f303 	lsr.w	r3, r2, r3
 800a078:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	ee07 3a90 	vmov	s15, r3
 800a080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	ee07 3a90 	vmov	s15, r3
 800a08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a092:	4b7b      	ldr	r3, [pc, #492]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0c2:	e087      	b.n	800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a28c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d6:	4b6a      	ldr	r3, [pc, #424]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a106:	e065      	b.n	800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11a:	4b59      	ldr	r3, [pc, #356]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a14a:	e043      	b.n	800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a156:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a15e:	4b48      	ldr	r3, [pc, #288]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a172:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a18e:	e021      	b.n	800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a2:	4b37      	ldr	r3, [pc, #220]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a288 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1d4:	4b2a      	ldr	r3, [pc, #168]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	0a5b      	lsrs	r3, r3, #9
 800a1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1fa:	ee17 2a90 	vmov	r2, s15
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a202:	4b1f      	ldr	r3, [pc, #124]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a20c:	ee07 3a90 	vmov	s15, r3
 800a210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a21c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a228:	ee17 2a90 	vmov	r2, s15
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a230:	4b13      	ldr	r3, [pc, #76]	; (800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a234:	0e1b      	lsrs	r3, r3, #24
 800a236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a24a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a24e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a256:	ee17 2a90 	vmov	r2, s15
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a25e:	e008      	b.n	800a272 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	609a      	str	r2, [r3, #8]
}
 800a272:	bf00      	nop
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	58024400 	.word	0x58024400
 800a284:	03d09000 	.word	0x03d09000
 800a288:	46000000 	.word	0x46000000
 800a28c:	4c742400 	.word	0x4c742400
 800a290:	4a742400 	.word	0x4a742400
 800a294:	4af42400 	.word	0x4af42400

0800a298 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2a6:	4b53      	ldr	r3, [pc, #332]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d101      	bne.n	800a2b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e099      	b.n	800a3ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2b6:	4b4f      	ldr	r3, [pc, #316]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a4e      	ldr	r2, [pc, #312]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2c2:	f7fa fda5 	bl	8004e10 <HAL_GetTick>
 800a2c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2c8:	e008      	b.n	800a2dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2ca:	f7fa fda1 	bl	8004e10 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d901      	bls.n	800a2dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e086      	b.n	800a3ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2dc:	4b45      	ldr	r3, [pc, #276]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1f0      	bne.n	800a2ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2e8:	4b42      	ldr	r3, [pc, #264]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	031b      	lsls	r3, r3, #12
 800a2f6:	493f      	ldr	r1, [pc, #252]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	628b      	str	r3, [r1, #40]	; 0x28
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	3b01      	subs	r3, #1
 800a302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	025b      	lsls	r3, r3, #9
 800a30e:	b29b      	uxth	r3, r3
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	3b01      	subs	r3, #1
 800a318:	041b      	lsls	r3, r3, #16
 800a31a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	3b01      	subs	r3, #1
 800a326:	061b      	lsls	r3, r3, #24
 800a328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a32c:	4931      	ldr	r1, [pc, #196]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a332:	4b30      	ldr	r3, [pc, #192]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	492d      	ldr	r1, [pc, #180]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a340:	4313      	orrs	r3, r2
 800a342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a344:	4b2b      	ldr	r3, [pc, #172]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	f023 0220 	bic.w	r2, r3, #32
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	4928      	ldr	r1, [pc, #160]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a352:	4313      	orrs	r3, r2
 800a354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a356:	4b27      	ldr	r3, [pc, #156]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	4a26      	ldr	r2, [pc, #152]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	f023 0310 	bic.w	r3, r3, #16
 800a360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a362:	4b24      	ldr	r3, [pc, #144]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a366:	4b24      	ldr	r3, [pc, #144]	; (800a3f8 <RCCEx_PLL2_Config+0x160>)
 800a368:	4013      	ands	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	69d2      	ldr	r2, [r2, #28]
 800a36e:	00d2      	lsls	r2, r2, #3
 800a370:	4920      	ldr	r1, [pc, #128]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a376:	4b1f      	ldr	r3, [pc, #124]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	4a1e      	ldr	r2, [pc, #120]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a37c:	f043 0310 	orr.w	r3, r3, #16
 800a380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d106      	bne.n	800a396 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a388:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	4a19      	ldr	r2, [pc, #100]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a392:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a394:	e00f      	b.n	800a3b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d106      	bne.n	800a3aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a39c:	4b15      	ldr	r3, [pc, #84]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	4a14      	ldr	r2, [pc, #80]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3a8:	e005      	b.n	800a3b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3aa:	4b12      	ldr	r3, [pc, #72]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	4a11      	ldr	r2, [pc, #68]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3b6:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a0e      	ldr	r2, [pc, #56]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3c2:	f7fa fd25 	bl	8004e10 <HAL_GetTick>
 800a3c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3c8:	e008      	b.n	800a3dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3ca:	f7fa fd21 	bl	8004e10 <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d901      	bls.n	800a3dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e006      	b.n	800a3ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3dc:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <RCCEx_PLL2_Config+0x15c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0f0      	beq.n	800a3ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	ffff0007 	.word	0xffff0007

0800a3fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a40a:	4b53      	ldr	r3, [pc, #332]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	2b03      	cmp	r3, #3
 800a414:	d101      	bne.n	800a41a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e099      	b.n	800a54e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a41a:	4b4f      	ldr	r3, [pc, #316]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a4e      	ldr	r2, [pc, #312]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a426:	f7fa fcf3 	bl	8004e10 <HAL_GetTick>
 800a42a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a42c:	e008      	b.n	800a440 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a42e:	f7fa fcef 	bl	8004e10 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d901      	bls.n	800a440 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e086      	b.n	800a54e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a440:	4b45      	ldr	r3, [pc, #276]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1f0      	bne.n	800a42e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a44c:	4b42      	ldr	r3, [pc, #264]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a450:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	051b      	lsls	r3, r3, #20
 800a45a:	493f      	ldr	r1, [pc, #252]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	628b      	str	r3, [r1, #40]	; 0x28
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	3b01      	subs	r3, #1
 800a466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	3b01      	subs	r3, #1
 800a470:	025b      	lsls	r3, r3, #9
 800a472:	b29b      	uxth	r3, r3
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	041b      	lsls	r3, r3, #16
 800a47e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	3b01      	subs	r3, #1
 800a48a:	061b      	lsls	r3, r3, #24
 800a48c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a490:	4931      	ldr	r1, [pc, #196]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a492:	4313      	orrs	r3, r2
 800a494:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a496:	4b30      	ldr	r3, [pc, #192]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	492d      	ldr	r1, [pc, #180]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4a8:	4b2b      	ldr	r3, [pc, #172]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	4928      	ldr	r1, [pc, #160]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4ba:	4b27      	ldr	r3, [pc, #156]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	4a26      	ldr	r2, [pc, #152]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4c6:	4b24      	ldr	r3, [pc, #144]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ca:	4b24      	ldr	r3, [pc, #144]	; (800a55c <RCCEx_PLL3_Config+0x160>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	69d2      	ldr	r2, [r2, #28]
 800a4d2:	00d2      	lsls	r2, r2, #3
 800a4d4:	4920      	ldr	r1, [pc, #128]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4da:	4b1f      	ldr	r3, [pc, #124]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	4a1e      	ldr	r2, [pc, #120]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d106      	bne.n	800a4fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4ec:	4b1a      	ldr	r3, [pc, #104]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	4a19      	ldr	r2, [pc, #100]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4f8:	e00f      	b.n	800a51a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d106      	bne.n	800a50e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a500:	4b15      	ldr	r3, [pc, #84]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	4a14      	ldr	r2, [pc, #80]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a50a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a50c:	e005      	b.n	800a51a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a50e:	4b12      	ldr	r3, [pc, #72]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	4a11      	ldr	r2, [pc, #68]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a518:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a51a:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a0e      	ldr	r2, [pc, #56]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a526:	f7fa fc73 	bl	8004e10 <HAL_GetTick>
 800a52a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a52c:	e008      	b.n	800a540 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a52e:	f7fa fc6f 	bl	8004e10 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d901      	bls.n	800a540 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e006      	b.n	800a54e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <RCCEx_PLL3_Config+0x15c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0f0      	beq.n	800a52e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
 800a55c:	ffff0007 	.word	0xffff0007

0800a560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e049      	b.n	800a606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7fa f864 	bl	8004654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f000 fdc0 	bl	800b124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	d001      	beq.n	800a628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e05e      	b.n	800a6e6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f042 0201 	orr.w	r2, r2, #1
 800a63e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a2b      	ldr	r2, [pc, #172]	; (800a6f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d02c      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a652:	d027      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a27      	ldr	r2, [pc, #156]	; (800a6f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d022      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a26      	ldr	r2, [pc, #152]	; (800a6fc <HAL_TIM_Base_Start_IT+0xec>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d01d      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a24      	ldr	r2, [pc, #144]	; (800a700 <HAL_TIM_Base_Start_IT+0xf0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d018      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a23      	ldr	r2, [pc, #140]	; (800a704 <HAL_TIM_Base_Start_IT+0xf4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d013      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a21      	ldr	r2, [pc, #132]	; (800a708 <HAL_TIM_Base_Start_IT+0xf8>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00e      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a20      	ldr	r2, [pc, #128]	; (800a70c <HAL_TIM_Base_Start_IT+0xfc>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d009      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1e      	ldr	r2, [pc, #120]	; (800a710 <HAL_TIM_Base_Start_IT+0x100>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d004      	beq.n	800a6a4 <HAL_TIM_Base_Start_IT+0x94>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a1d      	ldr	r2, [pc, #116]	; (800a714 <HAL_TIM_Base_Start_IT+0x104>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d115      	bne.n	800a6d0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <HAL_TIM_Base_Start_IT+0x108>)
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b06      	cmp	r3, #6
 800a6b4:	d015      	beq.n	800a6e2 <HAL_TIM_Base_Start_IT+0xd2>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6bc:	d011      	beq.n	800a6e2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f042 0201 	orr.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ce:	e008      	b.n	800a6e2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0201 	orr.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	e000      	b.n	800a6e4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	40010000 	.word	0x40010000
 800a6f8:	40000400 	.word	0x40000400
 800a6fc:	40000800 	.word	0x40000800
 800a700:	40000c00 	.word	0x40000c00
 800a704:	40010400 	.word	0x40010400
 800a708:	40001800 	.word	0x40001800
 800a70c:	40014000 	.word	0x40014000
 800a710:	4000e000 	.word	0x4000e000
 800a714:	4000e400 	.word	0x4000e400
 800a718:	00010007 	.word	0x00010007

0800a71c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e049      	b.n	800a7c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d106      	bne.n	800a748 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7f9 ffce 	bl	80046e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3304      	adds	r3, #4
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f000 fce2 	bl	800b124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d109      	bne.n	800a7f0 <HAL_TIM_PWM_Start+0x24>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	bf14      	ite	ne
 800a7e8:	2301      	movne	r3, #1
 800a7ea:	2300      	moveq	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	e03c      	b.n	800a86a <HAL_TIM_PWM_Start+0x9e>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d109      	bne.n	800a80a <HAL_TIM_PWM_Start+0x3e>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	bf14      	ite	ne
 800a802:	2301      	movne	r3, #1
 800a804:	2300      	moveq	r3, #0
 800a806:	b2db      	uxtb	r3, r3
 800a808:	e02f      	b.n	800a86a <HAL_TIM_PWM_Start+0x9e>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d109      	bne.n	800a824 <HAL_TIM_PWM_Start+0x58>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b01      	cmp	r3, #1
 800a81a:	bf14      	ite	ne
 800a81c:	2301      	movne	r3, #1
 800a81e:	2300      	moveq	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	e022      	b.n	800a86a <HAL_TIM_PWM_Start+0x9e>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b0c      	cmp	r3, #12
 800a828:	d109      	bne.n	800a83e <HAL_TIM_PWM_Start+0x72>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b01      	cmp	r3, #1
 800a834:	bf14      	ite	ne
 800a836:	2301      	movne	r3, #1
 800a838:	2300      	moveq	r3, #0
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	e015      	b.n	800a86a <HAL_TIM_PWM_Start+0x9e>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b10      	cmp	r3, #16
 800a842:	d109      	bne.n	800a858 <HAL_TIM_PWM_Start+0x8c>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	bf14      	ite	ne
 800a850:	2301      	movne	r3, #1
 800a852:	2300      	moveq	r3, #0
 800a854:	b2db      	uxtb	r3, r3
 800a856:	e008      	b.n	800a86a <HAL_TIM_PWM_Start+0x9e>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b01      	cmp	r3, #1
 800a862:	bf14      	ite	ne
 800a864:	2301      	movne	r3, #1
 800a866:	2300      	moveq	r3, #0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e0ab      	b.n	800a9ca <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d104      	bne.n	800a882 <HAL_TIM_PWM_Start+0xb6>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a880:	e023      	b.n	800a8ca <HAL_TIM_PWM_Start+0xfe>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b04      	cmp	r3, #4
 800a886:	d104      	bne.n	800a892 <HAL_TIM_PWM_Start+0xc6>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2202      	movs	r2, #2
 800a88c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a890:	e01b      	b.n	800a8ca <HAL_TIM_PWM_Start+0xfe>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b08      	cmp	r3, #8
 800a896:	d104      	bne.n	800a8a2 <HAL_TIM_PWM_Start+0xd6>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8a0:	e013      	b.n	800a8ca <HAL_TIM_PWM_Start+0xfe>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b0c      	cmp	r3, #12
 800a8a6:	d104      	bne.n	800a8b2 <HAL_TIM_PWM_Start+0xe6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8b0:	e00b      	b.n	800a8ca <HAL_TIM_PWM_Start+0xfe>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b10      	cmp	r3, #16
 800a8b6:	d104      	bne.n	800a8c2 <HAL_TIM_PWM_Start+0xf6>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8c0:	e003      	b.n	800a8ca <HAL_TIM_PWM_Start+0xfe>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 ffa2 	bl	800b81c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a3d      	ldr	r2, [pc, #244]	; (800a9d4 <HAL_TIM_PWM_Start+0x208>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d013      	beq.n	800a90a <HAL_TIM_PWM_Start+0x13e>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a3c      	ldr	r2, [pc, #240]	; (800a9d8 <HAL_TIM_PWM_Start+0x20c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d00e      	beq.n	800a90a <HAL_TIM_PWM_Start+0x13e>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a3a      	ldr	r2, [pc, #232]	; (800a9dc <HAL_TIM_PWM_Start+0x210>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d009      	beq.n	800a90a <HAL_TIM_PWM_Start+0x13e>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a39      	ldr	r2, [pc, #228]	; (800a9e0 <HAL_TIM_PWM_Start+0x214>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d004      	beq.n	800a90a <HAL_TIM_PWM_Start+0x13e>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a37      	ldr	r2, [pc, #220]	; (800a9e4 <HAL_TIM_PWM_Start+0x218>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d101      	bne.n	800a90e <HAL_TIM_PWM_Start+0x142>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <HAL_TIM_PWM_Start+0x144>
 800a90e:	2300      	movs	r3, #0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a922:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a2a      	ldr	r2, [pc, #168]	; (800a9d4 <HAL_TIM_PWM_Start+0x208>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d02c      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a936:	d027      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a2a      	ldr	r2, [pc, #168]	; (800a9e8 <HAL_TIM_PWM_Start+0x21c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d022      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a29      	ldr	r2, [pc, #164]	; (800a9ec <HAL_TIM_PWM_Start+0x220>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d01d      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a27      	ldr	r2, [pc, #156]	; (800a9f0 <HAL_TIM_PWM_Start+0x224>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d018      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a1f      	ldr	r2, [pc, #124]	; (800a9d8 <HAL_TIM_PWM_Start+0x20c>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d013      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a23      	ldr	r2, [pc, #140]	; (800a9f4 <HAL_TIM_PWM_Start+0x228>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d00e      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a1b      	ldr	r2, [pc, #108]	; (800a9dc <HAL_TIM_PWM_Start+0x210>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d009      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a1f      	ldr	r2, [pc, #124]	; (800a9f8 <HAL_TIM_PWM_Start+0x22c>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d004      	beq.n	800a988 <HAL_TIM_PWM_Start+0x1bc>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a1e      	ldr	r2, [pc, #120]	; (800a9fc <HAL_TIM_PWM_Start+0x230>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d115      	bne.n	800a9b4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	4b1c      	ldr	r3, [pc, #112]	; (800aa00 <HAL_TIM_PWM_Start+0x234>)
 800a990:	4013      	ands	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b06      	cmp	r3, #6
 800a998:	d015      	beq.n	800a9c6 <HAL_TIM_PWM_Start+0x1fa>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a0:	d011      	beq.n	800a9c6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0201 	orr.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b2:	e008      	b.n	800a9c6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f042 0201 	orr.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	e000      	b.n	800a9c8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	40010000 	.word	0x40010000
 800a9d8:	40010400 	.word	0x40010400
 800a9dc:	40014000 	.word	0x40014000
 800a9e0:	40014400 	.word	0x40014400
 800a9e4:	40014800 	.word	0x40014800
 800a9e8:	40000400 	.word	0x40000400
 800a9ec:	40000800 	.word	0x40000800
 800a9f0:	40000c00 	.word	0x40000c00
 800a9f4:	40001800 	.word	0x40001800
 800a9f8:	4000e000 	.word	0x4000e000
 800a9fc:	4000e400 	.word	0x4000e400
 800aa00:	00010007 	.word	0x00010007

0800aa04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e08f      	b.n	800ab38 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d106      	bne.n	800aa32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f9 fd03 	bl	8004438 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2202      	movs	r2, #2
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6899      	ldr	r1, [r3, #8]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	4b3e      	ldr	r3, [pc, #248]	; (800ab40 <HAL_TIM_Encoder_Init+0x13c>)
 800aa46:	400b      	ands	r3, r1
 800aa48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f000 fb65 	bl	800b124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4b31      	ldr	r3, [pc, #196]	; (800ab44 <HAL_TIM_Encoder_Init+0x140>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	689a      	ldr	r2, [r3, #8]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4b2b      	ldr	r3, [pc, #172]	; (800ab48 <HAL_TIM_Encoder_Init+0x144>)
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	4b2a      	ldr	r3, [pc, #168]	; (800ab4c <HAL_TIM_Encoder_Init+0x148>)
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68da      	ldr	r2, [r3, #12]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	4313      	orrs	r3, r2
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	011a      	lsls	r2, r3, #4
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	031b      	lsls	r3, r3, #12
 800aac4:	4313      	orrs	r3, r2
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aad2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aada:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	4313      	orrs	r3, r2
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	fffebff8 	.word	0xfffebff8
 800ab44:	fffffcfc 	.word	0xfffffcfc
 800ab48:	fffff3f3 	.word	0xfffff3f3
 800ab4c:	ffff0f0f 	.word	0xffff0f0f

0800ab50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d110      	bne.n	800aba2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d102      	bne.n	800ab8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab86:	7b7b      	ldrb	r3, [r7, #13]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d001      	beq.n	800ab90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e069      	b.n	800ac64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2202      	movs	r2, #2
 800ab94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aba0:	e031      	b.n	800ac06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	d110      	bne.n	800abca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d102      	bne.n	800abb4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800abae:	7b3b      	ldrb	r3, [r7, #12]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d001      	beq.n	800abb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e055      	b.n	800ac64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abc8:	e01d      	b.n	800ac06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d108      	bne.n	800abe2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d105      	bne.n	800abe2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abd6:	7b7b      	ldrb	r3, [r7, #13]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d102      	bne.n	800abe2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800abdc:	7b3b      	ldrb	r3, [r7, #12]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d001      	beq.n	800abe6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e03e      	b.n	800ac64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2202      	movs	r2, #2
 800abea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2202      	movs	r2, #2
 800abfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_TIM_Encoder_Start+0xc4>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d008      	beq.n	800ac24 <HAL_TIM_Encoder_Start+0xd4>
 800ac12:	e00f      	b.n	800ac34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fdfd 	bl	800b81c <TIM_CCxChannelCmd>
      break;
 800ac22:	e016      	b.n	800ac52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	2104      	movs	r1, #4
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fdf5 	bl	800b81c <TIM_CCxChannelCmd>
      break;
 800ac32:	e00e      	b.n	800ac52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fded 	bl	800b81c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2201      	movs	r2, #1
 800ac48:	2104      	movs	r1, #4
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fde6 	bl	800b81c <TIM_CCxChannelCmd>
      break;
 800ac50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f042 0201 	orr.w	r2, r2, #1
 800ac60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d122      	bne.n	800acc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d11b      	bne.n	800acc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f06f 0202 	mvn.w	r2, #2
 800ac98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fa1a 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800acb4:	e005      	b.n	800acc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fa0c 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fa1d 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0304 	and.w	r3, r3, #4
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d122      	bne.n	800ad1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d11b      	bne.n	800ad1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f06f 0204 	mvn.w	r2, #4
 800acec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2202      	movs	r2, #2
 800acf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f9f0 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800ad08:	e005      	b.n	800ad16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f9e2 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f9f3 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b08      	cmp	r3, #8
 800ad28:	d122      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0308 	and.w	r3, r3, #8
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d11b      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0208 	mvn.w	r2, #8
 800ad40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2204      	movs	r2, #4
 800ad46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f003 0303 	and.w	r3, r3, #3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f9c6 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800ad5c:	e005      	b.n	800ad6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f9b8 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f9c9 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0310 	and.w	r3, r3, #16
 800ad7a:	2b10      	cmp	r3, #16
 800ad7c:	d122      	bne.n	800adc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0310 	and.w	r3, r3, #16
 800ad88:	2b10      	cmp	r3, #16
 800ad8a:	d11b      	bne.n	800adc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0210 	mvn.w	r2, #16
 800ad94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2208      	movs	r2, #8
 800ad9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f99c 	bl	800b0e8 <HAL_TIM_IC_CaptureCallback>
 800adb0:	e005      	b.n	800adbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f98e 	bl	800b0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f99f 	bl	800b0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b01      	cmp	r3, #1
 800add0:	d10e      	bne.n	800adf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b01      	cmp	r3, #1
 800adde:	d107      	bne.n	800adf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f06f 0201 	mvn.w	r2, #1
 800ade8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f8 fdbc 	bl	8003968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfa:	2b80      	cmp	r3, #128	; 0x80
 800adfc:	d10e      	bne.n	800ae1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae08:	2b80      	cmp	r3, #128	; 0x80
 800ae0a:	d107      	bne.n	800ae1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fe6c 	bl	800baf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae2a:	d10e      	bne.n	800ae4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae36:	2b80      	cmp	r3, #128	; 0x80
 800ae38:	d107      	bne.n	800ae4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fe5f 	bl	800bb08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae54:	2b40      	cmp	r3, #64	; 0x40
 800ae56:	d10e      	bne.n	800ae76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae62:	2b40      	cmp	r3, #64	; 0x40
 800ae64:	d107      	bne.n	800ae76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f94d 	bl	800b110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b20      	cmp	r3, #32
 800ae82:	d10e      	bne.n	800aea2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f003 0320 	and.w	r3, r3, #32
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d107      	bne.n	800aea2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f06f 0220 	mvn.w	r2, #32
 800ae9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fe1f 	bl	800bae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0ff      	b.n	800b0ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b14      	cmp	r3, #20
 800aed6:	f200 80f0 	bhi.w	800b0ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af35 	.word	0x0800af35
 800aee4:	0800b0bb 	.word	0x0800b0bb
 800aee8:	0800b0bb 	.word	0x0800b0bb
 800aeec:	0800b0bb 	.word	0x0800b0bb
 800aef0:	0800af75 	.word	0x0800af75
 800aef4:	0800b0bb 	.word	0x0800b0bb
 800aef8:	0800b0bb 	.word	0x0800b0bb
 800aefc:	0800b0bb 	.word	0x0800b0bb
 800af00:	0800afb7 	.word	0x0800afb7
 800af04:	0800b0bb 	.word	0x0800b0bb
 800af08:	0800b0bb 	.word	0x0800b0bb
 800af0c:	0800b0bb 	.word	0x0800b0bb
 800af10:	0800aff7 	.word	0x0800aff7
 800af14:	0800b0bb 	.word	0x0800b0bb
 800af18:	0800b0bb 	.word	0x0800b0bb
 800af1c:	0800b0bb 	.word	0x0800b0bb
 800af20:	0800b039 	.word	0x0800b039
 800af24:	0800b0bb 	.word	0x0800b0bb
 800af28:	0800b0bb 	.word	0x0800b0bb
 800af2c:	0800b0bb 	.word	0x0800b0bb
 800af30:	0800b079 	.word	0x0800b079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 f998 	bl	800b270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0208 	orr.w	r2, r2, #8
 800af4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	699a      	ldr	r2, [r3, #24]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0204 	bic.w	r2, r2, #4
 800af5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6999      	ldr	r1, [r3, #24]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	691a      	ldr	r2, [r3, #16]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	619a      	str	r2, [r3, #24]
      break;
 800af72:	e0a5      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fa08 	bl	800b390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6999      	ldr	r1, [r3, #24]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	021a      	lsls	r2, r3, #8
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	619a      	str	r2, [r3, #24]
      break;
 800afb4:	e084      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fa71 	bl	800b4a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0208 	orr.w	r2, r2, #8
 800afd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69da      	ldr	r2, [r3, #28]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 0204 	bic.w	r2, r2, #4
 800afe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69d9      	ldr	r1, [r3, #28]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	61da      	str	r2, [r3, #28]
      break;
 800aff4:	e064      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fad9 	bl	800b5b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69d9      	ldr	r1, [r3, #28]
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	021a      	lsls	r2, r3, #8
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	61da      	str	r2, [r3, #28]
      break;
 800b036:	e043      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fb22 	bl	800b688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0208 	orr.w	r2, r2, #8
 800b052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0204 	bic.w	r2, r2, #4
 800b062:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b076:	e023      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 fb66 	bl	800b750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b092:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	021a      	lsls	r2, r3, #8
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0b8:	e002      	b.n	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop

0800b0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a44      	ldr	r2, [pc, #272]	; (800b248 <TIM_Base_SetConfig+0x124>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d013      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b142:	d00f      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a41      	ldr	r2, [pc, #260]	; (800b24c <TIM_Base_SetConfig+0x128>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00b      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a40      	ldr	r2, [pc, #256]	; (800b250 <TIM_Base_SetConfig+0x12c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d007      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a3f      	ldr	r2, [pc, #252]	; (800b254 <TIM_Base_SetConfig+0x130>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d003      	beq.n	800b164 <TIM_Base_SetConfig+0x40>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a3e      	ldr	r2, [pc, #248]	; (800b258 <TIM_Base_SetConfig+0x134>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d108      	bne.n	800b176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a33      	ldr	r2, [pc, #204]	; (800b248 <TIM_Base_SetConfig+0x124>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d027      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b184:	d023      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a30      	ldr	r2, [pc, #192]	; (800b24c <TIM_Base_SetConfig+0x128>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d01f      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a2f      	ldr	r2, [pc, #188]	; (800b250 <TIM_Base_SetConfig+0x12c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d01b      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a2e      	ldr	r2, [pc, #184]	; (800b254 <TIM_Base_SetConfig+0x130>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d017      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a2d      	ldr	r2, [pc, #180]	; (800b258 <TIM_Base_SetConfig+0x134>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d013      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a2c      	ldr	r2, [pc, #176]	; (800b25c <TIM_Base_SetConfig+0x138>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00f      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a2b      	ldr	r2, [pc, #172]	; (800b260 <TIM_Base_SetConfig+0x13c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00b      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a2a      	ldr	r2, [pc, #168]	; (800b264 <TIM_Base_SetConfig+0x140>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d007      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a29      	ldr	r2, [pc, #164]	; (800b268 <TIM_Base_SetConfig+0x144>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d003      	beq.n	800b1ce <TIM_Base_SetConfig+0xaa>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a28      	ldr	r2, [pc, #160]	; (800b26c <TIM_Base_SetConfig+0x148>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d108      	bne.n	800b1e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a10      	ldr	r2, [pc, #64]	; (800b248 <TIM_Base_SetConfig+0x124>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d00f      	beq.n	800b22c <TIM_Base_SetConfig+0x108>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a12      	ldr	r2, [pc, #72]	; (800b258 <TIM_Base_SetConfig+0x134>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00b      	beq.n	800b22c <TIM_Base_SetConfig+0x108>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a11      	ldr	r2, [pc, #68]	; (800b25c <TIM_Base_SetConfig+0x138>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d007      	beq.n	800b22c <TIM_Base_SetConfig+0x108>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a10      	ldr	r2, [pc, #64]	; (800b260 <TIM_Base_SetConfig+0x13c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d003      	beq.n	800b22c <TIM_Base_SetConfig+0x108>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a0f      	ldr	r2, [pc, #60]	; (800b264 <TIM_Base_SetConfig+0x140>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d103      	bne.n	800b234 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	615a      	str	r2, [r3, #20]
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	40010000 	.word	0x40010000
 800b24c:	40000400 	.word	0x40000400
 800b250:	40000800 	.word	0x40000800
 800b254:	40000c00 	.word	0x40000c00
 800b258:	40010400 	.word	0x40010400
 800b25c:	40014000 	.word	0x40014000
 800b260:	40014400 	.word	0x40014400
 800b264:	40014800 	.word	0x40014800
 800b268:	4000e000 	.word	0x4000e000
 800b26c:	4000e400 	.word	0x4000e400

0800b270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	f023 0201 	bic.w	r2, r3, #1
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4b37      	ldr	r3, [pc, #220]	; (800b378 <TIM_OC1_SetConfig+0x108>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f023 0303 	bic.w	r3, r3, #3
 800b2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f023 0302 	bic.w	r3, r3, #2
 800b2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a2d      	ldr	r2, [pc, #180]	; (800b37c <TIM_OC1_SetConfig+0x10c>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00f      	beq.n	800b2ec <TIM_OC1_SetConfig+0x7c>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a2c      	ldr	r2, [pc, #176]	; (800b380 <TIM_OC1_SetConfig+0x110>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d00b      	beq.n	800b2ec <TIM_OC1_SetConfig+0x7c>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a2b      	ldr	r2, [pc, #172]	; (800b384 <TIM_OC1_SetConfig+0x114>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d007      	beq.n	800b2ec <TIM_OC1_SetConfig+0x7c>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a2a      	ldr	r2, [pc, #168]	; (800b388 <TIM_OC1_SetConfig+0x118>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d003      	beq.n	800b2ec <TIM_OC1_SetConfig+0x7c>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a29      	ldr	r2, [pc, #164]	; (800b38c <TIM_OC1_SetConfig+0x11c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d10c      	bne.n	800b306 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f023 0308 	bic.w	r3, r3, #8
 800b2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f023 0304 	bic.w	r3, r3, #4
 800b304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a1c      	ldr	r2, [pc, #112]	; (800b37c <TIM_OC1_SetConfig+0x10c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00f      	beq.n	800b32e <TIM_OC1_SetConfig+0xbe>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a1b      	ldr	r2, [pc, #108]	; (800b380 <TIM_OC1_SetConfig+0x110>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d00b      	beq.n	800b32e <TIM_OC1_SetConfig+0xbe>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a1a      	ldr	r2, [pc, #104]	; (800b384 <TIM_OC1_SetConfig+0x114>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d007      	beq.n	800b32e <TIM_OC1_SetConfig+0xbe>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a19      	ldr	r2, [pc, #100]	; (800b388 <TIM_OC1_SetConfig+0x118>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC1_SetConfig+0xbe>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a18      	ldr	r2, [pc, #96]	; (800b38c <TIM_OC1_SetConfig+0x11c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d111      	bne.n	800b352 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4313      	orrs	r3, r2
 800b350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	621a      	str	r2, [r3, #32]
}
 800b36c:	bf00      	nop
 800b36e:	371c      	adds	r7, #28
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	fffeff8f 	.word	0xfffeff8f
 800b37c:	40010000 	.word	0x40010000
 800b380:	40010400 	.word	0x40010400
 800b384:	40014000 	.word	0x40014000
 800b388:	40014400 	.word	0x40014400
 800b38c:	40014800 	.word	0x40014800

0800b390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	f023 0210 	bic.w	r2, r3, #16
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4b34      	ldr	r3, [pc, #208]	; (800b48c <TIM_OC2_SetConfig+0xfc>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	021b      	lsls	r3, r3, #8
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	f023 0320 	bic.w	r3, r3, #32
 800b3da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	011b      	lsls	r3, r3, #4
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a29      	ldr	r2, [pc, #164]	; (800b490 <TIM_OC2_SetConfig+0x100>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d003      	beq.n	800b3f8 <TIM_OC2_SetConfig+0x68>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a28      	ldr	r2, [pc, #160]	; (800b494 <TIM_OC2_SetConfig+0x104>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d10d      	bne.n	800b414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a1e      	ldr	r2, [pc, #120]	; (800b490 <TIM_OC2_SetConfig+0x100>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00f      	beq.n	800b43c <TIM_OC2_SetConfig+0xac>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a1d      	ldr	r2, [pc, #116]	; (800b494 <TIM_OC2_SetConfig+0x104>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d00b      	beq.n	800b43c <TIM_OC2_SetConfig+0xac>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a1c      	ldr	r2, [pc, #112]	; (800b498 <TIM_OC2_SetConfig+0x108>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d007      	beq.n	800b43c <TIM_OC2_SetConfig+0xac>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a1b      	ldr	r2, [pc, #108]	; (800b49c <TIM_OC2_SetConfig+0x10c>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d003      	beq.n	800b43c <TIM_OC2_SetConfig+0xac>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1a      	ldr	r2, [pc, #104]	; (800b4a0 <TIM_OC2_SetConfig+0x110>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d113      	bne.n	800b464 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b44a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	695b      	ldr	r3, [r3, #20]
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	4313      	orrs	r3, r2
 800b456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	4313      	orrs	r3, r2
 800b462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	621a      	str	r2, [r3, #32]
}
 800b47e:	bf00      	nop
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	feff8fff 	.word	0xfeff8fff
 800b490:	40010000 	.word	0x40010000
 800b494:	40010400 	.word	0x40010400
 800b498:	40014000 	.word	0x40014000
 800b49c:	40014400 	.word	0x40014400
 800b4a0:	40014800 	.word	0x40014800

0800b4a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	69db      	ldr	r3, [r3, #28]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4b33      	ldr	r3, [pc, #204]	; (800b59c <TIM_OC3_SetConfig+0xf8>)
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a28      	ldr	r2, [pc, #160]	; (800b5a0 <TIM_OC3_SetConfig+0xfc>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d003      	beq.n	800b50a <TIM_OC3_SetConfig+0x66>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a27      	ldr	r2, [pc, #156]	; (800b5a4 <TIM_OC3_SetConfig+0x100>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d10d      	bne.n	800b526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a1d      	ldr	r2, [pc, #116]	; (800b5a0 <TIM_OC3_SetConfig+0xfc>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d00f      	beq.n	800b54e <TIM_OC3_SetConfig+0xaa>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a1c      	ldr	r2, [pc, #112]	; (800b5a4 <TIM_OC3_SetConfig+0x100>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d00b      	beq.n	800b54e <TIM_OC3_SetConfig+0xaa>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a1b      	ldr	r2, [pc, #108]	; (800b5a8 <TIM_OC3_SetConfig+0x104>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d007      	beq.n	800b54e <TIM_OC3_SetConfig+0xaa>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a1a      	ldr	r2, [pc, #104]	; (800b5ac <TIM_OC3_SetConfig+0x108>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d003      	beq.n	800b54e <TIM_OC3_SetConfig+0xaa>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a19      	ldr	r2, [pc, #100]	; (800b5b0 <TIM_OC3_SetConfig+0x10c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d113      	bne.n	800b576 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	621a      	str	r2, [r3, #32]
}
 800b590:	bf00      	nop
 800b592:	371c      	adds	r7, #28
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	fffeff8f 	.word	0xfffeff8f
 800b5a0:	40010000 	.word	0x40010000
 800b5a4:	40010400 	.word	0x40010400
 800b5a8:	40014000 	.word	0x40014000
 800b5ac:	40014400 	.word	0x40014400
 800b5b0:	40014800 	.word	0x40014800

0800b5b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4b24      	ldr	r3, [pc, #144]	; (800b670 <TIM_OC4_SetConfig+0xbc>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	021b      	lsls	r3, r3, #8
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	031b      	lsls	r3, r3, #12
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	4313      	orrs	r3, r2
 800b60a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a19      	ldr	r2, [pc, #100]	; (800b674 <TIM_OC4_SetConfig+0xc0>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00f      	beq.n	800b634 <TIM_OC4_SetConfig+0x80>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a18      	ldr	r2, [pc, #96]	; (800b678 <TIM_OC4_SetConfig+0xc4>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d00b      	beq.n	800b634 <TIM_OC4_SetConfig+0x80>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a17      	ldr	r2, [pc, #92]	; (800b67c <TIM_OC4_SetConfig+0xc8>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d007      	beq.n	800b634 <TIM_OC4_SetConfig+0x80>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a16      	ldr	r2, [pc, #88]	; (800b680 <TIM_OC4_SetConfig+0xcc>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d003      	beq.n	800b634 <TIM_OC4_SetConfig+0x80>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a15      	ldr	r2, [pc, #84]	; (800b684 <TIM_OC4_SetConfig+0xd0>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d109      	bne.n	800b648 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b63a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	019b      	lsls	r3, r3, #6
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	4313      	orrs	r3, r2
 800b646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	feff8fff 	.word	0xfeff8fff
 800b674:	40010000 	.word	0x40010000
 800b678:	40010400 	.word	0x40010400
 800b67c:	40014000 	.word	0x40014000
 800b680:	40014400 	.word	0x40014400
 800b684:	40014800 	.word	0x40014800

0800b688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b688:	b480      	push	{r7}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <TIM_OC5_SetConfig+0xb0>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	041b      	lsls	r3, r3, #16
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a18      	ldr	r2, [pc, #96]	; (800b73c <TIM_OC5_SetConfig+0xb4>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00f      	beq.n	800b6fe <TIM_OC5_SetConfig+0x76>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a17      	ldr	r2, [pc, #92]	; (800b740 <TIM_OC5_SetConfig+0xb8>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00b      	beq.n	800b6fe <TIM_OC5_SetConfig+0x76>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a16      	ldr	r2, [pc, #88]	; (800b744 <TIM_OC5_SetConfig+0xbc>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d007      	beq.n	800b6fe <TIM_OC5_SetConfig+0x76>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a15      	ldr	r2, [pc, #84]	; (800b748 <TIM_OC5_SetConfig+0xc0>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d003      	beq.n	800b6fe <TIM_OC5_SetConfig+0x76>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a14      	ldr	r2, [pc, #80]	; (800b74c <TIM_OC5_SetConfig+0xc4>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d109      	bne.n	800b712 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	021b      	lsls	r3, r3, #8
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	4313      	orrs	r3, r2
 800b710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	621a      	str	r2, [r3, #32]
}
 800b72c:	bf00      	nop
 800b72e:	371c      	adds	r7, #28
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	fffeff8f 	.word	0xfffeff8f
 800b73c:	40010000 	.word	0x40010000
 800b740:	40010400 	.word	0x40010400
 800b744:	40014000 	.word	0x40014000
 800b748:	40014400 	.word	0x40014400
 800b74c:	40014800 	.word	0x40014800

0800b750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a1b      	ldr	r3, [r3, #32]
 800b76a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4b22      	ldr	r3, [pc, #136]	; (800b804 <TIM_OC6_SetConfig+0xb4>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	4313      	orrs	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	051b      	lsls	r3, r3, #20
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a19      	ldr	r2, [pc, #100]	; (800b808 <TIM_OC6_SetConfig+0xb8>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d00f      	beq.n	800b7c8 <TIM_OC6_SetConfig+0x78>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a18      	ldr	r2, [pc, #96]	; (800b80c <TIM_OC6_SetConfig+0xbc>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00b      	beq.n	800b7c8 <TIM_OC6_SetConfig+0x78>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a17      	ldr	r2, [pc, #92]	; (800b810 <TIM_OC6_SetConfig+0xc0>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d007      	beq.n	800b7c8 <TIM_OC6_SetConfig+0x78>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a16      	ldr	r2, [pc, #88]	; (800b814 <TIM_OC6_SetConfig+0xc4>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d003      	beq.n	800b7c8 <TIM_OC6_SetConfig+0x78>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a15      	ldr	r2, [pc, #84]	; (800b818 <TIM_OC6_SetConfig+0xc8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d109      	bne.n	800b7dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	029b      	lsls	r3, r3, #10
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	621a      	str	r2, [r3, #32]
}
 800b7f6:	bf00      	nop
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	feff8fff 	.word	0xfeff8fff
 800b808:	40010000 	.word	0x40010000
 800b80c:	40010400 	.word	0x40010400
 800b810:	40014000 	.word	0x40014000
 800b814:	40014400 	.word	0x40014400
 800b818:	40014800 	.word	0x40014800

0800b81c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f003 031f 	and.w	r3, r3, #31
 800b82e:	2201      	movs	r2, #1
 800b830:	fa02 f303 	lsl.w	r3, r2, r3
 800b834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6a1a      	ldr	r2, [r3, #32]
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	43db      	mvns	r3, r3
 800b83e:	401a      	ands	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6a1a      	ldr	r2, [r3, #32]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f003 031f 	and.w	r3, r3, #31
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	fa01 f303 	lsl.w	r3, r1, r3
 800b854:	431a      	orrs	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
	...

0800b868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d101      	bne.n	800b880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b87c:	2302      	movs	r3, #2
 800b87e:	e077      	b.n	800b970 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a35      	ldr	r2, [pc, #212]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d004      	beq.n	800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a34      	ldr	r2, [pc, #208]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d108      	bne.n	800b8c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a25      	ldr	r2, [pc, #148]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d02c      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f2:	d027      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a22      	ldr	r2, [pc, #136]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d022      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a21      	ldr	r2, [pc, #132]	; (800b988 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d01d      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a1f      	ldr	r2, [pc, #124]	; (800b98c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d018      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a1a      	ldr	r2, [pc, #104]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d013      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d00e      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a1a      	ldr	r2, [pc, #104]	; (800b994 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d009      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a18      	ldr	r2, [pc, #96]	; (800b998 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d004      	beq.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a17      	ldr	r2, [pc, #92]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d10c      	bne.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b94a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	4313      	orrs	r3, r2
 800b954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	40010000 	.word	0x40010000
 800b980:	40010400 	.word	0x40010400
 800b984:	40000400 	.word	0x40000400
 800b988:	40000800 	.word	0x40000800
 800b98c:	40000c00 	.word	0x40000c00
 800b990:	40001800 	.word	0x40001800
 800b994:	40014000 	.word	0x40014000
 800b998:	4000e000 	.word	0x4000e000
 800b99c:	4000e400 	.word	0x4000e400

0800b9a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e087      	b.n	800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	041b      	lsls	r3, r3, #16
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a27      	ldr	r2, [pc, #156]	; (800bad8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d004      	beq.n	800ba4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a25      	ldr	r2, [pc, #148]	; (800badc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d106      	bne.n	800ba58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	69db      	ldr	r3, [r3, #28]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a1e      	ldr	r2, [pc, #120]	; (800bad8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d004      	beq.n	800ba6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a1d      	ldr	r2, [pc, #116]	; (800badc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d126      	bne.n	800baba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba76:	051b      	lsls	r3, r3, #20
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a0e      	ldr	r2, [pc, #56]	; (800bad8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d004      	beq.n	800baac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a0d      	ldr	r2, [pc, #52]	; (800badc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d106      	bne.n	800baba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	4313      	orrs	r3, r2
 800bab8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	40010000 	.word	0x40010000
 800badc:	40010400 	.word	0x40010400

0800bae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e042      	b.n	800bbb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d106      	bne.n	800bb46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7f8 feb3 	bl	80048ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2224      	movs	r2, #36	; 0x24
 800bb4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0201 	bic.w	r2, r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fcdc 	bl	800c51c <UART_SetConfig>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d101      	bne.n	800bb6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e022      	b.n	800bbb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 fb3c 	bl	800d1f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	689a      	ldr	r2, [r3, #8]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f042 0201 	orr.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f001 fbc3 	bl	800d338 <UART_CheckIdleState>
 800bbb2:	4603      	mov	r3, r0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	d17a      	bne.n	800bcca <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <HAL_UART_Transmit_DMA+0x24>
 800bbda:	88fb      	ldrh	r3, [r7, #6]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e073      	b.n	800bccc <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <HAL_UART_Transmit_DMA+0x36>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e06c      	b.n	800bccc <HAL_UART_Transmit_DMA+0x110>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	88fa      	ldrh	r2, [r7, #6]
 800bc04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	88fa      	ldrh	r2, [r7, #6]
 800bc0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2221      	movs	r2, #33	; 0x21
 800bc1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d02c      	beq.n	800bc82 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc2c:	4a29      	ldr	r2, [pc, #164]	; (800bcd4 <HAL_UART_Transmit_DMA+0x118>)
 800bc2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc34:	4a28      	ldr	r2, [pc, #160]	; (800bcd8 <HAL_UART_Transmit_DMA+0x11c>)
 800bc36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc3c:	4a27      	ldr	r2, [pc, #156]	; (800bcdc <HAL_UART_Transmit_DMA+0x120>)
 800bc3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc44:	2200      	movs	r2, #0
 800bc46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc50:	4619      	mov	r1, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3328      	adds	r3, #40	; 0x28
 800bc58:	461a      	mov	r2, r3
 800bc5a:	88fb      	ldrh	r3, [r7, #6]
 800bc5c:	f7f9 fd4e 	bl	80056fc <HAL_DMA_Start_IT>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00d      	beq.n	800bc82 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2210      	movs	r2, #16
 800bc6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e024      	b.n	800bccc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2240      	movs	r2, #64	; 0x40
 800bc88:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	613b      	str	r3, [r7, #16]
   return(result);
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3308      	adds	r3, #8
 800bcb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb2:	623a      	str	r2, [r7, #32]
 800bcb4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	69f9      	ldr	r1, [r7, #28]
 800bcb8:	6a3a      	ldr	r2, [r7, #32]
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e5      	bne.n	800bc92 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e000      	b.n	800bccc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bcca:	2302      	movs	r3, #2
  }
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3728      	adds	r7, #40	; 0x28
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0800d801 	.word	0x0800d801
 800bcd8:	0800d897 	.word	0x0800d897
 800bcdc:	0800da0d 	.word	0x0800da0d

0800bce0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08a      	sub	sp, #40	; 0x28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf4:	2b20      	cmp	r3, #32
 800bcf6:	d142      	bne.n	800bd7e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <HAL_UART_Receive_DMA+0x24>
 800bcfe:	88fb      	ldrh	r3, [r7, #6]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e03b      	b.n	800bd80 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <HAL_UART_Receive_DMA+0x36>
 800bd12:	2302      	movs	r3, #2
 800bd14:	e034      	b.n	800bd80 <HAL_UART_Receive_DMA+0xa0>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <HAL_UART_Receive_DMA+0xa8>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d01f      	beq.n	800bd6e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d018      	beq.n	800bd6e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	613b      	str	r3, [r7, #16]
   return(result);
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	623b      	str	r3, [r7, #32]
 800bd5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	69f9      	ldr	r1, [r7, #28]
 800bd60:	6a3a      	ldr	r2, [r7, #32]
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd6e:	88fb      	ldrh	r3, [r7, #6]
 800bd70:	461a      	mov	r2, r3
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f001 fbf3 	bl	800d560 <UART_Start_Receive_DMA>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	e000      	b.n	800bd80 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bd7e:	2302      	movs	r3, #2
  }
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3728      	adds	r7, #40	; 0x28
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	58000c00 	.word	0x58000c00

0800bd8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b0ba      	sub	sp, #232	; 0xe8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	69db      	ldr	r3, [r3, #28]
 800bd9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bdb6:	f640 030f 	movw	r3, #2063	; 0x80f
 800bdba:	4013      	ands	r3, r2
 800bdbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bdc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d11b      	bne.n	800be00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdcc:	f003 0320 	and.w	r3, r3, #32
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d015      	beq.n	800be00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bdd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdd8:	f003 0320 	and.w	r3, r3, #32
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d105      	bne.n	800bdec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bde0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bde4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d009      	beq.n	800be00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 835a 	beq.w	800c4aa <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
      }
      return;
 800bdfe:	e354      	b.n	800c4aa <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 811f 	beq.w	800c048 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be0e:	4b8b      	ldr	r3, [pc, #556]	; (800c03c <HAL_UART_IRQHandler+0x2b0>)
 800be10:	4013      	ands	r3, r2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d106      	bne.n	800be24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be1a:	4b89      	ldr	r3, [pc, #548]	; (800c040 <HAL_UART_IRQHandler+0x2b4>)
 800be1c:	4013      	ands	r3, r2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 8112 	beq.w	800c048 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d011      	beq.n	800be54 <HAL_UART_IRQHandler+0xc8>
 800be30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2201      	movs	r2, #1
 800be42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4a:	f043 0201 	orr.w	r2, r3, #1
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d011      	beq.n	800be84 <HAL_UART_IRQHandler+0xf8>
 800be60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00b      	beq.n	800be84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2202      	movs	r2, #2
 800be72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be7a:	f043 0204 	orr.w	r2, r3, #4
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d011      	beq.n	800beb4 <HAL_UART_IRQHandler+0x128>
 800be90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be94:	f003 0301 	and.w	r3, r3, #1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2204      	movs	r2, #4
 800bea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beaa:	f043 0202 	orr.w	r2, r3, #2
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800beb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb8:	f003 0308 	and.w	r3, r3, #8
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d017      	beq.n	800bef0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec4:	f003 0320 	and.w	r3, r3, #32
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d105      	bne.n	800bed8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800becc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bed0:	4b5a      	ldr	r3, [pc, #360]	; (800c03c <HAL_UART_IRQHandler+0x2b0>)
 800bed2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2208      	movs	r2, #8
 800bede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bee6:	f043 0208 	orr.w	r2, r3, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d012      	beq.n	800bf22 <HAL_UART_IRQHandler+0x196>
 800befc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00c      	beq.n	800bf22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf18:	f043 0220 	orr.w	r2, r3, #32
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 82c0 	beq.w	800c4ae <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf32:	f003 0320 	and.w	r3, r3, #32
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d013      	beq.n	800bf62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf3e:	f003 0320 	and.w	r3, r3, #32
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d105      	bne.n	800bf52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d007      	beq.n	800bf62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf76:	2b40      	cmp	r3, #64	; 0x40
 800bf78:	d005      	beq.n	800bf86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d04f      	beq.n	800c026 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f001 fbd4 	bl	800d734 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d141      	bne.n	800c01e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfa8:	e853 3f00 	ldrex	r3, [r3]
 800bfac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bfca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfd6:	e841 2300 	strex	r3, r2, [r1]
 800bfda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bfde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1d9      	bne.n	800bf9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d013      	beq.n	800c016 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff2:	4a14      	ldr	r2, [pc, #80]	; (800c044 <HAL_UART_IRQHandler+0x2b8>)
 800bff4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fa f906 	bl	800620c <HAL_DMA_Abort_IT>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d017      	beq.n	800c036 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c010:	4610      	mov	r0, r2
 800c012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c014:	e00f      	b.n	800c036 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa6a 	bl	800c4f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c01c:	e00b      	b.n	800c036 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fa66 	bl	800c4f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c024:	e007      	b.n	800c036 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa62 	bl	800c4f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c034:	e23b      	b.n	800c4ae <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c036:	bf00      	nop
    return;
 800c038:	e239      	b.n	800c4ae <HAL_UART_IRQHandler+0x722>
 800c03a:	bf00      	nop
 800c03c:	10000001 	.word	0x10000001
 800c040:	04000120 	.word	0x04000120
 800c044:	0800da8d 	.word	0x0800da8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	f040 81ce 	bne.w	800c3ee <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c056:	f003 0310 	and.w	r3, r3, #16
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 81c7 	beq.w	800c3ee <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c064:	f003 0310 	and.w	r3, r3, #16
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 81c0 	beq.w	800c3ee <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2210      	movs	r2, #16
 800c074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c080:	2b40      	cmp	r3, #64	; 0x40
 800c082:	f040 813b 	bne.w	800c2fc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a8b      	ldr	r2, [pc, #556]	; (800c2bc <HAL_UART_IRQHandler+0x530>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d059      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a89      	ldr	r2, [pc, #548]	; (800c2c0 <HAL_UART_IRQHandler+0x534>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d053      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a87      	ldr	r2, [pc, #540]	; (800c2c4 <HAL_UART_IRQHandler+0x538>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d04d      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a85      	ldr	r2, [pc, #532]	; (800c2c8 <HAL_UART_IRQHandler+0x53c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d047      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a83      	ldr	r2, [pc, #524]	; (800c2cc <HAL_UART_IRQHandler+0x540>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d041      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a81      	ldr	r2, [pc, #516]	; (800c2d0 <HAL_UART_IRQHandler+0x544>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d03b      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a7f      	ldr	r2, [pc, #508]	; (800c2d4 <HAL_UART_IRQHandler+0x548>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d035      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a7d      	ldr	r2, [pc, #500]	; (800c2d8 <HAL_UART_IRQHandler+0x54c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d02f      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a7b      	ldr	r2, [pc, #492]	; (800c2dc <HAL_UART_IRQHandler+0x550>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d029      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a79      	ldr	r2, [pc, #484]	; (800c2e0 <HAL_UART_IRQHandler+0x554>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d023      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a77      	ldr	r2, [pc, #476]	; (800c2e4 <HAL_UART_IRQHandler+0x558>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d01d      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a75      	ldr	r2, [pc, #468]	; (800c2e8 <HAL_UART_IRQHandler+0x55c>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d017      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a73      	ldr	r2, [pc, #460]	; (800c2ec <HAL_UART_IRQHandler+0x560>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d011      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a71      	ldr	r2, [pc, #452]	; (800c2f0 <HAL_UART_IRQHandler+0x564>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00b      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a6f      	ldr	r2, [pc, #444]	; (800c2f4 <HAL_UART_IRQHandler+0x568>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d005      	beq.n	800c146 <HAL_UART_IRQHandler+0x3ba>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a6d      	ldr	r2, [pc, #436]	; (800c2f8 <HAL_UART_IRQHandler+0x56c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d105      	bne.n	800c152 <HAL_UART_IRQHandler+0x3c6>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	e004      	b.n	800c15c <HAL_UART_IRQHandler+0x3d0>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 81a4 	beq.w	800c4b2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c170:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c174:	429a      	cmp	r2, r3
 800c176:	f080 819c 	bcs.w	800c4b2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c18e:	f000 8086 	beq.w	800c29e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c19e:	e853 3f00 	ldrex	r3, [r3]
 800c1a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1cc:	e841 2300 	strex	r3, r2, [r1]
 800c1d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1da      	bne.n	800c192 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c200:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c204:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c208:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1e1      	bne.n	800c1dc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3308      	adds	r3, #8
 800c21e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c22a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c22e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3308      	adds	r3, #8
 800c238:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c23c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c23e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c242:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c24a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e3      	bne.n	800c218 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2220      	movs	r2, #32
 800c254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c266:	e853 3f00 	ldrex	r3, [r3]
 800c26a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c26e:	f023 0310 	bic.w	r3, r3, #16
 800c272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c280:	65bb      	str	r3, [r7, #88]	; 0x58
 800c282:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e4      	bne.n	800c25e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c298:	4618      	mov	r0, r3
 800c29a:	f7f9 fc99 	bl	8005bd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f926 	bl	800c504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2b8:	e0fb      	b.n	800c4b2 <HAL_UART_IRQHandler+0x726>
 800c2ba:	bf00      	nop
 800c2bc:	40020010 	.word	0x40020010
 800c2c0:	40020028 	.word	0x40020028
 800c2c4:	40020040 	.word	0x40020040
 800c2c8:	40020058 	.word	0x40020058
 800c2cc:	40020070 	.word	0x40020070
 800c2d0:	40020088 	.word	0x40020088
 800c2d4:	400200a0 	.word	0x400200a0
 800c2d8:	400200b8 	.word	0x400200b8
 800c2dc:	40020410 	.word	0x40020410
 800c2e0:	40020428 	.word	0x40020428
 800c2e4:	40020440 	.word	0x40020440
 800c2e8:	40020458 	.word	0x40020458
 800c2ec:	40020470 	.word	0x40020470
 800c2f0:	40020488 	.word	0x40020488
 800c2f4:	400204a0 	.word	0x400204a0
 800c2f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c308:	b29b      	uxth	r3, r3
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c316:	b29b      	uxth	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80cc 	beq.w	800c4b6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c31e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 80c7 	beq.w	800c4b6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c33c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	461a      	mov	r2, r3
 800c346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c34a:	647b      	str	r3, [r7, #68]	; 0x44
 800c34c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e4      	bne.n	800c328 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	623b      	str	r3, [r7, #32]
   return(result);
 800c36e:	6a3a      	ldr	r2, [r7, #32]
 800c370:	4b54      	ldr	r3, [pc, #336]	; (800c4c4 <HAL_UART_IRQHandler+0x738>)
 800c372:	4013      	ands	r3, r2
 800c374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3308      	adds	r3, #8
 800c37e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c382:	633a      	str	r2, [r7, #48]	; 0x30
 800c384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c38a:	e841 2300 	strex	r3, r2, [r1]
 800c38e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1e3      	bne.n	800c35e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2220      	movs	r2, #32
 800c39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	e853 3f00 	ldrex	r3, [r3]
 800c3b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 0310 	bic.w	r3, r3, #16
 800c3be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c3cc:	61fb      	str	r3, [r7, #28]
 800c3ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d0:	69b9      	ldr	r1, [r7, #24]
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	e841 2300 	strex	r3, r2, [r1]
 800c3d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e4      	bne.n	800c3aa <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f88c 	bl	800c504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3ec:	e063      	b.n	800c4b6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00e      	beq.n	800c418 <HAL_UART_IRQHandler+0x68c>
 800c3fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c402:	2b00      	cmp	r3, #0
 800c404:	d008      	beq.n	800c418 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c40e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f001 fb7c 	bl	800db0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c416:	e051      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c41c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c420:	2b00      	cmp	r3, #0
 800c422:	d014      	beq.n	800c44e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d105      	bne.n	800c43c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d008      	beq.n	800c44e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c440:	2b00      	cmp	r3, #0
 800c442:	d03a      	beq.n	800c4ba <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	4798      	blx	r3
    }
    return;
 800c44c:	e035      	b.n	800c4ba <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c456:	2b00      	cmp	r3, #0
 800c458:	d009      	beq.n	800c46e <HAL_UART_IRQHandler+0x6e2>
 800c45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fb26 	bl	800dab8 <UART_EndTransmit_IT>
    return;
 800c46c:	e026      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d009      	beq.n	800c48e <HAL_UART_IRQHandler+0x702>
 800c47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c47e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fb55 	bl	800db36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c48c:	e016      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d010      	beq.n	800c4bc <HAL_UART_IRQHandler+0x730>
 800c49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da0c      	bge.n	800c4bc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f001 fb3d 	bl	800db22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4a8:	e008      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
      return;
 800c4aa:	bf00      	nop
 800c4ac:	e006      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
    return;
 800c4ae:	bf00      	nop
 800c4b0:	e004      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
      return;
 800c4b2:	bf00      	nop
 800c4b4:	e002      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
      return;
 800c4b6:	bf00      	nop
 800c4b8:	e000      	b.n	800c4bc <HAL_UART_IRQHandler+0x730>
    return;
 800c4ba:	bf00      	nop
  }
}
 800c4bc:	37e8      	adds	r7, #232	; 0xe8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	effffffe 	.word	0xeffffffe

0800c4c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c51c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c520:	b092      	sub	sp, #72	; 0x48
 800c522:	af00      	add	r7, sp, #0
 800c524:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	689a      	ldr	r2, [r3, #8]
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	431a      	orrs	r2, r3
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	431a      	orrs	r2, r3
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	4313      	orrs	r3, r2
 800c542:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	4bbe      	ldr	r3, [pc, #760]	; (800c844 <UART_SetConfig+0x328>)
 800c54c:	4013      	ands	r3, r2
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	6812      	ldr	r2, [r2, #0]
 800c552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c554:	430b      	orrs	r3, r1
 800c556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4ab3      	ldr	r2, [pc, #716]	; (800c848 <UART_SetConfig+0x32c>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d004      	beq.n	800c588 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c584:	4313      	orrs	r3, r2
 800c586:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	4baf      	ldr	r3, [pc, #700]	; (800c84c <UART_SetConfig+0x330>)
 800c590:	4013      	ands	r3, r2
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	6812      	ldr	r2, [r2, #0]
 800c596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c598:	430b      	orrs	r3, r1
 800c59a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a2:	f023 010f 	bic.w	r1, r3, #15
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4aa6      	ldr	r2, [pc, #664]	; (800c850 <UART_SetConfig+0x334>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d177      	bne.n	800c6ac <UART_SetConfig+0x190>
 800c5bc:	4ba5      	ldr	r3, [pc, #660]	; (800c854 <UART_SetConfig+0x338>)
 800c5be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5c4:	2b28      	cmp	r3, #40	; 0x28
 800c5c6:	d86d      	bhi.n	800c6a4 <UART_SetConfig+0x188>
 800c5c8:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <UART_SetConfig+0xb4>)
 800c5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ce:	bf00      	nop
 800c5d0:	0800c675 	.word	0x0800c675
 800c5d4:	0800c6a5 	.word	0x0800c6a5
 800c5d8:	0800c6a5 	.word	0x0800c6a5
 800c5dc:	0800c6a5 	.word	0x0800c6a5
 800c5e0:	0800c6a5 	.word	0x0800c6a5
 800c5e4:	0800c6a5 	.word	0x0800c6a5
 800c5e8:	0800c6a5 	.word	0x0800c6a5
 800c5ec:	0800c6a5 	.word	0x0800c6a5
 800c5f0:	0800c67d 	.word	0x0800c67d
 800c5f4:	0800c6a5 	.word	0x0800c6a5
 800c5f8:	0800c6a5 	.word	0x0800c6a5
 800c5fc:	0800c6a5 	.word	0x0800c6a5
 800c600:	0800c6a5 	.word	0x0800c6a5
 800c604:	0800c6a5 	.word	0x0800c6a5
 800c608:	0800c6a5 	.word	0x0800c6a5
 800c60c:	0800c6a5 	.word	0x0800c6a5
 800c610:	0800c685 	.word	0x0800c685
 800c614:	0800c6a5 	.word	0x0800c6a5
 800c618:	0800c6a5 	.word	0x0800c6a5
 800c61c:	0800c6a5 	.word	0x0800c6a5
 800c620:	0800c6a5 	.word	0x0800c6a5
 800c624:	0800c6a5 	.word	0x0800c6a5
 800c628:	0800c6a5 	.word	0x0800c6a5
 800c62c:	0800c6a5 	.word	0x0800c6a5
 800c630:	0800c68d 	.word	0x0800c68d
 800c634:	0800c6a5 	.word	0x0800c6a5
 800c638:	0800c6a5 	.word	0x0800c6a5
 800c63c:	0800c6a5 	.word	0x0800c6a5
 800c640:	0800c6a5 	.word	0x0800c6a5
 800c644:	0800c6a5 	.word	0x0800c6a5
 800c648:	0800c6a5 	.word	0x0800c6a5
 800c64c:	0800c6a5 	.word	0x0800c6a5
 800c650:	0800c695 	.word	0x0800c695
 800c654:	0800c6a5 	.word	0x0800c6a5
 800c658:	0800c6a5 	.word	0x0800c6a5
 800c65c:	0800c6a5 	.word	0x0800c6a5
 800c660:	0800c6a5 	.word	0x0800c6a5
 800c664:	0800c6a5 	.word	0x0800c6a5
 800c668:	0800c6a5 	.word	0x0800c6a5
 800c66c:	0800c6a5 	.word	0x0800c6a5
 800c670:	0800c69d 	.word	0x0800c69d
 800c674:	2301      	movs	r3, #1
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67a:	e326      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c67c:	2304      	movs	r3, #4
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c682:	e322      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c684:	2308      	movs	r3, #8
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68a:	e31e      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c68c:	2310      	movs	r3, #16
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e31a      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c694:	2320      	movs	r3, #32
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e316      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c69c:	2340      	movs	r3, #64	; 0x40
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e312      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c6a4:	2380      	movs	r3, #128	; 0x80
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e30e      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a69      	ldr	r2, [pc, #420]	; (800c858 <UART_SetConfig+0x33c>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d130      	bne.n	800c718 <UART_SetConfig+0x1fc>
 800c6b6:	4b67      	ldr	r3, [pc, #412]	; (800c854 <UART_SetConfig+0x338>)
 800c6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ba:	f003 0307 	and.w	r3, r3, #7
 800c6be:	2b05      	cmp	r3, #5
 800c6c0:	d826      	bhi.n	800c710 <UART_SetConfig+0x1f4>
 800c6c2:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <UART_SetConfig+0x1ac>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c6e1 	.word	0x0800c6e1
 800c6cc:	0800c6e9 	.word	0x0800c6e9
 800c6d0:	0800c6f1 	.word	0x0800c6f1
 800c6d4:	0800c6f9 	.word	0x0800c6f9
 800c6d8:	0800c701 	.word	0x0800c701
 800c6dc:	0800c709 	.word	0x0800c709
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e2f0      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e2ec      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c6f0:	2308      	movs	r3, #8
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e2e8      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c6f8:	2310      	movs	r3, #16
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e2e4      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c700:	2320      	movs	r3, #32
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e2e0      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c708:	2340      	movs	r3, #64	; 0x40
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e2dc      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c710:	2380      	movs	r3, #128	; 0x80
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e2d8      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a4f      	ldr	r2, [pc, #316]	; (800c85c <UART_SetConfig+0x340>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d130      	bne.n	800c784 <UART_SetConfig+0x268>
 800c722:	4b4c      	ldr	r3, [pc, #304]	; (800c854 <UART_SetConfig+0x338>)
 800c724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	d826      	bhi.n	800c77c <UART_SetConfig+0x260>
 800c72e:	a201      	add	r2, pc, #4	; (adr r2, 800c734 <UART_SetConfig+0x218>)
 800c730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c734:	0800c74d 	.word	0x0800c74d
 800c738:	0800c755 	.word	0x0800c755
 800c73c:	0800c75d 	.word	0x0800c75d
 800c740:	0800c765 	.word	0x0800c765
 800c744:	0800c76d 	.word	0x0800c76d
 800c748:	0800c775 	.word	0x0800c775
 800c74c:	2300      	movs	r3, #0
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e2ba      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c754:	2304      	movs	r3, #4
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e2b6      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c75c:	2308      	movs	r3, #8
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e2b2      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c764:	2310      	movs	r3, #16
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e2ae      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c76c:	2320      	movs	r3, #32
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e2aa      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c774:	2340      	movs	r3, #64	; 0x40
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e2a6      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c77c:	2380      	movs	r3, #128	; 0x80
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e2a2      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a35      	ldr	r2, [pc, #212]	; (800c860 <UART_SetConfig+0x344>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d130      	bne.n	800c7f0 <UART_SetConfig+0x2d4>
 800c78e:	4b31      	ldr	r3, [pc, #196]	; (800c854 <UART_SetConfig+0x338>)
 800c790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	2b05      	cmp	r3, #5
 800c798:	d826      	bhi.n	800c7e8 <UART_SetConfig+0x2cc>
 800c79a:	a201      	add	r2, pc, #4	; (adr r2, 800c7a0 <UART_SetConfig+0x284>)
 800c79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a0:	0800c7b9 	.word	0x0800c7b9
 800c7a4:	0800c7c1 	.word	0x0800c7c1
 800c7a8:	0800c7c9 	.word	0x0800c7c9
 800c7ac:	0800c7d1 	.word	0x0800c7d1
 800c7b0:	0800c7d9 	.word	0x0800c7d9
 800c7b4:	0800c7e1 	.word	0x0800c7e1
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e284      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c6:	e280      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7c8:	2308      	movs	r3, #8
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e27c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7d0:	2310      	movs	r3, #16
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e278      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7d8:	2320      	movs	r3, #32
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e274      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7e0:	2340      	movs	r3, #64	; 0x40
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e270      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7e8:	2380      	movs	r3, #128	; 0x80
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ee:	e26c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a1b      	ldr	r2, [pc, #108]	; (800c864 <UART_SetConfig+0x348>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d142      	bne.n	800c880 <UART_SetConfig+0x364>
 800c7fa:	4b16      	ldr	r3, [pc, #88]	; (800c854 <UART_SetConfig+0x338>)
 800c7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fe:	f003 0307 	and.w	r3, r3, #7
 800c802:	2b05      	cmp	r3, #5
 800c804:	d838      	bhi.n	800c878 <UART_SetConfig+0x35c>
 800c806:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <UART_SetConfig+0x2f0>)
 800c808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80c:	0800c825 	.word	0x0800c825
 800c810:	0800c82d 	.word	0x0800c82d
 800c814:	0800c835 	.word	0x0800c835
 800c818:	0800c83d 	.word	0x0800c83d
 800c81c:	0800c869 	.word	0x0800c869
 800c820:	0800c871 	.word	0x0800c871
 800c824:	2300      	movs	r3, #0
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e24e      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c82c:	2304      	movs	r3, #4
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e24a      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c834:	2308      	movs	r3, #8
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e246      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c83c:	2310      	movs	r3, #16
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e242      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c844:	cfff69f3 	.word	0xcfff69f3
 800c848:	58000c00 	.word	0x58000c00
 800c84c:	11fff4ff 	.word	0x11fff4ff
 800c850:	40011000 	.word	0x40011000
 800c854:	58024400 	.word	0x58024400
 800c858:	40004400 	.word	0x40004400
 800c85c:	40004800 	.word	0x40004800
 800c860:	40004c00 	.word	0x40004c00
 800c864:	40005000 	.word	0x40005000
 800c868:	2320      	movs	r3, #32
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86e:	e22c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c876:	e228      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87e:	e224      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4ab1      	ldr	r2, [pc, #708]	; (800cb4c <UART_SetConfig+0x630>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d176      	bne.n	800c978 <UART_SetConfig+0x45c>
 800c88a:	4bb1      	ldr	r3, [pc, #708]	; (800cb50 <UART_SetConfig+0x634>)
 800c88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c88e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c892:	2b28      	cmp	r3, #40	; 0x28
 800c894:	d86c      	bhi.n	800c970 <UART_SetConfig+0x454>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <UART_SetConfig+0x380>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c941 	.word	0x0800c941
 800c8a0:	0800c971 	.word	0x0800c971
 800c8a4:	0800c971 	.word	0x0800c971
 800c8a8:	0800c971 	.word	0x0800c971
 800c8ac:	0800c971 	.word	0x0800c971
 800c8b0:	0800c971 	.word	0x0800c971
 800c8b4:	0800c971 	.word	0x0800c971
 800c8b8:	0800c971 	.word	0x0800c971
 800c8bc:	0800c949 	.word	0x0800c949
 800c8c0:	0800c971 	.word	0x0800c971
 800c8c4:	0800c971 	.word	0x0800c971
 800c8c8:	0800c971 	.word	0x0800c971
 800c8cc:	0800c971 	.word	0x0800c971
 800c8d0:	0800c971 	.word	0x0800c971
 800c8d4:	0800c971 	.word	0x0800c971
 800c8d8:	0800c971 	.word	0x0800c971
 800c8dc:	0800c951 	.word	0x0800c951
 800c8e0:	0800c971 	.word	0x0800c971
 800c8e4:	0800c971 	.word	0x0800c971
 800c8e8:	0800c971 	.word	0x0800c971
 800c8ec:	0800c971 	.word	0x0800c971
 800c8f0:	0800c971 	.word	0x0800c971
 800c8f4:	0800c971 	.word	0x0800c971
 800c8f8:	0800c971 	.word	0x0800c971
 800c8fc:	0800c959 	.word	0x0800c959
 800c900:	0800c971 	.word	0x0800c971
 800c904:	0800c971 	.word	0x0800c971
 800c908:	0800c971 	.word	0x0800c971
 800c90c:	0800c971 	.word	0x0800c971
 800c910:	0800c971 	.word	0x0800c971
 800c914:	0800c971 	.word	0x0800c971
 800c918:	0800c971 	.word	0x0800c971
 800c91c:	0800c961 	.word	0x0800c961
 800c920:	0800c971 	.word	0x0800c971
 800c924:	0800c971 	.word	0x0800c971
 800c928:	0800c971 	.word	0x0800c971
 800c92c:	0800c971 	.word	0x0800c971
 800c930:	0800c971 	.word	0x0800c971
 800c934:	0800c971 	.word	0x0800c971
 800c938:	0800c971 	.word	0x0800c971
 800c93c:	0800c969 	.word	0x0800c969
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e1c0      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c948:	2304      	movs	r3, #4
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94e:	e1bc      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c950:	2308      	movs	r3, #8
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c956:	e1b8      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c958:	2310      	movs	r3, #16
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95e:	e1b4      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c960:	2320      	movs	r3, #32
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e1b0      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c968:	2340      	movs	r3, #64	; 0x40
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e1ac      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c970:	2380      	movs	r3, #128	; 0x80
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e1a8      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a75      	ldr	r2, [pc, #468]	; (800cb54 <UART_SetConfig+0x638>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d130      	bne.n	800c9e4 <UART_SetConfig+0x4c8>
 800c982:	4b73      	ldr	r3, [pc, #460]	; (800cb50 <UART_SetConfig+0x634>)
 800c984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c986:	f003 0307 	and.w	r3, r3, #7
 800c98a:	2b05      	cmp	r3, #5
 800c98c:	d826      	bhi.n	800c9dc <UART_SetConfig+0x4c0>
 800c98e:	a201      	add	r2, pc, #4	; (adr r2, 800c994 <UART_SetConfig+0x478>)
 800c990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c994:	0800c9ad 	.word	0x0800c9ad
 800c998:	0800c9b5 	.word	0x0800c9b5
 800c99c:	0800c9bd 	.word	0x0800c9bd
 800c9a0:	0800c9c5 	.word	0x0800c9c5
 800c9a4:	0800c9cd 	.word	0x0800c9cd
 800c9a8:	0800c9d5 	.word	0x0800c9d5
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e18a      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9b4:	2304      	movs	r3, #4
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e186      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9bc:	2308      	movs	r3, #8
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c2:	e182      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9c4:	2310      	movs	r3, #16
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ca:	e17e      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9cc:	2320      	movs	r3, #32
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e17a      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9d4:	2340      	movs	r3, #64	; 0x40
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e176      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9dc:	2380      	movs	r3, #128	; 0x80
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e172      	b.n	800ccca <UART_SetConfig+0x7ae>
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a5b      	ldr	r2, [pc, #364]	; (800cb58 <UART_SetConfig+0x63c>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d130      	bne.n	800ca50 <UART_SetConfig+0x534>
 800c9ee:	4b58      	ldr	r3, [pc, #352]	; (800cb50 <UART_SetConfig+0x634>)
 800c9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f2:	f003 0307 	and.w	r3, r3, #7
 800c9f6:	2b05      	cmp	r3, #5
 800c9f8:	d826      	bhi.n	800ca48 <UART_SetConfig+0x52c>
 800c9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <UART_SetConfig+0x4e4>)
 800c9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca00:	0800ca19 	.word	0x0800ca19
 800ca04:	0800ca21 	.word	0x0800ca21
 800ca08:	0800ca29 	.word	0x0800ca29
 800ca0c:	0800ca31 	.word	0x0800ca31
 800ca10:	0800ca39 	.word	0x0800ca39
 800ca14:	0800ca41 	.word	0x0800ca41
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e154      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca20:	2304      	movs	r3, #4
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e150      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca28:	2308      	movs	r3, #8
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2e:	e14c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca30:	2310      	movs	r3, #16
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca36:	e148      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca38:	2320      	movs	r3, #32
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e144      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca40:	2340      	movs	r3, #64	; 0x40
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e140      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca48:	2380      	movs	r3, #128	; 0x80
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e13c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a41      	ldr	r2, [pc, #260]	; (800cb5c <UART_SetConfig+0x640>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	f040 8082 	bne.w	800cb60 <UART_SetConfig+0x644>
 800ca5c:	4b3c      	ldr	r3, [pc, #240]	; (800cb50 <UART_SetConfig+0x634>)
 800ca5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca64:	2b28      	cmp	r3, #40	; 0x28
 800ca66:	d86d      	bhi.n	800cb44 <UART_SetConfig+0x628>
 800ca68:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <UART_SetConfig+0x554>)
 800ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800cb15 	.word	0x0800cb15
 800ca74:	0800cb45 	.word	0x0800cb45
 800ca78:	0800cb45 	.word	0x0800cb45
 800ca7c:	0800cb45 	.word	0x0800cb45
 800ca80:	0800cb45 	.word	0x0800cb45
 800ca84:	0800cb45 	.word	0x0800cb45
 800ca88:	0800cb45 	.word	0x0800cb45
 800ca8c:	0800cb45 	.word	0x0800cb45
 800ca90:	0800cb1d 	.word	0x0800cb1d
 800ca94:	0800cb45 	.word	0x0800cb45
 800ca98:	0800cb45 	.word	0x0800cb45
 800ca9c:	0800cb45 	.word	0x0800cb45
 800caa0:	0800cb45 	.word	0x0800cb45
 800caa4:	0800cb45 	.word	0x0800cb45
 800caa8:	0800cb45 	.word	0x0800cb45
 800caac:	0800cb45 	.word	0x0800cb45
 800cab0:	0800cb25 	.word	0x0800cb25
 800cab4:	0800cb45 	.word	0x0800cb45
 800cab8:	0800cb45 	.word	0x0800cb45
 800cabc:	0800cb45 	.word	0x0800cb45
 800cac0:	0800cb45 	.word	0x0800cb45
 800cac4:	0800cb45 	.word	0x0800cb45
 800cac8:	0800cb45 	.word	0x0800cb45
 800cacc:	0800cb45 	.word	0x0800cb45
 800cad0:	0800cb2d 	.word	0x0800cb2d
 800cad4:	0800cb45 	.word	0x0800cb45
 800cad8:	0800cb45 	.word	0x0800cb45
 800cadc:	0800cb45 	.word	0x0800cb45
 800cae0:	0800cb45 	.word	0x0800cb45
 800cae4:	0800cb45 	.word	0x0800cb45
 800cae8:	0800cb45 	.word	0x0800cb45
 800caec:	0800cb45 	.word	0x0800cb45
 800caf0:	0800cb35 	.word	0x0800cb35
 800caf4:	0800cb45 	.word	0x0800cb45
 800caf8:	0800cb45 	.word	0x0800cb45
 800cafc:	0800cb45 	.word	0x0800cb45
 800cb00:	0800cb45 	.word	0x0800cb45
 800cb04:	0800cb45 	.word	0x0800cb45
 800cb08:	0800cb45 	.word	0x0800cb45
 800cb0c:	0800cb45 	.word	0x0800cb45
 800cb10:	0800cb3d 	.word	0x0800cb3d
 800cb14:	2301      	movs	r3, #1
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1a:	e0d6      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb22:	e0d2      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2a:	e0ce      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e0ca      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb34:	2320      	movs	r3, #32
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e0c6      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e0c2      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb44:	2380      	movs	r3, #128	; 0x80
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e0be      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cb4c:	40011400 	.word	0x40011400
 800cb50:	58024400 	.word	0x58024400
 800cb54:	40007800 	.word	0x40007800
 800cb58:	40007c00 	.word	0x40007c00
 800cb5c:	40011800 	.word	0x40011800
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4aad      	ldr	r2, [pc, #692]	; (800ce1c <UART_SetConfig+0x900>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d176      	bne.n	800cc58 <UART_SetConfig+0x73c>
 800cb6a:	4bad      	ldr	r3, [pc, #692]	; (800ce20 <UART_SetConfig+0x904>)
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb72:	2b28      	cmp	r3, #40	; 0x28
 800cb74:	d86c      	bhi.n	800cc50 <UART_SetConfig+0x734>
 800cb76:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <UART_SetConfig+0x660>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cc21 	.word	0x0800cc21
 800cb80:	0800cc51 	.word	0x0800cc51
 800cb84:	0800cc51 	.word	0x0800cc51
 800cb88:	0800cc51 	.word	0x0800cc51
 800cb8c:	0800cc51 	.word	0x0800cc51
 800cb90:	0800cc51 	.word	0x0800cc51
 800cb94:	0800cc51 	.word	0x0800cc51
 800cb98:	0800cc51 	.word	0x0800cc51
 800cb9c:	0800cc29 	.word	0x0800cc29
 800cba0:	0800cc51 	.word	0x0800cc51
 800cba4:	0800cc51 	.word	0x0800cc51
 800cba8:	0800cc51 	.word	0x0800cc51
 800cbac:	0800cc51 	.word	0x0800cc51
 800cbb0:	0800cc51 	.word	0x0800cc51
 800cbb4:	0800cc51 	.word	0x0800cc51
 800cbb8:	0800cc51 	.word	0x0800cc51
 800cbbc:	0800cc31 	.word	0x0800cc31
 800cbc0:	0800cc51 	.word	0x0800cc51
 800cbc4:	0800cc51 	.word	0x0800cc51
 800cbc8:	0800cc51 	.word	0x0800cc51
 800cbcc:	0800cc51 	.word	0x0800cc51
 800cbd0:	0800cc51 	.word	0x0800cc51
 800cbd4:	0800cc51 	.word	0x0800cc51
 800cbd8:	0800cc51 	.word	0x0800cc51
 800cbdc:	0800cc39 	.word	0x0800cc39
 800cbe0:	0800cc51 	.word	0x0800cc51
 800cbe4:	0800cc51 	.word	0x0800cc51
 800cbe8:	0800cc51 	.word	0x0800cc51
 800cbec:	0800cc51 	.word	0x0800cc51
 800cbf0:	0800cc51 	.word	0x0800cc51
 800cbf4:	0800cc51 	.word	0x0800cc51
 800cbf8:	0800cc51 	.word	0x0800cc51
 800cbfc:	0800cc41 	.word	0x0800cc41
 800cc00:	0800cc51 	.word	0x0800cc51
 800cc04:	0800cc51 	.word	0x0800cc51
 800cc08:	0800cc51 	.word	0x0800cc51
 800cc0c:	0800cc51 	.word	0x0800cc51
 800cc10:	0800cc51 	.word	0x0800cc51
 800cc14:	0800cc51 	.word	0x0800cc51
 800cc18:	0800cc51 	.word	0x0800cc51
 800cc1c:	0800cc49 	.word	0x0800cc49
 800cc20:	2301      	movs	r3, #1
 800cc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc26:	e050      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc28:	2304      	movs	r3, #4
 800cc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2e:	e04c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc30:	2308      	movs	r3, #8
 800cc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc36:	e048      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc38:	2310      	movs	r3, #16
 800cc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3e:	e044      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc40:	2320      	movs	r3, #32
 800cc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc46:	e040      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc48:	2340      	movs	r3, #64	; 0x40
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4e:	e03c      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc50:	2380      	movs	r3, #128	; 0x80
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc56:	e038      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a71      	ldr	r2, [pc, #452]	; (800ce24 <UART_SetConfig+0x908>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d130      	bne.n	800ccc4 <UART_SetConfig+0x7a8>
 800cc62:	4b6f      	ldr	r3, [pc, #444]	; (800ce20 <UART_SetConfig+0x904>)
 800cc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	d826      	bhi.n	800ccbc <UART_SetConfig+0x7a0>
 800cc6e:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <UART_SetConfig+0x758>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cc8d 	.word	0x0800cc8d
 800cc78:	0800cc95 	.word	0x0800cc95
 800cc7c:	0800cc9d 	.word	0x0800cc9d
 800cc80:	0800cca5 	.word	0x0800cca5
 800cc84:	0800ccad 	.word	0x0800ccad
 800cc88:	0800ccb5 	.word	0x0800ccb5
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e01a      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc94:	2304      	movs	r3, #4
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e016      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cc9c:	2308      	movs	r3, #8
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e012      	b.n	800ccca <UART_SetConfig+0x7ae>
 800cca4:	2310      	movs	r3, #16
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e00e      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ccac:	2320      	movs	r3, #32
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e00a      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ccb4:	2340      	movs	r3, #64	; 0x40
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e006      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ccbc:	2380      	movs	r3, #128	; 0x80
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e002      	b.n	800ccca <UART_SetConfig+0x7ae>
 800ccc4:	2380      	movs	r3, #128	; 0x80
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a55      	ldr	r2, [pc, #340]	; (800ce24 <UART_SetConfig+0x908>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	f040 80f8 	bne.w	800cec6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccda:	2b20      	cmp	r3, #32
 800ccdc:	dc46      	bgt.n	800cd6c <UART_SetConfig+0x850>
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	db75      	blt.n	800cdce <UART_SetConfig+0x8b2>
 800cce2:	3b02      	subs	r3, #2
 800cce4:	2b1e      	cmp	r3, #30
 800cce6:	d872      	bhi.n	800cdce <UART_SetConfig+0x8b2>
 800cce8:	a201      	add	r2, pc, #4	; (adr r2, 800ccf0 <UART_SetConfig+0x7d4>)
 800ccea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccee:	bf00      	nop
 800ccf0:	0800cd73 	.word	0x0800cd73
 800ccf4:	0800cdcf 	.word	0x0800cdcf
 800ccf8:	0800cd7b 	.word	0x0800cd7b
 800ccfc:	0800cdcf 	.word	0x0800cdcf
 800cd00:	0800cdcf 	.word	0x0800cdcf
 800cd04:	0800cdcf 	.word	0x0800cdcf
 800cd08:	0800cd8b 	.word	0x0800cd8b
 800cd0c:	0800cdcf 	.word	0x0800cdcf
 800cd10:	0800cdcf 	.word	0x0800cdcf
 800cd14:	0800cdcf 	.word	0x0800cdcf
 800cd18:	0800cdcf 	.word	0x0800cdcf
 800cd1c:	0800cdcf 	.word	0x0800cdcf
 800cd20:	0800cdcf 	.word	0x0800cdcf
 800cd24:	0800cdcf 	.word	0x0800cdcf
 800cd28:	0800cd9b 	.word	0x0800cd9b
 800cd2c:	0800cdcf 	.word	0x0800cdcf
 800cd30:	0800cdcf 	.word	0x0800cdcf
 800cd34:	0800cdcf 	.word	0x0800cdcf
 800cd38:	0800cdcf 	.word	0x0800cdcf
 800cd3c:	0800cdcf 	.word	0x0800cdcf
 800cd40:	0800cdcf 	.word	0x0800cdcf
 800cd44:	0800cdcf 	.word	0x0800cdcf
 800cd48:	0800cdcf 	.word	0x0800cdcf
 800cd4c:	0800cdcf 	.word	0x0800cdcf
 800cd50:	0800cdcf 	.word	0x0800cdcf
 800cd54:	0800cdcf 	.word	0x0800cdcf
 800cd58:	0800cdcf 	.word	0x0800cdcf
 800cd5c:	0800cdcf 	.word	0x0800cdcf
 800cd60:	0800cdcf 	.word	0x0800cdcf
 800cd64:	0800cdcf 	.word	0x0800cdcf
 800cd68:	0800cdc1 	.word	0x0800cdc1
 800cd6c:	2b40      	cmp	r3, #64	; 0x40
 800cd6e:	d02a      	beq.n	800cdc6 <UART_SetConfig+0x8aa>
 800cd70:	e02d      	b.n	800cdce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd72:	f7fc ffd3 	bl	8009d1c <HAL_RCCEx_GetD3PCLK1Freq>
 800cd76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd78:	e02f      	b.n	800cdda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fc ffe2 	bl	8009d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd88:	e027      	b.n	800cdda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd8a:	f107 0318 	add.w	r3, r7, #24
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fd f92e 	bl	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd98:	e01f      	b.n	800cdda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd9a:	4b21      	ldr	r3, [pc, #132]	; (800ce20 <UART_SetConfig+0x904>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 0320 	and.w	r3, r3, #32
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d009      	beq.n	800cdba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cda6:	4b1e      	ldr	r3, [pc, #120]	; (800ce20 <UART_SetConfig+0x904>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	08db      	lsrs	r3, r3, #3
 800cdac:	f003 0303 	and.w	r3, r3, #3
 800cdb0:	4a1d      	ldr	r2, [pc, #116]	; (800ce28 <UART_SetConfig+0x90c>)
 800cdb2:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cdb8:	e00f      	b.n	800cdda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cdba:	4b1b      	ldr	r3, [pc, #108]	; (800ce28 <UART_SetConfig+0x90c>)
 800cdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdbe:	e00c      	b.n	800cdda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdc0:	4b1a      	ldr	r3, [pc, #104]	; (800ce2c <UART_SetConfig+0x910>)
 800cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc4:	e009      	b.n	800cdda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdcc:	e005      	b.n	800cdda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 81ee 	beq.w	800d1be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	4a12      	ldr	r2, [pc, #72]	; (800ce30 <UART_SetConfig+0x914>)
 800cde8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdec:	461a      	mov	r2, r3
 800cdee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdf4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	685a      	ldr	r2, [r3, #4]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	4413      	add	r3, r2
 800ce00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d305      	bcc.n	800ce12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d910      	bls.n	800ce34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce18:	e1d1      	b.n	800d1be <UART_SetConfig+0xca2>
 800ce1a:	bf00      	nop
 800ce1c:	40011c00 	.word	0x40011c00
 800ce20:	58024400 	.word	0x58024400
 800ce24:	58000c00 	.word	0x58000c00
 800ce28:	03d09000 	.word	0x03d09000
 800ce2c:	003d0900 	.word	0x003d0900
 800ce30:	0800e414 	.word	0x0800e414
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce36:	2200      	movs	r2, #0
 800ce38:	60bb      	str	r3, [r7, #8]
 800ce3a:	60fa      	str	r2, [r7, #12]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	4ac0      	ldr	r2, [pc, #768]	; (800d144 <UART_SetConfig+0xc28>)
 800ce42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	2200      	movs	r2, #0
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	607a      	str	r2, [r7, #4]
 800ce4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce56:	f7f3 fa63 	bl	8000320 <__aeabi_uldivmod>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	4610      	mov	r0, r2
 800ce60:	4619      	mov	r1, r3
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	020b      	lsls	r3, r1, #8
 800ce6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce70:	0202      	lsls	r2, r0, #8
 800ce72:	6979      	ldr	r1, [r7, #20]
 800ce74:	6849      	ldr	r1, [r1, #4]
 800ce76:	0849      	lsrs	r1, r1, #1
 800ce78:	2000      	movs	r0, #0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	eb12 0804 	adds.w	r8, r2, r4
 800ce82:	eb43 0905 	adc.w	r9, r3, r5
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	469a      	mov	sl, r3
 800ce8e:	4693      	mov	fp, r2
 800ce90:	4652      	mov	r2, sl
 800ce92:	465b      	mov	r3, fp
 800ce94:	4640      	mov	r0, r8
 800ce96:	4649      	mov	r1, r9
 800ce98:	f7f3 fa42 	bl	8000320 <__aeabi_uldivmod>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	4613      	mov	r3, r2
 800cea2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceaa:	d308      	bcc.n	800cebe <UART_SetConfig+0x9a2>
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceb2:	d204      	bcs.n	800cebe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceba:	60da      	str	r2, [r3, #12]
 800cebc:	e17f      	b.n	800d1be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cec4:	e17b      	b.n	800d1be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cece:	f040 80bd 	bne.w	800d04c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ced2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ced6:	2b20      	cmp	r3, #32
 800ced8:	dc48      	bgt.n	800cf6c <UART_SetConfig+0xa50>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	db7b      	blt.n	800cfd6 <UART_SetConfig+0xaba>
 800cede:	2b20      	cmp	r3, #32
 800cee0:	d879      	bhi.n	800cfd6 <UART_SetConfig+0xaba>
 800cee2:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <UART_SetConfig+0x9cc>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cf73 	.word	0x0800cf73
 800ceec:	0800cf7b 	.word	0x0800cf7b
 800cef0:	0800cfd7 	.word	0x0800cfd7
 800cef4:	0800cfd7 	.word	0x0800cfd7
 800cef8:	0800cf83 	.word	0x0800cf83
 800cefc:	0800cfd7 	.word	0x0800cfd7
 800cf00:	0800cfd7 	.word	0x0800cfd7
 800cf04:	0800cfd7 	.word	0x0800cfd7
 800cf08:	0800cf93 	.word	0x0800cf93
 800cf0c:	0800cfd7 	.word	0x0800cfd7
 800cf10:	0800cfd7 	.word	0x0800cfd7
 800cf14:	0800cfd7 	.word	0x0800cfd7
 800cf18:	0800cfd7 	.word	0x0800cfd7
 800cf1c:	0800cfd7 	.word	0x0800cfd7
 800cf20:	0800cfd7 	.word	0x0800cfd7
 800cf24:	0800cfd7 	.word	0x0800cfd7
 800cf28:	0800cfa3 	.word	0x0800cfa3
 800cf2c:	0800cfd7 	.word	0x0800cfd7
 800cf30:	0800cfd7 	.word	0x0800cfd7
 800cf34:	0800cfd7 	.word	0x0800cfd7
 800cf38:	0800cfd7 	.word	0x0800cfd7
 800cf3c:	0800cfd7 	.word	0x0800cfd7
 800cf40:	0800cfd7 	.word	0x0800cfd7
 800cf44:	0800cfd7 	.word	0x0800cfd7
 800cf48:	0800cfd7 	.word	0x0800cfd7
 800cf4c:	0800cfd7 	.word	0x0800cfd7
 800cf50:	0800cfd7 	.word	0x0800cfd7
 800cf54:	0800cfd7 	.word	0x0800cfd7
 800cf58:	0800cfd7 	.word	0x0800cfd7
 800cf5c:	0800cfd7 	.word	0x0800cfd7
 800cf60:	0800cfd7 	.word	0x0800cfd7
 800cf64:	0800cfd7 	.word	0x0800cfd7
 800cf68:	0800cfc9 	.word	0x0800cfc9
 800cf6c:	2b40      	cmp	r3, #64	; 0x40
 800cf6e:	d02e      	beq.n	800cfce <UART_SetConfig+0xab2>
 800cf70:	e031      	b.n	800cfd6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf72:	f7fb ffad 	bl	8008ed0 <HAL_RCC_GetPCLK1Freq>
 800cf76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf78:	e033      	b.n	800cfe2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf7a:	f7fb ffbf 	bl	8008efc <HAL_RCC_GetPCLK2Freq>
 800cf7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf80:	e02f      	b.n	800cfe2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fc fede 	bl	8009d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf90:	e027      	b.n	800cfe2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf92:	f107 0318 	add.w	r3, r7, #24
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fd f82a 	bl	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa0:	e01f      	b.n	800cfe2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfa2:	4b69      	ldr	r3, [pc, #420]	; (800d148 <UART_SetConfig+0xc2c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f003 0320 	and.w	r3, r3, #32
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d009      	beq.n	800cfc2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfae:	4b66      	ldr	r3, [pc, #408]	; (800d148 <UART_SetConfig+0xc2c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	08db      	lsrs	r3, r3, #3
 800cfb4:	f003 0303 	and.w	r3, r3, #3
 800cfb8:	4a64      	ldr	r2, [pc, #400]	; (800d14c <UART_SetConfig+0xc30>)
 800cfba:	fa22 f303 	lsr.w	r3, r2, r3
 800cfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfc0:	e00f      	b.n	800cfe2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cfc2:	4b62      	ldr	r3, [pc, #392]	; (800d14c <UART_SetConfig+0xc30>)
 800cfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc6:	e00c      	b.n	800cfe2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfc8:	4b61      	ldr	r3, [pc, #388]	; (800d150 <UART_SetConfig+0xc34>)
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfcc:	e009      	b.n	800cfe2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd4:	e005      	b.n	800cfe2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cfe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 80ea 	beq.w	800d1be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	4a55      	ldr	r2, [pc, #340]	; (800d144 <UART_SetConfig+0xc28>)
 800cff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cff4:	461a      	mov	r2, r3
 800cff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cffc:	005a      	lsls	r2, r3, #1
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	085b      	lsrs	r3, r3, #1
 800d004:	441a      	add	r2, r3
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d012:	2b0f      	cmp	r3, #15
 800d014:	d916      	bls.n	800d044 <UART_SetConfig+0xb28>
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d01c:	d212      	bcs.n	800d044 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	b29b      	uxth	r3, r3
 800d022:	f023 030f 	bic.w	r3, r3, #15
 800d026:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	085b      	lsrs	r3, r3, #1
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	b29a      	uxth	r2, r3
 800d034:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d036:	4313      	orrs	r3, r2
 800d038:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d040:	60da      	str	r2, [r3, #12]
 800d042:	e0bc      	b.n	800d1be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d04a:	e0b8      	b.n	800d1be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d04c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d050:	2b20      	cmp	r3, #32
 800d052:	dc4b      	bgt.n	800d0ec <UART_SetConfig+0xbd0>
 800d054:	2b00      	cmp	r3, #0
 800d056:	f2c0 8087 	blt.w	800d168 <UART_SetConfig+0xc4c>
 800d05a:	2b20      	cmp	r3, #32
 800d05c:	f200 8084 	bhi.w	800d168 <UART_SetConfig+0xc4c>
 800d060:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <UART_SetConfig+0xb4c>)
 800d062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d066:	bf00      	nop
 800d068:	0800d0f3 	.word	0x0800d0f3
 800d06c:	0800d0fb 	.word	0x0800d0fb
 800d070:	0800d169 	.word	0x0800d169
 800d074:	0800d169 	.word	0x0800d169
 800d078:	0800d103 	.word	0x0800d103
 800d07c:	0800d169 	.word	0x0800d169
 800d080:	0800d169 	.word	0x0800d169
 800d084:	0800d169 	.word	0x0800d169
 800d088:	0800d113 	.word	0x0800d113
 800d08c:	0800d169 	.word	0x0800d169
 800d090:	0800d169 	.word	0x0800d169
 800d094:	0800d169 	.word	0x0800d169
 800d098:	0800d169 	.word	0x0800d169
 800d09c:	0800d169 	.word	0x0800d169
 800d0a0:	0800d169 	.word	0x0800d169
 800d0a4:	0800d169 	.word	0x0800d169
 800d0a8:	0800d123 	.word	0x0800d123
 800d0ac:	0800d169 	.word	0x0800d169
 800d0b0:	0800d169 	.word	0x0800d169
 800d0b4:	0800d169 	.word	0x0800d169
 800d0b8:	0800d169 	.word	0x0800d169
 800d0bc:	0800d169 	.word	0x0800d169
 800d0c0:	0800d169 	.word	0x0800d169
 800d0c4:	0800d169 	.word	0x0800d169
 800d0c8:	0800d169 	.word	0x0800d169
 800d0cc:	0800d169 	.word	0x0800d169
 800d0d0:	0800d169 	.word	0x0800d169
 800d0d4:	0800d169 	.word	0x0800d169
 800d0d8:	0800d169 	.word	0x0800d169
 800d0dc:	0800d169 	.word	0x0800d169
 800d0e0:	0800d169 	.word	0x0800d169
 800d0e4:	0800d169 	.word	0x0800d169
 800d0e8:	0800d15b 	.word	0x0800d15b
 800d0ec:	2b40      	cmp	r3, #64	; 0x40
 800d0ee:	d037      	beq.n	800d160 <UART_SetConfig+0xc44>
 800d0f0:	e03a      	b.n	800d168 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0f2:	f7fb feed 	bl	8008ed0 <HAL_RCC_GetPCLK1Freq>
 800d0f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0f8:	e03c      	b.n	800d174 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0fa:	f7fb feff 	bl	8008efc <HAL_RCC_GetPCLK2Freq>
 800d0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d100:	e038      	b.n	800d174 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d106:	4618      	mov	r0, r3
 800d108:	f7fc fe1e 	bl	8009d48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d110:	e030      	b.n	800d174 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d112:	f107 0318 	add.w	r3, r7, #24
 800d116:	4618      	mov	r0, r3
 800d118:	f7fc ff6a 	bl	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d120:	e028      	b.n	800d174 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d122:	4b09      	ldr	r3, [pc, #36]	; (800d148 <UART_SetConfig+0xc2c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d012      	beq.n	800d154 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d12e:	4b06      	ldr	r3, [pc, #24]	; (800d148 <UART_SetConfig+0xc2c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	08db      	lsrs	r3, r3, #3
 800d134:	f003 0303 	and.w	r3, r3, #3
 800d138:	4a04      	ldr	r2, [pc, #16]	; (800d14c <UART_SetConfig+0xc30>)
 800d13a:	fa22 f303 	lsr.w	r3, r2, r3
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d140:	e018      	b.n	800d174 <UART_SetConfig+0xc58>
 800d142:	bf00      	nop
 800d144:	0800e414 	.word	0x0800e414
 800d148:	58024400 	.word	0x58024400
 800d14c:	03d09000 	.word	0x03d09000
 800d150:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <UART_SetConfig+0xccc>)
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d158:	e00c      	b.n	800d174 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d15a:	4b24      	ldr	r3, [pc, #144]	; (800d1ec <UART_SetConfig+0xcd0>)
 800d15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d15e:	e009      	b.n	800d174 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d166:	e005      	b.n	800d174 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d168:	2300      	movs	r3, #0
 800d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d172:	bf00      	nop
    }

    if (pclk != 0U)
 800d174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d176:	2b00      	cmp	r3, #0
 800d178:	d021      	beq.n	800d1be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	4a1c      	ldr	r2, [pc, #112]	; (800d1f0 <UART_SetConfig+0xcd4>)
 800d180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d184:	461a      	mov	r2, r3
 800d186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d188:	fbb3 f2f2 	udiv	r2, r3, r2
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	085b      	lsrs	r3, r3, #1
 800d192:	441a      	add	r2, r3
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	fbb2 f3f3 	udiv	r3, r2, r3
 800d19c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	2b0f      	cmp	r3, #15
 800d1a2:	d909      	bls.n	800d1b8 <UART_SetConfig+0xc9c>
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1aa:	d205      	bcs.n	800d1b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	60da      	str	r2, [r3, #12]
 800d1b6:	e002      	b.n	800d1be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d1da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3748      	adds	r7, #72	; 0x48
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1e8:	03d09000 	.word	0x03d09000
 800d1ec:	003d0900 	.word	0x003d0900
 800d1f0:	0800e414 	.word	0x0800e414

0800d1f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00a      	beq.n	800d21e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	430a      	orrs	r2, r1
 800d21c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00a      	beq.n	800d240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	430a      	orrs	r2, r1
 800d23e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d244:	f003 0304 	and.w	r3, r3, #4
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00a      	beq.n	800d262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	430a      	orrs	r2, r1
 800d260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d266:	f003 0308 	and.w	r3, r3, #8
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00a      	beq.n	800d284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	430a      	orrs	r2, r1
 800d282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d288:	f003 0310 	and.w	r3, r3, #16
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00a      	beq.n	800d2a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	430a      	orrs	r2, r1
 800d2a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2aa:	f003 0320 	and.w	r3, r3, #32
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00a      	beq.n	800d2c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	430a      	orrs	r2, r1
 800d2c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d01a      	beq.n	800d30a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	430a      	orrs	r2, r1
 800d2e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2f2:	d10a      	bne.n	800d30a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	430a      	orrs	r2, r1
 800d32a:	605a      	str	r2, [r3, #4]
  }
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af02      	add	r7, sp, #8
 800d33e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d348:	f7f7 fd62 	bl	8004e10 <HAL_GetTick>
 800d34c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f003 0308 	and.w	r3, r3, #8
 800d358:	2b08      	cmp	r3, #8
 800d35a:	d10e      	bne.n	800d37a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d35c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f82f 	bl	800d3ce <UART_WaitOnFlagUntilTimeout>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e025      	b.n	800d3c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b04      	cmp	r3, #4
 800d386:	d10e      	bne.n	800d3a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f819 	bl	800d3ce <UART_WaitOnFlagUntilTimeout>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e00f      	b.n	800d3c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2220      	movs	r2, #32
 800d3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2220      	movs	r2, #32
 800d3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b09c      	sub	sp, #112	; 0x70
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	60b9      	str	r1, [r7, #8]
 800d3d8:	603b      	str	r3, [r7, #0]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3de:	e0a9      	b.n	800d534 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3e6:	f000 80a5 	beq.w	800d534 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3ea:	f7f7 fd11 	bl	8004e10 <HAL_GetTick>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d302      	bcc.n	800d400 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d140      	bne.n	800d482 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d408:	e853 3f00 	ldrex	r3, [r3]
 800d40c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d414:	667b      	str	r3, [r7, #100]	; 0x64
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	461a      	mov	r2, r3
 800d41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d41e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d420:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d426:	e841 2300 	strex	r3, r2, [r1]
 800d42a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1e6      	bne.n	800d400 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3308      	adds	r3, #8
 800d438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43c:	e853 3f00 	ldrex	r3, [r3]
 800d440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	f023 0301 	bic.w	r3, r3, #1
 800d448:	663b      	str	r3, [r7, #96]	; 0x60
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3308      	adds	r3, #8
 800d450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d452:	64ba      	str	r2, [r7, #72]	; 0x48
 800d454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e5      	bne.n	800d432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2220      	movs	r2, #32
 800d46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2220      	movs	r2, #32
 800d472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e069      	b.n	800d556 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 0304 	and.w	r3, r3, #4
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d051      	beq.n	800d534 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d49a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d49e:	d149      	bne.n	800d534 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4d0:	e841 2300 	strex	r3, r2, [r1]
 800d4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1e6      	bne.n	800d4aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	e853 3f00 	ldrex	r3, [r3]
 800d4ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	f023 0301 	bic.w	r3, r3, #1
 800d4f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4fc:	623a      	str	r2, [r7, #32]
 800d4fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d500:	69f9      	ldr	r1, [r7, #28]
 800d502:	6a3a      	ldr	r2, [r7, #32]
 800d504:	e841 2300 	strex	r3, r2, [r1]
 800d508:	61bb      	str	r3, [r7, #24]
   return(result);
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e5      	bne.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2220      	movs	r2, #32
 800d514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2220      	movs	r2, #32
 800d51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2220      	movs	r2, #32
 800d524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d530:	2303      	movs	r3, #3
 800d532:	e010      	b.n	800d556 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	69da      	ldr	r2, [r3, #28]
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	4013      	ands	r3, r2
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	429a      	cmp	r2, r3
 800d542:	bf0c      	ite	eq
 800d544:	2301      	moveq	r3, #1
 800d546:	2300      	movne	r3, #0
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	461a      	mov	r2, r3
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	429a      	cmp	r2, r3
 800d550:	f43f af46 	beq.w	800d3e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3770      	adds	r7, #112	; 0x70
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b096      	sub	sp, #88	; 0x58
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	4613      	mov	r3, r2
 800d56c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	88fa      	ldrh	r2, [r7, #6]
 800d578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2222      	movs	r2, #34	; 0x22
 800d588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d590:	2b00      	cmp	r3, #0
 800d592:	d02c      	beq.n	800d5ee <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d598:	4a42      	ldr	r2, [pc, #264]	; (800d6a4 <UART_Start_Receive_DMA+0x144>)
 800d59a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a0:	4a41      	ldr	r2, [pc, #260]	; (800d6a8 <UART_Start_Receive_DMA+0x148>)
 800d5a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a8:	4a40      	ldr	r2, [pc, #256]	; (800d6ac <UART_Start_Receive_DMA+0x14c>)
 800d5aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3324      	adds	r3, #36	; 0x24
 800d5be:	4619      	mov	r1, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	88fb      	ldrh	r3, [r7, #6]
 800d5c8:	f7f8 f898 	bl	80056fc <HAL_DMA_Start_IT>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00d      	beq.n	800d5ee <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2210      	movs	r2, #16
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e055      	b.n	800d69a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d018      	beq.n	800d630 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d606:	e853 3f00 	ldrex	r3, [r3]
 800d60a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d612:	657b      	str	r3, [r7, #84]	; 0x54
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	461a      	mov	r2, r3
 800d61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d61c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d61e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d620:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d624:	e841 2300 	strex	r3, r2, [r1]
 800d628:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d1e6      	bne.n	800d5fe <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3308      	adds	r3, #8
 800d636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	e853 3f00 	ldrex	r3, [r3]
 800d63e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	f043 0301 	orr.w	r3, r3, #1
 800d646:	653b      	str	r3, [r7, #80]	; 0x50
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3308      	adds	r3, #8
 800d64e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d650:	637a      	str	r2, [r7, #52]	; 0x34
 800d652:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d658:	e841 2300 	strex	r3, r2, [r1]
 800d65c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1e5      	bne.n	800d630 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	3308      	adds	r3, #8
 800d66a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	e853 3f00 	ldrex	r3, [r3]
 800d672:	613b      	str	r3, [r7, #16]
   return(result);
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d67a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3308      	adds	r3, #8
 800d682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d684:	623a      	str	r2, [r7, #32]
 800d686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d688:	69f9      	ldr	r1, [r7, #28]
 800d68a:	6a3a      	ldr	r2, [r7, #32]
 800d68c:	e841 2300 	strex	r3, r2, [r1]
 800d690:	61bb      	str	r3, [r7, #24]
   return(result);
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1e5      	bne.n	800d664 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3758      	adds	r7, #88	; 0x58
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	0800d8b3 	.word	0x0800d8b3
 800d6a8:	0800d9d5 	.word	0x0800d9d5
 800d6ac:	0800da0d 	.word	0x0800da0d

0800d6b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b08f      	sub	sp, #60	; 0x3c
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	e853 3f00 	ldrex	r3, [r3]
 800d6c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6de:	e841 2300 	strex	r3, r2, [r1]
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e6      	bne.n	800d6b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	e853 3f00 	ldrex	r3, [r3]
 800d6f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d700:	633b      	str	r3, [r7, #48]	; 0x30
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3308      	adds	r3, #8
 800d708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d70a:	61ba      	str	r2, [r7, #24]
 800d70c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70e:	6979      	ldr	r1, [r7, #20]
 800d710:	69ba      	ldr	r2, [r7, #24]
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	613b      	str	r3, [r7, #16]
   return(result);
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e5      	bne.n	800d6ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2220      	movs	r2, #32
 800d722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d726:	bf00      	nop
 800d728:	373c      	adds	r7, #60	; 0x3c
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr
	...

0800d734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d734:	b480      	push	{r7}
 800d736:	b095      	sub	sp, #84	; 0x54
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d744:	e853 3f00 	ldrex	r3, [r3]
 800d748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d750:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d75a:	643b      	str	r3, [r7, #64]	; 0x40
 800d75c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d762:	e841 2300 	strex	r3, r2, [r1]
 800d766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1e6      	bne.n	800d73c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3308      	adds	r3, #8
 800d774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	e853 3f00 	ldrex	r3, [r3]
 800d77c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d77e:	69fa      	ldr	r2, [r7, #28]
 800d780:	4b1e      	ldr	r3, [pc, #120]	; (800d7fc <UART_EndRxTransfer+0xc8>)
 800d782:	4013      	ands	r3, r2
 800d784:	64bb      	str	r3, [r7, #72]	; 0x48
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3308      	adds	r3, #8
 800d78c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d78e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d796:	e841 2300 	strex	r3, r2, [r1]
 800d79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1e5      	bne.n	800d76e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d118      	bne.n	800d7dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	e853 3f00 	ldrex	r3, [r3]
 800d7b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	f023 0310 	bic.w	r3, r3, #16
 800d7be:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7c8:	61bb      	str	r3, [r7, #24]
 800d7ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7cc:	6979      	ldr	r1, [r7, #20]
 800d7ce:	69ba      	ldr	r2, [r7, #24]
 800d7d0:	e841 2300 	strex	r3, r2, [r1]
 800d7d4:	613b      	str	r3, [r7, #16]
   return(result);
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1e6      	bne.n	800d7aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2220      	movs	r2, #32
 800d7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d7f0:	bf00      	nop
 800d7f2:	3754      	adds	r7, #84	; 0x54
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	effffffe 	.word	0xeffffffe

0800d800 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b090      	sub	sp, #64	; 0x40
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d816:	d037      	beq.n	800d888 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d81a:	2200      	movs	r2, #0
 800d81c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3308      	adds	r3, #8
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	e853 3f00 	ldrex	r3, [r3]
 800d82e:	623b      	str	r3, [r7, #32]
   return(result);
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d836:	63bb      	str	r3, [r7, #56]	; 0x38
 800d838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3308      	adds	r3, #8
 800d83e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d840:	633a      	str	r2, [r7, #48]	; 0x30
 800d842:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d848:	e841 2300 	strex	r3, r2, [r1]
 800d84c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1e5      	bne.n	800d820 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	60fb      	str	r3, [r7, #12]
   return(result);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
 800d86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d872:	61fb      	str	r3, [r7, #28]
 800d874:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d876:	69b9      	ldr	r1, [r7, #24]
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	e841 2300 	strex	r3, r2, [r1]
 800d87e:	617b      	str	r3, [r7, #20]
   return(result);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e6      	bne.n	800d854 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d886:	e002      	b.n	800d88e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d888:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d88a:	f7f5 fa19 	bl	8002cc0 <HAL_UART_TxCpltCallback>
}
 800d88e:	bf00      	nop
 800d890:	3740      	adds	r7, #64	; 0x40
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f7fe fe0f 	bl	800c4c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8aa:	bf00      	nop
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b09c      	sub	sp, #112	; 0x70
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8be:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8c8:	d071      	beq.n	800d9ae <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8da:	e853 3f00 	ldrex	r3, [r3]
 800d8de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8f8:	e841 2300 	strex	r3, r2, [r1]
 800d8fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1e6      	bne.n	800d8d2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3308      	adds	r3, #8
 800d90a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	e853 3f00 	ldrex	r3, [r3]
 800d912:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d916:	f023 0301 	bic.w	r3, r3, #1
 800d91a:	667b      	str	r3, [r7, #100]	; 0x64
 800d91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3308      	adds	r3, #8
 800d922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d924:	647a      	str	r2, [r7, #68]	; 0x44
 800d926:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d928:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d92a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d92c:	e841 2300 	strex	r3, r2, [r1]
 800d930:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1e5      	bne.n	800d904 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3308      	adds	r3, #8
 800d93e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	e853 3f00 	ldrex	r3, [r3]
 800d946:	623b      	str	r3, [r7, #32]
   return(result);
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d94e:	663b      	str	r3, [r7, #96]	; 0x60
 800d950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3308      	adds	r3, #8
 800d956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d958:	633a      	str	r2, [r7, #48]	; 0x30
 800d95a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d95e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d960:	e841 2300 	strex	r3, r2, [r1]
 800d964:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1e5      	bne.n	800d938 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d96e:	2220      	movs	r2, #32
 800d970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d118      	bne.n	800d9ae <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	e853 3f00 	ldrex	r3, [r3]
 800d988:	60fb      	str	r3, [r7, #12]
   return(result);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f023 0310 	bic.w	r3, r3, #16
 800d990:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	461a      	mov	r2, r3
 800d998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d99a:	61fb      	str	r3, [r7, #28]
 800d99c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99e:	69b9      	ldr	r1, [r7, #24]
 800d9a0:	69fa      	ldr	r2, [r7, #28]
 800d9a2:	e841 2300 	strex	r3, r2, [r1]
 800d9a6:	617b      	str	r3, [r7, #20]
   return(result);
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1e6      	bne.n	800d97c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d107      	bne.n	800d9c6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9c0:	f7fe fda0 	bl	800c504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9c4:	e002      	b.n	800d9cc <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d9c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9c8:	f7f5 f98c 	bl	8002ce4 <HAL_UART_RxCpltCallback>
}
 800d9cc:	bf00      	nop
 800d9ce:	3770      	adds	r7, #112	; 0x70
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d109      	bne.n	800d9fe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9f0:	085b      	lsrs	r3, r3, #1
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f7fe fd84 	bl	800c504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9fc:	e002      	b.n	800da04 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7fe fd6c 	bl	800c4dc <HAL_UART_RxHalfCpltCallback>
}
 800da04:	bf00      	nop
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da34:	2b80      	cmp	r3, #128	; 0x80
 800da36:	d109      	bne.n	800da4c <UART_DMAError+0x40>
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2b21      	cmp	r3, #33	; 0x21
 800da3c:	d106      	bne.n	800da4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	2200      	movs	r2, #0
 800da42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da46:	6978      	ldr	r0, [r7, #20]
 800da48:	f7ff fe32 	bl	800d6b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da56:	2b40      	cmp	r3, #64	; 0x40
 800da58:	d109      	bne.n	800da6e <UART_DMAError+0x62>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b22      	cmp	r3, #34	; 0x22
 800da5e:	d106      	bne.n	800da6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	2200      	movs	r2, #0
 800da64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800da68:	6978      	ldr	r0, [r7, #20]
 800da6a:	f7ff fe63 	bl	800d734 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da74:	f043 0210 	orr.w	r2, r3, #16
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da7e:	6978      	ldr	r0, [r7, #20]
 800da80:	f7fe fd36 	bl	800c4f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da84:	bf00      	nop
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7fe fd20 	bl	800c4f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dab0:	bf00      	nop
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dad4:	61fb      	str	r3, [r7, #28]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	61bb      	str	r3, [r7, #24]
 800dae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae2:	6979      	ldr	r1, [r7, #20]
 800dae4:	69ba      	ldr	r2, [r7, #24]
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	613b      	str	r3, [r7, #16]
   return(result);
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e6      	bne.n	800dac0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2220      	movs	r2, #32
 800daf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7f5 f8dd 	bl	8002cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db06:	bf00      	nop
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db0e:	b480      	push	{r7}
 800db10:	b083      	sub	sp, #12
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db16:	bf00      	nop
 800db18:	370c      	adds	r7, #12
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db22:	b480      	push	{r7}
 800db24:	b083      	sub	sp, #12
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db2a:	bf00      	nop
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db36:	b480      	push	{r7}
 800db38:	b083      	sub	sp, #12
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db3e:	bf00      	nop
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b085      	sub	sp, #20
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d101      	bne.n	800db60 <HAL_UARTEx_DisableFifoMode+0x16>
 800db5c:	2302      	movs	r3, #2
 800db5e:	e027      	b.n	800dbb0 <HAL_UARTEx_DisableFifoMode+0x66>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2224      	movs	r2, #36	; 0x24
 800db6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f022 0201 	bic.w	r2, r2, #1
 800db86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2220      	movs	r2, #32
 800dba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d101      	bne.n	800dbd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e02d      	b.n	800dc30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2224      	movs	r2, #36	; 0x24
 800dbe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f022 0201 	bic.w	r2, r2, #1
 800dbfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f84f 	bl	800dcb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2220      	movs	r2, #32
 800dc22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d101      	bne.n	800dc50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	e02d      	b.n	800dcac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2224      	movs	r2, #36	; 0x24
 800dc5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f022 0201 	bic.w	r2, r2, #1
 800dc76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 f811 	bl	800dcb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2220      	movs	r2, #32
 800dc9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d108      	bne.n	800dcd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcd4:	e031      	b.n	800dd3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcd6:	2310      	movs	r3, #16
 800dcd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcda:	2310      	movs	r3, #16
 800dcdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	0e5b      	lsrs	r3, r3, #25
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 0307 	and.w	r3, r3, #7
 800dcec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	0f5b      	lsrs	r3, r3, #29
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	f003 0307 	and.w	r3, r3, #7
 800dcfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcfe:	7bbb      	ldrb	r3, [r7, #14]
 800dd00:	7b3a      	ldrb	r2, [r7, #12]
 800dd02:	4911      	ldr	r1, [pc, #68]	; (800dd48 <UARTEx_SetNbDataToProcess+0x94>)
 800dd04:	5c8a      	ldrb	r2, [r1, r2]
 800dd06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd0a:	7b3a      	ldrb	r2, [r7, #12]
 800dd0c:	490f      	ldr	r1, [pc, #60]	; (800dd4c <UARTEx_SetNbDataToProcess+0x98>)
 800dd0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd10:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
 800dd1e:	7b7a      	ldrb	r2, [r7, #13]
 800dd20:	4909      	ldr	r1, [pc, #36]	; (800dd48 <UARTEx_SetNbDataToProcess+0x94>)
 800dd22:	5c8a      	ldrb	r2, [r1, r2]
 800dd24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd28:	7b7a      	ldrb	r2, [r7, #13]
 800dd2a:	4908      	ldr	r1, [pc, #32]	; (800dd4c <UARTEx_SetNbDataToProcess+0x98>)
 800dd2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd3a:	bf00      	nop
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	0800e42c 	.word	0x0800e42c
 800dd4c:	0800e434 	.word	0x0800e434

0800dd50 <__cxa_pure_virtual>:
 800dd50:	b508      	push	{r3, lr}
 800dd52:	f000 f80d 	bl	800dd70 <_ZSt9terminatev>

0800dd56 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dd56:	b508      	push	{r3, lr}
 800dd58:	4780      	blx	r0
 800dd5a:	f000 f80e 	bl	800dd7a <abort>
	...

0800dd60 <_ZSt13get_terminatev>:
 800dd60:	4b02      	ldr	r3, [pc, #8]	; (800dd6c <_ZSt13get_terminatev+0xc>)
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	f3bf 8f5b 	dmb	ish
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	24000010 	.word	0x24000010

0800dd70 <_ZSt9terminatev>:
 800dd70:	b508      	push	{r3, lr}
 800dd72:	f7ff fff5 	bl	800dd60 <_ZSt13get_terminatev>
 800dd76:	f7ff ffee 	bl	800dd56 <_ZN10__cxxabiv111__terminateEPFvvE>

0800dd7a <abort>:
 800dd7a:	b508      	push	{r3, lr}
 800dd7c:	2006      	movs	r0, #6
 800dd7e:	f000 f873 	bl	800de68 <raise>
 800dd82:	2001      	movs	r0, #1
 800dd84:	f7f6 fedc 	bl	8004b40 <_exit>

0800dd88 <__errno>:
 800dd88:	4b01      	ldr	r3, [pc, #4]	; (800dd90 <__errno+0x8>)
 800dd8a:	6818      	ldr	r0, [r3, #0]
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	24000014 	.word	0x24000014

0800dd94 <__libc_init_array>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	4d0d      	ldr	r5, [pc, #52]	; (800ddcc <__libc_init_array+0x38>)
 800dd98:	4c0d      	ldr	r4, [pc, #52]	; (800ddd0 <__libc_init_array+0x3c>)
 800dd9a:	1b64      	subs	r4, r4, r5
 800dd9c:	10a4      	asrs	r4, r4, #2
 800dd9e:	2600      	movs	r6, #0
 800dda0:	42a6      	cmp	r6, r4
 800dda2:	d109      	bne.n	800ddb8 <__libc_init_array+0x24>
 800dda4:	4d0b      	ldr	r5, [pc, #44]	; (800ddd4 <__libc_init_array+0x40>)
 800dda6:	4c0c      	ldr	r4, [pc, #48]	; (800ddd8 <__libc_init_array+0x44>)
 800dda8:	f000 f9b0 	bl	800e10c <_init>
 800ddac:	1b64      	subs	r4, r4, r5
 800ddae:	10a4      	asrs	r4, r4, #2
 800ddb0:	2600      	movs	r6, #0
 800ddb2:	42a6      	cmp	r6, r4
 800ddb4:	d105      	bne.n	800ddc2 <__libc_init_array+0x2e>
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}
 800ddb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddbc:	4798      	blx	r3
 800ddbe:	3601      	adds	r6, #1
 800ddc0:	e7ee      	b.n	800dda0 <__libc_init_array+0xc>
 800ddc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddc6:	4798      	blx	r3
 800ddc8:	3601      	adds	r6, #1
 800ddca:	e7f2      	b.n	800ddb2 <__libc_init_array+0x1e>
 800ddcc:	0800e444 	.word	0x0800e444
 800ddd0:	0800e444 	.word	0x0800e444
 800ddd4:	0800e444 	.word	0x0800e444
 800ddd8:	0800e450 	.word	0x0800e450

0800dddc <memcpy>:
 800dddc:	440a      	add	r2, r1
 800ddde:	4291      	cmp	r1, r2
 800dde0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dde4:	d100      	bne.n	800dde8 <memcpy+0xc>
 800dde6:	4770      	bx	lr
 800dde8:	b510      	push	{r4, lr}
 800ddea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddf2:	4291      	cmp	r1, r2
 800ddf4:	d1f9      	bne.n	800ddea <memcpy+0xe>
 800ddf6:	bd10      	pop	{r4, pc}

0800ddf8 <memset>:
 800ddf8:	4402      	add	r2, r0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d100      	bne.n	800de02 <memset+0xa>
 800de00:	4770      	bx	lr
 800de02:	f803 1b01 	strb.w	r1, [r3], #1
 800de06:	e7f9      	b.n	800ddfc <memset+0x4>

0800de08 <realloc>:
 800de08:	4b02      	ldr	r3, [pc, #8]	; (800de14 <realloc+0xc>)
 800de0a:	460a      	mov	r2, r1
 800de0c:	4601      	mov	r1, r0
 800de0e:	6818      	ldr	r0, [r3, #0]
 800de10:	f000 b8da 	b.w	800dfc8 <_realloc_r>
 800de14:	24000014 	.word	0x24000014

0800de18 <_raise_r>:
 800de18:	291f      	cmp	r1, #31
 800de1a:	b538      	push	{r3, r4, r5, lr}
 800de1c:	4604      	mov	r4, r0
 800de1e:	460d      	mov	r5, r1
 800de20:	d904      	bls.n	800de2c <_raise_r+0x14>
 800de22:	2316      	movs	r3, #22
 800de24:	6003      	str	r3, [r0, #0]
 800de26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de2e:	b112      	cbz	r2, 800de36 <_raise_r+0x1e>
 800de30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de34:	b94b      	cbnz	r3, 800de4a <_raise_r+0x32>
 800de36:	4620      	mov	r0, r4
 800de38:	f000 f830 	bl	800de9c <_getpid_r>
 800de3c:	462a      	mov	r2, r5
 800de3e:	4601      	mov	r1, r0
 800de40:	4620      	mov	r0, r4
 800de42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de46:	f000 b817 	b.w	800de78 <_kill_r>
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d00a      	beq.n	800de64 <_raise_r+0x4c>
 800de4e:	1c59      	adds	r1, r3, #1
 800de50:	d103      	bne.n	800de5a <_raise_r+0x42>
 800de52:	2316      	movs	r3, #22
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	2001      	movs	r0, #1
 800de58:	e7e7      	b.n	800de2a <_raise_r+0x12>
 800de5a:	2400      	movs	r4, #0
 800de5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de60:	4628      	mov	r0, r5
 800de62:	4798      	blx	r3
 800de64:	2000      	movs	r0, #0
 800de66:	e7e0      	b.n	800de2a <_raise_r+0x12>

0800de68 <raise>:
 800de68:	4b02      	ldr	r3, [pc, #8]	; (800de74 <raise+0xc>)
 800de6a:	4601      	mov	r1, r0
 800de6c:	6818      	ldr	r0, [r3, #0]
 800de6e:	f7ff bfd3 	b.w	800de18 <_raise_r>
 800de72:	bf00      	nop
 800de74:	24000014 	.word	0x24000014

0800de78 <_kill_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d07      	ldr	r5, [pc, #28]	; (800de98 <_kill_r+0x20>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	4611      	mov	r1, r2
 800de84:	602b      	str	r3, [r5, #0]
 800de86:	f7f6 fe4b 	bl	8004b20 <_kill>
 800de8a:	1c43      	adds	r3, r0, #1
 800de8c:	d102      	bne.n	800de94 <_kill_r+0x1c>
 800de8e:	682b      	ldr	r3, [r5, #0]
 800de90:	b103      	cbz	r3, 800de94 <_kill_r+0x1c>
 800de92:	6023      	str	r3, [r4, #0]
 800de94:	bd38      	pop	{r3, r4, r5, pc}
 800de96:	bf00      	nop
 800de98:	24010b1c 	.word	0x24010b1c

0800de9c <_getpid_r>:
 800de9c:	f7f6 be38 	b.w	8004b10 <_getpid>

0800dea0 <sbrk_aligned>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	4e0e      	ldr	r6, [pc, #56]	; (800dedc <sbrk_aligned+0x3c>)
 800dea4:	460c      	mov	r4, r1
 800dea6:	6831      	ldr	r1, [r6, #0]
 800dea8:	4605      	mov	r5, r0
 800deaa:	b911      	cbnz	r1, 800deb2 <sbrk_aligned+0x12>
 800deac:	f000 f8bc 	bl	800e028 <_sbrk_r>
 800deb0:	6030      	str	r0, [r6, #0]
 800deb2:	4621      	mov	r1, r4
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 f8b7 	bl	800e028 <_sbrk_r>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	d00a      	beq.n	800ded4 <sbrk_aligned+0x34>
 800debe:	1cc4      	adds	r4, r0, #3
 800dec0:	f024 0403 	bic.w	r4, r4, #3
 800dec4:	42a0      	cmp	r0, r4
 800dec6:	d007      	beq.n	800ded8 <sbrk_aligned+0x38>
 800dec8:	1a21      	subs	r1, r4, r0
 800deca:	4628      	mov	r0, r5
 800decc:	f000 f8ac 	bl	800e028 <_sbrk_r>
 800ded0:	3001      	adds	r0, #1
 800ded2:	d101      	bne.n	800ded8 <sbrk_aligned+0x38>
 800ded4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ded8:	4620      	mov	r0, r4
 800deda:	bd70      	pop	{r4, r5, r6, pc}
 800dedc:	24010b18 	.word	0x24010b18

0800dee0 <_malloc_r>:
 800dee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee4:	1ccd      	adds	r5, r1, #3
 800dee6:	f025 0503 	bic.w	r5, r5, #3
 800deea:	3508      	adds	r5, #8
 800deec:	2d0c      	cmp	r5, #12
 800deee:	bf38      	it	cc
 800def0:	250c      	movcc	r5, #12
 800def2:	2d00      	cmp	r5, #0
 800def4:	4607      	mov	r7, r0
 800def6:	db01      	blt.n	800defc <_malloc_r+0x1c>
 800def8:	42a9      	cmp	r1, r5
 800defa:	d905      	bls.n	800df08 <_malloc_r+0x28>
 800defc:	230c      	movs	r3, #12
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	2600      	movs	r6, #0
 800df02:	4630      	mov	r0, r6
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	4e2e      	ldr	r6, [pc, #184]	; (800dfc4 <_malloc_r+0xe4>)
 800df0a:	f000 f89d 	bl	800e048 <__malloc_lock>
 800df0e:	6833      	ldr	r3, [r6, #0]
 800df10:	461c      	mov	r4, r3
 800df12:	bb34      	cbnz	r4, 800df62 <_malloc_r+0x82>
 800df14:	4629      	mov	r1, r5
 800df16:	4638      	mov	r0, r7
 800df18:	f7ff ffc2 	bl	800dea0 <sbrk_aligned>
 800df1c:	1c43      	adds	r3, r0, #1
 800df1e:	4604      	mov	r4, r0
 800df20:	d14d      	bne.n	800dfbe <_malloc_r+0xde>
 800df22:	6834      	ldr	r4, [r6, #0]
 800df24:	4626      	mov	r6, r4
 800df26:	2e00      	cmp	r6, #0
 800df28:	d140      	bne.n	800dfac <_malloc_r+0xcc>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	4631      	mov	r1, r6
 800df2e:	4638      	mov	r0, r7
 800df30:	eb04 0803 	add.w	r8, r4, r3
 800df34:	f000 f878 	bl	800e028 <_sbrk_r>
 800df38:	4580      	cmp	r8, r0
 800df3a:	d13a      	bne.n	800dfb2 <_malloc_r+0xd2>
 800df3c:	6821      	ldr	r1, [r4, #0]
 800df3e:	3503      	adds	r5, #3
 800df40:	1a6d      	subs	r5, r5, r1
 800df42:	f025 0503 	bic.w	r5, r5, #3
 800df46:	3508      	adds	r5, #8
 800df48:	2d0c      	cmp	r5, #12
 800df4a:	bf38      	it	cc
 800df4c:	250c      	movcc	r5, #12
 800df4e:	4629      	mov	r1, r5
 800df50:	4638      	mov	r0, r7
 800df52:	f7ff ffa5 	bl	800dea0 <sbrk_aligned>
 800df56:	3001      	adds	r0, #1
 800df58:	d02b      	beq.n	800dfb2 <_malloc_r+0xd2>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	442b      	add	r3, r5
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	e00e      	b.n	800df80 <_malloc_r+0xa0>
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	1b52      	subs	r2, r2, r5
 800df66:	d41e      	bmi.n	800dfa6 <_malloc_r+0xc6>
 800df68:	2a0b      	cmp	r2, #11
 800df6a:	d916      	bls.n	800df9a <_malloc_r+0xba>
 800df6c:	1961      	adds	r1, r4, r5
 800df6e:	42a3      	cmp	r3, r4
 800df70:	6025      	str	r5, [r4, #0]
 800df72:	bf18      	it	ne
 800df74:	6059      	strne	r1, [r3, #4]
 800df76:	6863      	ldr	r3, [r4, #4]
 800df78:	bf08      	it	eq
 800df7a:	6031      	streq	r1, [r6, #0]
 800df7c:	5162      	str	r2, [r4, r5]
 800df7e:	604b      	str	r3, [r1, #4]
 800df80:	4638      	mov	r0, r7
 800df82:	f104 060b 	add.w	r6, r4, #11
 800df86:	f000 f865 	bl	800e054 <__malloc_unlock>
 800df8a:	f026 0607 	bic.w	r6, r6, #7
 800df8e:	1d23      	adds	r3, r4, #4
 800df90:	1af2      	subs	r2, r6, r3
 800df92:	d0b6      	beq.n	800df02 <_malloc_r+0x22>
 800df94:	1b9b      	subs	r3, r3, r6
 800df96:	50a3      	str	r3, [r4, r2]
 800df98:	e7b3      	b.n	800df02 <_malloc_r+0x22>
 800df9a:	6862      	ldr	r2, [r4, #4]
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	bf0c      	ite	eq
 800dfa0:	6032      	streq	r2, [r6, #0]
 800dfa2:	605a      	strne	r2, [r3, #4]
 800dfa4:	e7ec      	b.n	800df80 <_malloc_r+0xa0>
 800dfa6:	4623      	mov	r3, r4
 800dfa8:	6864      	ldr	r4, [r4, #4]
 800dfaa:	e7b2      	b.n	800df12 <_malloc_r+0x32>
 800dfac:	4634      	mov	r4, r6
 800dfae:	6876      	ldr	r6, [r6, #4]
 800dfb0:	e7b9      	b.n	800df26 <_malloc_r+0x46>
 800dfb2:	230c      	movs	r3, #12
 800dfb4:	603b      	str	r3, [r7, #0]
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	f000 f84c 	bl	800e054 <__malloc_unlock>
 800dfbc:	e7a1      	b.n	800df02 <_malloc_r+0x22>
 800dfbe:	6025      	str	r5, [r4, #0]
 800dfc0:	e7de      	b.n	800df80 <_malloc_r+0xa0>
 800dfc2:	bf00      	nop
 800dfc4:	24010b14 	.word	0x24010b14

0800dfc8 <_realloc_r>:
 800dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfcc:	4680      	mov	r8, r0
 800dfce:	4614      	mov	r4, r2
 800dfd0:	460e      	mov	r6, r1
 800dfd2:	b921      	cbnz	r1, 800dfde <_realloc_r+0x16>
 800dfd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	4611      	mov	r1, r2
 800dfda:	f7ff bf81 	b.w	800dee0 <_malloc_r>
 800dfde:	b92a      	cbnz	r2, 800dfec <_realloc_r+0x24>
 800dfe0:	f000 f83e 	bl	800e060 <_free_r>
 800dfe4:	4625      	mov	r5, r4
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfec:	f000 f884 	bl	800e0f8 <_malloc_usable_size_r>
 800dff0:	4284      	cmp	r4, r0
 800dff2:	4607      	mov	r7, r0
 800dff4:	d802      	bhi.n	800dffc <_realloc_r+0x34>
 800dff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dffa:	d812      	bhi.n	800e022 <_realloc_r+0x5a>
 800dffc:	4621      	mov	r1, r4
 800dffe:	4640      	mov	r0, r8
 800e000:	f7ff ff6e 	bl	800dee0 <_malloc_r>
 800e004:	4605      	mov	r5, r0
 800e006:	2800      	cmp	r0, #0
 800e008:	d0ed      	beq.n	800dfe6 <_realloc_r+0x1e>
 800e00a:	42bc      	cmp	r4, r7
 800e00c:	4622      	mov	r2, r4
 800e00e:	4631      	mov	r1, r6
 800e010:	bf28      	it	cs
 800e012:	463a      	movcs	r2, r7
 800e014:	f7ff fee2 	bl	800dddc <memcpy>
 800e018:	4631      	mov	r1, r6
 800e01a:	4640      	mov	r0, r8
 800e01c:	f000 f820 	bl	800e060 <_free_r>
 800e020:	e7e1      	b.n	800dfe6 <_realloc_r+0x1e>
 800e022:	4635      	mov	r5, r6
 800e024:	e7df      	b.n	800dfe6 <_realloc_r+0x1e>
	...

0800e028 <_sbrk_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d06      	ldr	r5, [pc, #24]	; (800e044 <_sbrk_r+0x1c>)
 800e02c:	2300      	movs	r3, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	4608      	mov	r0, r1
 800e032:	602b      	str	r3, [r5, #0]
 800e034:	f7f6 fd8e 	bl	8004b54 <_sbrk>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d102      	bne.n	800e042 <_sbrk_r+0x1a>
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	b103      	cbz	r3, 800e042 <_sbrk_r+0x1a>
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	bd38      	pop	{r3, r4, r5, pc}
 800e044:	24010b1c 	.word	0x24010b1c

0800e048 <__malloc_lock>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__malloc_lock+0x8>)
 800e04a:	f000 b85d 	b.w	800e108 <__retarget_lock_acquire_recursive>
 800e04e:	bf00      	nop
 800e050:	24010b20 	.word	0x24010b20

0800e054 <__malloc_unlock>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__malloc_unlock+0x8>)
 800e056:	f000 b858 	b.w	800e10a <__retarget_lock_release_recursive>
 800e05a:	bf00      	nop
 800e05c:	24010b20 	.word	0x24010b20

0800e060 <_free_r>:
 800e060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e062:	2900      	cmp	r1, #0
 800e064:	d044      	beq.n	800e0f0 <_free_r+0x90>
 800e066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e06a:	9001      	str	r0, [sp, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f1a1 0404 	sub.w	r4, r1, #4
 800e072:	bfb8      	it	lt
 800e074:	18e4      	addlt	r4, r4, r3
 800e076:	f7ff ffe7 	bl	800e048 <__malloc_lock>
 800e07a:	4a1e      	ldr	r2, [pc, #120]	; (800e0f4 <_free_r+0x94>)
 800e07c:	9801      	ldr	r0, [sp, #4]
 800e07e:	6813      	ldr	r3, [r2, #0]
 800e080:	b933      	cbnz	r3, 800e090 <_free_r+0x30>
 800e082:	6063      	str	r3, [r4, #4]
 800e084:	6014      	str	r4, [r2, #0]
 800e086:	b003      	add	sp, #12
 800e088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e08c:	f7ff bfe2 	b.w	800e054 <__malloc_unlock>
 800e090:	42a3      	cmp	r3, r4
 800e092:	d908      	bls.n	800e0a6 <_free_r+0x46>
 800e094:	6825      	ldr	r5, [r4, #0]
 800e096:	1961      	adds	r1, r4, r5
 800e098:	428b      	cmp	r3, r1
 800e09a:	bf01      	itttt	eq
 800e09c:	6819      	ldreq	r1, [r3, #0]
 800e09e:	685b      	ldreq	r3, [r3, #4]
 800e0a0:	1949      	addeq	r1, r1, r5
 800e0a2:	6021      	streq	r1, [r4, #0]
 800e0a4:	e7ed      	b.n	800e082 <_free_r+0x22>
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	b10b      	cbz	r3, 800e0b0 <_free_r+0x50>
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	d9fa      	bls.n	800e0a6 <_free_r+0x46>
 800e0b0:	6811      	ldr	r1, [r2, #0]
 800e0b2:	1855      	adds	r5, r2, r1
 800e0b4:	42a5      	cmp	r5, r4
 800e0b6:	d10b      	bne.n	800e0d0 <_free_r+0x70>
 800e0b8:	6824      	ldr	r4, [r4, #0]
 800e0ba:	4421      	add	r1, r4
 800e0bc:	1854      	adds	r4, r2, r1
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	6011      	str	r1, [r2, #0]
 800e0c2:	d1e0      	bne.n	800e086 <_free_r+0x26>
 800e0c4:	681c      	ldr	r4, [r3, #0]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	6053      	str	r3, [r2, #4]
 800e0ca:	4421      	add	r1, r4
 800e0cc:	6011      	str	r1, [r2, #0]
 800e0ce:	e7da      	b.n	800e086 <_free_r+0x26>
 800e0d0:	d902      	bls.n	800e0d8 <_free_r+0x78>
 800e0d2:	230c      	movs	r3, #12
 800e0d4:	6003      	str	r3, [r0, #0]
 800e0d6:	e7d6      	b.n	800e086 <_free_r+0x26>
 800e0d8:	6825      	ldr	r5, [r4, #0]
 800e0da:	1961      	adds	r1, r4, r5
 800e0dc:	428b      	cmp	r3, r1
 800e0de:	bf04      	itt	eq
 800e0e0:	6819      	ldreq	r1, [r3, #0]
 800e0e2:	685b      	ldreq	r3, [r3, #4]
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	bf04      	itt	eq
 800e0e8:	1949      	addeq	r1, r1, r5
 800e0ea:	6021      	streq	r1, [r4, #0]
 800e0ec:	6054      	str	r4, [r2, #4]
 800e0ee:	e7ca      	b.n	800e086 <_free_r+0x26>
 800e0f0:	b003      	add	sp, #12
 800e0f2:	bd30      	pop	{r4, r5, pc}
 800e0f4:	24010b14 	.word	0x24010b14

0800e0f8 <_malloc_usable_size_r>:
 800e0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0fc:	1f18      	subs	r0, r3, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	bfbc      	itt	lt
 800e102:	580b      	ldrlt	r3, [r1, r0]
 800e104:	18c0      	addlt	r0, r0, r3
 800e106:	4770      	bx	lr

0800e108 <__retarget_lock_acquire_recursive>:
 800e108:	4770      	bx	lr

0800e10a <__retarget_lock_release_recursive>:
 800e10a:	4770      	bx	lr

0800e10c <_init>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	bf00      	nop
 800e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e112:	bc08      	pop	{r3}
 800e114:	469e      	mov	lr, r3
 800e116:	4770      	bx	lr

0800e118 <_fini>:
 800e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11a:	bf00      	nop
 800e11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11e:	bc08      	pop	{r3}
 800e120:	469e      	mov	lr, r3
 800e122:	4770      	bx	lr
