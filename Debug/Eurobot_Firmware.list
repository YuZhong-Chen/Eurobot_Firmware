
Eurobot_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df98  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  0800e268  0800e268  0001e268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e55c  0800e55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0800e578  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000010ac  24000088  0800e600  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001134  0800e600  00021134  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029e97  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000439b  00000000  00000000  00049f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001588  00000000  00000000  0004e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001458  00000000  00000000  0004f870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035d4e  00000000  00000000  00050cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d95f  00000000  00000000  00086a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156821  00000000  00000000  000a4375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fab96  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005fa4  00000000  00000000  001fabe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e250 	.word	0x0800e250

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	0800e250 	.word	0x0800e250

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_ZN8DC_Motor4InitEv>:

double WheelRadius = 0.025;
double ROUND = 2 * WheelRadius * 3.14159;
double CONST_FOR_MOTOR[4] = { ROUND / RES_Ratio, -ROUND / RES_Ratio, ROUND / RES_Ratio, -ROUND / RES_Ratio };

void Init() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// Init interrupt for reading encoder's CNT
	HAL_TIM_Base_Start_IT(&htim13);
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <_ZN8DC_Motor4InitEv+0x50>)
 8000682:	f00a f867 	bl	800a754 <HAL_TIM_Base_Start_IT>

	// Init Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Motor[0]
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <_ZN8DC_Motor4InitEv+0x54>)
 800068a:	f00a fb03 	bl	800ac94 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Motor[1]
 800068e:	213c      	movs	r1, #60	; 0x3c
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <_ZN8DC_Motor4InitEv+0x58>)
 8000692:	f00a faff 	bl	800ac94 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Motor[2]
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <_ZN8DC_Motor4InitEv+0x5c>)
 800069a:	f00a fafb 	bl	800ac94 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Motor[3]
 800069e:	213c      	movs	r1, #60	; 0x3c
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <_ZN8DC_Motor4InitEv+0x60>)
 80006a2:	f00a faf7 	bl	800ac94 <HAL_TIM_Encoder_Start>

	// Init Motor PWM
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Motor[0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006aa:	f00a f931 	bl	800a910 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // Motor[1]
 80006ae:	2100      	movs	r1, #0
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006b2:	f00a f92d 	bl	800a910 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // Motor[2]
 80006b6:	2100      	movs	r1, #0
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006ba:	f00a f929 	bl	800a910 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Motor[3]
 80006be:	2104      	movs	r1, #4
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006c2:	f00a f925 	bl	800a910 <HAL_TIM_PWM_Start>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000f04 	.word	0x24000f04
 80006d0:	24000cf0 	.word	0x24000cf0
 80006d4:	24000dd4 	.word	0x24000dd4
 80006d8:	24000d3c 	.word	0x24000d3c
 80006dc:	24000d88 	.word	0x24000d88
 80006e0:	24000eb8 	.word	0x24000eb8
 80006e4:	24000f50 	.word	0x24000f50

080006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefdd>:

void Motor::Init(short num, TIM_HandleTypeDef *TIM, double P, double I) {
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	61f8      	str	r0, [r7, #28]
 80006f0:	460b      	mov	r3, r1
 80006f2:	617a      	str	r2, [r7, #20]
 80006f4:	ed87 0b02 	vstr	d0, [r7, #8]
 80006f8:	ed87 1b00 	vstr	d1, [r7]
 80006fc:	837b      	strh	r3, [r7, #26]
	this->num = num;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	8b7a      	ldrh	r2, [r7, #26]
 8000702:	821a      	strh	r2, [r3, #16]
	this->TIM = TIM;
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	615a      	str	r2, [r3, #20]
	this->P = P;
 800070a:	69f9      	ldr	r1, [r7, #28]
 800070c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000710:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->I = I;
 8000714:	69f9      	ldr	r1, [r7, #28]
 8000716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800071a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800071e:	bf00      	nop
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	0000      	movs	r0, r0
 800072c:	0000      	movs	r0, r0
	...

08000730 <_ZN8DC_Motor5Motor8UpdatePIEv>:

void Motor::UpdatePI() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	double p = 0;
 8000738:	f04f 0200 	mov.w	r2, #0
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Record Prev error
	this->error_before = this->error;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	// Count current error
	this->error = this->Vgoal - this->Vnow;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	ed93 7b08 	vldr	d7, [r3, #32]
 800075c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	// Count P
	p = this->P * this->error;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000772:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000776:	ed87 7b02 	vstr	d7, [r7, #8]

	// Count I
	this->i += this->I * this->error * COUNT_TIME;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800078c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000790:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000828 <_ZN8DC_Motor5Motor8UpdatePIEv+0xf8>
 8000794:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000798:	ee36 7b07 	vadd.f64	d7, d6, d7
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

	// Limit I in range
	if (this->i > this->I_lim)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b6:	dd06      	ble.n	80007c6 <_ZN8DC_Motor5Motor8UpdatePIEv+0x96>
		this->i = this->I_lim;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80007c4:	e018      	b.n	80007f8 <_ZN8DC_Motor5Motor8UpdatePIEv+0xc8>
	else if (this->i < 0 - this->I_lim)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007d2:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8000830 <_ZN8DC_Motor5Motor8UpdatePIEv+0x100>
 80007d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	d509      	bpl.n	80007f8 <_ZN8DC_Motor5Motor8UpdatePIEv+0xc8>
		this->i = 0 - this->I_lim;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007ea:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000830 <_ZN8DC_Motor5Motor8UpdatePIEv+0x100>
 80007ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

	// Output = P + I
	this->u = (double) p + this->i;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8000802:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	ed83 7b02 	vstr	d7, [r3, #8]
//	else if (this->u > 0.6) {
//		this->u = 0.6;
//	}

	// Record Prev output
	this->prev_u = this->u;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	return;
 8000818:	bf00      	nop
}
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	f3af 8000 	nop.w
 8000828:	d2f1a9fc 	.word	0xd2f1a9fc
 800082c:	3f50624d 	.word	0x3f50624d
	...

08000838 <_ZN8DC_Motor5Motor10UpdateVnowEv>:

void Motor::UpdateVnow() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	// First, get CNT for this loop
	CNT = __HAL_TIM_GET_COUNTER(TIM);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000848:	b21a      	sxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	839a      	strh	r2, [r3, #28]

	Record_CNT();
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f831 	bl	80008b6 <_ZN8DC_Motor5Motor10Record_CNTEv>
	Vnow = CNT * CONST_FOR_MOTOR[num];  // Unit : m / s
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <_ZN8DC_Motor5Motor10UpdateVnowEv+0x58>)
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	ed93 7b00 	vldr	d7, [r3]
 8000872:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	ed83 7b08 	vstr	d7, [r3, #32]
//	if (isMove && num == 0 && DC_index < 2000) {
//		DC_motor_Vnow[DC_index++] = Vnow;
//	}

	// Finally, reset the counter CNT
	__HAL_TIM_SET_COUNTER(TIM, 0);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	240000b0 	.word	0x240000b0

08000894 <_ZN8DC_Motor5Motor8SetVgoalEd>:

void Motor::SetVgoal(double Vgoal) {
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	ed87 0b00 	vstr	d0, [r7]
	this->Vgoal = Vgoal;
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_ZN8DC_Motor5Motor10Record_CNTEv>:

void Motor::Record_CNT() {
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	continue_CNT += CNT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80008c8:	441a      	add	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	619a      	str	r2, [r3, #24]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <_ZN8DC_Motor5Motor7MoveDisEv>:

double Motor::MoveDis() {
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	double dis = continue_CNT * CONST_FOR_MOTOR[num];
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <_ZN8DC_Motor5Motor7MoveDisEv+0x48>)
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	4413      	add	r3, r2
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000904:	ed87 7b02 	vstr	d7, [r7, #8]

	continue_CNT = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]

	return dis;
 800090e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000912:	ec43 2b17 	vmov	d7, r2, r3
}
 8000916:	eeb0 0b47 	vmov.f64	d0, d7
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	240000b0 	.word	0x240000b0

08000928 <_ZN8DC_Motor5Motor7GetVnowEv>:

double Motor::GetVnow() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	return Vnow;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000936:	ec43 2b17 	vmov	d7, r2, r3
}
 800093a:	eeb0 0b47 	vmov.f64	d0, d7
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <_Z41__static_initialization_and_destruction_0ii>:

}
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d13c      	bne.n	80009d2 <_Z41__static_initialization_and_destruction_0ii+0x8a>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	4293      	cmp	r3, r2
 8000960:	d137      	bne.n	80009d2 <_Z41__static_initialization_and_destruction_0ii+0x8a>
double ROUND = 2 * WheelRadius * 3.14159;
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8000964:	ed93 7b00 	vldr	d7, [r3]
 8000968:	ee37 7b07 	vadd.f64	d7, d7, d7
 800096c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8000970:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000976:	ed83 7b00 	vstr	d7, [r3]
double CONST_FOR_MOTOR[4] = { ROUND / RES_Ratio, -ROUND / RES_Ratio, ROUND / RES_Ratio, -ROUND / RES_Ratio };
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800097c:	ed93 6b00 	vldr	d6, [r3]
 8000980:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80009e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000984:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800098a:	ed83 7b00 	vstr	d7, [r3]
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000990:	ed93 7b00 	vldr	d7, [r3]
 8000994:	eeb1 6b47 	vneg.f64	d6, d7
 8000998:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80009e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800099c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80009a2:	ed83 7b02 	vstr	d7, [r3, #8]
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80009a8:	ed93 6b00 	vldr	d6, [r3]
 80009ac:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 80009e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80009b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80009b6:	ed83 7b04 	vstr	d7, [r3, #16]
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80009bc:	ed93 7b00 	vldr	d7, [r3]
 80009c0:	eeb1 6b47 	vneg.f64	d6, d7
 80009c4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80009e8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80009c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80009ce:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	f01b866e 	.word	0xf01b866e
 80009e4:	400921f9 	.word	0x400921f9
 80009e8:	24dd2f1b 	.word	0x24dd2f1b
 80009ec:	40558106 	.word	0x40558106
 80009f0:	24000000 	.word	0x24000000
 80009f4:	240000a8 	.word	0x240000a8
 80009f8:	240000b0 	.word	0x240000b0

080009fc <_GLOBAL__sub_I__ZN8DC_Motor11WheelRadiusE>:
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ff9f 	bl	8000948 <_Z41__static_initialization_and_destruction_0ii>
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN8DC_Motor5MotorC1Ev>:

namespace DC_Motor {

class Motor {
public:
	Motor() {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	839a      	strh	r2, [r3, #28]
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <_ZN8DC_Motor5MotorC1Ev+0x88>)
 8000a58:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	}
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	3ff00000 	.word	0x3ff00000

08000a98 <_ZN8CAR_INFOC1Ev>:

typedef struct {
	double Vx = 0.0;
	double Vy = 0.0;
	double Omega = 0.0;
} CAR_INFO;
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	e9c1 2300 	strd	r2, r3, [r1]
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	f04f 0300 	mov.w	r3, #0
 8000ac6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_ZN4OmniC1Ev>:

Omni omni;

double CAR_RADIUS = 0.134163;

Omni::Omni() {
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2403      	movs	r4, #3
 8000ae4:	461d      	mov	r5, r3
 8000ae6:	2c00      	cmp	r4, #0
 8000ae8:	db05      	blt.n	8000af6 <_ZN4OmniC1Ev+0x1e>
 8000aea:	4628      	mov	r0, r5
 8000aec:	f7ff ff8e 	bl	8000a0c <_ZN8DC_Motor5MotorC1Ev>
 8000af0:	3568      	adds	r5, #104	; 0x68
 8000af2:	3c01      	subs	r4, #1
 8000af4:	e7f7      	b.n	8000ae6 <_ZN4OmniC1Ev+0xe>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ffcb 	bl	8000a98 <_ZN8CAR_INFOC1Ev>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ffc5 	bl	8000a98 <_ZN8CAR_INFOC1Ev>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ffbf 	bl	8000a98 <_ZN8CAR_INFOC1Ev>
}
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bdb0      	pop	{r4, r5, r7, pc}
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <_ZN4Omni4InitEv>:

void Omni::Init() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	this->motors[0].Init(0, &htim2, 3.7, 471.0);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8000ba8 <_ZN4Omni4InitEv+0x80>
 8000b36:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8000bb0 <_ZN4Omni4InitEv+0x88>
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <_ZN4Omni4InitEv+0x90>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fdd2 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefdd>
	this->motors[1].Init(1, &htim5, 3.7, 471.0);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3368      	adds	r3, #104	; 0x68
 8000b48:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8000ba8 <_ZN4Omni4InitEv+0x80>
 8000b4c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8000bb0 <_ZN4Omni4InitEv+0x88>
 8000b50:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <_ZN4Omni4InitEv+0x94>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fdc7 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefdd>
	this->motors[2].Init(2, &htim3, 3.7, 471.0);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	33d0      	adds	r3, #208	; 0xd0
 8000b5e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8000ba8 <_ZN4Omni4InitEv+0x80>
 8000b62:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8000bb0 <_ZN4Omni4InitEv+0x88>
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <_ZN4Omni4InitEv+0x98>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fdbc 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefdd>
	this->motors[3].Init(3, &htim4, 3.7, 471.0);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000b76:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8000ba8 <_ZN4Omni4InitEv+0x80>
 8000b7a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8000bb0 <_ZN4Omni4InitEv+0x88>
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <_ZN4Omni4InitEv+0x9c>)
 8000b80:	2103      	movs	r1, #3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fdb0 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefdd>

	SetCarRadius(CAR_RADIUS);
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <_ZN4Omni4InitEv+0xa0>)
 8000b8a:	ed93 7b00 	vldr	d7, [r3]
 8000b8e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 fa98 	bl	80010c8 <_ZN4Omni12SetCarRadiusEd>

	DC_Motor::Init();
 8000b98:	f7ff fd70 	bl	800067c <_ZN8DC_Motor4InitEv>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	407d7000 	.word	0x407d7000
 8000bb0:	9999999a 	.word	0x9999999a
 8000bb4:	400d9999 	.word	0x400d9999
 8000bb8:	24000cf0 	.word	0x24000cf0
 8000bbc:	24000dd4 	.word	0x24000dd4
 8000bc0:	24000d3c 	.word	0x24000d3c
 8000bc4:	24000d88 	.word	0x24000d88
 8000bc8:	24000008 	.word	0x24000008
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <_ZN4Omni17UpdateCarLocationEv>:

void Omni::UpdateCarLocation() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	double m[4];
	for (int i = 0; i < 4; i++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	dc19      	bgt.n	8000c16 <_ZN4Omni17UpdateCarLocationEv+0x46>
		m[i] = this->motors[i].MoveDis() / 1000.0;
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	2268      	movs	r2, #104	; 0x68
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe74 	bl	80008dc <_ZN8DC_Motor5Motor7MoveDisEv>
 8000bf4:	eeb0 6b40 	vmov.f64	d6, d0
 8000bf8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8000ca8 <_ZN4Omni17UpdateCarLocationEv+0xd8>
 8000bfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	3330      	adds	r3, #48	; 0x30
 8000c06:	443b      	add	r3, r7
 8000c08:	3b28      	subs	r3, #40	; 0x28
 8000c0a:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	3301      	adds	r3, #1
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c14:	e7e2      	b.n	8000bdc <_ZN4Omni17UpdateCarLocationEv+0xc>
	}
	NowCarLocation.Vx += (m[3] - m[1]) / 2.0;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	ed93 6b74 	vldr	d6, [r3, #464]	; 0x1d0
 8000c1c:	ed97 5b08 	vldr	d5, [r7, #32]
 8000c20:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c24:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c28:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000c2c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000c30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
	NowCarLocation.Vy += (m[0] - m[2]) / 2.0;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	ed93 6b76 	vldr	d6, [r3, #472]	; 0x1d8
 8000c40:	ed97 5b02 	vldr	d5, [r7, #8]
 8000c44:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c4c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000c50:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000c54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
	NowCarLocation.Omega += (m[0] + m[1] + m[2] + m[3]) / (4.0 * CarRadius);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	ed93 6b78 	vldr	d6, [r3, #480]	; 0x1e0
 8000c64:	ed97 5b02 	vldr	d5, [r7, #8]
 8000c68:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c6c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c70:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c74:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c78:	ed97 7b08 	vldr	d7, [r7, #32]
 8000c7c:	ee35 4b07 	vadd.f64	d4, d5, d7
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8000c86:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c8a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c8e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000c92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
}
 8000c9c:	bf00      	nop
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	f3af 8000 	nop.w
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	408f4000 	.word	0x408f4000

08000cb0 <_ZN4Omni16UpdateNowCarInfoEv>:

void Omni::UpdateNowCarInfo() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	ed2d 8b02 	vpush	{d8}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	// Get each motors' Vnow
	// Unit : m/s , rad/s
	this->UpdateMotorVnow();
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f89c 	bl	8000dfa <_ZN4Omni15UpdateMotorVnowEv>

	NowCarInfo.Vx = (motors[3].GetVnow() - motors[1].GetVnow()) / 2.0;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe2d 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000cce:	eeb0 8b40 	vmov.f64	d8, d0
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3368      	adds	r3, #104	; 0x68
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe26 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000cdc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ce0:	ee38 6b47 	vsub.f64	d6, d8, d7
 8000ce4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ce8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
	NowCarInfo.Vy = (motors[0].GetVnow() - motors[2].GetVnow()) / 2.0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe17 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000cfa:	eeb0 8b40 	vmov.f64	d8, d0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	33d0      	adds	r3, #208	; 0xd0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe10 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000d08:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0c:	ee38 6b47 	vsub.f64	d6, d8, d7
 8000d10:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000d14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
	NowCarInfo.Omega = (motors[0].GetVnow() + motors[1].GetVnow() + motors[2].GetVnow() + motors[3].GetVnow()) / (CarRadius * 4.0);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe01 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000d26:	eeb0 8b40 	vmov.f64	d8, d0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3368      	adds	r3, #104	; 0x68
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fdfa 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000d34:	eeb0 7b40 	vmov.f64	d7, d0
 8000d38:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	33d0      	adds	r3, #208	; 0xd0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fdf1 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000d46:	eeb0 7b40 	vmov.f64	d7, d0
 8000d4a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fde7 	bl	8000928 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d5e:	ee38 5b07 	vadd.f64	d5, d8, d7
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8000d68:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000d6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	ecbd 8b02 	vpop	{d8}
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN4Omni14SetGoalCarInfoEddd>:

// Set all motors' velocity base on Car Vgoal.
void Omni::SetGoalCarInfo(double Vx, double Vy, double Omega) {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b088      	sub	sp, #32
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	61f8      	str	r0, [r7, #28]
 8000d8e:	ed87 0b04 	vstr	d0, [r7, #16]
 8000d92:	ed87 1b02 	vstr	d1, [r7, #8]
 8000d96:	ed87 2b00 	vstr	d2, [r7]
	this->GoalCarInfo.Vx = Vx;
 8000d9a:	69f9      	ldr	r1, [r7, #28]
 8000d9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000da0:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	this->GoalCarInfo.Vy = Vy;
 8000da4:	69f9      	ldr	r1, [r7, #28]
 8000da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000daa:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	this->GoalCarInfo.Omega = Omega;
 8000dae:	69f9      	ldr	r1, [r7, #28]
 8000db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db4:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

	SetMotorVgoal();
 8000db8:	69f8      	ldr	r0, [r7, #28]
 8000dba:	f000 f8e1 	bl	8000f80 <_ZN4Omni13SetMotorVgoalEv>
}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZN4Omni10Update_PIDEv>:

void Omni::Update_PID() {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	dc0c      	bgt.n	8000df2 <_ZN4Omni10Update_PIDEv+0x2c>
		this->motors[i].UpdatePI();
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2268      	movs	r2, #104	; 0x68
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fca3 	bl	8000730 <_ZN8DC_Motor5Motor8UpdatePIEv>
	for (int i = 0; i < 4; i++) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e7ef      	b.n	8000dd2 <_ZN4Omni10Update_PIDEv+0xc>
	}
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZN4Omni15UpdateMotorVnowEv>:

void Omni::UpdateMotorVnow() {
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	dc0c      	bgt.n	8000e26 <_ZN4Omni15UpdateMotorVnowEv+0x2c>
		this->motors[i].UpdateVnow();
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2268      	movs	r2, #104	; 0x68
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fd0d 	bl	8000838 <_ZN8DC_Motor5Motor10UpdateVnowEv>
	for (int i = 0; i < 4; i++) {
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e7ef      	b.n	8000e06 <_ZN4Omni15UpdateMotorVnowEv+0xc>
	}
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <_ZN4Omni4MoveEv>:

// TODO : Check for the DIR
void Omni::Move() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	// DIR
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (motors[0].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e46:	bfcc      	ite	gt
 8000e48:	2301      	movgt	r3, #1
 8000e4a:	2300      	movle	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5a:	4843      	ldr	r0, [pc, #268]	; (8000f68 <_ZN4Omni4MoveEv+0x138>)
 8000e5c:	f007 f978 	bl	8008150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (motors[1].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8000e66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6e:	bfcc      	ite	gt
 8000e70:	2301      	movgt	r3, #1
 8000e72:	2300      	movle	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f083 0301 	eor.w	r3, r3, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	483a      	ldr	r0, [pc, #232]	; (8000f6c <_ZN4Omni4MoveEv+0x13c>)
 8000e84:	f007 f964 	bl	8008150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, (motors[2].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8000e8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	bfcc      	ite	gt
 8000e98:	2301      	movgt	r3, #1
 8000e9a:	2300      	movle	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f083 0301 	eor.w	r3, r3, #1
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4831      	ldr	r0, [pc, #196]	; (8000f70 <_ZN4Omni4MoveEv+0x140>)
 8000eaa:	f007 f951 	bl	8008150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (motors[3].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000eb4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	bfcc      	ite	gt
 8000ebe:	2301      	movgt	r3, #1
 8000ec0:	2300      	movle	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <_ZN4Omni4MoveEv+0x144>)
 8000ed2:	f007 f93d 	bl	8008150 <HAL_GPIO_WritePin>

	// PWM
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, int(fabs(motors[0].u) * MOTOR_PWM_PULSE));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	ed93 7b02 	vldr	d7, [r3, #8]
 8000edc:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ee0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000f60 <_ZN4Omni4MoveEv+0x130>
 8000ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <_ZN4Omni4MoveEv+0x148>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	ee17 2a90 	vmov	r2, s15
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, int(fabs(motors[1].u) * MOTOR_PWM_PULSE));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8000efc:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f00:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000f60 <_ZN4Omni4MoveEv+0x130>
 8000f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f08:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <_ZN4Omni4MoveEv+0x148>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	ee17 2a90 	vmov	r2, s15
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, int(fabs(motors[2].u) * MOTOR_PWM_PULSE));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 8000f1c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f20:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000f60 <_ZN4Omni4MoveEv+0x130>
 8000f24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_ZN4Omni4MoveEv+0x14c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	ee17 2a90 	vmov	r2, s15
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, int(fabs(motors[3].u) * MOTOR_PWM_PULSE));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000f3c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000f40:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8000f60 <_ZN4Omni4MoveEv+0x130>
 8000f44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f48:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <_ZN4Omni4MoveEv+0x14c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	ee17 2a90 	vmov	r2, s15
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	00000000 	.word	0x00000000
 8000f64:	40b90000 	.word	0x40b90000
 8000f68:	58020c00 	.word	0x58020c00
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58021000 	.word	0x58021000
 8000f74:	58020800 	.word	0x58020800
 8000f78:	24000eb8 	.word	0x24000eb8
 8000f7c:	24000f50 	.word	0x24000f50

08000f80 <_ZN4Omni13SetMotorVgoalEv>:

void Omni::SetMotorVgoal() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	// Unit : m/s
	this->motors[0].SetVgoal(GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	ed93 5b7a 	vldr	d5, [r3, #488]	; 0x1e8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000f9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fa4:	eeb0 0b47 	vmov.f64	d0, d7
 8000fa8:	4610      	mov	r0, r2
 8000faa:	f7ff fc73 	bl	8000894 <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[1].SetVgoal(-GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	ed93 6b7a 	vldr	d6, [r3, #488]	; 0x1e8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000fc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8000fca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fce:	eeb0 0b47 	vmov.f64	d0, d7
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	f7ff fc5e 	bl	8000894 <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[2].SetVgoal(-GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	ed93 6b7a 	vldr	d6, [r3, #488]	; 0x1e8
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000fea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8000ff4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ff8:	eeb0 0b47 	vmov.f64	d0, d7
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f7ff fc49 	bl	8000894 <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[3].SetVgoal(GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	ed93 6b6e 	vldr	d6, [r3, #440]	; 0x1b8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	ed93 5b7a 	vldr	d5, [r3, #488]	; 0x1e8
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 800101a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800101e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001022:	eeb0 0b47 	vmov.f64	d0, d7
 8001026:	4610      	mov	r0, r2
 8001028:	f7ff fc34 	bl	8000894 <_ZN8DC_Motor5Motor8SetVgoalEd>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN4Omni13GetNowCarInfoEv>:

CAR_INFO Omni::GetNowCarInfo() {
 8001034:	b4b0      	push	{r4, r5, r7}
 8001036:	b08f      	sub	sp, #60	; 0x3c
 8001038:	af00      	add	r7, sp, #0
 800103a:	61f8      	str	r0, [r7, #28]
	return NowCarInfo;
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f107 0420 	add.w	r4, r7, #32
 8001042:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001052:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001056:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800105a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800105e:	ec45 4b15 	vmov	d5, r4, r5
 8001062:	ec41 0b16 	vmov	d6, r0, r1
 8001066:	ec43 2b17 	vmov	d7, r2, r3
}
 800106a:	eeb0 0b45 	vmov.f64	d0, d5
 800106e:	eeb0 1b46 	vmov.f64	d1, d6
 8001072:	eeb0 2b47 	vmov.f64	d2, d7
 8001076:	373c      	adds	r7, #60	; 0x3c
 8001078:	46bd      	mov	sp, r7
 800107a:	bcb0      	pop	{r4, r5, r7}
 800107c:	4770      	bx	lr

0800107e <_ZN4Omni17GetNowCarLocationEv>:

CAR_INFO Omni::GetNowCarLocation() {
 800107e:	b4b0      	push	{r4, r5, r7}
 8001080:	b08f      	sub	sp, #60	; 0x3c
 8001082:	af00      	add	r7, sp, #0
 8001084:	61f8      	str	r0, [r7, #28]
	return NowCarLocation;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f107 0420 	add.w	r4, r7, #32
 800108c:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001098:	e884 0003 	stmia.w	r4, {r0, r1}
 800109c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80010a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010a8:	ec45 4b15 	vmov	d5, r4, r5
 80010ac:	ec41 0b16 	vmov	d6, r0, r1
 80010b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b4:	eeb0 0b45 	vmov.f64	d0, d5
 80010b8:	eeb0 1b46 	vmov.f64	d1, d6
 80010bc:	eeb0 2b47 	vmov.f64	d2, d7
 80010c0:	373c      	adds	r7, #60	; 0x3c
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bcb0      	pop	{r4, r5, r7}
 80010c6:	4770      	bx	lr

080010c8 <_ZN4Omni12SetCarRadiusEd>:

void Omni::SetCarRadius(double CarRadius) {
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	ed87 0b00 	vstr	d0, [r7]
	this->CarRadius = CarRadius;
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010da:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <_Z41__static_initialization_and_destruction_0ii>:
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d107      	bne.n	800110c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001102:	4293      	cmp	r3, r2
 8001104:	d102      	bne.n	800110c <_Z41__static_initialization_and_destruction_0ii+0x20>
Omni omni;
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001108:	f7ff fce6 	bl	8000ad8 <_ZN4OmniC1Ev>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	240000d0 	.word	0x240000d0

08001118 <_GLOBAL__sub_I_omni>:
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
 800111c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff ffe3 	bl	80010ec <_Z41__static_initialization_and_destruction_0ii>
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <_ZN3ros3MsgC1Ev+0x1c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	0800e50c 	.word	0x0800e50c

08001148 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffe8 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800e4f4 	.word	0x0800e4f4

08001198 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001198:	b480      	push	{r7}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80011b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	4401      	add	r1, r0
 80011ba:	b2d3      	uxtb	r3, r2
 80011bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80011be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	0a02      	lsrs	r2, r0, #8
 80011cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011d0:	0a0b      	lsrs	r3, r1, #8
 80011d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011d4:	3101      	adds	r1, #1
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	4401      	add	r1, r0
 80011da:	b2d3      	uxtb	r3, r2
 80011dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80011de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	0c02      	lsrs	r2, r0, #16
 80011ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011f0:	0c0b      	lsrs	r3, r1, #16
 80011f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f4:	3102      	adds	r1, #2
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	4401      	add	r1, r0
 80011fa:	b2d3      	uxtb	r3, r2
 80011fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80011fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	0e02      	lsrs	r2, r0, #24
 800120c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001210:	0e0b      	lsrs	r3, r1, #24
 8001212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001214:	3103      	adds	r1, #3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	4401      	add	r1, r0
 800121a:	b2d3      	uxtb	r3, r2
 800121c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800121e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	000a      	movs	r2, r1
 800122c:	2300      	movs	r3, #0
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	3104      	adds	r1, #4
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	4401      	add	r1, r0
 8001236:	b2d3      	uxtb	r3, r2
 8001238:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800123a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	0a0a      	lsrs	r2, r1, #8
 8001248:	2300      	movs	r3, #0
 800124a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800124c:	3105      	adds	r1, #5
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	4401      	add	r1, r0
 8001252:	b2d3      	uxtb	r3, r2
 8001254:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001256:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	0c0a      	lsrs	r2, r1, #16
 8001264:	2300      	movs	r3, #0
 8001266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001268:	3106      	adds	r1, #6
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	4401      	add	r1, r0
 800126e:	b2d3      	uxtb	r3, r2
 8001270:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001272:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	0e0a      	lsrs	r2, r1, #24
 8001280:	2300      	movs	r3, #0
 8001282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001284:	3107      	adds	r1, #7
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	4401      	add	r1, r0
 800128a:	b2d3      	uxtb	r3, r2
 800128c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3308      	adds	r3, #8
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800129a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800129e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012a4:	6838      	ldr	r0, [r7, #0]
 80012a6:	4401      	add	r1, r0
 80012a8:	b2d3      	uxtb	r3, r2
 80012aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80012ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	0a02      	lsrs	r2, r0, #8
 80012ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012be:	0a0b      	lsrs	r3, r1, #8
 80012c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c2:	3101      	adds	r1, #1
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	4401      	add	r1, r0
 80012c8:	b2d3      	uxtb	r3, r2
 80012ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80012cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	0c02      	lsrs	r2, r0, #16
 80012da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012de:	0c0b      	lsrs	r3, r1, #16
 80012e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e2:	3102      	adds	r1, #2
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	4401      	add	r1, r0
 80012e8:	b2d3      	uxtb	r3, r2
 80012ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80012ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	0e02      	lsrs	r2, r0, #24
 80012fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012fe:	0e0b      	lsrs	r3, r1, #24
 8001300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001302:	3103      	adds	r1, #3
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	4401      	add	r1, r0
 8001308:	b2d3      	uxtb	r3, r2
 800130a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800130c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	000a      	movs	r2, r1
 800131a:	2300      	movs	r3, #0
 800131c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800131e:	3104      	adds	r1, #4
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	4401      	add	r1, r0
 8001324:	b2d3      	uxtb	r3, r2
 8001326:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001328:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	0a0a      	lsrs	r2, r1, #8
 8001336:	2300      	movs	r3, #0
 8001338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800133a:	3105      	adds	r1, #5
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	4401      	add	r1, r0
 8001340:	b2d3      	uxtb	r3, r2
 8001342:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	0c0a      	lsrs	r2, r1, #16
 8001352:	2300      	movs	r3, #0
 8001354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001356:	3106      	adds	r1, #6
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	4401      	add	r1, r0
 800135c:	b2d3      	uxtb	r3, r2
 800135e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	0e0a      	lsrs	r2, r1, #24
 800136e:	2300      	movs	r3, #0
 8001370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001372:	3107      	adds	r1, #7
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	4401      	add	r1, r0
 8001378:	b2d3      	uxtb	r3, r2
 800137a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	3308      	adds	r3, #8
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001388:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800138c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001392:	6838      	ldr	r0, [r7, #0]
 8001394:	4401      	add	r1, r0
 8001396:	b2d3      	uxtb	r3, r2
 8001398:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800139a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	0a02      	lsrs	r2, r0, #8
 80013a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013ac:	0a0b      	lsrs	r3, r1, #8
 80013ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b0:	3101      	adds	r1, #1
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	4401      	add	r1, r0
 80013b6:	b2d3      	uxtb	r3, r2
 80013b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80013ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	0c02      	lsrs	r2, r0, #16
 80013c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013cc:	0c0b      	lsrs	r3, r1, #16
 80013ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d0:	3102      	adds	r1, #2
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	4401      	add	r1, r0
 80013d6:	b2d3      	uxtb	r3, r2
 80013d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80013da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	0e02      	lsrs	r2, r0, #24
 80013e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013ec:	0e0b      	lsrs	r3, r1, #24
 80013ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f0:	3103      	adds	r1, #3
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	4401      	add	r1, r0
 80013f6:	b2d3      	uxtb	r3, r2
 80013f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80013fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	000a      	movs	r2, r1
 8001408:	2300      	movs	r3, #0
 800140a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800140c:	3104      	adds	r1, #4
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	4401      	add	r1, r0
 8001412:	b2d3      	uxtb	r3, r2
 8001414:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	0a0a      	lsrs	r2, r1, #8
 8001424:	2300      	movs	r3, #0
 8001426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001428:	3105      	adds	r1, #5
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	4401      	add	r1, r0
 800142e:	b2d3      	uxtb	r3, r2
 8001430:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8001432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	0c0a      	lsrs	r2, r1, #16
 8001440:	2300      	movs	r3, #0
 8001442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001444:	3106      	adds	r1, #6
 8001446:	6838      	ldr	r0, [r7, #0]
 8001448:	4401      	add	r1, r0
 800144a:	b2d3      	uxtb	r3, r2
 800144c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	0e0a      	lsrs	r2, r1, #24
 800145c:	2300      	movs	r3, #0
 800145e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001460:	3107      	adds	r1, #7
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	4401      	add	r1, r0
 8001466:	b2d3      	uxtb	r3, r2
 8001468:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	3308      	adds	r3, #8
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001472:	4618      	mov	r0, r3
 8001474:	372c      	adds	r7, #44	; 0x2c
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800147e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001482:	b0eb      	sub	sp, #428	; 0x1ac
 8001484:	af00      	add	r7, sp, #0
 8001486:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800148a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014a4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80014a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	461c      	mov	r4, r3
 80014b6:	4615      	mov	r5, r2
 80014b8:	ea40 0804 	orr.w	r8, r0, r4
 80014bc:	ea41 0905 	orr.w	r9, r1, r5
 80014c0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2200      	movs	r2, #0
 80014da:	469a      	mov	sl, r3
 80014dc:	4693      	mov	fp, r2
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80014ea:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80014ee:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80014f2:	ea40 0402 	orr.w	r4, r0, r2
 80014f6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80014fa:	430b      	orrs	r3, r1
 80014fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001500:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8001504:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001508:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800150c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001510:	1c9a      	adds	r2, r3, #2
 8001512:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2200      	movs	r2, #0
 800151e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001522:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8001532:	464c      	mov	r4, r9
 8001534:	0423      	lsls	r3, r4, #16
 8001536:	4644      	mov	r4, r8
 8001538:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800153c:	4644      	mov	r4, r8
 800153e:	0422      	lsls	r2, r4, #16
 8001540:	ea40 0402 	orr.w	r4, r0, r2
 8001544:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8001548:	430b      	orrs	r3, r1
 800154a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800154e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8001552:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001556:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800155a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800155e:	1cda      	adds	r2, r3, #3
 8001560:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2200      	movs	r2, #0
 800156c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001570:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001574:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001578:	4623      	mov	r3, r4
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001580:	4623      	mov	r3, r4
 8001582:	061b      	lsls	r3, r3, #24
 8001584:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001588:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800158c:	4623      	mov	r3, r4
 800158e:	4303      	orrs	r3, r0
 8001590:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001594:	462b      	mov	r3, r5
 8001596:	430b      	orrs	r3, r1
 8001598:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800159c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80015a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80015a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80015a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015ac:	1d1a      	adds	r2, r3, #4
 80015ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80015be:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80015ce:	0023      	movs	r3, r4
 80015d0:	2200      	movs	r2, #0
 80015d2:	ea40 0402 	orr.w	r4, r0, r2
 80015d6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80015da:	430b      	orrs	r3, r1
 80015dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80015e0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80015e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80015e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80015ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015f0:	1d5a      	adds	r2, r3, #5
 80015f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001602:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001612:	0223      	lsls	r3, r4, #8
 8001614:	2200      	movs	r2, #0
 8001616:	ea40 0402 	orr.w	r4, r0, r2
 800161a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800161e:	430b      	orrs	r3, r1
 8001620:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001624:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001628:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800162c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001630:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001634:	1d9a      	adds	r2, r3, #6
 8001636:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2200      	movs	r2, #0
 8001642:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001646:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001656:	0423      	lsls	r3, r4, #16
 8001658:	2200      	movs	r2, #0
 800165a:	ea40 0402 	orr.w	r4, r0, r2
 800165e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8001662:	430b      	orrs	r3, r1
 8001664:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001668:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800166c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001670:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001674:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001678:	1dda      	adds	r2, r3, #7
 800167a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2200      	movs	r2, #0
 8001686:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800168a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800169a:	0623      	lsls	r3, r4, #24
 800169c:	2200      	movs	r2, #0
 800169e:	ea40 0402 	orr.w	r4, r0, r2
 80016a2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80016a6:	430b      	orrs	r3, r1
 80016a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016ac:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80016b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80016b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80016b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80016c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016c4:	3308      	adds	r3, #8
 80016c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80016da:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80016de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80016ee:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80016f2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80016f6:	4623      	mov	r3, r4
 80016f8:	4303      	orrs	r3, r0
 80016fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80016fe:	462b      	mov	r3, r5
 8001700:	430b      	orrs	r3, r1
 8001702:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001706:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800170a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800170e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001712:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2200      	movs	r2, #0
 8001724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001728:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001738:	464c      	mov	r4, r9
 800173a:	0223      	lsls	r3, r4, #8
 800173c:	4644      	mov	r4, r8
 800173e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001742:	4644      	mov	r4, r8
 8001744:	0222      	lsls	r2, r4, #8
 8001746:	ea40 0402 	orr.w	r4, r0, r2
 800174a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800174e:	430b      	orrs	r3, r1
 8001750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001754:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001758:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800175c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001760:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001764:	1c9a      	adds	r2, r3, #2
 8001766:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2200      	movs	r2, #0
 8001772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001786:	464c      	mov	r4, r9
 8001788:	0423      	lsls	r3, r4, #16
 800178a:	4644      	mov	r4, r8
 800178c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001790:	4644      	mov	r4, r8
 8001792:	0422      	lsls	r2, r4, #16
 8001794:	ea40 0402 	orr.w	r4, r0, r2
 8001798:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800179c:	430b      	orrs	r3, r1
 800179e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017a2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80017a6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017b2:	1cda      	adds	r2, r3, #3
 80017b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2200      	movs	r2, #0
 80017c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017c4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017c8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80017cc:	4623      	mov	r3, r4
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017d4:	4623      	mov	r3, r4
 80017d6:	061b      	lsls	r3, r3, #24
 80017d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017dc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80017e0:	4623      	mov	r3, r4
 80017e2:	4303      	orrs	r3, r0
 80017e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80017e8:	462b      	mov	r3, r5
 80017ea:	430b      	orrs	r3, r1
 80017ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017f0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80017f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80017f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001800:	1d1a      	adds	r2, r3, #4
 8001802:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001812:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8001822:	0023      	movs	r3, r4
 8001824:	2200      	movs	r2, #0
 8001826:	ea40 0402 	orr.w	r4, r0, r2
 800182a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800182e:	430b      	orrs	r3, r1
 8001830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001834:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8001838:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800183c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001840:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001844:	1d5a      	adds	r2, r3, #5
 8001846:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2200      	movs	r2, #0
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001856:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8001866:	0223      	lsls	r3, r4, #8
 8001868:	2200      	movs	r2, #0
 800186a:	ea40 0402 	orr.w	r4, r0, r2
 800186e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001872:	430b      	orrs	r3, r1
 8001874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001878:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800187c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001880:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001884:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001888:	1d9a      	adds	r2, r3, #6
 800188a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2200      	movs	r2, #0
 8001896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800189a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80018aa:	0423      	lsls	r3, r4, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	ea40 0402 	orr.w	r4, r0, r2
 80018b2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80018b6:	430b      	orrs	r3, r1
 80018b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80018bc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80018c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80018c4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80018c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018cc:	1dda      	adds	r2, r3, #7
 80018ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2200      	movs	r2, #0
 80018da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80018ee:	0623      	lsls	r3, r4, #24
 80018f0:	2200      	movs	r2, #0
 80018f2:	ea40 0402 	orr.w	r4, r0, r2
 80018f6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80018fa:	430b      	orrs	r3, r1
 80018fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001900:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001904:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8001908:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800190c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001910:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8001914:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001918:	3308      	adds	r3, #8
 800191a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800192a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800192e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001932:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2200      	movs	r2, #0
 800193e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001942:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001946:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800194a:	4623      	mov	r3, r4
 800194c:	4303      	orrs	r3, r0
 800194e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001950:	462b      	mov	r3, r5
 8001952:	430b      	orrs	r3, r1
 8001954:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001956:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800195a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800195e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001962:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2200      	movs	r2, #0
 8001974:	673b      	str	r3, [r7, #112]	; 0x70
 8001976:	677a      	str	r2, [r7, #116]	; 0x74
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001984:	464c      	mov	r4, r9
 8001986:	0223      	lsls	r3, r4, #8
 8001988:	4644      	mov	r4, r8
 800198a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800198e:	4644      	mov	r4, r8
 8001990:	0222      	lsls	r2, r4, #8
 8001992:	ea40 0402 	orr.w	r4, r0, r2
 8001996:	66bc      	str	r4, [r7, #104]	; 0x68
 8001998:	430b      	orrs	r3, r1
 800199a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800199c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80019a0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019a4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019ac:	1c9a      	adds	r2, r3, #2
 80019ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2200      	movs	r2, #0
 80019ba:	663b      	str	r3, [r7, #96]	; 0x60
 80019bc:	667a      	str	r2, [r7, #100]	; 0x64
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80019ca:	464c      	mov	r4, r9
 80019cc:	0423      	lsls	r3, r4, #16
 80019ce:	4644      	mov	r4, r8
 80019d0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80019d4:	4644      	mov	r4, r8
 80019d6:	0422      	lsls	r2, r4, #16
 80019d8:	ea40 0402 	orr.w	r4, r0, r2
 80019dc:	65bc      	str	r4, [r7, #88]	; 0x58
 80019de:	430b      	orrs	r3, r1
 80019e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019e2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80019e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019f2:	1cda      	adds	r2, r3, #3
 80019f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2200      	movs	r2, #0
 8001a00:	653b      	str	r3, [r7, #80]	; 0x50
 8001a02:	657a      	str	r2, [r7, #84]	; 0x54
 8001a04:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a08:	4623      	mov	r3, r4
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a0e:	4623      	mov	r3, r4
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a14:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a18:	4623      	mov	r3, r4
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8001a1e:	462b      	mov	r3, r5
 8001a20:	430b      	orrs	r3, r1
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
 8001a24:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a28:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001a2c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001a30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a34:	1d1a      	adds	r2, r3, #4
 8001a36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2200      	movs	r2, #0
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8001a50:	0023      	movs	r3, r4
 8001a52:	2200      	movs	r2, #0
 8001a54:	ea40 0402 	orr.w	r4, r0, r2
 8001a58:	633c      	str	r4, [r7, #48]	; 0x30
 8001a5a:	430b      	orrs	r3, r1
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001a66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001a6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a6e:	1d5a      	adds	r2, r3, #5
 8001a70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001a8a:	0223      	lsls	r3, r4, #8
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	ea40 0402 	orr.w	r4, r0, r2
 8001a92:	623c      	str	r4, [r7, #32]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a9c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001aa0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001aa4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001aa8:	3306      	adds	r3, #6
 8001aaa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	61fa      	str	r2, [r7, #28]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	69bc      	ldr	r4, [r7, #24]
 8001ac4:	0423      	lsls	r3, r4, #16
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	ea40 0402 	orr.w	r4, r0, r2
 8001acc:	613c      	str	r4, [r7, #16]
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ad6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001ada:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001ade:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ae2:	3307      	adds	r3, #7
 8001ae4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2200      	movs	r2, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	68bc      	ldr	r4, [r7, #8]
 8001afe:	0623      	lsls	r3, r4, #24
 8001b00:	2200      	movs	r2, #0
 8001b02:	ea40 0402 	orr.w	r4, r0, r2
 8001b06:	603c      	str	r4, [r7, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b10:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8001b14:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001b18:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001b1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8001b20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b24:	3308      	adds	r3, #8
 8001b26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8001b2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001b34:	46bd      	mov	sp, r7
 8001b36:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b3a:	4770      	bx	lr

08001b3c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	0800e268 	.word	0x0800e268

08001b58 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	0800e280 	.word	0x0800e280

08001b74 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fad2 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fada 	bl	8001148 <_ZN13geometry_msgs7Vector3C1Ev>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3328      	adds	r3, #40	; 0x28
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fad5 	bl	8001148 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	0800e4dc 	.word	0x0800e4dc

08001bac <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 0008 	add.w	r0, r3, #8
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff fae6 	bl	8001198 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff fad9 	bl	8001198 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bee:	68fb      	ldr	r3, [r7, #12]
    }
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f103 0008 	add.w	r0, r3, #8
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7ff fc33 	bl	800147e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7ff fc26 	bl	800147e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
     return offset;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	0800e2a4 	.word	0x0800e2a4

08001c60 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	0800e2b8 	.word	0x0800e2b8

08001c7c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
      data()
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fa3c 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001cb0:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffde 	bl	8001c7c <_ZN3ros4TimeC1Ev>
    {
    }
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	0800e4c4 	.word	0x0800e4c4

08001cd0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2ca      	uxtb	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0a19      	lsrs	r1, r3, #8
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0c19      	lsrs	r1, r3, #16
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3302      	adds	r3, #2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0e19      	lsrs	r1, r3, #24
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6899      	ldr	r1, [r3, #8]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	b2ca      	uxtb	r2, r1
 8001d34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a19      	lsrs	r1, r3, #8
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	b2ca      	uxtb	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	0c19      	lsrs	r1, r3, #16
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3302      	adds	r3, #2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0e19      	lsrs	r1, r3, #24
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3303      	adds	r3, #3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d72:	68fb      	ldr	r3, [r7, #12]
    }
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	440b      	add	r3, r1
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3302      	adds	r3, #2
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3303      	adds	r3, #3
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	440b      	add	r3, r1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	061b      	lsls	r3, r3, #24
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	6839      	ldr	r1, [r7, #0]
 8001e12:	440b      	add	r3, r1
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	041b      	lsls	r3, r3, #16
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3303      	adds	r3, #3
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	440b      	add	r3, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	0800e2dc 	.word	0x0800e2dc

08001e64 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	0800e2ec 	.word	0x0800e2ec

08001e80 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f94c 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8001e90:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	809a      	strh	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	615a      	str	r2, [r3, #20]
    {
    }
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800e4ac 	.word	0x0800e4ac
 8001ec4:	0800e310 	.word	0x0800e310

08001ec8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8899      	ldrh	r1, [r3, #4]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2ca      	uxtb	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	b299      	uxth	r1, r3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b2ca      	uxtb	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3302      	adds	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa04 	bl	8000310 <strlen>
 8001f08:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 ff9e 	bl	8002e54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	18d0      	adds	r0, r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f00b fff8 	bl	800df20 <memcpy>
      offset += length_topic_name;
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4413      	add	r3, r2
 8001f36:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f9e7 	bl	8000310 <strlen>
 8001f42:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	6979      	ldr	r1, [r7, #20]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 ff81 	bl	8002e54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	18d0      	adds	r0, r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f00b ffdb 	bl	800df20 <memcpy>
      offset += length_message_type;
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4413      	add	r3, r2
 8001f70:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe f9ca 	bl	8000310 <strlen>
 8001f7c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	6939      	ldr	r1, [r7, #16]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 ff64 	bl	8002e54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	18d0      	adds	r0, r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f00b ffbe 	bl	800df20 <memcpy>
      offset += length_md5sum;
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0a19      	lsrs	r1, r3, #8
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	0c19      	lsrs	r1, r3, #16
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0e19      	lsrs	r1, r3, #24
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3303      	adds	r3, #3
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
    }
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08a      	sub	sp, #40	; 0x28
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	b21a      	sxth	r2, r3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	3301      	adds	r3, #1
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	440b      	add	r3, r1
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3302      	adds	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f000 ff20 	bl	8002e90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	3304      	adds	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4413      	add	r3, r2
 8002060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002062:	429a      	cmp	r2, r3
 8002064:	d20c      	bcs.n	8002080 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	441a      	add	r2, r3
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	3b01      	subs	r3, #1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	440b      	add	r3, r1
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	3301      	adds	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	e7ec      	b.n	800205a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4413      	add	r3, r2
 8002086:	3b01      	subs	r3, #1
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	3b01      	subs	r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	441a      	add	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4413      	add	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	441a      	add	r2, r3
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 feed 	bl	8002e90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	3304      	adds	r3, #4
 80020ba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	6a3a      	ldr	r2, [r7, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d20c      	bcs.n	80020e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	441a      	add	r2, r3
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	440b      	add	r3, r1
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	3301      	adds	r3, #1
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	e7ec      	b.n	80020c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	3b01      	subs	r3, #1
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	441a      	add	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	441a      	add	r2, r3
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f000 feba 	bl	8002e90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	3304      	adds	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	429a      	cmp	r2, r3
 8002130:	d20c      	bcs.n	800214c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	441a      	add	r2, r3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3b01      	subs	r3, #1
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	440b      	add	r3, r1
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e7ec      	b.n	8002126 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	3b01      	subs	r3, #1
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	3b01      	subs	r3, #1
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	440a      	add	r2, r1
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3301      	adds	r3, #1
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	440b      	add	r3, r1
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	4313      	orrs	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3302      	adds	r3, #2
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	440b      	add	r3, r1
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	3303      	adds	r3, #3
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	440b      	add	r3, r1
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3304      	adds	r3, #4
 80021c2:	61bb      	str	r3, [r7, #24]
     return offset;
 80021c4:	69bb      	ldr	r3, [r7, #24]
    }
 80021c6:	4618      	mov	r0, r3
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	0800e314 	.word	0x0800e314

080021ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	0800e330 	.word	0x0800e330

08002208 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe ff88 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	711a      	strb	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002228:	609a      	str	r2, [r3, #8]
    {
    }
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	0800e494 	.word	0x0800e494
 8002238:	0800e310 	.word	0x0800e310

0800223c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	7912      	ldrb	r2, [r2, #4]
 8002254:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3301      	adds	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f855 	bl	8000310 <strlen>
 8002266:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4413      	add	r3, r2
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fdef 	bl	8002e54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3304      	adds	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	18d0      	adds	r0, r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	4619      	mov	r1, r3
 800228a:	f00b fe49 	bl	800df20 <memcpy>
      offset += length_msg;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
      return offset;
 8002296:	68fb      	ldr	r3, [r7, #12]
    }
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	3301      	adds	r3, #1
 80022be:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	441a      	add	r2, r3
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fddf 	bl	8002e90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	3304      	adds	r3, #4
 80022d6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4413      	add	r3, r2
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d20c      	bcs.n	8002302 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	441a      	add	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	440b      	add	r3, r1
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e7ec      	b.n	80022dc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	3b01      	subs	r3, #1
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	3b01      	subs	r3, #1
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	441a      	add	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
     return offset;
 8002326:	693b      	ldr	r3, [r7, #16]
    }
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	0800e354 	.word	0x0800e354

0800234c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	0800e368 	.word	0x0800e368

08002368 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fed8 	bl	8001128 <_ZN3ros3MsgC1Ev>
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	61da      	str	r2, [r3, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	0800e47c 	.word	0x0800e47c

080023b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0a19      	lsrs	r1, r3, #8
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0c19      	lsrs	r1, r3, #16
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3302      	adds	r3, #2
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	0e19      	lsrs	r1, r3, #24
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	3303      	adds	r3, #3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	b2ca      	uxtb	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	3304      	adds	r3, #4
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	429a      	cmp	r2, r3
 8002414:	d22b      	bcs.n	800246e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002424:	6939      	ldr	r1, [r7, #16]
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4413      	add	r3, r2
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	0a19      	lsrs	r1, r3, #8
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	3301      	adds	r3, #1
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	4413      	add	r3, r2
 800243c:	b2ca      	uxtb	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	0c19      	lsrs	r1, r3, #16
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	3302      	adds	r3, #2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	0e19      	lsrs	r1, r3, #24
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	3303      	adds	r3, #3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	4413      	add	r3, r2
 800245c:	b2ca      	uxtb	r2, r1
 800245e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	3304      	adds	r3, #4
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	3301      	adds	r3, #1
 800246a:	623b      	str	r3, [r7, #32]
 800246c:	e7ce      	b.n	800240c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6919      	ldr	r1, [r3, #16]
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	b2ca      	uxtb	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	0a19      	lsrs	r1, r3, #8
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	0c19      	lsrs	r1, r3, #16
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3302      	adds	r3, #2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	0e19      	lsrs	r1, r3, #24
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3303      	adds	r3, #3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	3304      	adds	r3, #4
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d22b      	bcs.n	800251e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	0a19      	lsrs	r1, r3, #8
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3301      	adds	r3, #1
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	b2ca      	uxtb	r2, r1
 80024ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0c19      	lsrs	r1, r3, #16
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	3302      	adds	r3, #2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0e19      	lsrs	r1, r3, #24
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	3303      	adds	r3, #3
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	b2ca      	uxtb	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	3304      	adds	r3, #4
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e7ce      	b.n	80024bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69d9      	ldr	r1, [r3, #28]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	4413      	add	r3, r2
 8002528:	b2ca      	uxtb	r2, r1
 800252a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	0a19      	lsrs	r1, r3, #8
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	b2ca      	uxtb	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	0c19      	lsrs	r1, r3, #16
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3302      	adds	r3, #2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	0e19      	lsrs	r1, r3, #24
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3303      	adds	r3, #3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	4413      	add	r3, r2
 800255e:	b2ca      	uxtb	r2, r1
 8002560:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	3304      	adds	r3, #4
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	429a      	cmp	r2, r3
 8002574:	d228      	bcs.n	80025c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fec4 	bl	8000310 <strlen>
 8002588:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	6979      	ldr	r1, [r7, #20]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fc5e 	bl	8002e54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	3304      	adds	r3, #4
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	18d0      	adds	r0, r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4619      	mov	r1, r3
 80025b4:	f00b fcb4 	bl	800df20 <memcpy>
      offset += length_stringsi;
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	4413      	add	r3, r2
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	e7d1      	b.n	800256c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025ca:	4618      	mov	r0, r3
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b08e      	sub	sp, #56	; 0x38
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ec:	3301      	adds	r3, #1
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	3302      	adds	r3, #2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4313      	orrs	r3, r2
 800260c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002610:	3303      	adds	r3, #3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	6a3a      	ldr	r2, [r7, #32]
 800261c:	4313      	orrs	r3, r2
 800261e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	3304      	adds	r3, #4
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d90a      	bls.n	8002646 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f00b fc86 	bl	800df4c <realloc>
 8002640:	4602      	mov	r2, r0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800264c:	2300      	movs	r3, #0
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002656:	429a      	cmp	r2, r3
 8002658:	d236      	bcs.n	80026c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	440a      	add	r2, r1
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	3301      	adds	r3, #1
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	440b      	add	r3, r1
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	3302      	adds	r3, #2
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	440b      	add	r3, r1
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	3303      	adds	r3, #3
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	440b      	add	r3, r1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	3304      	adds	r3, #4
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	3301      	adds	r3, #1
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
 80026c6:	e7c3      	b.n	8002650 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	3301      	adds	r3, #1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	3302      	adds	r3, #2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	041b      	lsls	r3, r3, #16
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	3303      	adds	r3, #3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	4313      	orrs	r3, r2
 8002706:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	3304      	adds	r3, #4
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d90a      	bls.n	800272e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f00b fc12 	bl	800df4c <realloc>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273e:	429a      	cmp	r2, r3
 8002740:	d236      	bcs.n	80027b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	440a      	add	r2, r1
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	3301      	adds	r3, #1
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	440b      	add	r3, r1
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	3302      	adds	r3, #2
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	440b      	add	r3, r1
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	3303      	adds	r3, #3
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	440b      	add	r3, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	3304      	adds	r3, #4
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	3214      	adds	r2, #20
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	3301      	adds	r3, #1
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	e7c3      	b.n	8002738 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	3301      	adds	r3, #1
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	3302      	adds	r3, #2
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	3303      	adds	r3, #3
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	3304      	adds	r3, #4
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d90a      	bls.n	8002816 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f00b fb9e 	bl	800df4c <realloc>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002826:	429a      	cmp	r2, r3
 8002828:	d23f      	bcs.n	80028aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	441a      	add	r2, r3
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fb2a 	bl	8002e90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283e:	3304      	adds	r3, #4
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	429a      	cmp	r2, r3
 8002850:	d20c      	bcs.n	800286c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	441a      	add	r2, r3
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3b01      	subs	r3, #1
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	440b      	add	r3, r1
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3301      	adds	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e7ec      	b.n	8002846 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800286c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	3b01      	subs	r3, #1
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	3b01      	subs	r3, #1
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	441a      	add	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	3220      	adds	r2, #32
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	3301      	adds	r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	e7ba      	b.n	8002820 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80028ac:	4618      	mov	r0, r3
 80028ae:	3738      	adds	r7, #56	; 0x38
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	0800e400 	.word	0x0800e400

080028d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	0800e38c 	.word	0x0800e38c

080028ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68d8      	ldr	r0, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6891      	ldr	r1, [r2, #8]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4798      	blx	r3
 8002938:	4603      	mov	r3, r0
  };
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
  }
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d068      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d061      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3d      	ldr	r2, [pc, #244]	; (8002a80 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d05a      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d053      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d04c      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d045      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a33      	ldr	r2, [pc, #204]	; (8002a90 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d03e      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a31      	ldr	r2, [pc, #196]	; (8002a94 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d037      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d030      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d029      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d022      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01b      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d014      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a22      	ldr	r2, [pc, #136]	; (8002aac <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00d      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d006      	beq.n	8002a44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d109      	bne.n	8002a58 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a56:	e008      	b.n	8002a6a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40020010 	.word	0x40020010
 8002a7c:	40020028 	.word	0x40020028
 8002a80:	40020040 	.word	0x40020040
 8002a84:	40020058 	.word	0x40020058
 8002a88:	40020070 	.word	0x40020070
 8002a8c:	40020088 	.word	0x40020088
 8002a90:	400200a0 	.word	0x400200a0
 8002a94:	400200b8 	.word	0x400200b8
 8002a98:	40020410 	.word	0x40020410
 8002a9c:	40020428 	.word	0x40020428
 8002aa0:	40020440 	.word	0x40020440
 8002aa4:	40020458 	.word	0x40020458
 8002aa8:	40020470 	.word	0x40020470
 8002aac:	40020488 	.word	0x40020488
 8002ab0:	400204a0 	.word	0x400204a0
 8002ab4:	400204b8 	.word	0x400204b8

08002ab8 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
			huart(&huart1), rind(0), twind(0), tfind(0) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <_ZN13STM32HardwareC1Ev+0x34>)
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	24000f9c 	.word	0x24000f9c

08002af0 <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f804 	bl	8002b06 <_ZN13STM32Hardware10reset_rbufEv>
	}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f009 f982 	bl	800be24 <HAL_UART_Receive_DMA>
	}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZN13STM32Hardware4readEv>:

	int read() {
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
		int c = -1;
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b34:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff0d 	bl	800295c <_ZN13STM32Hardware10getRdmaIndEv>
 8002b42:	4603      	mov	r3, r0
 8002b44:	429c      	cmp	r4, r3
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b58:	1c59      	adds	r1, r3, #1
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8002b78:	68fb      	ldr	r3, [r7, #12]
	}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
	...

08002b84 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d108      	bne.n	8002baa <_ZN13STM32Hardware5flushEv+0x26>
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	f083 0301 	eor.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <_ZN13STM32Hardware5flushEv+0x26>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <_ZN13STM32Hardware5flushEv+0x28>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d03f      	beq.n	8002c30 <_ZN13STM32Hardware5flushEv+0xac>
			mutex = true;
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d031      	beq.n	8002c2a <_ZN13STM32Hardware5flushEv+0xa6>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20a      	bcs.n	8002bec <_ZN13STM32Hardware5flushEv+0x68>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	e006      	b.n	8002bfa <_ZN13STM32Hardware5flushEv+0x76>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	89fa      	ldrh	r2, [r7, #14]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f009 f875 	bl	800bd00 <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
		}
	}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	240002c0 	.word	0x240002c0

08002c3c <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
		int n = length;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c52:	bfa8      	it	ge
 8002c54:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002c58:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c60:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bf28      	it	cs
 8002c6a:	4613      	movcs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f00b f94d 	bl	800df20 <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d00b      	beq.n	8002cba <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	18d1      	adds	r1, r2, r3
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f00b f933 	bl	800df20 <memcpy>
		}

		flush();
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff ff62 	bl	8002b84 <_ZN13STM32Hardware5flushEv>
	}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 8002cd0:	f002 f940 	bl	8004f54 <HAL_GetTick>
 8002cd4:	4603      	mov	r3, r0
	}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE>:
//ros::Subscriber<std_msgs::Float64> CarRadius_Sub("/STM_CarRadius", ROS::Test_CarRadius_CB);
#endif

ros::Publisher CarVelPub("Toposition", &CarVnow);

void ROS::GoalVel_CB(const geometry_msgs::Twist &msg) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	omni.SetGoalCarInfo(msg.linear.x, msg.linear.y, msg.angular.z);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	ed93 7b04 	vldr	d7, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	ed93 6b06 	vldr	d6, [r3, #24]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8002cfa:	eeb0 2b45 	vmov.f64	d2, d5
 8002cfe:	eeb0 1b46 	vmov.f64	d1, d6
 8002d02:	eeb0 0b47 	vmov.f64	d0, d7
 8002d06:	4803      	ldr	r0, [pc, #12]	; (8002d14 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE+0x34>)
 8002d08:	f7fe f83d 	bl	8000d86 <_ZN4Omni14SetGoalCarInfoEddd>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	240000d0 	.word	0x240000d0

08002d18 <_ZN3ROS5setupEv>:
	DebugMode.UpdateCarConstant();
}

#endif

void ROS::setup() {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	nh.initNode();
 8002d1c:	4807      	ldr	r0, [pc, #28]	; (8002d3c <_ZN3ROS5setupEv+0x24>)
 8002d1e:	f000 f9a1 	bl	8003064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(CarVelSub);
 8002d22:	4907      	ldr	r1, [pc, #28]	; (8002d40 <_ZN3ROS5setupEv+0x28>)
 8002d24:	4805      	ldr	r0, [pc, #20]	; (8002d3c <_ZN3ROS5setupEv+0x24>)
 8002d26:	f000 f9ba 	bl	800309e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	nh.subscribe(DebugCarGoalSub);
	nh.subscribe(Wheel_Sub);
	nh.subscribe(CarRadius_Sub);
#endif

	nh.advertise(CarVelPub);
 8002d2a:	4906      	ldr	r1, [pc, #24]	; (8002d44 <_ZN3ROS5setupEv+0x2c>)
 8002d2c:	4803      	ldr	r0, [pc, #12]	; (8002d3c <_ZN3ROS5setupEv+0x24>)
 8002d2e:	f000 f9e1 	bl	80030f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	HAL_TIM_Base_Start_IT(&htim7);
 8002d32:	4805      	ldr	r0, [pc, #20]	; (8002d48 <_ZN3ROS5setupEv+0x30>)
 8002d34:	f007 fd0e 	bl	800a754 <HAL_TIM_Base_Start_IT>
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	240002c4 	.word	0x240002c4
 8002d40:	24000c78 	.word	0x24000c78
 8002d44:	24000cd8 	.word	0x24000cd8
 8002d48:	24000e20 	.word	0x24000e20

08002d4c <_ZN3ROS4loopEv>:

void ROS::loop() {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <_ZN3ROS4loopEv+0x10>)
 8002d52:	f000 f9ff 	bl	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	240002c4 	.word	0x240002c4

08002d60 <_ZN3ROS10PubCarVnowEv>:

void ROS::PubCarVnow() {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	NowCarInfo = omni.GetNowCarInfo();
 8002d64:	4824      	ldr	r0, [pc, #144]	; (8002df8 <_ZN3ROS10PubCarVnowEv+0x98>)
 8002d66:	f7fe f965 	bl	8001034 <_ZN4Omni13GetNowCarInfoEv>
 8002d6a:	eeb0 5b40 	vmov.f64	d5, d0
 8002d6e:	eeb0 6b41 	vmov.f64	d6, d1
 8002d72:	eeb0 7b42 	vmov.f64	d7, d2
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <_ZN3ROS10PubCarVnowEv+0x9c>)
 8002d78:	ed83 5b00 	vstr	d5, [r3]
 8002d7c:	ed83 6b02 	vstr	d6, [r3, #8]
 8002d80:	ed83 7b04 	vstr	d7, [r3, #16]
	NowCarLoc = omni.GetNowCarLocation();
 8002d84:	481c      	ldr	r0, [pc, #112]	; (8002df8 <_ZN3ROS10PubCarVnowEv+0x98>)
 8002d86:	f7fe f97a 	bl	800107e <_ZN4Omni17GetNowCarLocationEv>
 8002d8a:	eeb0 5b40 	vmov.f64	d5, d0
 8002d8e:	eeb0 6b41 	vmov.f64	d6, d1
 8002d92:	eeb0 7b42 	vmov.f64	d7, d2
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <_ZN3ROS10PubCarVnowEv+0xa0>)
 8002d98:	ed83 5b00 	vstr	d5, [r3]
 8002d9c:	ed83 6b02 	vstr	d6, [r3, #8]
 8002da0:	ed83 7b04 	vstr	d7, [r3, #16]

	CarVnow.linear.x = NowCarInfo.Vx;
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_ZN3ROS10PubCarVnowEv+0x9c>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	4916      	ldr	r1, [pc, #88]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002dac:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CarVnow.linear.y = NowCarInfo.Vy;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <_ZN3ROS10PubCarVnowEv+0x9c>)
 8002db2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002db6:	4913      	ldr	r1, [pc, #76]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002db8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CarVnow.angular.z = NowCarInfo.Omega;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <_ZN3ROS10PubCarVnowEv+0x9c>)
 8002dbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dc2:	4910      	ldr	r1, [pc, #64]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002dc4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	CarVnow.angular.x = NowCarLoc.Vx;
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <_ZN3ROS10PubCarVnowEv+0xa0>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	490d      	ldr	r1, [pc, #52]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002dd0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	CarVnow.angular.y = NowCarLoc.Vy;
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <_ZN3ROS10PubCarVnowEv+0xa0>)
 8002dd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002ddc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	CarVnow.linear.z = NowCarLoc.Omega;
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_ZN3ROS10PubCarVnowEv+0xa0>)
 8002de2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002de6:	4907      	ldr	r1, [pc, #28]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002de8:	e9c1 2308 	strd	r2, r3, [r1, #32]

	CarVelPub.publish(&CarVnow);
 8002dec:	4905      	ldr	r1, [pc, #20]	; (8002e04 <_ZN3ROS10PubCarVnowEv+0xa4>)
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <_ZN3ROS10PubCarVnowEv+0xa8>)
 8002df0:	f7ff fd93 	bl	800291a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	240000d0 	.word	0x240000d0
 8002dfc:	24000c48 	.word	0x24000c48
 8002e00:	24000c60 	.word	0x24000c60
 8002e04:	24000c00 	.word	0x24000c00
 8002e08:	24000cd8 	.word	0x24000cd8

08002e0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <HAL_UART_TxCpltCallback+0x20>)
 8002e16:	f000 fb76 	bl	8003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff feb1 	bl	8002b84 <_ZN13STM32Hardware5flushEv>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	240002c4 	.word	0x240002c4

08002e30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8002e38:	4805      	ldr	r0, [pc, #20]	; (8002e50 <HAL_UART_RxCpltCallback+0x20>)
 8002e3a:	f000 fb64 	bl	8003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fe60 	bl	8002b06 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	240002c4 	.word	0x240002c4

08002e54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d80d      	bhi.n	8002e84 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	fa22 f103 	lsr.w	r1, r2, r3
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	b2ca      	uxtb	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e7ee      	b.n	8002e62 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d811      	bhi.n	8002ece <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	440a      	add	r2, r1
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	00d2      	lsls	r2, r2, #3
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e7ea      	b.n	8002ea4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	0800e468 	.word	0x0800e468

08002efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ffe8 	bl	8002edc <_ZN3ros15NodeHandleBase_C1Ev>
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fdce 	bl	8002ab8 <_ZN13STM32HardwareC1Ev>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fa1c 	bl	8002368 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b18      	cmp	r3, #24
 8002f38:	d80b      	bhi.n	8002f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e7f0      	b.n	8002f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	d80a      	bhi.n	8002f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f64:	2100      	movs	r1, #0
 8002f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e7f1      	b.n	8002f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7c:	d20a      	bcs.n	8002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e7f0      	b.n	8002f76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9e:	d20a      	bcs.n	8002fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	e7f0      	b.n	8002f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800e43c 	.word	0x0800e43c

08002ffc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	0800e450 	.word	0x0800e450

0800301c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ffe5 	bl	8002ffc <_ZN3ros11Subscriber_C1Ev>
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3310      	adds	r3, #16
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fd99 	bl	8001b74 <_ZN13geometry_msgs5TwistC1Ev>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	659a      	str	r2, [r3, #88]	; 0x58
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
  };
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800e424 	.word	0x0800e424

08003064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fd3d 	bl	8002af0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b18      	cmp	r3, #24
 80030b0:	dc19      	bgt.n	80030e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80030ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10d      	bne.n	80030de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80030c2:	6839      	ldr	r1, [r7, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]
        return true;
 80030da:	2301      	movs	r3, #1
 80030dc:	e004      	b.n	80030e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e7e2      	b.n	80030ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80030e6:	2300      	movs	r3, #0
  }
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b18      	cmp	r3, #24
 8003106:	dc1e      	bgt.n	8003146 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d111      	bne.n	800313e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	60da      	str	r2, [r3, #12]
        return true;
 800313a:	2301      	movs	r3, #1
 800313c:	e004      	b.n	8003148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3301      	adds	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e7dd      	b.n	8003102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003146:	2300      	movs	r3, #0
  }
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fdb1 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 8003166:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003176:	4293      	cmp	r3, r2
 8003178:	d903      	bls.n	8003182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d903      	bls.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d014      	beq.n	80031d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fd8a 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad2      	subs	r2, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80031c0:	429a      	cmp	r2, r3
 80031c2:	bf8c      	ite	hi
 80031c4:	2301      	movhi	r3, #1
 80031c6:	2300      	movls	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80031ce:	f06f 0301 	mvn.w	r3, #1
 80031d2:	e194      	b.n	80034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fca5 	bl	8002b28 <_ZN13STM32Hardware4readEv>
 80031de:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f2c0 8174 	blt.w	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031fe:	2b07      	cmp	r3, #7
 8003200:	d11e      	bne.n	8003240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	b2d1      	uxtb	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	460a      	mov	r2, r1
 800321a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003224:	1e5a      	subs	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1b4      	bne.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2208      	movs	r2, #8
 800323a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800323e:	e7af      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003246:	2b00      	cmp	r3, #0
 8003248:	d128      	bne.n	800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2bff      	cmp	r3, #255	; 0xff
 800324e:	d10d      	bne.n	800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f103 0214 	add.w	r2, r3, #20
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800326a:	e799      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fd29 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	bf8c      	ite	hi
 8003284:	2301      	movhi	r3, #1
 8003286:	2300      	movls	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d088      	beq.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003296:	f06f 0301 	mvn.w	r3, #1
 800329a:	e130      	b.n	80034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d118      	bne.n	80032d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2bfe      	cmp	r3, #254	; 0xfe
 80032aa:	d107      	bne.n	80032bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032ba:	e771      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f47f af68 	bne.w	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f924 	bl	800351e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80032d6:	e763      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d113      	bne.n	800330a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003308:	e74a      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003310:	2b03      	cmp	r3, #3
 8003312:	d110      	bne.n	8003336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003334:	e734      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800333c:	2b04      	cmp	r3, #4
 800333e:	d116      	bne.n	800336e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003346:	425a      	negs	r2, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	bf58      	it	pl
 800334e:	4253      	negpl	r3, r2
 8003350:	2bff      	cmp	r3, #255	; 0xff
 8003352:	d107      	bne.n	8003364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003362:	e71d      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800336c:	e718      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003374:	2b05      	cmp	r3, #5
 8003376:	d10f      	bne.n	8003398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003396:	e703      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d117      	bne.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2207      	movs	r2, #7
 80033b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f47f aeec 	bne.w	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2208      	movs	r2, #8
 80033cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033d0:	e6e6      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033d8:	2b08      	cmp	r3, #8
 80033da:	f47f aee1 	bne.w	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80033ec:	425a      	negs	r2, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	bf58      	it	pl
 80033f4:	4253      	negpl	r3, r2
 80033f6:	2bff      	cmp	r3, #255	; 0xff
 80033f8:	f47f aed2 	bne.w	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d110      	bne.n	8003428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f889 	bl	800351e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8a4 	bl	800355a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003426:	e06a      	b.n	80034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800342e:	2b0a      	cmp	r3, #10
 8003430:	d107      	bne.n	8003442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f96c 	bl	8003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003440:	e6ae      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003448:	2b06      	cmp	r3, #6
 800344a:	d10e      	bne.n	800346a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f7ff f8b9 	bl	80025d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003468:	e69a      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003470:	2b0b      	cmp	r3, #11
 8003472:	d104      	bne.n	800347e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800347c:	e690      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003484:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f43f ae84 	beq.w	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800349e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80034b2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80034ca:	4611      	mov	r1, r2
 80034cc:	4798      	blx	r3
    while (true)
 80034ce:	e667      	b.n	80031a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80034d0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00f      	beq.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d906      	bls.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f815 	bl	800351e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80034fc:	2300      	movs	r3, #0
  }
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
  }
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fbb8 	bl	8001ca0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f107 020c 	add.w	r2, r7, #12
 800353a:	210a      	movs	r1, #10
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fbbf 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800355a:	b590      	push	{r4, r7, lr}
 800355c:	b08b      	sub	sp, #44	; 0x2c
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fc8a 	bl	8001e80 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800356c:	2300      	movs	r3, #0
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2b18      	cmp	r3, #24
 8003574:	dc63      	bgt.n	800363e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d056      	beq.n	8003636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	b29b      	uxth	r3, r3
 800359a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4798      	blx	r3
 80035d8:	4603      	mov	r3, r0
 80035da:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4608      	mov	r0, r1
 8003604:	4798      	blx	r3
 8003606:	4603      	mov	r3, r0
 8003608:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800360a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681c      	ldr	r4, [r3, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f98c 	bl	8002942 <_ZN3ros9Publisher15getEndpointTypeEv>
 800362a:	4601      	mov	r1, r0
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	461a      	mov	r2, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	e798      	b.n	8003570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2b18      	cmp	r3, #24
 8003646:	dc5f      	bgt.n	8003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d053      	beq.n	8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29b      	uxth	r3, r3
 8003668:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003682:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800368e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4608      	mov	r0, r1
 800369a:	4798      	blx	r3
 800369c:	4603      	mov	r3, r0
 800369e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4608      	mov	r0, r1
 80036c0:	4798      	blx	r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80036c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ca:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681c      	ldr	r4, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4608      	mov	r0, r1
 80036f2:	4798      	blx	r3
 80036f4:	4601      	mov	r1, r0
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	461a      	mov	r2, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	3301      	adds	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	e79c      	b.n	8003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003710:	bf00      	nop
 8003712:	372c      	adds	r7, #44	; 0x2c
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe faba 	bl	8001ca0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3304      	adds	r3, #4
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fac9 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 8003736:	4602      	mov	r2, r0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003742:	f107 0308 	add.w	r3, r7, #8
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fb19 	bl	8001d80 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4915      	ldr	r1, [pc, #84]	; (80037a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003754:	fba1 1303 	umull	r1, r3, r1, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800375e:	6939      	ldr	r1, [r7, #16]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003764:	fba3 0302 	umull	r0, r3, r3, r2
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	440b      	add	r3, r1
 800377c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8a6 	bl	80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fa99 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	10624dd3 	.word	0x10624dd3
 80037ac:	000f4240 	.word	0x000f4240

080037b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b63      	cmp	r3, #99	; 0x63
 80037c0:	dd09      	ble.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80037c8:	f083 0301 	eor.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e079      	b.n	80038ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80037e2:	3207      	adds	r2, #7
 80037e4:	4611      	mov	r1, r2
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	22ff      	movs	r2, #255	; 0xff
 80037f0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	22fe      	movs	r2, #254	; 0xfe
 80037f8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	b29b      	uxth	r3, r3
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	b29b      	uxth	r3, r3
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003822:	4413      	add	r3, r2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	b21b      	sxth	r3, r3
 800383e:	121b      	asrs	r3, r3, #8
 8003840:	b21b      	sxth	r3, r3
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800384e:	2305      	movs	r3, #5
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3306      	adds	r3, #6
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	429a      	cmp	r2, r3
 800385a:	dc0d      	bgt.n	8003878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4413      	add	r3, r2
 8003862:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	3301      	adds	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e7ec      	b.n	8003852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3307      	adds	r3, #7
 800387c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	425a      	negs	r2, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	bf58      	it	pl
 8003888:	4253      	negpl	r3, r2
 800388a:	b2da      	uxtb	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	6179      	str	r1, [r7, #20]
 8003892:	43d2      	mvns	r2, r2
 8003894:	b2d1      	uxtb	r1, r2
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	460a      	mov	r2, r1
 800389c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a6:	dc0a      	bgt.n	80038be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1d18      	adds	r0, r3, #4
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7ff f9c1 	bl	8002c3c <_ZN13STM32Hardware5writeEPhi>
      return l;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e005      	b.n	80038ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80038be:	4905      	ldr	r1, [pc, #20]	; (80038d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f849 	bl	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	0800e3b0 	.word	0x0800e3b0

080038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f9ee 	bl	8002cc8 <_ZN13STM32Hardware4timeEv>
 80038ec:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4915      	ldr	r1, [pc, #84]	; (800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80038f6:	fba1 1303 	umull	r1, r3, r1, r3
 80038fa:	099b      	lsrs	r3, r3, #6
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	1e5a      	subs	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003918:	fb00 f303 	mul.w	r3, r0, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	1aca      	subs	r2, r1, r3
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003928:	4413      	add	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f7fc fe70 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	10624dd3 	.word	0x10624dd3
 8003950:	000f4240 	.word	0x000f4240
 8003954:	3b9aca00 	.word	0x3b9aca00

08003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	2103      	movs	r1, #3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f804 	bl	8003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	460b      	mov	r3, r1
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fc3e 	bl	8002208 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f107 0214 	add.w	r2, r7, #20
 800399e:	2107      	movs	r1, #7
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	4798      	blx	r3
  }
 80039a4:	bf00      	nop
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <_Z41__static_initialization_and_destruction_0ii>:

void ROS::init(void) {
//	nh.getHardware()->init();
}
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d116      	bne.n	80039ea <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d111      	bne.n	80039ea <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80039c6:	480b      	ldr	r0, [pc, #44]	; (80039f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80039c8:	f7ff fa98 	bl	8002efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist CarVnow;
 80039cc:	480a      	ldr	r0, [pc, #40]	; (80039f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80039ce:	f7fe f8d1 	bl	8001b74 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);
 80039d2:	2301      	movs	r3, #1
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80039d6:	490a      	ldr	r1, [pc, #40]	; (8003a00 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80039d8:	480a      	ldr	r0, [pc, #40]	; (8003a04 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80039da:	f7ff fb1f 	bl	800301c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher CarVelPub("Toposition", &CarVnow);
 80039de:	2300      	movs	r3, #0
 80039e0:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80039e2:	4909      	ldr	r1, [pc, #36]	; (8003a08 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80039e4:	4809      	ldr	r0, [pc, #36]	; (8003a0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80039e6:	f7fe ff81 	bl	80028ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	240002c4 	.word	0x240002c4
 80039f8:	24000c00 	.word	0x24000c00
 80039fc:	08002ce1 	.word	0x08002ce1
 8003a00:	0800e3ec 	.word	0x0800e3ec
 8003a04:	24000c78 	.word	0x24000c78
 8003a08:	0800e3f4 	.word	0x0800e3f4
 8003a0c:	24000cd8 	.word	0x24000cd8

08003a10 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe f8e9 	bl	8001bf8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	3210      	adds	r2, #16
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4798      	blx	r3
  }
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe f8f0 	bl	8001c44 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003a64:	4603      	mov	r3, r0
  }
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f8f0 	bl	8001c60 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003a80:	4603      	mov	r3, r0
  }
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
    return configured_;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <_GLOBAL__sub_I_nh>:
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7ff ff7d 	bl	80039ac <_Z41__static_initialization_and_destruction_0ii>
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim12;

// Count ROS frequency.
static int ROS_CAR_FREQUENCY = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d11f      	bne.n	8003b06 <HAL_TIM_PeriodElapsedCallback+0x52>

		// Update Car Vnow
		omni.UpdateNowCarInfo();
 8003ac6:	4816      	ldr	r0, [pc, #88]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ac8:	f7fd f8f2 	bl	8000cb0 <_ZN4Omni16UpdateNowCarInfoEv>

		// Update four wheel's PID value.
		omni.Update_PID();
 8003acc:	4814      	ldr	r0, [pc, #80]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ace:	f7fd f97a 	bl	8000dc6 <_ZN4Omni10Update_PIDEv>

		// Output GPIO and PWM
		omni.Move();
 8003ad2:	4813      	ldr	r0, [pc, #76]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ad4:	f7fd f9ac 	bl	8000e30 <_ZN4Omni4MoveEv>

		// Debug from Live Expressions ( Optional )
//		omni.SetMotorVgoal();

		omni.UpdateCarLocation();
 8003ad8:	4811      	ldr	r0, [pc, #68]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ada:	f7fd f879 	bl	8000bd0 <_ZN4Omni17UpdateCarLocationEv>

		// ROS pub -> Mecanum
		if (++ROS_CAR_FREQUENCY >= ROS_CAR_PUB_FREQUENCY) {
 8003ade:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	bfcc      	ite	gt
 8003af0:	2301      	movgt	r3, #1
 8003af2:	2300      	movle	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_PeriodElapsedCallback+0x60>
			ROS_CAR_FREQUENCY = 0;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
			ROS::PubCarVnow();
 8003b00:	f7ff f92e 	bl	8002d60 <_ZN3ROS10PubCarVnowEv>
		}
	}
	else if (htim->Instance == TIM7) {
		ROS::loop();
	}
}
 8003b04:	e006      	b.n	8003b14 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM7) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_TIM_PeriodElapsedCallback+0x60>
		ROS::loop();
 8003b10:	f7ff f91c 	bl	8002d4c <_ZN3ROS4loopEv>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40001c00 	.word	0x40001c00
 8003b20:	240000d0 	.word	0x240000d0
 8003b24:	24000cec 	.word	0x24000cec
 8003b28:	40001400 	.word	0x40001400

08003b2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003b30:	f001 f98a 	bl	8004e48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003b34:	f000 f81c 	bl	8003b70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003b38:	f000 fc2a 	bl	8004390 <MX_GPIO_Init>
	MX_TIM2_Init();
 8003b3c:	f000 f888 	bl	8003c50 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003b40:	f000 f8da 	bl	8003cf8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003b44:	f000 f92e 	bl	8003da4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003b48:	f000 f982 	bl	8003e50 <MX_TIM5_Init>
	MX_TIM12_Init();
 8003b4c:	f000 fa9e 	bl	800408c <MX_TIM12_Init>
	MX_TIM15_Init();
 8003b50:	f000 fb10 	bl	8004174 <MX_TIM15_Init>
	MX_TIM13_Init();
 8003b54:	f000 faea 	bl	800412c <MX_TIM13_Init>
	MX_DMA_Init();
 8003b58:	f000 fbf2 	bl	8004340 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8003b5c:	f000 fb9c 	bl	8004298 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003b60:	f000 f9cc 	bl	8003efc <MX_TIM7_Init>
	MX_TIM8_Init();
 8003b64:	f000 fa00 	bl	8003f68 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */

	main_function();
 8003b68:	f000 fcde 	bl	8004528 <main_function>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003b6c:	e7fe      	b.n	8003b6c <main+0x40>
	...

08003b70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b09c      	sub	sp, #112	; 0x70
 8003b74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7a:	224c      	movs	r2, #76	; 0x4c
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00a f9dc 	bl	800df3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	2220      	movs	r2, #32
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00a f9d6 	bl	800df3c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b90:	2002      	movs	r0, #2
 8003b92:	f004 faf7 	bl	8008184 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <SystemClock_Config+0xdc>)
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ba2:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <SystemClock_Config+0xdc>)
 8003ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba8:	6193      	str	r3, [r2, #24]
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <SystemClock_Config+0xdc>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8003bb6:	bf00      	nop
 8003bb8:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <SystemClock_Config+0xdc>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc4:	d1f8      	bne.n	8003bb8 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003bd8:	2304      	movs	r3, #4
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 256;
 8003bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003be2:	2302      	movs	r3, #2
 8003be4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003be6:	2302      	movs	r3, #2
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003bea:	2302      	movs	r3, #2
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fafa 	bl	80081f8 <HAL_RCC_OscConfig>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <SystemClock_Config+0x9e>
		Error_Handler();
 8003c0a:	f000 fc87 	bl	800451c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8003c0e:	233f      	movs	r3, #63	; 0x3f
 8003c10:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c12:	2303      	movs	r3, #3
 8003c14:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003c22:	2340      	movs	r3, #64	; 0x40
 8003c24:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003c2c:	2340      	movs	r3, #64	; 0x40
 8003c2e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fe8d 	bl	8008954 <HAL_RCC_ClockConfig>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <SystemClock_Config+0xd4>
		Error_Handler();
 8003c40:	f000 fc6c 	bl	800451c <Error_Handler>
	}
}
 8003c44:	bf00      	nop
 8003c46:	3770      	adds	r7, #112	; 0x70
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	58024800 	.word	0x58024800

08003c50 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f00a f96c 	bl	800df3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c64:	463b      	mov	r3, r7
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c74:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003c82:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c88:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c96:	2303      	movs	r3, #3
 8003c98:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003cc2:	f006 ff41 	bl	800ab48 <HAL_TIM_Encoder_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM2_Init+0x80>
		Error_Handler();
 8003ccc:	f000 fc26 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003cd8:	463b      	mov	r3, r7
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_TIM2_Init+0xa4>)
 8003cde:	f007 fe65 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM2_Init+0x9c>
		Error_Handler();
 8003ce8:	f000 fc18 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003cec:	bf00      	nop
 8003cee:	3730      	adds	r7, #48	; 0x30
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	24000cf0 	.word	0x24000cf0

08003cf8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08c      	sub	sp, #48	; 0x30
 8003cfc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003cfe:	f107 030c 	add.w	r3, r7, #12
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f00a f918 	bl	800df3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003d16:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d18:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <MX_TIM3_Init+0xa8>)
 8003d1a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003d28:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d50:	2300      	movs	r3, #0
 8003d52:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d54:	2301      	movs	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4619      	mov	r1, r3
 8003d66:	480d      	ldr	r0, [pc, #52]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d68:	f006 feee 	bl	800ab48 <HAL_TIM_Encoder_Init>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003d72:	f000 fbd3 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003d7e:	463b      	mov	r3, r7
 8003d80:	4619      	mov	r1, r3
 8003d82:	4806      	ldr	r0, [pc, #24]	; (8003d9c <MX_TIM3_Init+0xa4>)
 8003d84:	f007 fe12 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_TIM3_Init+0x9a>
		Error_Handler();
 8003d8e:	f000 fbc5 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003d92:	bf00      	nop
 8003d94:	3730      	adds	r7, #48	; 0x30
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	24000d3c 	.word	0x24000d3c
 8003da0:	40000400 	.word	0x40000400

08003da4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	; 0x30
 8003da8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003daa:	f107 030c 	add.w	r3, r7, #12
 8003dae:	2224      	movs	r2, #36	; 0x24
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f00a f8c2 	bl	800df3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003db8:	463b      	mov	r3, r7
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003dc2:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <MX_TIM4_Init+0xa8>)
 8003dc6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dda:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003de2:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003de8:	2303      	movs	r3, #3
 8003dea:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e04:	2300      	movs	r3, #0
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	4619      	mov	r1, r3
 8003e12:	480d      	ldr	r0, [pc, #52]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003e14:	f006 fe98 	bl	800ab48 <HAL_TIM_Encoder_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003e1e:	f000 fb7d 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4806      	ldr	r0, [pc, #24]	; (8003e48 <MX_TIM4_Init+0xa4>)
 8003e30:	f007 fdbc 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM4_Init+0x9a>
		Error_Handler();
 8003e3a:	f000 fb6f 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003e3e:	bf00      	nop
 8003e40:	3730      	adds	r7, #48	; 0x30
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	24000d88 	.word	0x24000d88
 8003e4c:	40000800 	.word	0x40000800

08003e50 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	; 0x30
 8003e54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00a f86c 	bl	800df3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e64:	463b      	mov	r3, r7
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003e70:	4a21      	ldr	r2, [pc, #132]	; (8003ef8 <MX_TIM5_Init+0xa8>)
 8003e72:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003e74:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e86:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8e:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e94:	2303      	movs	r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003ec0:	f006 fe42 	bl	800ab48 <HAL_TIM_Encoder_Init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM5_Init+0x7e>
		Error_Handler();
 8003eca:	f000 fb27 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4806      	ldr	r0, [pc, #24]	; (8003ef4 <MX_TIM5_Init+0xa4>)
 8003edc:	f007 fd66 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM5_Init+0x9a>
		Error_Handler();
 8003ee6:	f000 fb19 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003eea:	bf00      	nop
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	24000dd4 	.word	0x24000dd4
 8003ef8:	40000c00 	.word	0x40000c00

08003efc <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f02:	1d3b      	adds	r3, r7, #4
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <MX_TIM7_Init+0x68>)
 8003f10:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 127;
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f14:	227f      	movs	r2, #127	; 0x7f
 8003f16:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9999;
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f20:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f24:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003f2c:	480c      	ldr	r0, [pc, #48]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f2e:	f006 fbb9 	bl	800a6a4 <HAL_TIM_Base_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM7_Init+0x40>
		Error_Handler();
 8003f38:	f000 faf0 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4805      	ldr	r0, [pc, #20]	; (8003f60 <MX_TIM7_Init+0x64>)
 8003f4a:	f007 fd2f 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM7_Init+0x5c>
		Error_Handler();
 8003f54:	f000 fae2 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	24000e20 	.word	0x24000e20
 8003f64:	40001400 	.word	0x40001400

08003f68 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b098      	sub	sp, #96	; 0x60
 8003f6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	60da      	str	r2, [r3, #12]
 8003f88:	611a      	str	r2, [r3, #16]
 8003f8a:	615a      	str	r2, [r3, #20]
 8003f8c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	2234      	movs	r2, #52	; 0x34
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f009 ffd1 	bl	800df3c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003f9c:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <MX_TIM8_Init+0x120>)
 8003f9e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 12799;
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fa2:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8003fa6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa8:	4b36      	ldr	r3, [pc, #216]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 9999;
 8003fae:	4b35      	ldr	r3, [pc, #212]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fb4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb6:	4b33      	ldr	r3, [pc, #204]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003fc8:	482e      	ldr	r0, [pc, #184]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fca:	f006 fc49 	bl	800a860 <HAL_TIM_PWM_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM8_Init+0x70>
		Error_Handler();
 8003fd4:	f000 faa2 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8003fe4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4826      	ldr	r0, [pc, #152]	; (8004084 <MX_TIM8_Init+0x11c>)
 8003fec:	f007 fcde 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM8_Init+0x92>
		Error_Handler();
 8003ff6:	f000 fa91 	bl	800451c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ffa:	2360      	movs	r3, #96	; 0x60
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 5000;
 8003ffe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004004:	2300      	movs	r3, #0
 8004006:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004008:	2300      	movs	r3, #0
 800400a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800400c:	2300      	movs	r3, #0
 800400e:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004014:	2300      	movs	r3, #0
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004018:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800401c:	2200      	movs	r2, #0
 800401e:	4619      	mov	r1, r3
 8004020:	4818      	ldr	r0, [pc, #96]	; (8004084 <MX_TIM8_Init+0x11c>)
 8004022:	f006 ffe5 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_TIM8_Init+0xc8>
		Error_Handler();
 800402c:	f000 fa76 	bl	800451c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004030:	2300      	movs	r3, #0
 8004032:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004048:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4807      	ldr	r0, [pc, #28]	; (8004084 <MX_TIM8_Init+0x11c>)
 8004066:	f007 fd3d 	bl	800bae4 <HAL_TIMEx_ConfigBreakDeadTime>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM8_Init+0x10c>
		Error_Handler();
 8004070:	f000 fa54 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8004074:	4803      	ldr	r0, [pc, #12]	; (8004084 <MX_TIM8_Init+0x11c>)
 8004076:	f000 fc2d 	bl	80048d4 <HAL_TIM_MspPostInit>

}
 800407a:	bf00      	nop
 800407c:	3760      	adds	r7, #96	; 0x60
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	24000e6c 	.word	0x24000e6c
 8004088:	40010400 	.word	0x40010400

0800408c <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
 80040a0:	615a      	str	r2, [r3, #20]
 80040a2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <MX_TIM12_Init+0x98>)
 80040a6:	4a20      	ldr	r2, [pc, #128]	; (8004128 <MX_TIM12_Init+0x9c>)
 80040a8:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <MX_TIM12_Init+0x98>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <MX_TIM12_Init+0x98>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 6399;
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <MX_TIM12_Init+0x98>)
 80040b8:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80040bc:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <MX_TIM12_Init+0x98>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <MX_TIM12_Init+0x98>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 80040ca:	4816      	ldr	r0, [pc, #88]	; (8004124 <MX_TIM12_Init+0x98>)
 80040cc:	f006 fbc8 	bl	800a860 <HAL_TIM_PWM_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM12_Init+0x4e>
		Error_Handler();
 80040d6:	f000 fa21 	bl	800451c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040da:	2360      	movs	r3, #96	; 0x60
 80040dc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	2200      	movs	r2, #0
 80040ee:	4619      	mov	r1, r3
 80040f0:	480c      	ldr	r0, [pc, #48]	; (8004124 <MX_TIM12_Init+0x98>)
 80040f2:	f006 ff7d 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM12_Init+0x74>
		Error_Handler();
 80040fc:	f000 fa0e 	bl	800451c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	2204      	movs	r2, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4807      	ldr	r0, [pc, #28]	; (8004124 <MX_TIM12_Init+0x98>)
 8004108:	f006 ff72 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM12_Init+0x8a>
		Error_Handler();
 8004112:	f000 fa03 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8004116:	4803      	ldr	r0, [pc, #12]	; (8004124 <MX_TIM12_Init+0x98>)
 8004118:	f000 fbdc 	bl	80048d4 <HAL_TIM_MspPostInit>

}
 800411c:	bf00      	nop
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	24000eb8 	.word	0x24000eb8
 8004128:	40001800 	.word	0x40001800

0800412c <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <MX_TIM13_Init+0x40>)
 8004132:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <MX_TIM13_Init+0x44>)
 8004134:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 127;
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <MX_TIM13_Init+0x40>)
 8004138:	227f      	movs	r2, #127	; 0x7f
 800413a:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <MX_TIM13_Init+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <MX_TIM13_Init+0x40>)
 8004144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004148:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <MX_TIM13_Init+0x40>)
 800414c:	2200      	movs	r2, #0
 800414e:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <MX_TIM13_Init+0x40>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8004156:	4805      	ldr	r0, [pc, #20]	; (800416c <MX_TIM13_Init+0x40>)
 8004158:	f006 faa4 	bl	800a6a4 <HAL_TIM_Base_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM13_Init+0x3a>
		Error_Handler();
 8004162:	f000 f9db 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	24000f04 	.word	0x24000f04
 8004170:	40001c00 	.word	0x40001c00

08004174 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b098      	sub	sp, #96	; 0x60
 8004178:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800417a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	609a      	str	r2, [r3, #8]
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	611a      	str	r2, [r3, #16]
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	2234      	movs	r2, #52	; 0x34
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f009 fecb 	bl	800df3c <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80041a6:	4b3a      	ldr	r3, [pc, #232]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041a8:	4a3a      	ldr	r2, [pc, #232]	; (8004294 <MX_TIM15_Init+0x120>)
 80041aa:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 80041ac:	4b38      	ldr	r3, [pc, #224]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 6399;
 80041b8:	4b35      	ldr	r3, [pc, #212]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041ba:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80041be:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80041c6:	4b32      	ldr	r3, [pc, #200]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041cc:	4b30      	ldr	r3, [pc, #192]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80041d2:	482f      	ldr	r0, [pc, #188]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041d4:	f006 fb44 	bl	800a860 <HAL_TIM_PWM_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM15_Init+0x6e>
		Error_Handler();
 80041de:	f000 f99d 	bl	800451c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK) {
 80041ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041ee:	4619      	mov	r1, r3
 80041f0:	4827      	ldr	r0, [pc, #156]	; (8004290 <MX_TIM15_Init+0x11c>)
 80041f2:	f007 fbdb 	bl	800b9ac <HAL_TIMEx_MasterConfigSynchronization>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM15_Init+0x8c>
		Error_Handler();
 80041fc:	f000 f98e 	bl	800451c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004200:	2360      	movs	r3, #96	; 0x60
 8004202:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800420c:	2300      	movs	r3, #0
 800420e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004214:	2300      	movs	r3, #0
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004218:	2300      	movs	r3, #0
 800421a:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800421c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004220:	2200      	movs	r2, #0
 8004222:	4619      	mov	r1, r3
 8004224:	481a      	ldr	r0, [pc, #104]	; (8004290 <MX_TIM15_Init+0x11c>)
 8004226:	f006 fee3 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM15_Init+0xc0>
		Error_Handler();
 8004230:	f000 f974 	bl	800451c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004238:	2204      	movs	r2, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4814      	ldr	r0, [pc, #80]	; (8004290 <MX_TIM15_Init+0x11c>)
 800423e:	f006 fed7 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM15_Init+0xd8>
		Error_Handler();
 8004248:	f000 f968 	bl	800451c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004264:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4807      	ldr	r0, [pc, #28]	; (8004290 <MX_TIM15_Init+0x11c>)
 8004274:	f007 fc36 	bl	800bae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM15_Init+0x10e>
		Error_Handler();
 800427e:	f000 f94d 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8004282:	4803      	ldr	r0, [pc, #12]	; (8004290 <MX_TIM15_Init+0x11c>)
 8004284:	f000 fb26 	bl	80048d4 <HAL_TIM_MspPostInit>

}
 8004288:	bf00      	nop
 800428a:	3760      	adds	r7, #96	; 0x60
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	24000f50 	.word	0x24000f50
 8004294:	40014000 	.word	0x40014000

08004298 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800429c:	4b26      	ldr	r3, [pc, #152]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 800429e:	4a27      	ldr	r2, [pc, #156]	; (800433c <MX_USART1_UART_Init+0xa4>)
 80042a0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80042a2:	4b25      	ldr	r3, [pc, #148]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042a8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042aa:	4b23      	ldr	r3, [pc, #140]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80042bc:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042be:	220c      	movs	r2, #12
 80042c0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ce:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042dc:	2240      	movs	r2, #64	; 0x40
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
	huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80042e0:	4b15      	ldr	r3, [pc, #84]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44
	huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	649a      	str	r2, [r3, #72]	; 0x48
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80042ee:	4812      	ldr	r0, [pc, #72]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 80042f0:	f007 fcb6 	bl	800bc60 <HAL_UART_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_USART1_UART_Init+0x66>
		Error_Handler();
 80042fa:	f000 f90f 	bl	800451c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80042fe:	2100      	movs	r1, #0
 8004300:	480d      	ldr	r0, [pc, #52]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 8004302:	f009 fcfd 	bl	800dd00 <HAL_UARTEx_SetTxFifoThreshold>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_USART1_UART_Init+0x78>
		Error_Handler();
 800430c:	f000 f906 	bl	800451c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8004310:	2100      	movs	r1, #0
 8004312:	4809      	ldr	r0, [pc, #36]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 8004314:	f009 fd32 	bl	800dd7c <HAL_UARTEx_SetRxFifoThreshold>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_USART1_UART_Init+0x8a>
		Error_Handler();
 800431e:	f000 f8fd 	bl	800451c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_USART1_UART_Init+0xa0>)
 8004324:	f009 fcb3 	bl	800dc8e <HAL_UARTEx_DisableFifoMode>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_USART1_UART_Init+0x9a>
		Error_Handler();
 800432e:	f000 f8f5 	bl	800451c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	24000f9c 	.word	0x24000f9c
 800433c:	40011000 	.word	0x40011000

08004340 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <MX_DMA_Init+0x4c>)
 8004348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800434c:	4a0f      	ldr	r2, [pc, #60]	; (800438c <MX_DMA_Init+0x4c>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <MX_DMA_Init+0x4c>)
 8004358:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004364:	2200      	movs	r2, #0
 8004366:	2100      	movs	r1, #0
 8004368:	200b      	movs	r0, #11
 800436a:	f000 feda 	bl	8005122 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800436e:	200b      	movs	r0, #11
 8004370:	f000 fef1 	bl	8005156 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004374:	2200      	movs	r2, #0
 8004376:	2100      	movs	r1, #0
 8004378:	200c      	movs	r0, #12
 800437a:	f000 fed2 	bl	8005122 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800437e:	200c      	movs	r0, #12
 8004380:	f000 fee9 	bl	8005156 <HAL_NVIC_EnableIRQ>

}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	58024400 	.word	0x58024400

08004390 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004396:	f107 031c 	add.w	r3, r7, #28
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80043a6:	4b58      	ldr	r3, [pc, #352]	; (8004508 <MX_GPIO_Init+0x178>)
 80043a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ac:	4a56      	ldr	r2, [pc, #344]	; (8004508 <MX_GPIO_Init+0x178>)
 80043ae:	f043 0310 	orr.w	r3, r3, #16
 80043b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043b6:	4b54      	ldr	r3, [pc, #336]	; (8004508 <MX_GPIO_Init+0x178>)
 80043b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <MX_GPIO_Init+0x178>)
 80043c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ca:	4a4f      	ldr	r2, [pc, #316]	; (8004508 <MX_GPIO_Init+0x178>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <MX_GPIO_Init+0x178>)
 80043d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <MX_GPIO_Init+0x178>)
 80043e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e8:	4a47      	ldr	r2, [pc, #284]	; (8004508 <MX_GPIO_Init+0x178>)
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043f2:	4b45      	ldr	r3, [pc, #276]	; (8004508 <MX_GPIO_Init+0x178>)
 80043f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004400:	4b41      	ldr	r3, [pc, #260]	; (8004508 <MX_GPIO_Init+0x178>)
 8004402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004406:	4a40      	ldr	r2, [pc, #256]	; (8004508 <MX_GPIO_Init+0x178>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004410:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <MX_GPIO_Init+0x178>)
 8004412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800441e:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <MX_GPIO_Init+0x178>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004424:	4a38      	ldr	r2, [pc, #224]	; (8004508 <MX_GPIO_Init+0x178>)
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <MX_GPIO_Init+0x178>)
 8004430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <MX_GPIO_Init+0x178>)
 800443e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004442:	4a31      	ldr	r2, [pc, #196]	; (8004508 <MX_GPIO_Init+0x178>)
 8004444:	f043 0308 	orr.w	r3, r3, #8
 8004448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <MX_GPIO_Init+0x178>)
 800444e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800445a:	2200      	movs	r2, #0
 800445c:	2108      	movs	r1, #8
 800445e:	482b      	ldr	r0, [pc, #172]	; (800450c <MX_GPIO_Init+0x17c>)
 8004460:	f003 fe76 	bl	8008150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004464:	2200      	movs	r2, #0
 8004466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800446a:	4829      	ldr	r0, [pc, #164]	; (8004510 <MX_GPIO_Init+0x180>)
 800446c:	f003 fe70 	bl	8008150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8004470:	2200      	movs	r2, #0
 8004472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004476:	4827      	ldr	r0, [pc, #156]	; (8004514 <MX_GPIO_Init+0x184>)
 8004478:	f003 fe6a 	bl	8008150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800447c:	2200      	movs	r2, #0
 800447e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004482:	4825      	ldr	r0, [pc, #148]	; (8004518 <MX_GPIO_Init+0x188>)
 8004484:	f003 fe64 	bl	8008150 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004488:	2308      	movs	r3, #8
 800448a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800448c:	2301      	movs	r3, #1
 800448e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004494:	2300      	movs	r3, #0
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004498:	f107 031c 	add.w	r3, r7, #28
 800449c:	4619      	mov	r1, r3
 800449e:	481b      	ldr	r0, [pc, #108]	; (800450c <MX_GPIO_Init+0x17c>)
 80044a0:	f003 fcae 	bl	8007e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044aa:	2301      	movs	r3, #1
 80044ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b6:	f107 031c 	add.w	r3, r7, #28
 80044ba:	4619      	mov	r1, r3
 80044bc:	4814      	ldr	r0, [pc, #80]	; (8004510 <MX_GPIO_Init+0x180>)
 80044be:	f003 fc9f 	bl	8007e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c8:	2301      	movs	r3, #1
 80044ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d4:	f107 031c 	add.w	r3, r7, #28
 80044d8:	4619      	mov	r1, r3
 80044da:	480e      	ldr	r0, [pc, #56]	; (8004514 <MX_GPIO_Init+0x184>)
 80044dc:	f003 fc90 	bl	8007e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e6:	2301      	movs	r3, #1
 80044e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4619      	mov	r1, r3
 80044f8:	4807      	ldr	r0, [pc, #28]	; (8004518 <MX_GPIO_Init+0x188>)
 80044fa:	f003 fc81 	bl	8007e00 <HAL_GPIO_Init>

}
 80044fe:	bf00      	nop
 8004500:	3730      	adds	r7, #48	; 0x30
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	58024400 	.word	0x58024400
 800450c:	58021000 	.word	0x58021000
 8004510:	58020800 	.word	0x58020800
 8004514:	58020400 	.word	0x58020400
 8004518:	58020c00 	.word	0x58020c00

0800451c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004520:	b672      	cpsid	i
}
 8004522:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004524:	e7fe      	b.n	8004524 <Error_Handler+0x8>
	...

08004528 <main_function>:
#include "Omni.h"

// For LED blink
extern TIM_HandleTypeDef htim8;

void main_function() {
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	// Init
	ROS::setup();
 800452c:	f7fe fbf4 	bl	8002d18 <_ZN3ROS5setupEv>
	omni.Init();
 8004530:	4803      	ldr	r0, [pc, #12]	; (8004540 <main_function+0x18>)
 8004532:	f7fc faf9 	bl	8000b28 <_ZN4Omni4InitEv>

	// For LED blink
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004536:	2100      	movs	r1, #0
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <main_function+0x1c>)
 800453a:	f006 f9e9 	bl	800a910 <HAL_TIM_PWM_Start>
#ifdef DEBUGGER_MODE
	DebugMode.DebuggingMode();
	return;
#endif

	while (true) {
 800453e:	e7fe      	b.n	800453e <main_function+0x16>
 8004540:	240000d0 	.word	0x240000d0
 8004544:	24000e6c 	.word	0x24000e6c

08004548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_MspInit+0x30>)
 8004550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_MspInit+0x30>)
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_MspInit+0x30>)
 8004560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	58024400 	.word	0x58024400

0800457c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b090      	sub	sp, #64	; 0x40
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d14e      	bne.n	800463c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800459e:	4b77      	ldr	r3, [pc, #476]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045a4:	4a75      	ldr	r2, [pc, #468]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045ae:	4b73      	ldr	r3, [pc, #460]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045c2:	4a6e      	ldr	r2, [pc, #440]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045cc:	4b6b      	ldr	r3, [pc, #428]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045da:	4b68      	ldr	r3, [pc, #416]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e0:	4a66      	ldr	r2, [pc, #408]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ea:	4b64      	ldr	r3, [pc, #400]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80045ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004606:	2300      	movs	r3, #0
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800460a:	2301      	movs	r3, #1
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004612:	4619      	mov	r1, r3
 8004614:	485a      	ldr	r0, [pc, #360]	; (8004780 <HAL_TIM_Encoder_MspInit+0x204>)
 8004616:	f003 fbf3 	bl	8007e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800461a:	2308      	movs	r3, #8
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	2300      	movs	r3, #0
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004626:	2300      	movs	r3, #0
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800462a:	2301      	movs	r3, #1
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004632:	4619      	mov	r1, r3
 8004634:	4853      	ldr	r0, [pc, #332]	; (8004784 <HAL_TIM_Encoder_MspInit+0x208>)
 8004636:	f003 fbe3 	bl	8007e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800463a:	e09b      	b.n	8004774 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a51      	ldr	r2, [pc, #324]	; (8004788 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d12e      	bne.n	80046a4 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004646:	4b4d      	ldr	r3, [pc, #308]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800464c:	4a4b      	ldr	r2, [pc, #300]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 800464e:	f043 0302 	orr.w	r3, r3, #2
 8004652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004656:	4b49      	ldr	r3, [pc, #292]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004664:	4b45      	ldr	r3, [pc, #276]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800466a:	4a44      	ldr	r2, [pc, #272]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 800466c:	f043 0302 	orr.w	r3, r3, #2
 8004670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004674:	4b41      	ldr	r3, [pc, #260]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004682:	2330      	movs	r3, #48	; 0x30
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004686:	2302      	movs	r3, #2
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468e:	2300      	movs	r3, #0
 8004690:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004692:	2302      	movs	r3, #2
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800469a:	4619      	mov	r1, r3
 800469c:	4839      	ldr	r0, [pc, #228]	; (8004784 <HAL_TIM_Encoder_MspInit+0x208>)
 800469e:	f003 fbaf 	bl	8007e00 <HAL_GPIO_Init>
}
 80046a2:	e067      	b.n	8004774 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a38      	ldr	r2, [pc, #224]	; (800478c <HAL_TIM_Encoder_MspInit+0x210>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d12f      	bne.n	800470e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80046b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046b4:	4a31      	ldr	r2, [pc, #196]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046be:	4b2f      	ldr	r3, [pc, #188]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80046c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046cc:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80046ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d2:	4a2a      	ldr	r2, [pc, #168]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 80046de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80046ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f8:	2300      	movs	r3, #0
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046fc:	2302      	movs	r3, #2
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004704:	4619      	mov	r1, r3
 8004706:	4822      	ldr	r0, [pc, #136]	; (8004790 <HAL_TIM_Encoder_MspInit+0x214>)
 8004708:	f003 fb7a 	bl	8007e00 <HAL_GPIO_Init>
}
 800470c:	e032      	b.n	8004774 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a20      	ldr	r2, [pc, #128]	; (8004794 <HAL_TIM_Encoder_MspInit+0x218>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d12d      	bne.n	8004774 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004718:	4b18      	ldr	r3, [pc, #96]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 800471a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 800472a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_TIM_Encoder_MspInit+0x200>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004754:	2303      	movs	r3, #3
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004758:	2302      	movs	r3, #2
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	2300      	movs	r3, #0
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004760:	2300      	movs	r3, #0
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004764:	2302      	movs	r3, #2
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800476c:	4619      	mov	r1, r3
 800476e:	4804      	ldr	r0, [pc, #16]	; (8004780 <HAL_TIM_Encoder_MspInit+0x204>)
 8004770:	f003 fb46 	bl	8007e00 <HAL_GPIO_Init>
}
 8004774:	bf00      	nop
 8004776:	3740      	adds	r7, #64	; 0x40
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	58024400 	.word	0x58024400
 8004780:	58020000 	.word	0x58020000
 8004784:	58020400 	.word	0x58020400
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	58020c00 	.word	0x58020c00
 8004794:	40000c00 	.word	0x40000c00

08004798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <HAL_TIM_Base_MspInit+0x84>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d117      	bne.n	80047da <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_TIM_Base_MspInit+0x88>)
 80047ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <HAL_TIM_Base_MspInit+0x88>)
 80047b2:	f043 0320 	orr.w	r3, r3, #32
 80047b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_TIM_Base_MspInit+0x88>)
 80047bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2100      	movs	r1, #0
 80047cc:	2037      	movs	r0, #55	; 0x37
 80047ce:	f000 fca8 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047d2:	2037      	movs	r0, #55	; 0x37
 80047d4:	f000 fcbf 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80047d8:	e01b      	b.n	8004812 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM13)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a11      	ldr	r2, [pc, #68]	; (8004824 <HAL_TIM_Base_MspInit+0x8c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d116      	bne.n	8004812 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <HAL_TIM_Base_MspInit+0x88>)
 80047e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ea:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <HAL_TIM_Base_MspInit+0x88>)
 80047ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_TIM_Base_MspInit+0x88>)
 80047f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004802:	2200      	movs	r2, #0
 8004804:	2100      	movs	r1, #0
 8004806:	202c      	movs	r0, #44	; 0x2c
 8004808:	f000 fc8b 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800480c:	202c      	movs	r0, #44	; 0x2c
 800480e:	f000 fca2 	bl	8005156 <HAL_NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40001400 	.word	0x40001400
 8004820:	58024400 	.word	0x58024400
 8004824:	40001c00 	.word	0x40001c00

08004828 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a23      	ldr	r2, [pc, #140]	; (80048c4 <HAL_TIM_PWM_MspInit+0x9c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d117      	bne.n	800486a <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800483c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004840:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800484a:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800484c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004858:	2200      	movs	r2, #0
 800485a:	2100      	movs	r1, #0
 800485c:	202c      	movs	r0, #44	; 0x2c
 800485e:	f000 fc60 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004862:	202c      	movs	r0, #44	; 0x2c
 8004864:	f000 fc77 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004868:	e028      	b.n	80048bc <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM12)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a17      	ldr	r2, [pc, #92]	; (80048cc <HAL_TIM_PWM_MspInit+0xa4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d10f      	bne.n	8004894 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8004876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800487a:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 800487c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004884:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 8004886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
}
 8004892:	e013      	b.n	80048bc <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM15)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0d      	ldr	r2, [pc, #52]	; (80048d0 <HAL_TIM_PWM_MspInit+0xa8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10e      	bne.n	80048bc <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 80048a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048a4:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 80048a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_TIM_PWM_MspInit+0xa0>)
 80048b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
}
 80048bc:	bf00      	nop
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40010400 	.word	0x40010400
 80048c8:	58024400 	.word	0x58024400
 80048cc:	40001800 	.word	0x40001800
 80048d0:	40014000 	.word	0x40014000

080048d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <HAL_TIM_MspPostInit+0x100>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d11f      	bne.n	8004936 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048f6:	4b38      	ldr	r3, [pc, #224]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 80048f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048fc:	4a36      	ldr	r2, [pc, #216]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004906:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004914:	2340      	movs	r3, #64	; 0x40
 8004916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004920:	2300      	movs	r3, #0
 8004922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004924:	2303      	movs	r3, #3
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	4619      	mov	r1, r3
 800492e:	482b      	ldr	r0, [pc, #172]	; (80049dc <HAL_TIM_MspPostInit+0x108>)
 8004930:	f003 fa66 	bl	8007e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004934:	e049      	b.n	80049ca <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM12)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_TIM_MspPostInit+0x10c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d120      	bne.n	8004982 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 8004942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004946:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 8004952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800495e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004964:	2302      	movs	r3, #2
 8004966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004970:	2302      	movs	r3, #2
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	4619      	mov	r1, r3
 800497a:	481a      	ldr	r0, [pc, #104]	; (80049e4 <HAL_TIM_MspPostInit+0x110>)
 800497c:	f003 fa40 	bl	8007e00 <HAL_GPIO_Init>
}
 8004980:	e023      	b.n	80049ca <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_TIM_MspPostInit+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d11e      	bne.n	80049ca <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 800498e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 8004994:	f043 0310 	orr.w	r3, r3, #16
 8004998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_TIM_MspPostInit+0x104>)
 800499e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80049aa:	2360      	movs	r3, #96	; 0x60
 80049ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2302      	movs	r3, #2
 80049b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80049ba:	2304      	movs	r3, #4
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049be:	f107 0314 	add.w	r3, r7, #20
 80049c2:	4619      	mov	r1, r3
 80049c4:	4809      	ldr	r0, [pc, #36]	; (80049ec <HAL_TIM_MspPostInit+0x118>)
 80049c6:	f003 fa1b 	bl	8007e00 <HAL_GPIO_Init>
}
 80049ca:	bf00      	nop
 80049cc:	3728      	adds	r7, #40	; 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40010400 	.word	0x40010400
 80049d8:	58024400 	.word	0x58024400
 80049dc:	58020800 	.word	0x58020800
 80049e0:	40001800 	.word	0x40001800
 80049e4:	58020400 	.word	0x58020400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	58021000 	.word	0x58021000

080049f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0b6      	sub	sp, #216	; 0xd8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a08:	f107 0310 	add.w	r3, r7, #16
 8004a0c:	22b4      	movs	r2, #180	; 0xb4
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f009 fa93 	bl	800df3c <memset>
  if(huart->Instance==USART1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a57      	ldr	r2, [pc, #348]	; (8004b78 <HAL_UART_MspInit+0x188>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 80a7 	bne.w	8004b70 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	4618      	mov	r0, r3
 8004a32:	f004 fb1b 	bl	800906c <HAL_RCCEx_PeriphCLKConfig>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004a3c:	f7ff fd6e 	bl	800451c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a40:	4b4e      	ldr	r3, [pc, #312]	; (8004b7c <HAL_UART_MspInit+0x18c>)
 8004a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a46:	4a4d      	ldr	r2, [pc, #308]	; (8004b7c <HAL_UART_MspInit+0x18c>)
 8004a48:	f043 0310 	orr.w	r3, r3, #16
 8004a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a50:	4b4a      	ldr	r3, [pc, #296]	; (8004b7c <HAL_UART_MspInit+0x18c>)
 8004a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5e:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_UART_MspInit+0x18c>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a64:	4a45      	ldr	r2, [pc, #276]	; (8004b7c <HAL_UART_MspInit+0x18c>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a6e:	4b43      	ldr	r3, [pc, #268]	; (8004b7c <HAL_UART_MspInit+0x18c>)
 8004a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a96:	2307      	movs	r3, #7
 8004a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4837      	ldr	r0, [pc, #220]	; (8004b80 <HAL_UART_MspInit+0x190>)
 8004aa4:	f003 f9ac 	bl	8007e00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004aaa:	4a37      	ldr	r2, [pc, #220]	; (8004b88 <HAL_UART_MspInit+0x198>)
 8004aac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004aae:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004ab0:	2229      	movs	r2, #41	; 0x29
 8004ab2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ab4:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aba:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac0:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ac6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ac8:	4b2e      	ldr	r3, [pc, #184]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ada:	4b2a      	ldr	r3, [pc, #168]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ae0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ae2:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004ae8:	4826      	ldr	r0, [pc, #152]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004aea:	f000 fb4f 	bl	800518c <HAL_DMA_Init>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004af4:	f7ff fd12 	bl	800451c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004afc:	67da      	str	r2, [r3, #124]	; 0x7c
 8004afe:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <HAL_UART_MspInit+0x194>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_UART_MspInit+0x1a0>)
 8004b08:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b0c:	222a      	movs	r2, #42	; 0x2a
 8004b0e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b22:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b3c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b44:	4811      	ldr	r0, [pc, #68]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b46:	f000 fb21 	bl	800518c <HAL_DMA_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004b50:	f7ff fce4 	bl	800451c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b58:	679a      	str	r2, [r3, #120]	; 0x78
 8004b5a:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <HAL_UART_MspInit+0x19c>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b60:	2200      	movs	r2, #0
 8004b62:	2100      	movs	r1, #0
 8004b64:	2025      	movs	r0, #37	; 0x25
 8004b66:	f000 fadc 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b6a:	2025      	movs	r0, #37	; 0x25
 8004b6c:	f000 faf3 	bl	8005156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b70:	bf00      	nop
 8004b72:	37d8      	adds	r7, #216	; 0xd8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	58020000 	.word	0x58020000
 8004b84:	2400102c 	.word	0x2400102c
 8004b88:	40020010 	.word	0x40020010
 8004b8c:	240010a4 	.word	0x240010a4
 8004b90:	40020028 	.word	0x40020028

08004b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b98:	e7fe      	b.n	8004b98 <NMI_Handler+0x4>

08004b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b9e:	e7fe      	b.n	8004b9e <HardFault_Handler+0x4>

08004ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ba4:	e7fe      	b.n	8004ba4 <MemManage_Handler+0x4>

08004ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004baa:	e7fe      	b.n	8004baa <BusFault_Handler+0x4>

08004bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bb0:	e7fe      	b.n	8004bb0 <UsageFault_Handler+0x4>

08004bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004be0:	f000 f9a4 	bl	8004f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004be4:	bf00      	nop
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004bec:	4802      	ldr	r0, [pc, #8]	; (8004bf8 <DMA1_Stream0_IRQHandler+0x10>)
 8004bee:	f001 fdf5 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	2400102c 	.word	0x2400102c

08004bfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c00:	4802      	ldr	r0, [pc, #8]	; (8004c0c <DMA1_Stream1_IRQHandler+0x10>)
 8004c02:	f001 fdeb 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	240010a4 	.word	0x240010a4

08004c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <USART1_IRQHandler+0x10>)
 8004c16:	f007 f95b 	bl	800bed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	24000f9c 	.word	0x24000f9c

08004c24 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004c28:	4803      	ldr	r0, [pc, #12]	; (8004c38 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004c2a:	f006 f8c1 	bl	800adb0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004c2e:	4803      	ldr	r0, [pc, #12]	; (8004c3c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004c30:	f006 f8be 	bl	800adb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004c34:	bf00      	nop
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	24000e6c 	.word	0x24000e6c
 8004c3c:	24000f04 	.word	0x24000f04

08004c40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <TIM7_IRQHandler+0x10>)
 8004c46:	f006 f8b3 	bl	800adb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	24000e20 	.word	0x24000e20

08004c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
	return 1;
 8004c58:	2301      	movs	r3, #1
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <_kill>:

int _kill(int pid, int sig)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c6e:	f009 f92d 	bl	800decc <__errno>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2216      	movs	r2, #22
 8004c76:	601a      	str	r2, [r3, #0]
	return -1;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_exit>:

void _exit (int status)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ffe7 	bl	8004c64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c96:	e7fe      	b.n	8004c96 <_exit+0x12>

08004c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <_sbrk+0x5c>)
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <_sbrk+0x60>)
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <_sbrk+0x64>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <_sbrk+0x64>)
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <_sbrk+0x68>)
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <_sbrk+0x64>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d207      	bcs.n	8004cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cc8:	f009 f900 	bl	800decc <__errno>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	220c      	movs	r2, #12
 8004cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd6:	e009      	b.n	8004cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <_sbrk+0x64>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <_sbrk+0x64>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <_sbrk+0x64>)
 8004ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	24050000 	.word	0x24050000
 8004cf8:	00000400 	.word	0x00000400
 8004cfc:	2400111c 	.word	0x2400111c
 8004d00:	24001138 	.word	0x24001138

08004d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <SystemInit+0xd0>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	4a31      	ldr	r2, [pc, #196]	; (8004dd4 <SystemInit+0xd0>)
 8004d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d18:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <SystemInit+0xd4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d807      	bhi.n	8004d34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d24:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <SystemInit+0xd4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 030f 	bic.w	r3, r3, #15
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <SystemInit+0xd4>)
 8004d2e:	f043 0307 	orr.w	r3, r3, #7
 8004d32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <SystemInit+0xd8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <SystemInit+0xd8>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d40:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <SystemInit+0xd8>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004d46:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <SystemInit+0xd8>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4924      	ldr	r1, [pc, #144]	; (8004ddc <SystemInit+0xd8>)
 8004d4c:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <SystemInit+0xdc>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <SystemInit+0xd4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <SystemInit+0xd4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 030f 	bic.w	r3, r3, #15
 8004d66:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <SystemInit+0xd4>)
 8004d68:	f043 0307 	orr.w	r3, r3, #7
 8004d6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <SystemInit+0xd8>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <SystemInit+0xd8>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004d7a:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <SystemInit+0xd8>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <SystemInit+0xd8>)
 8004d82:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <SystemInit+0xe0>)
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <SystemInit+0xd8>)
 8004d88:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <SystemInit+0xe4>)
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <SystemInit+0xd8>)
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <SystemInit+0xe8>)
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <SystemInit+0xd8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <SystemInit+0xd8>)
 8004d9a:	4a14      	ldr	r2, [pc, #80]	; (8004dec <SystemInit+0xe8>)
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004d9e:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <SystemInit+0xd8>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004da4:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <SystemInit+0xd8>)
 8004da6:	4a11      	ldr	r2, [pc, #68]	; (8004dec <SystemInit+0xe8>)
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <SystemInit+0xd8>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <SystemInit+0xd8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <SystemInit+0xd8>)
 8004db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <SystemInit+0xd8>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <SystemInit+0xec>)
 8004dc4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004dc8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	e000ed00 	.word	0xe000ed00
 8004dd8:	52002000 	.word	0x52002000
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	eaf6ed7f 	.word	0xeaf6ed7f
 8004de4:	02020200 	.word	0x02020200
 8004de8:	01ff0000 	.word	0x01ff0000
 8004dec:	01010280 	.word	0x01010280
 8004df0:	52004000 	.word	0x52004000

08004df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004df8:	f7ff ff84 	bl	8004d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004dfc:	480c      	ldr	r0, [pc, #48]	; (8004e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004dfe:	490d      	ldr	r1, [pc, #52]	; (8004e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e00:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e04:	e002      	b.n	8004e0c <LoopCopyDataInit>

08004e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e0a:	3304      	adds	r3, #4

08004e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e10:	d3f9      	bcc.n	8004e06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e12:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e14:	4c0a      	ldr	r4, [pc, #40]	; (8004e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e18:	e001      	b.n	8004e1e <LoopFillZerobss>

08004e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e1c:	3204      	adds	r2, #4

08004e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e20:	d3fb      	bcc.n	8004e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e22:	f009 f859 	bl	800ded8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e26:	f7fe fe81 	bl	8003b2c <main>
  bx  lr
 8004e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e2c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004e30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004e34:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8004e38:	0800e578 	.word	0x0800e578
  ldr r2, =_sbss
 8004e3c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8004e40:	24001134 	.word	0x24001134

08004e44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e44:	e7fe      	b.n	8004e44 <ADC3_IRQHandler>
	...

08004e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e4e:	2003      	movs	r0, #3
 8004e50:	f000 f95c 	bl	800510c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e54:	f003 ff34 	bl	8008cc0 <HAL_RCC_GetSysClockFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <HAL_Init+0x68>)
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	4913      	ldr	r1, [pc, #76]	; (8004eb4 <HAL_Init+0x6c>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_Init+0x68>)
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_Init+0x6c>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	4a0b      	ldr	r2, [pc, #44]	; (8004eb8 <HAL_Init+0x70>)
 8004e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e8c:	4a0b      	ldr	r2, [pc, #44]	; (8004ebc <HAL_Init+0x74>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e92:	200f      	movs	r0, #15
 8004e94:	f000 f814 	bl	8004ec0 <HAL_InitTick>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e002      	b.n	8004ea8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004ea2:	f7ff fb51 	bl	8004548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	0800e51c 	.word	0x0800e51c
 8004eb8:	24000014 	.word	0x24000014
 8004ebc:	24000010 	.word	0x24000010

08004ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ec8:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <HAL_InitTick+0x60>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e021      	b.n	8004f18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ed4:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_InitTick+0x64>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <HAL_InitTick+0x60>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	4619      	mov	r1, r3
 8004ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f941 	bl	8005172 <HAL_SYSTICK_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00e      	b.n	8004f18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d80a      	bhi.n	8004f16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f00:	2200      	movs	r2, #0
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f08:	f000 f90b 	bl	8005122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f0c:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <HAL_InitTick+0x68>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2400001c 	.word	0x2400001c
 8004f24:	24000010 	.word	0x24000010
 8004f28:	24000018 	.word	0x24000018

08004f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_IncTick+0x20>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_IncTick+0x24>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <HAL_IncTick+0x24>)
 8004f3e:	6013      	str	r3, [r2, #0]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2400001c 	.word	0x2400001c
 8004f50:	24001120 	.word	0x24001120

08004f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return uwTick;
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_GetTick+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	24001120 	.word	0x24001120

08004f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <__NVIC_SetPriorityGrouping+0x40>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f94:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <__NVIC_SetPriorityGrouping+0x40>)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	60d3      	str	r3, [r2, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000ed00 	.word	0xe000ed00
 8004fb0:	05fa0000 	.word	0x05fa0000

08004fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <__NVIC_GetPriorityGrouping+0x18>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 0307 	and.w	r3, r3, #7
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	db0b      	blt.n	8004ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	4907      	ldr	r1, [pc, #28]	; (8005008 <__NVIC_EnableIRQ+0x38>)
 8004fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	e000e100 	.word	0xe000e100

0800500c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	6039      	str	r1, [r7, #0]
 8005016:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	db0a      	blt.n	8005036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	490c      	ldr	r1, [pc, #48]	; (8005058 <__NVIC_SetPriority+0x4c>)
 8005026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800502a:	0112      	lsls	r2, r2, #4
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	440b      	add	r3, r1
 8005030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005034:	e00a      	b.n	800504c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4908      	ldr	r1, [pc, #32]	; (800505c <__NVIC_SetPriority+0x50>)
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	3b04      	subs	r3, #4
 8005044:	0112      	lsls	r2, r2, #4
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	440b      	add	r3, r1
 800504a:	761a      	strb	r2, [r3, #24]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000e100 	.word	0xe000e100
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f1c3 0307 	rsb	r3, r3, #7
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf28      	it	cs
 800507e:	2304      	movcs	r3, #4
 8005080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3304      	adds	r3, #4
 8005086:	2b06      	cmp	r3, #6
 8005088:	d902      	bls.n	8005090 <NVIC_EncodePriority+0x30>
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3b03      	subs	r3, #3
 800508e:	e000      	b.n	8005092 <NVIC_EncodePriority+0x32>
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43da      	mvns	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	401a      	ands	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	43d9      	mvns	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b8:	4313      	orrs	r3, r2
         );
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3724      	adds	r7, #36	; 0x24
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d8:	d301      	bcc.n	80050de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050da:	2301      	movs	r3, #1
 80050dc:	e00f      	b.n	80050fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <SysTick_Config+0x40>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050e6:	210f      	movs	r1, #15
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ec:	f7ff ff8e 	bl	800500c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <SysTick_Config+0x40>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <SysTick_Config+0x40>)
 80050f8:	2207      	movs	r2, #7
 80050fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	e000e010 	.word	0xe000e010

0800510c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff29 	bl	8004f6c <__NVIC_SetPriorityGrouping>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b086      	sub	sp, #24
 8005126:	af00      	add	r7, sp, #0
 8005128:	4603      	mov	r3, r0
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005130:	f7ff ff40 	bl	8004fb4 <__NVIC_GetPriorityGrouping>
 8005134:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff ff90 	bl	8005060 <NVIC_EncodePriority>
 8005140:	4602      	mov	r2, r0
 8005142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ff5f 	bl	800500c <__NVIC_SetPriority>
}
 800514e:	bf00      	nop
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ff33 	bl	8004fd0 <__NVIC_EnableIRQ>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ffa4 	bl	80050c8 <SysTick_Config>
 8005180:	4603      	mov	r3, r0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005194:	f7ff fede 	bl	8004f54 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e314      	b.n	80057ce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a66      	ldr	r2, [pc, #408]	; (8005344 <HAL_DMA_Init+0x1b8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04a      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a65      	ldr	r2, [pc, #404]	; (8005348 <HAL_DMA_Init+0x1bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d045      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a63      	ldr	r2, [pc, #396]	; (800534c <HAL_DMA_Init+0x1c0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d040      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a62      	ldr	r2, [pc, #392]	; (8005350 <HAL_DMA_Init+0x1c4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d03b      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a60      	ldr	r2, [pc, #384]	; (8005354 <HAL_DMA_Init+0x1c8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d036      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a5f      	ldr	r2, [pc, #380]	; (8005358 <HAL_DMA_Init+0x1cc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d031      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a5d      	ldr	r2, [pc, #372]	; (800535c <HAL_DMA_Init+0x1d0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02c      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a5c      	ldr	r2, [pc, #368]	; (8005360 <HAL_DMA_Init+0x1d4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d027      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a5a      	ldr	r2, [pc, #360]	; (8005364 <HAL_DMA_Init+0x1d8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a59      	ldr	r2, [pc, #356]	; (8005368 <HAL_DMA_Init+0x1dc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01d      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a57      	ldr	r2, [pc, #348]	; (800536c <HAL_DMA_Init+0x1e0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a56      	ldr	r2, [pc, #344]	; (8005370 <HAL_DMA_Init+0x1e4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a54      	ldr	r2, [pc, #336]	; (8005374 <HAL_DMA_Init+0x1e8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a53      	ldr	r2, [pc, #332]	; (8005378 <HAL_DMA_Init+0x1ec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a51      	ldr	r2, [pc, #324]	; (800537c <HAL_DMA_Init+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a50      	ldr	r2, [pc, #320]	; (8005380 <HAL_DMA_Init+0x1f4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_DMA_Init+0xbc>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_DMA_Init+0xbe>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 813c 	beq.w	80054c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a37      	ldr	r2, [pc, #220]	; (8005344 <HAL_DMA_Init+0x1b8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d04a      	beq.n	8005300 <HAL_DMA_Init+0x174>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a36      	ldr	r2, [pc, #216]	; (8005348 <HAL_DMA_Init+0x1bc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d045      	beq.n	8005300 <HAL_DMA_Init+0x174>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a34      	ldr	r2, [pc, #208]	; (800534c <HAL_DMA_Init+0x1c0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d040      	beq.n	8005300 <HAL_DMA_Init+0x174>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a33      	ldr	r2, [pc, #204]	; (8005350 <HAL_DMA_Init+0x1c4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d03b      	beq.n	8005300 <HAL_DMA_Init+0x174>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a31      	ldr	r2, [pc, #196]	; (8005354 <HAL_DMA_Init+0x1c8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d036      	beq.n	8005300 <HAL_DMA_Init+0x174>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a30      	ldr	r2, [pc, #192]	; (8005358 <HAL_DMA_Init+0x1cc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d031      	beq.n	8005300 <HAL_DMA_Init+0x174>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2e      	ldr	r2, [pc, #184]	; (800535c <HAL_DMA_Init+0x1d0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02c      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <HAL_DMA_Init+0x1d4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d027      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <HAL_DMA_Init+0x1d8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <HAL_DMA_Init+0x1dc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a28      	ldr	r2, [pc, #160]	; (800536c <HAL_DMA_Init+0x1e0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a27      	ldr	r2, [pc, #156]	; (8005370 <HAL_DMA_Init+0x1e4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a25      	ldr	r2, [pc, #148]	; (8005374 <HAL_DMA_Init+0x1e8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a24      	ldr	r2, [pc, #144]	; (8005378 <HAL_DMA_Init+0x1ec>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <HAL_DMA_Init+0x1f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a21      	ldr	r2, [pc, #132]	; (8005380 <HAL_DMA_Init+0x1f4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d108      	bne.n	8005312 <HAL_DMA_Init+0x186>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e007      	b.n	8005322 <HAL_DMA_Init+0x196>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005322:	e02f      	b.n	8005384 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005324:	f7ff fe16 	bl	8004f54 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b05      	cmp	r3, #5
 8005330:	d928      	bls.n	8005384 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2203      	movs	r2, #3
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e244      	b.n	80057ce <HAL_DMA_Init+0x642>
 8005344:	40020010 	.word	0x40020010
 8005348:	40020028 	.word	0x40020028
 800534c:	40020040 	.word	0x40020040
 8005350:	40020058 	.word	0x40020058
 8005354:	40020070 	.word	0x40020070
 8005358:	40020088 	.word	0x40020088
 800535c:	400200a0 	.word	0x400200a0
 8005360:	400200b8 	.word	0x400200b8
 8005364:	40020410 	.word	0x40020410
 8005368:	40020428 	.word	0x40020428
 800536c:	40020440 	.word	0x40020440
 8005370:	40020458 	.word	0x40020458
 8005374:	40020470 	.word	0x40020470
 8005378:	40020488 	.word	0x40020488
 800537c:	400204a0 	.word	0x400204a0
 8005380:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1c8      	bne.n	8005324 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4b84      	ldr	r3, [pc, #528]	; (80055b0 <HAL_DMA_Init+0x424>)
 800539e:	4013      	ands	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d107      	bne.n	80053e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	4313      	orrs	r3, r2
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b28      	cmp	r3, #40	; 0x28
 80053ee:	d903      	bls.n	80053f8 <HAL_DMA_Init+0x26c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b2e      	cmp	r3, #46	; 0x2e
 80053f6:	d91f      	bls.n	8005438 <HAL_DMA_Init+0x2ac>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b3e      	cmp	r3, #62	; 0x3e
 80053fe:	d903      	bls.n	8005408 <HAL_DMA_Init+0x27c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b42      	cmp	r3, #66	; 0x42
 8005406:	d917      	bls.n	8005438 <HAL_DMA_Init+0x2ac>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b46      	cmp	r3, #70	; 0x46
 800540e:	d903      	bls.n	8005418 <HAL_DMA_Init+0x28c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b48      	cmp	r3, #72	; 0x48
 8005416:	d90f      	bls.n	8005438 <HAL_DMA_Init+0x2ac>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b4e      	cmp	r3, #78	; 0x4e
 800541e:	d903      	bls.n	8005428 <HAL_DMA_Init+0x29c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b52      	cmp	r3, #82	; 0x52
 8005426:	d907      	bls.n	8005438 <HAL_DMA_Init+0x2ac>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b73      	cmp	r3, #115	; 0x73
 800542e:	d905      	bls.n	800543c <HAL_DMA_Init+0x2b0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b77      	cmp	r3, #119	; 0x77
 8005436:	d801      	bhi.n	800543c <HAL_DMA_Init+0x2b0>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_DMA_Init+0x2b2>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005448:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0307 	bic.w	r3, r3, #7
 8005460:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b04      	cmp	r3, #4
 8005472:	d117      	bne.n	80054a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00e      	beq.n	80054a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f002 fb30 	bl	8007aec <DMA_CheckFifoParam>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2240      	movs	r2, #64	; 0x40
 8005496:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e194      	b.n	80057ce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f002 fa6b 	bl	8007988 <DMA_CalcBaseAndBitshift>
 80054b2:	4603      	mov	r3, r0
 80054b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	223f      	movs	r2, #63	; 0x3f
 80054c0:	409a      	lsls	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	e0ca      	b.n	800565e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a39      	ldr	r2, [pc, #228]	; (80055b4 <HAL_DMA_Init+0x428>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a38      	ldr	r2, [pc, #224]	; (80055b8 <HAL_DMA_Init+0x42c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a36      	ldr	r2, [pc, #216]	; (80055bc <HAL_DMA_Init+0x430>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <HAL_DMA_Init+0x434>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <HAL_DMA_Init+0x438>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a32      	ldr	r2, [pc, #200]	; (80055c8 <HAL_DMA_Init+0x43c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a30      	ldr	r2, [pc, #192]	; (80055cc <HAL_DMA_Init+0x440>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_Init+0x38c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2f      	ldr	r2, [pc, #188]	; (80055d0 <HAL_DMA_Init+0x444>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_DMA_Init+0x390>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_DMA_Init+0x392>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8094 	beq.w	800564c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a22      	ldr	r2, [pc, #136]	; (80055b4 <HAL_DMA_Init+0x428>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d021      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <HAL_DMA_Init+0x42c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01c      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1f      	ldr	r2, [pc, #124]	; (80055bc <HAL_DMA_Init+0x430>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d017      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <HAL_DMA_Init+0x434>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d012      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <HAL_DMA_Init+0x438>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00d      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <HAL_DMA_Init+0x43c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d008      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a19      	ldr	r2, [pc, #100]	; (80055cc <HAL_DMA_Init+0x440>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <HAL_DMA_Init+0x3e6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_DMA_Init+0x444>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_DMA_Init+0x448>)
 8005590:	4013      	ands	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d01d      	beq.n	80055d8 <HAL_DMA_Init+0x44c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b80      	cmp	r3, #128	; 0x80
 80055a2:	d102      	bne.n	80055aa <HAL_DMA_Init+0x41e>
 80055a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a8:	e017      	b.n	80055da <HAL_DMA_Init+0x44e>
 80055aa:	2300      	movs	r3, #0
 80055ac:	e015      	b.n	80055da <HAL_DMA_Init+0x44e>
 80055ae:	bf00      	nop
 80055b0:	fe10803f 	.word	0xfe10803f
 80055b4:	58025408 	.word	0x58025408
 80055b8:	5802541c 	.word	0x5802541c
 80055bc:	58025430 	.word	0x58025430
 80055c0:	58025444 	.word	0x58025444
 80055c4:	58025458 	.word	0x58025458
 80055c8:	5802546c 	.word	0x5802546c
 80055cc:	58025480 	.word	0x58025480
 80055d0:	58025494 	.word	0x58025494
 80055d4:	fffe000f 	.word	0xfffe000f
 80055d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68d2      	ldr	r2, [r2, #12]
 80055de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005608:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	4b6e      	ldr	r3, [pc, #440]	; (80057d8 <HAL_DMA_Init+0x64c>)
 8005620:	4413      	add	r3, r2
 8005622:	4a6e      	ldr	r2, [pc, #440]	; (80057dc <HAL_DMA_Init+0x650>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	009a      	lsls	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f002 f9a9 	bl	8007988 <DMA_CalcBaseAndBitshift>
 8005636:	4603      	mov	r3, r0
 8005638:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2201      	movs	r2, #1
 8005644:	409a      	lsls	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	e008      	b.n	800565e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2203      	movs	r2, #3
 8005656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e0b7      	b.n	80057ce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a5f      	ldr	r2, [pc, #380]	; (80057e0 <HAL_DMA_Init+0x654>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d072      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a5d      	ldr	r2, [pc, #372]	; (80057e4 <HAL_DMA_Init+0x658>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d06d      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a5c      	ldr	r2, [pc, #368]	; (80057e8 <HAL_DMA_Init+0x65c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d068      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a5a      	ldr	r2, [pc, #360]	; (80057ec <HAL_DMA_Init+0x660>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d063      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a59      	ldr	r2, [pc, #356]	; (80057f0 <HAL_DMA_Init+0x664>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d05e      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a57      	ldr	r2, [pc, #348]	; (80057f4 <HAL_DMA_Init+0x668>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d059      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a56      	ldr	r2, [pc, #344]	; (80057f8 <HAL_DMA_Init+0x66c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d054      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a54      	ldr	r2, [pc, #336]	; (80057fc <HAL_DMA_Init+0x670>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d04f      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a53      	ldr	r2, [pc, #332]	; (8005800 <HAL_DMA_Init+0x674>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d04a      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a51      	ldr	r2, [pc, #324]	; (8005804 <HAL_DMA_Init+0x678>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d045      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a50      	ldr	r2, [pc, #320]	; (8005808 <HAL_DMA_Init+0x67c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d040      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a4e      	ldr	r2, [pc, #312]	; (800580c <HAL_DMA_Init+0x680>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d03b      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4d      	ldr	r2, [pc, #308]	; (8005810 <HAL_DMA_Init+0x684>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d036      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4b      	ldr	r2, [pc, #300]	; (8005814 <HAL_DMA_Init+0x688>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d031      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4a      	ldr	r2, [pc, #296]	; (8005818 <HAL_DMA_Init+0x68c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d02c      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a48      	ldr	r2, [pc, #288]	; (800581c <HAL_DMA_Init+0x690>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d027      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a47      	ldr	r2, [pc, #284]	; (8005820 <HAL_DMA_Init+0x694>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d022      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a45      	ldr	r2, [pc, #276]	; (8005824 <HAL_DMA_Init+0x698>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01d      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a44      	ldr	r2, [pc, #272]	; (8005828 <HAL_DMA_Init+0x69c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a42      	ldr	r2, [pc, #264]	; (800582c <HAL_DMA_Init+0x6a0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a41      	ldr	r2, [pc, #260]	; (8005830 <HAL_DMA_Init+0x6a4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3f      	ldr	r2, [pc, #252]	; (8005834 <HAL_DMA_Init+0x6a8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3e      	ldr	r2, [pc, #248]	; (8005838 <HAL_DMA_Init+0x6ac>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_DMA_Init+0x5c2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3c      	ldr	r2, [pc, #240]	; (800583c <HAL_DMA_Init+0x6b0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d101      	bne.n	8005752 <HAL_DMA_Init+0x5c6>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_DMA_Init+0x5c8>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d032      	beq.n	80057be <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f002 fa43 	bl	8007be4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b80      	cmp	r3, #128	; 0x80
 8005764:	d102      	bne.n	800576c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005780:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d010      	beq.n	80057ac <HAL_DMA_Init+0x620>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d80c      	bhi.n	80057ac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fac0 	bl	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	e008      	b.n	80057be <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	a7fdabf8 	.word	0xa7fdabf8
 80057dc:	cccccccd 	.word	0xcccccccd
 80057e0:	40020010 	.word	0x40020010
 80057e4:	40020028 	.word	0x40020028
 80057e8:	40020040 	.word	0x40020040
 80057ec:	40020058 	.word	0x40020058
 80057f0:	40020070 	.word	0x40020070
 80057f4:	40020088 	.word	0x40020088
 80057f8:	400200a0 	.word	0x400200a0
 80057fc:	400200b8 	.word	0x400200b8
 8005800:	40020410 	.word	0x40020410
 8005804:	40020428 	.word	0x40020428
 8005808:	40020440 	.word	0x40020440
 800580c:	40020458 	.word	0x40020458
 8005810:	40020470 	.word	0x40020470
 8005814:	40020488 	.word	0x40020488
 8005818:	400204a0 	.word	0x400204a0
 800581c:	400204b8 	.word	0x400204b8
 8005820:	58025408 	.word	0x58025408
 8005824:	5802541c 	.word	0x5802541c
 8005828:	58025430 	.word	0x58025430
 800582c:	58025444 	.word	0x58025444
 8005830:	58025458 	.word	0x58025458
 8005834:	5802546c 	.word	0x5802546c
 8005838:	58025480 	.word	0x58025480
 800583c:	58025494 	.word	0x58025494

08005840 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e226      	b.n	8005caa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_DMA_Start_IT+0x2a>
 8005866:	2302      	movs	r3, #2
 8005868:	e21f      	b.n	8005caa <HAL_DMA_Start_IT+0x46a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	f040 820a 	bne.w	8005c94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a68      	ldr	r2, [pc, #416]	; (8005a34 <HAL_DMA_Start_IT+0x1f4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d04a      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a66      	ldr	r2, [pc, #408]	; (8005a38 <HAL_DMA_Start_IT+0x1f8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d045      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a65      	ldr	r2, [pc, #404]	; (8005a3c <HAL_DMA_Start_IT+0x1fc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d040      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a63      	ldr	r2, [pc, #396]	; (8005a40 <HAL_DMA_Start_IT+0x200>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d03b      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a62      	ldr	r2, [pc, #392]	; (8005a44 <HAL_DMA_Start_IT+0x204>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d036      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a60      	ldr	r2, [pc, #384]	; (8005a48 <HAL_DMA_Start_IT+0x208>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d031      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a5f      	ldr	r2, [pc, #380]	; (8005a4c <HAL_DMA_Start_IT+0x20c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d02c      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5d      	ldr	r2, [pc, #372]	; (8005a50 <HAL_DMA_Start_IT+0x210>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d027      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5c      	ldr	r2, [pc, #368]	; (8005a54 <HAL_DMA_Start_IT+0x214>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5a      	ldr	r2, [pc, #360]	; (8005a58 <HAL_DMA_Start_IT+0x218>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01d      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a59      	ldr	r2, [pc, #356]	; (8005a5c <HAL_DMA_Start_IT+0x21c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a57      	ldr	r2, [pc, #348]	; (8005a60 <HAL_DMA_Start_IT+0x220>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a56      	ldr	r2, [pc, #344]	; (8005a64 <HAL_DMA_Start_IT+0x224>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a54      	ldr	r2, [pc, #336]	; (8005a68 <HAL_DMA_Start_IT+0x228>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a53      	ldr	r2, [pc, #332]	; (8005a6c <HAL_DMA_Start_IT+0x22c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_DMA_Start_IT+0xee>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a51      	ldr	r2, [pc, #324]	; (8005a70 <HAL_DMA_Start_IT+0x230>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <HAL_DMA_Start_IT+0x100>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e007      	b.n	8005950 <HAL_DMA_Start_IT+0x110>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f001 fe6a 	bl	8007630 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a34      	ldr	r2, [pc, #208]	; (8005a34 <HAL_DMA_Start_IT+0x1f4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04a      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a33      	ldr	r2, [pc, #204]	; (8005a38 <HAL_DMA_Start_IT+0x1f8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d045      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a31      	ldr	r2, [pc, #196]	; (8005a3c <HAL_DMA_Start_IT+0x1fc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d040      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a30      	ldr	r2, [pc, #192]	; (8005a40 <HAL_DMA_Start_IT+0x200>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03b      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2e      	ldr	r2, [pc, #184]	; (8005a44 <HAL_DMA_Start_IT+0x204>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d036      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2d      	ldr	r2, [pc, #180]	; (8005a48 <HAL_DMA_Start_IT+0x208>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d031      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <HAL_DMA_Start_IT+0x20c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <HAL_DMA_Start_IT+0x210>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d027      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <HAL_DMA_Start_IT+0x214>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <HAL_DMA_Start_IT+0x218>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a25      	ldr	r2, [pc, #148]	; (8005a5c <HAL_DMA_Start_IT+0x21c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <HAL_DMA_Start_IT+0x220>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a22      	ldr	r2, [pc, #136]	; (8005a64 <HAL_DMA_Start_IT+0x224>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a21      	ldr	r2, [pc, #132]	; (8005a68 <HAL_DMA_Start_IT+0x228>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <HAL_DMA_Start_IT+0x22c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_Start_IT+0x1bc>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <HAL_DMA_Start_IT+0x230>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_DMA_Start_IT+0x1c0>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_DMA_Start_IT+0x1c2>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d036      	beq.n	8005a74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 021e 	bic.w	r2, r3, #30
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0216 	orr.w	r2, r2, #22
 8005a18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d03e      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0208 	orr.w	r2, r2, #8
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e035      	b.n	8005aa0 <HAL_DMA_Start_IT+0x260>
 8005a34:	40020010 	.word	0x40020010
 8005a38:	40020028 	.word	0x40020028
 8005a3c:	40020040 	.word	0x40020040
 8005a40:	40020058 	.word	0x40020058
 8005a44:	40020070 	.word	0x40020070
 8005a48:	40020088 	.word	0x40020088
 8005a4c:	400200a0 	.word	0x400200a0
 8005a50:	400200b8 	.word	0x400200b8
 8005a54:	40020410 	.word	0x40020410
 8005a58:	40020428 	.word	0x40020428
 8005a5c:	40020440 	.word	0x40020440
 8005a60:	40020458 	.word	0x40020458
 8005a64:	40020470 	.word	0x40020470
 8005a68:	40020488 	.word	0x40020488
 8005a6c:	400204a0 	.word	0x400204a0
 8005a70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 020e 	bic.w	r2, r3, #14
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 020a 	orr.w	r2, r2, #10
 8005a86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0204 	orr.w	r2, r2, #4
 8005a9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a83      	ldr	r2, [pc, #524]	; (8005cb4 <HAL_DMA_Start_IT+0x474>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d072      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a82      	ldr	r2, [pc, #520]	; (8005cb8 <HAL_DMA_Start_IT+0x478>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d06d      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a80      	ldr	r2, [pc, #512]	; (8005cbc <HAL_DMA_Start_IT+0x47c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d068      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a7f      	ldr	r2, [pc, #508]	; (8005cc0 <HAL_DMA_Start_IT+0x480>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d063      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a7d      	ldr	r2, [pc, #500]	; (8005cc4 <HAL_DMA_Start_IT+0x484>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d05e      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a7c      	ldr	r2, [pc, #496]	; (8005cc8 <HAL_DMA_Start_IT+0x488>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d059      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a7a      	ldr	r2, [pc, #488]	; (8005ccc <HAL_DMA_Start_IT+0x48c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d054      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a79      	ldr	r2, [pc, #484]	; (8005cd0 <HAL_DMA_Start_IT+0x490>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d04f      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a77      	ldr	r2, [pc, #476]	; (8005cd4 <HAL_DMA_Start_IT+0x494>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d04a      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a76      	ldr	r2, [pc, #472]	; (8005cd8 <HAL_DMA_Start_IT+0x498>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d045      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a74      	ldr	r2, [pc, #464]	; (8005cdc <HAL_DMA_Start_IT+0x49c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d040      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a73      	ldr	r2, [pc, #460]	; (8005ce0 <HAL_DMA_Start_IT+0x4a0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d03b      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a71      	ldr	r2, [pc, #452]	; (8005ce4 <HAL_DMA_Start_IT+0x4a4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d036      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a70      	ldr	r2, [pc, #448]	; (8005ce8 <HAL_DMA_Start_IT+0x4a8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d031      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a6e      	ldr	r2, [pc, #440]	; (8005cec <HAL_DMA_Start_IT+0x4ac>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02c      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6d      	ldr	r2, [pc, #436]	; (8005cf0 <HAL_DMA_Start_IT+0x4b0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d027      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a6b      	ldr	r2, [pc, #428]	; (8005cf4 <HAL_DMA_Start_IT+0x4b4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d022      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6a      	ldr	r2, [pc, #424]	; (8005cf8 <HAL_DMA_Start_IT+0x4b8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d01d      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a68      	ldr	r2, [pc, #416]	; (8005cfc <HAL_DMA_Start_IT+0x4bc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d018      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a67      	ldr	r2, [pc, #412]	; (8005d00 <HAL_DMA_Start_IT+0x4c0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d013      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a65      	ldr	r2, [pc, #404]	; (8005d04 <HAL_DMA_Start_IT+0x4c4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00e      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a64      	ldr	r2, [pc, #400]	; (8005d08 <HAL_DMA_Start_IT+0x4c8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a62      	ldr	r2, [pc, #392]	; (8005d0c <HAL_DMA_Start_IT+0x4cc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_DMA_Start_IT+0x350>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a61      	ldr	r2, [pc, #388]	; (8005d10 <HAL_DMA_Start_IT+0x4d0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_DMA_Start_IT+0x354>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_DMA_Start_IT+0x356>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01a      	beq.n	8005bd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a37      	ldr	r2, [pc, #220]	; (8005cb4 <HAL_DMA_Start_IT+0x474>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d04a      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a36      	ldr	r2, [pc, #216]	; (8005cb8 <HAL_DMA_Start_IT+0x478>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d045      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a34      	ldr	r2, [pc, #208]	; (8005cbc <HAL_DMA_Start_IT+0x47c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d040      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <HAL_DMA_Start_IT+0x480>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d03b      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a31      	ldr	r2, [pc, #196]	; (8005cc4 <HAL_DMA_Start_IT+0x484>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d036      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a30      	ldr	r2, [pc, #192]	; (8005cc8 <HAL_DMA_Start_IT+0x488>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d031      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <HAL_DMA_Start_IT+0x48c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02c      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2d      	ldr	r2, [pc, #180]	; (8005cd0 <HAL_DMA_Start_IT+0x490>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d027      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DMA_Start_IT+0x494>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <HAL_DMA_Start_IT+0x498>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01d      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <HAL_DMA_Start_IT+0x49c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <HAL_DMA_Start_IT+0x4a0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <HAL_DMA_Start_IT+0x4a4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <HAL_DMA_Start_IT+0x4a8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_DMA_Start_IT+0x4ac>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_DMA_Start_IT+0x430>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <HAL_DMA_Start_IT+0x4b0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d108      	bne.n	8005c82 <HAL_DMA_Start_IT+0x442>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e012      	b.n	8005ca8 <HAL_DMA_Start_IT+0x468>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	e009      	b.n	8005ca8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40020010 	.word	0x40020010
 8005cb8:	40020028 	.word	0x40020028
 8005cbc:	40020040 	.word	0x40020040
 8005cc0:	40020058 	.word	0x40020058
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	40020088 	.word	0x40020088
 8005ccc:	400200a0 	.word	0x400200a0
 8005cd0:	400200b8 	.word	0x400200b8
 8005cd4:	40020410 	.word	0x40020410
 8005cd8:	40020428 	.word	0x40020428
 8005cdc:	40020440 	.word	0x40020440
 8005ce0:	40020458 	.word	0x40020458
 8005ce4:	40020470 	.word	0x40020470
 8005ce8:	40020488 	.word	0x40020488
 8005cec:	400204a0 	.word	0x400204a0
 8005cf0:	400204b8 	.word	0x400204b8
 8005cf4:	58025408 	.word	0x58025408
 8005cf8:	5802541c 	.word	0x5802541c
 8005cfc:	58025430 	.word	0x58025430
 8005d00:	58025444 	.word	0x58025444
 8005d04:	58025458 	.word	0x58025458
 8005d08:	5802546c 	.word	0x5802546c
 8005d0c:	58025480 	.word	0x58025480
 8005d10:	58025494 	.word	0x58025494

08005d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d1c:	f7ff f91a 	bl	8004f54 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e2dc      	b.n	80062e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d008      	beq.n	8005d4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e2cd      	b.n	80062e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a76      	ldr	r2, [pc, #472]	; (8005f28 <HAL_DMA_Abort+0x214>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d04a      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a74      	ldr	r2, [pc, #464]	; (8005f2c <HAL_DMA_Abort+0x218>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d045      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a73      	ldr	r2, [pc, #460]	; (8005f30 <HAL_DMA_Abort+0x21c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d040      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a71      	ldr	r2, [pc, #452]	; (8005f34 <HAL_DMA_Abort+0x220>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d03b      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a70      	ldr	r2, [pc, #448]	; (8005f38 <HAL_DMA_Abort+0x224>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d036      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a6e      	ldr	r2, [pc, #440]	; (8005f3c <HAL_DMA_Abort+0x228>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d031      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6d      	ldr	r2, [pc, #436]	; (8005f40 <HAL_DMA_Abort+0x22c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d02c      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6b      	ldr	r2, [pc, #428]	; (8005f44 <HAL_DMA_Abort+0x230>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d027      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6a      	ldr	r2, [pc, #424]	; (8005f48 <HAL_DMA_Abort+0x234>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d022      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a68      	ldr	r2, [pc, #416]	; (8005f4c <HAL_DMA_Abort+0x238>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a67      	ldr	r2, [pc, #412]	; (8005f50 <HAL_DMA_Abort+0x23c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a65      	ldr	r2, [pc, #404]	; (8005f54 <HAL_DMA_Abort+0x240>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a64      	ldr	r2, [pc, #400]	; (8005f58 <HAL_DMA_Abort+0x244>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a62      	ldr	r2, [pc, #392]	; (8005f5c <HAL_DMA_Abort+0x248>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a61      	ldr	r2, [pc, #388]	; (8005f60 <HAL_DMA_Abort+0x24c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_DMA_Abort+0xd6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5f      	ldr	r2, [pc, #380]	; (8005f64 <HAL_DMA_Abort+0x250>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <HAL_DMA_Abort+0xda>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <HAL_DMA_Abort+0xdc>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d013      	beq.n	8005e1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 021e 	bic.w	r2, r2, #30
 8005e02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e00a      	b.n	8005e32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 020e 	bic.w	r2, r2, #14
 8005e2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a3c      	ldr	r2, [pc, #240]	; (8005f28 <HAL_DMA_Abort+0x214>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d072      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a3a      	ldr	r2, [pc, #232]	; (8005f2c <HAL_DMA_Abort+0x218>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d06d      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a39      	ldr	r2, [pc, #228]	; (8005f30 <HAL_DMA_Abort+0x21c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d068      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a37      	ldr	r2, [pc, #220]	; (8005f34 <HAL_DMA_Abort+0x220>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d063      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a36      	ldr	r2, [pc, #216]	; (8005f38 <HAL_DMA_Abort+0x224>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d05e      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a34      	ldr	r2, [pc, #208]	; (8005f3c <HAL_DMA_Abort+0x228>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d059      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a33      	ldr	r2, [pc, #204]	; (8005f40 <HAL_DMA_Abort+0x22c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d054      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a31      	ldr	r2, [pc, #196]	; (8005f44 <HAL_DMA_Abort+0x230>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04f      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <HAL_DMA_Abort+0x234>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d04a      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2e      	ldr	r2, [pc, #184]	; (8005f4c <HAL_DMA_Abort+0x238>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d045      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <HAL_DMA_Abort+0x23c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d040      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <HAL_DMA_Abort+0x240>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d03b      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <HAL_DMA_Abort+0x244>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d036      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <HAL_DMA_Abort+0x248>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d031      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a27      	ldr	r2, [pc, #156]	; (8005f60 <HAL_DMA_Abort+0x24c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d02c      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a25      	ldr	r2, [pc, #148]	; (8005f64 <HAL_DMA_Abort+0x250>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d027      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <HAL_DMA_Abort+0x254>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <HAL_DMA_Abort+0x258>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_DMA_Abort+0x25c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_DMA_Abort+0x260>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_DMA_Abort+0x264>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_DMA_Abort+0x268>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_DMA_Abort+0x26c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_DMA_Abort+0x20e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_DMA_Abort+0x270>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d132      	bne.n	8005f88 <HAL_DMA_Abort+0x274>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e031      	b.n	8005f8a <HAL_DMA_Abort+0x276>
 8005f26:	bf00      	nop
 8005f28:	40020010 	.word	0x40020010
 8005f2c:	40020028 	.word	0x40020028
 8005f30:	40020040 	.word	0x40020040
 8005f34:	40020058 	.word	0x40020058
 8005f38:	40020070 	.word	0x40020070
 8005f3c:	40020088 	.word	0x40020088
 8005f40:	400200a0 	.word	0x400200a0
 8005f44:	400200b8 	.word	0x400200b8
 8005f48:	40020410 	.word	0x40020410
 8005f4c:	40020428 	.word	0x40020428
 8005f50:	40020440 	.word	0x40020440
 8005f54:	40020458 	.word	0x40020458
 8005f58:	40020470 	.word	0x40020470
 8005f5c:	40020488 	.word	0x40020488
 8005f60:	400204a0 	.word	0x400204a0
 8005f64:	400204b8 	.word	0x400204b8
 8005f68:	58025408 	.word	0x58025408
 8005f6c:	5802541c 	.word	0x5802541c
 8005f70:	58025430 	.word	0x58025430
 8005f74:	58025444 	.word	0x58025444
 8005f78:	58025458 	.word	0x58025458
 8005f7c:	5802546c 	.word	0x5802546c
 8005f80:	58025480 	.word	0x58025480
 8005f84:	58025494 	.word	0x58025494
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a6d      	ldr	r2, [pc, #436]	; (8006158 <HAL_DMA_Abort+0x444>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d04a      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a6b      	ldr	r2, [pc, #428]	; (800615c <HAL_DMA_Abort+0x448>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d045      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6a      	ldr	r2, [pc, #424]	; (8006160 <HAL_DMA_Abort+0x44c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d040      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a68      	ldr	r2, [pc, #416]	; (8006164 <HAL_DMA_Abort+0x450>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d03b      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a67      	ldr	r2, [pc, #412]	; (8006168 <HAL_DMA_Abort+0x454>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d036      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a65      	ldr	r2, [pc, #404]	; (800616c <HAL_DMA_Abort+0x458>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d031      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a64      	ldr	r2, [pc, #400]	; (8006170 <HAL_DMA_Abort+0x45c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d02c      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a62      	ldr	r2, [pc, #392]	; (8006174 <HAL_DMA_Abort+0x460>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d027      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a61      	ldr	r2, [pc, #388]	; (8006178 <HAL_DMA_Abort+0x464>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5f      	ldr	r2, [pc, #380]	; (800617c <HAL_DMA_Abort+0x468>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01d      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a5e      	ldr	r2, [pc, #376]	; (8006180 <HAL_DMA_Abort+0x46c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a5c      	ldr	r2, [pc, #368]	; (8006184 <HAL_DMA_Abort+0x470>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a5b      	ldr	r2, [pc, #364]	; (8006188 <HAL_DMA_Abort+0x474>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a59      	ldr	r2, [pc, #356]	; (800618c <HAL_DMA_Abort+0x478>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a58      	ldr	r2, [pc, #352]	; (8006190 <HAL_DMA_Abort+0x47c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_DMA_Abort+0x32a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a56      	ldr	r2, [pc, #344]	; (8006194 <HAL_DMA_Abort+0x480>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d108      	bne.n	8006050 <HAL_DMA_Abort+0x33c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e007      	b.n	8006060 <HAL_DMA_Abort+0x34c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006060:	e013      	b.n	800608a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006062:	f7fe ff77 	bl	8004f54 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b05      	cmp	r3, #5
 800606e:	d90c      	bls.n	800608a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2203      	movs	r2, #3
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e12d      	b.n	80062e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2f      	ldr	r2, [pc, #188]	; (8006158 <HAL_DMA_Abort+0x444>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d04a      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2d      	ldr	r2, [pc, #180]	; (800615c <HAL_DMA_Abort+0x448>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d045      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a2c      	ldr	r2, [pc, #176]	; (8006160 <HAL_DMA_Abort+0x44c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d040      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <HAL_DMA_Abort+0x450>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d03b      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a29      	ldr	r2, [pc, #164]	; (8006168 <HAL_DMA_Abort+0x454>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d036      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a27      	ldr	r2, [pc, #156]	; (800616c <HAL_DMA_Abort+0x458>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d031      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a26      	ldr	r2, [pc, #152]	; (8006170 <HAL_DMA_Abort+0x45c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d02c      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <HAL_DMA_Abort+0x460>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d027      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a23      	ldr	r2, [pc, #140]	; (8006178 <HAL_DMA_Abort+0x464>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d022      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a21      	ldr	r2, [pc, #132]	; (800617c <HAL_DMA_Abort+0x468>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01d      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a20      	ldr	r2, [pc, #128]	; (8006180 <HAL_DMA_Abort+0x46c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d018      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_DMA_Abort+0x470>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_DMA_Abort+0x474>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_DMA_Abort+0x478>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1a      	ldr	r2, [pc, #104]	; (8006190 <HAL_DMA_Abort+0x47c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_DMA_Abort+0x422>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a18      	ldr	r2, [pc, #96]	; (8006194 <HAL_DMA_Abort+0x480>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <HAL_DMA_Abort+0x426>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_DMA_Abort+0x428>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d02b      	beq.n	8006198 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006144:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	223f      	movs	r2, #63	; 0x3f
 8006150:	409a      	lsls	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	609a      	str	r2, [r3, #8]
 8006156:	e02a      	b.n	80061ae <HAL_DMA_Abort+0x49a>
 8006158:	40020010 	.word	0x40020010
 800615c:	40020028 	.word	0x40020028
 8006160:	40020040 	.word	0x40020040
 8006164:	40020058 	.word	0x40020058
 8006168:	40020070 	.word	0x40020070
 800616c:	40020088 	.word	0x40020088
 8006170:	400200a0 	.word	0x400200a0
 8006174:	400200b8 	.word	0x400200b8
 8006178:	40020410 	.word	0x40020410
 800617c:	40020428 	.word	0x40020428
 8006180:	40020440 	.word	0x40020440
 8006184:	40020458 	.word	0x40020458
 8006188:	40020470 	.word	0x40020470
 800618c:	40020488 	.word	0x40020488
 8006190:	400204a0 	.word	0x400204a0
 8006194:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2201      	movs	r2, #1
 80061a8:	409a      	lsls	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4f      	ldr	r2, [pc, #316]	; (80062f0 <HAL_DMA_Abort+0x5dc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d072      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a4d      	ldr	r2, [pc, #308]	; (80062f4 <HAL_DMA_Abort+0x5e0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d06d      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a4c      	ldr	r2, [pc, #304]	; (80062f8 <HAL_DMA_Abort+0x5e4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d068      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a4a      	ldr	r2, [pc, #296]	; (80062fc <HAL_DMA_Abort+0x5e8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d063      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a49      	ldr	r2, [pc, #292]	; (8006300 <HAL_DMA_Abort+0x5ec>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d05e      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a47      	ldr	r2, [pc, #284]	; (8006304 <HAL_DMA_Abort+0x5f0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d059      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a46      	ldr	r2, [pc, #280]	; (8006308 <HAL_DMA_Abort+0x5f4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d054      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a44      	ldr	r2, [pc, #272]	; (800630c <HAL_DMA_Abort+0x5f8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d04f      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a43      	ldr	r2, [pc, #268]	; (8006310 <HAL_DMA_Abort+0x5fc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d04a      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a41      	ldr	r2, [pc, #260]	; (8006314 <HAL_DMA_Abort+0x600>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d045      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a40      	ldr	r2, [pc, #256]	; (8006318 <HAL_DMA_Abort+0x604>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d040      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a3e      	ldr	r2, [pc, #248]	; (800631c <HAL_DMA_Abort+0x608>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d03b      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3d      	ldr	r2, [pc, #244]	; (8006320 <HAL_DMA_Abort+0x60c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d036      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <HAL_DMA_Abort+0x610>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d031      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <HAL_DMA_Abort+0x614>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02c      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a38      	ldr	r2, [pc, #224]	; (800632c <HAL_DMA_Abort+0x618>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d027      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a37      	ldr	r2, [pc, #220]	; (8006330 <HAL_DMA_Abort+0x61c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a35      	ldr	r2, [pc, #212]	; (8006334 <HAL_DMA_Abort+0x620>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a34      	ldr	r2, [pc, #208]	; (8006338 <HAL_DMA_Abort+0x624>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a32      	ldr	r2, [pc, #200]	; (800633c <HAL_DMA_Abort+0x628>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a31      	ldr	r2, [pc, #196]	; (8006340 <HAL_DMA_Abort+0x62c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <HAL_DMA_Abort+0x630>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2e      	ldr	r2, [pc, #184]	; (8006348 <HAL_DMA_Abort+0x634>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_DMA_Abort+0x58a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a2c      	ldr	r2, [pc, #176]	; (800634c <HAL_DMA_Abort+0x638>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d101      	bne.n	80062a2 <HAL_DMA_Abort+0x58e>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <HAL_DMA_Abort+0x590>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d015      	beq.n	80062d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8
 8006330:	58025408 	.word	0x58025408
 8006334:	5802541c 	.word	0x5802541c
 8006338:	58025430 	.word	0x58025430
 800633c:	58025444 	.word	0x58025444
 8006340:	58025458 	.word	0x58025458
 8006344:	5802546c 	.word	0x5802546c
 8006348:	58025480 	.word	0x58025480
 800634c:	58025494 	.word	0x58025494

08006350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e237      	b.n	80067d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d004      	beq.n	8006378 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2280      	movs	r2, #128	; 0x80
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e22c      	b.n	80067d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5c      	ldr	r2, [pc, #368]	; (80064f0 <HAL_DMA_Abort_IT+0x1a0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d04a      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a5b      	ldr	r2, [pc, #364]	; (80064f4 <HAL_DMA_Abort_IT+0x1a4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d045      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a59      	ldr	r2, [pc, #356]	; (80064f8 <HAL_DMA_Abort_IT+0x1a8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d040      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a58      	ldr	r2, [pc, #352]	; (80064fc <HAL_DMA_Abort_IT+0x1ac>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d03b      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a56      	ldr	r2, [pc, #344]	; (8006500 <HAL_DMA_Abort_IT+0x1b0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d036      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a55      	ldr	r2, [pc, #340]	; (8006504 <HAL_DMA_Abort_IT+0x1b4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d031      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a53      	ldr	r2, [pc, #332]	; (8006508 <HAL_DMA_Abort_IT+0x1b8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d02c      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a52      	ldr	r2, [pc, #328]	; (800650c <HAL_DMA_Abort_IT+0x1bc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d027      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a50      	ldr	r2, [pc, #320]	; (8006510 <HAL_DMA_Abort_IT+0x1c0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d022      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a4f      	ldr	r2, [pc, #316]	; (8006514 <HAL_DMA_Abort_IT+0x1c4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d01d      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a4d      	ldr	r2, [pc, #308]	; (8006518 <HAL_DMA_Abort_IT+0x1c8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a4c      	ldr	r2, [pc, #304]	; (800651c <HAL_DMA_Abort_IT+0x1cc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a4a      	ldr	r2, [pc, #296]	; (8006520 <HAL_DMA_Abort_IT+0x1d0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a49      	ldr	r2, [pc, #292]	; (8006524 <HAL_DMA_Abort_IT+0x1d4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a47      	ldr	r2, [pc, #284]	; (8006528 <HAL_DMA_Abort_IT+0x1d8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_DMA_Abort_IT+0xc8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a46      	ldr	r2, [pc, #280]	; (800652c <HAL_DMA_Abort_IT+0x1dc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d101      	bne.n	800641c <HAL_DMA_Abort_IT+0xcc>
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <HAL_DMA_Abort_IT+0xce>
 800641c:	2300      	movs	r3, #0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8086 	beq.w	8006530 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2204      	movs	r2, #4
 8006428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <HAL_DMA_Abort_IT+0x1a0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d04a      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a2e      	ldr	r2, [pc, #184]	; (80064f4 <HAL_DMA_Abort_IT+0x1a4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d045      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2c      	ldr	r2, [pc, #176]	; (80064f8 <HAL_DMA_Abort_IT+0x1a8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d040      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2b      	ldr	r2, [pc, #172]	; (80064fc <HAL_DMA_Abort_IT+0x1ac>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d03b      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a29      	ldr	r2, [pc, #164]	; (8006500 <HAL_DMA_Abort_IT+0x1b0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d036      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a28      	ldr	r2, [pc, #160]	; (8006504 <HAL_DMA_Abort_IT+0x1b4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d031      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a26      	ldr	r2, [pc, #152]	; (8006508 <HAL_DMA_Abort_IT+0x1b8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d02c      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a25      	ldr	r2, [pc, #148]	; (800650c <HAL_DMA_Abort_IT+0x1bc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d027      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a23      	ldr	r2, [pc, #140]	; (8006510 <HAL_DMA_Abort_IT+0x1c0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d022      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a22      	ldr	r2, [pc, #136]	; (8006514 <HAL_DMA_Abort_IT+0x1c4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d01d      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a20      	ldr	r2, [pc, #128]	; (8006518 <HAL_DMA_Abort_IT+0x1c8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d018      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1f      	ldr	r2, [pc, #124]	; (800651c <HAL_DMA_Abort_IT+0x1cc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d013      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_DMA_Abort_IT+0x1d0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00e      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <HAL_DMA_Abort_IT+0x1d4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d009      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1a      	ldr	r2, [pc, #104]	; (8006528 <HAL_DMA_Abort_IT+0x1d8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_DMA_Abort_IT+0x17c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a19      	ldr	r2, [pc, #100]	; (800652c <HAL_DMA_Abort_IT+0x1dc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d108      	bne.n	80064de <HAL_DMA_Abort_IT+0x18e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e178      	b.n	80067d0 <HAL_DMA_Abort_IT+0x480>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e16f      	b.n	80067d0 <HAL_DMA_Abort_IT+0x480>
 80064f0:	40020010 	.word	0x40020010
 80064f4:	40020028 	.word	0x40020028
 80064f8:	40020040 	.word	0x40020040
 80064fc:	40020058 	.word	0x40020058
 8006500:	40020070 	.word	0x40020070
 8006504:	40020088 	.word	0x40020088
 8006508:	400200a0 	.word	0x400200a0
 800650c:	400200b8 	.word	0x400200b8
 8006510:	40020410 	.word	0x40020410
 8006514:	40020428 	.word	0x40020428
 8006518:	40020440 	.word	0x40020440
 800651c:	40020458 	.word	0x40020458
 8006520:	40020470 	.word	0x40020470
 8006524:	40020488 	.word	0x40020488
 8006528:	400204a0 	.word	0x400204a0
 800652c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 020e 	bic.w	r2, r2, #14
 800653e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a6c      	ldr	r2, [pc, #432]	; (80066f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d04a      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a6b      	ldr	r2, [pc, #428]	; (80066fc <HAL_DMA_Abort_IT+0x3ac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d045      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a69      	ldr	r2, [pc, #420]	; (8006700 <HAL_DMA_Abort_IT+0x3b0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d040      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a68      	ldr	r2, [pc, #416]	; (8006704 <HAL_DMA_Abort_IT+0x3b4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d03b      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a66      	ldr	r2, [pc, #408]	; (8006708 <HAL_DMA_Abort_IT+0x3b8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d036      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a65      	ldr	r2, [pc, #404]	; (800670c <HAL_DMA_Abort_IT+0x3bc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d031      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a63      	ldr	r2, [pc, #396]	; (8006710 <HAL_DMA_Abort_IT+0x3c0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d02c      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a62      	ldr	r2, [pc, #392]	; (8006714 <HAL_DMA_Abort_IT+0x3c4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d027      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a60      	ldr	r2, [pc, #384]	; (8006718 <HAL_DMA_Abort_IT+0x3c8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d022      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a5f      	ldr	r2, [pc, #380]	; (800671c <HAL_DMA_Abort_IT+0x3cc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d01d      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a5d      	ldr	r2, [pc, #372]	; (8006720 <HAL_DMA_Abort_IT+0x3d0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d018      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a5c      	ldr	r2, [pc, #368]	; (8006724 <HAL_DMA_Abort_IT+0x3d4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5a      	ldr	r2, [pc, #360]	; (8006728 <HAL_DMA_Abort_IT+0x3d8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00e      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a59      	ldr	r2, [pc, #356]	; (800672c <HAL_DMA_Abort_IT+0x3dc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d009      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a57      	ldr	r2, [pc, #348]	; (8006730 <HAL_DMA_Abort_IT+0x3e0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_DMA_Abort_IT+0x290>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a56      	ldr	r2, [pc, #344]	; (8006734 <HAL_DMA_Abort_IT+0x3e4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <HAL_DMA_Abort_IT+0x2a2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e007      	b.n	8006602 <HAL_DMA_Abort_IT+0x2b2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0201 	bic.w	r2, r2, #1
 8006600:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a3c      	ldr	r2, [pc, #240]	; (80066f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d072      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3a      	ldr	r2, [pc, #232]	; (80066fc <HAL_DMA_Abort_IT+0x3ac>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d06d      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a39      	ldr	r2, [pc, #228]	; (8006700 <HAL_DMA_Abort_IT+0x3b0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d068      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a37      	ldr	r2, [pc, #220]	; (8006704 <HAL_DMA_Abort_IT+0x3b4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d063      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a36      	ldr	r2, [pc, #216]	; (8006708 <HAL_DMA_Abort_IT+0x3b8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d05e      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a34      	ldr	r2, [pc, #208]	; (800670c <HAL_DMA_Abort_IT+0x3bc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d059      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a33      	ldr	r2, [pc, #204]	; (8006710 <HAL_DMA_Abort_IT+0x3c0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d054      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a31      	ldr	r2, [pc, #196]	; (8006714 <HAL_DMA_Abort_IT+0x3c4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d04f      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a30      	ldr	r2, [pc, #192]	; (8006718 <HAL_DMA_Abort_IT+0x3c8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2e      	ldr	r2, [pc, #184]	; (800671c <HAL_DMA_Abort_IT+0x3cc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a2d      	ldr	r2, [pc, #180]	; (8006720 <HAL_DMA_Abort_IT+0x3d0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2b      	ldr	r2, [pc, #172]	; (8006724 <HAL_DMA_Abort_IT+0x3d4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <HAL_DMA_Abort_IT+0x3d8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a28      	ldr	r2, [pc, #160]	; (800672c <HAL_DMA_Abort_IT+0x3dc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a27      	ldr	r2, [pc, #156]	; (8006730 <HAL_DMA_Abort_IT+0x3e0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a25      	ldr	r2, [pc, #148]	; (8006734 <HAL_DMA_Abort_IT+0x3e4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a24      	ldr	r2, [pc, #144]	; (8006738 <HAL_DMA_Abort_IT+0x3e8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a22      	ldr	r2, [pc, #136]	; (800673c <HAL_DMA_Abort_IT+0x3ec>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a21      	ldr	r2, [pc, #132]	; (8006740 <HAL_DMA_Abort_IT+0x3f0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <HAL_DMA_Abort_IT+0x3f4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <HAL_DMA_Abort_IT+0x3f8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1c      	ldr	r2, [pc, #112]	; (800674c <HAL_DMA_Abort_IT+0x3fc>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <HAL_DMA_Abort_IT+0x400>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_Abort_IT+0x3a2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a19      	ldr	r2, [pc, #100]	; (8006754 <HAL_DMA_Abort_IT+0x404>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d132      	bne.n	8006758 <HAL_DMA_Abort_IT+0x408>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e031      	b.n	800675a <HAL_DMA_Abort_IT+0x40a>
 80066f6:	bf00      	nop
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	58025408 	.word	0x58025408
 800673c:	5802541c 	.word	0x5802541c
 8006740:	58025430 	.word	0x58025430
 8006744:	58025444 	.word	0x58025444
 8006748:	58025458 	.word	0x58025458
 800674c:	5802546c 	.word	0x5802546c
 8006750:	58025480 	.word	0x58025480
 8006754:	58025494 	.word	0x58025494
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d028      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800676c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	2201      	movs	r2, #1
 800677e:	409a      	lsls	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800678c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00c      	beq.n	80067b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop

080067dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067e8:	4b67      	ldr	r3, [pc, #412]	; (8006988 <HAL_DMA_IRQHandler+0x1ac>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a67      	ldr	r2, [pc, #412]	; (800698c <HAL_DMA_IRQHandler+0x1b0>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	0a9b      	lsrs	r3, r3, #10
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006800:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a5f      	ldr	r2, [pc, #380]	; (8006990 <HAL_DMA_IRQHandler+0x1b4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d04a      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5d      	ldr	r2, [pc, #372]	; (8006994 <HAL_DMA_IRQHandler+0x1b8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d045      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a5c      	ldr	r2, [pc, #368]	; (8006998 <HAL_DMA_IRQHandler+0x1bc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d040      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a5a      	ldr	r2, [pc, #360]	; (800699c <HAL_DMA_IRQHandler+0x1c0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d03b      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a59      	ldr	r2, [pc, #356]	; (80069a0 <HAL_DMA_IRQHandler+0x1c4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d036      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a57      	ldr	r2, [pc, #348]	; (80069a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d031      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a56      	ldr	r2, [pc, #344]	; (80069a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d02c      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a54      	ldr	r2, [pc, #336]	; (80069ac <HAL_DMA_IRQHandler+0x1d0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d027      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a53      	ldr	r2, [pc, #332]	; (80069b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a51      	ldr	r2, [pc, #324]	; (80069b4 <HAL_DMA_IRQHandler+0x1d8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01d      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a50      	ldr	r2, [pc, #320]	; (80069b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4e      	ldr	r2, [pc, #312]	; (80069bc <HAL_DMA_IRQHandler+0x1e0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a4d      	ldr	r2, [pc, #308]	; (80069c0 <HAL_DMA_IRQHandler+0x1e4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a4b      	ldr	r2, [pc, #300]	; (80069c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4a      	ldr	r2, [pc, #296]	; (80069c8 <HAL_DMA_IRQHandler+0x1ec>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a48      	ldr	r2, [pc, #288]	; (80069cc <HAL_DMA_IRQHandler+0x1f0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <HAL_DMA_IRQHandler+0xd6>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_DMA_IRQHandler+0xd8>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 842b 	beq.w	8007110 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2208      	movs	r2, #8
 80068c4:	409a      	lsls	r2, r3
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80a2 	beq.w	8006a14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2e      	ldr	r2, [pc, #184]	; (8006990 <HAL_DMA_IRQHandler+0x1b4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d04a      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <HAL_DMA_IRQHandler+0x1b8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d045      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2b      	ldr	r2, [pc, #172]	; (8006998 <HAL_DMA_IRQHandler+0x1bc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d040      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a2a      	ldr	r2, [pc, #168]	; (800699c <HAL_DMA_IRQHandler+0x1c0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d03b      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <HAL_DMA_IRQHandler+0x1c4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d036      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d031      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a25      	ldr	r2, [pc, #148]	; (80069a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d02c      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a24      	ldr	r2, [pc, #144]	; (80069ac <HAL_DMA_IRQHandler+0x1d0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d027      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_DMA_IRQHandler+0x1dc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <HAL_DMA_IRQHandler+0x1e0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_DMA_IRQHandler+0x1e4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_DMA_IRQHandler+0x1f0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d12f      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x1f4>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e02e      	b.n	80069e4 <HAL_DMA_IRQHandler+0x208>
 8006986:	bf00      	nop
 8006988:	24000010 	.word	0x24000010
 800698c:	1b4e81b5 	.word	0x1b4e81b5
 8006990:	40020010 	.word	0x40020010
 8006994:	40020028 	.word	0x40020028
 8006998:	40020040 	.word	0x40020040
 800699c:	40020058 	.word	0x40020058
 80069a0:	40020070 	.word	0x40020070
 80069a4:	40020088 	.word	0x40020088
 80069a8:	400200a0 	.word	0x400200a0
 80069ac:	400200b8 	.word	0x400200b8
 80069b0:	40020410 	.word	0x40020410
 80069b4:	40020428 	.word	0x40020428
 80069b8:	40020440 	.word	0x40020440
 80069bc:	40020458 	.word	0x40020458
 80069c0:	40020470 	.word	0x40020470
 80069c4:	40020488 	.word	0x40020488
 80069c8:	400204a0 	.word	0x400204a0
 80069cc:	400204b8 	.word	0x400204b8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bf14      	ite	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	2300      	moveq	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d015      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0204 	bic.w	r2, r2, #4
 80069f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	2208      	movs	r2, #8
 8006a02:	409a      	lsls	r2, r3
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d06e      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a69      	ldr	r2, [pc, #420]	; (8006bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d04a      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a67      	ldr	r2, [pc, #412]	; (8006bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d045      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a66      	ldr	r2, [pc, #408]	; (8006bdc <HAL_DMA_IRQHandler+0x400>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d040      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a64      	ldr	r2, [pc, #400]	; (8006be0 <HAL_DMA_IRQHandler+0x404>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d03b      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a63      	ldr	r2, [pc, #396]	; (8006be4 <HAL_DMA_IRQHandler+0x408>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d036      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a61      	ldr	r2, [pc, #388]	; (8006be8 <HAL_DMA_IRQHandler+0x40c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d031      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a60      	ldr	r2, [pc, #384]	; (8006bec <HAL_DMA_IRQHandler+0x410>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d02c      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a5e      	ldr	r2, [pc, #376]	; (8006bf0 <HAL_DMA_IRQHandler+0x414>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d027      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a5d      	ldr	r2, [pc, #372]	; (8006bf4 <HAL_DMA_IRQHandler+0x418>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d022      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5b      	ldr	r2, [pc, #364]	; (8006bf8 <HAL_DMA_IRQHandler+0x41c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01d      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a5a      	ldr	r2, [pc, #360]	; (8006bfc <HAL_DMA_IRQHandler+0x420>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d018      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a58      	ldr	r2, [pc, #352]	; (8006c00 <HAL_DMA_IRQHandler+0x424>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d013      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a57      	ldr	r2, [pc, #348]	; (8006c04 <HAL_DMA_IRQHandler+0x428>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a55      	ldr	r2, [pc, #340]	; (8006c08 <HAL_DMA_IRQHandler+0x42c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d009      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a54      	ldr	r2, [pc, #336]	; (8006c0c <HAL_DMA_IRQHandler+0x430>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a52      	ldr	r2, [pc, #328]	; (8006c10 <HAL_DMA_IRQHandler+0x434>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_DMA_IRQHandler+0x304>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	e003      	b.n	8006ae8 <HAL_DMA_IRQHandler+0x30c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00d      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	2201      	movs	r2, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b00:	f043 0202 	orr.w	r2, r3, #2
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2204      	movs	r2, #4
 8006b12:	409a      	lsls	r2, r3
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 808f 	beq.w	8006c3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a29      	ldr	r2, [pc, #164]	; (8006bdc <HAL_DMA_IRQHandler+0x400>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <HAL_DMA_IRQHandler+0x404>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <HAL_DMA_IRQHandler+0x408>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a24      	ldr	r2, [pc, #144]	; (8006be8 <HAL_DMA_IRQHandler+0x40c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a23      	ldr	r2, [pc, #140]	; (8006bec <HAL_DMA_IRQHandler+0x410>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <HAL_DMA_IRQHandler+0x414>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <HAL_DMA_IRQHandler+0x418>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_DMA_IRQHandler+0x41c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <HAL_DMA_IRQHandler+0x420>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <HAL_DMA_IRQHandler+0x424>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1a      	ldr	r2, [pc, #104]	; (8006c04 <HAL_DMA_IRQHandler+0x428>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_DMA_IRQHandler+0x42c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <HAL_DMA_IRQHandler+0x430>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <HAL_DMA_IRQHandler+0x434>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d12a      	bne.n	8006c14 <HAL_DMA_IRQHandler+0x438>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e023      	b.n	8006c1c <HAL_DMA_IRQHandler+0x440>
 8006bd4:	40020010 	.word	0x40020010
 8006bd8:	40020028 	.word	0x40020028
 8006bdc:	40020040 	.word	0x40020040
 8006be0:	40020058 	.word	0x40020058
 8006be4:	40020070 	.word	0x40020070
 8006be8:	40020088 	.word	0x40020088
 8006bec:	400200a0 	.word	0x400200a0
 8006bf0:	400200b8 	.word	0x400200b8
 8006bf4:	40020410 	.word	0x40020410
 8006bf8:	40020428 	.word	0x40020428
 8006bfc:	40020440 	.word	0x40020440
 8006c00:	40020458 	.word	0x40020458
 8006c04:	40020470 	.word	0x40020470
 8006c08:	40020488 	.word	0x40020488
 8006c0c:	400204a0 	.word	0x400204a0
 8006c10:	400204b8 	.word	0x400204b8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00d      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2204      	movs	r2, #4
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	f043 0204 	orr.w	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2210      	movs	r2, #16
 8006c46:	409a      	lsls	r2, r3
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80a6 	beq.w	8006d9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a85      	ldr	r2, [pc, #532]	; (8006e6c <HAL_DMA_IRQHandler+0x690>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d04a      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a83      	ldr	r2, [pc, #524]	; (8006e70 <HAL_DMA_IRQHandler+0x694>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d045      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a82      	ldr	r2, [pc, #520]	; (8006e74 <HAL_DMA_IRQHandler+0x698>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d040      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a80      	ldr	r2, [pc, #512]	; (8006e78 <HAL_DMA_IRQHandler+0x69c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d03b      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a7f      	ldr	r2, [pc, #508]	; (8006e7c <HAL_DMA_IRQHandler+0x6a0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d036      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a7d      	ldr	r2, [pc, #500]	; (8006e80 <HAL_DMA_IRQHandler+0x6a4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d031      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7c      	ldr	r2, [pc, #496]	; (8006e84 <HAL_DMA_IRQHandler+0x6a8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d02c      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a7a      	ldr	r2, [pc, #488]	; (8006e88 <HAL_DMA_IRQHandler+0x6ac>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d027      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a79      	ldr	r2, [pc, #484]	; (8006e8c <HAL_DMA_IRQHandler+0x6b0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d022      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a77      	ldr	r2, [pc, #476]	; (8006e90 <HAL_DMA_IRQHandler+0x6b4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01d      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a76      	ldr	r2, [pc, #472]	; (8006e94 <HAL_DMA_IRQHandler+0x6b8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a74      	ldr	r2, [pc, #464]	; (8006e98 <HAL_DMA_IRQHandler+0x6bc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a73      	ldr	r2, [pc, #460]	; (8006e9c <HAL_DMA_IRQHandler+0x6c0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a71      	ldr	r2, [pc, #452]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a70      	ldr	r2, [pc, #448]	; (8006ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6e      	ldr	r2, [pc, #440]	; (8006ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10a      	bne.n	8006d08 <HAL_DMA_IRQHandler+0x52c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e009      	b.n	8006d1c <HAL_DMA_IRQHandler+0x540>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d03e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	2210      	movs	r2, #16
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d024      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
 8006d5c:	e01f      	b.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	e016      	b.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d107      	bne.n	8006d8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0208 	bic.w	r2, r2, #8
 8006d8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2220      	movs	r2, #32
 8006da8:	409a      	lsls	r2, r3
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 8110 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <HAL_DMA_IRQHandler+0x690>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d04a      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <HAL_DMA_IRQHandler+0x694>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d045      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_DMA_IRQHandler+0x698>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d040      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a28      	ldr	r2, [pc, #160]	; (8006e78 <HAL_DMA_IRQHandler+0x69c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d03b      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <HAL_DMA_IRQHandler+0x6a0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d036      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <HAL_DMA_IRQHandler+0x6a4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d031      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <HAL_DMA_IRQHandler+0x6a8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d02c      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a22      	ldr	r2, [pc, #136]	; (8006e88 <HAL_DMA_IRQHandler+0x6ac>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d027      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <HAL_DMA_IRQHandler+0x6b0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d022      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <HAL_DMA_IRQHandler+0x6b4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d01d      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <HAL_DMA_IRQHandler+0x6b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1c      	ldr	r2, [pc, #112]	; (8006e98 <HAL_DMA_IRQHandler+0x6bc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_DMA_IRQHandler+0x6c0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a19      	ldr	r2, [pc, #100]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d12b      	bne.n	8006eac <HAL_DMA_IRQHandler+0x6d0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	2300      	moveq	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	e02a      	b.n	8006ec0 <HAL_DMA_IRQHandler+0x6e4>
 8006e6a:	bf00      	nop
 8006e6c:	40020010 	.word	0x40020010
 8006e70:	40020028 	.word	0x40020028
 8006e74:	40020040 	.word	0x40020040
 8006e78:	40020058 	.word	0x40020058
 8006e7c:	40020070 	.word	0x40020070
 8006e80:	40020088 	.word	0x40020088
 8006e84:	400200a0 	.word	0x400200a0
 8006e88:	400200b8 	.word	0x400200b8
 8006e8c:	40020410 	.word	0x40020410
 8006e90:	40020428 	.word	0x40020428
 8006e94:	40020440 	.word	0x40020440
 8006e98:	40020458 	.word	0x40020458
 8006e9c:	40020470 	.word	0x40020470
 8006ea0:	40020488 	.word	0x40020488
 8006ea4:	400204a0 	.word	0x400204a0
 8006ea8:	400204b8 	.word	0x400204b8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8087 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2220      	movs	r2, #32
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d139      	bne.n	8006f56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0216 	bic.w	r2, r2, #22
 8006ef0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <HAL_DMA_IRQHandler+0x736>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0208 	bic.w	r2, r2, #8
 8006f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	223f      	movs	r2, #63	; 0x3f
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 834a 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
          }
          return;
 8006f54:	e344      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d018      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d108      	bne.n	8006f84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02c      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
 8006f82:	e027      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d023      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
 8006f94:	e01e      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0210 	bic.w	r2, r2, #16
 8006fb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8306 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8088 	beq.w	80070fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a7a      	ldr	r2, [pc, #488]	; (80071e4 <HAL_DMA_IRQHandler+0xa08>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d04a      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a79      	ldr	r2, [pc, #484]	; (80071e8 <HAL_DMA_IRQHandler+0xa0c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d045      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	; (80071ec <HAL_DMA_IRQHandler+0xa10>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d040      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a76      	ldr	r2, [pc, #472]	; (80071f0 <HAL_DMA_IRQHandler+0xa14>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d03b      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a74      	ldr	r2, [pc, #464]	; (80071f4 <HAL_DMA_IRQHandler+0xa18>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d036      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a73      	ldr	r2, [pc, #460]	; (80071f8 <HAL_DMA_IRQHandler+0xa1c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d031      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a71      	ldr	r2, [pc, #452]	; (80071fc <HAL_DMA_IRQHandler+0xa20>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d02c      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a70      	ldr	r2, [pc, #448]	; (8007200 <HAL_DMA_IRQHandler+0xa24>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d027      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6e      	ldr	r2, [pc, #440]	; (8007204 <HAL_DMA_IRQHandler+0xa28>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a6d      	ldr	r2, [pc, #436]	; (8007208 <HAL_DMA_IRQHandler+0xa2c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d01d      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a6b      	ldr	r2, [pc, #428]	; (800720c <HAL_DMA_IRQHandler+0xa30>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a6a      	ldr	r2, [pc, #424]	; (8007210 <HAL_DMA_IRQHandler+0xa34>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a68      	ldr	r2, [pc, #416]	; (8007214 <HAL_DMA_IRQHandler+0xa38>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_DMA_IRQHandler+0xa3c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a65      	ldr	r2, [pc, #404]	; (800721c <HAL_DMA_IRQHandler+0xa40>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a64      	ldr	r2, [pc, #400]	; (8007220 <HAL_DMA_IRQHandler+0xa44>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <HAL_DMA_IRQHandler+0x8ca>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0201 	bic.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e007      	b.n	80070b6 <HAL_DMA_IRQHandler+0x8da>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070be:	429a      	cmp	r2, r3
 80070c0:	d307      	bcc.n	80070d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f2      	bne.n	80070b6 <HAL_DMA_IRQHandler+0x8da>
 80070d0:	e000      	b.n	80070d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2203      	movs	r2, #3
 80070e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070ea:	e003      	b.n	80070f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8272 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	e26c      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a43      	ldr	r2, [pc, #268]	; (8007224 <HAL_DMA_IRQHandler+0xa48>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a42      	ldr	r2, [pc, #264]	; (8007228 <HAL_DMA_IRQHandler+0xa4c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a40      	ldr	r2, [pc, #256]	; (800722c <HAL_DMA_IRQHandler+0xa50>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a3f      	ldr	r2, [pc, #252]	; (8007230 <HAL_DMA_IRQHandler+0xa54>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3d      	ldr	r2, [pc, #244]	; (8007234 <HAL_DMA_IRQHandler+0xa58>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3c      	ldr	r2, [pc, #240]	; (8007238 <HAL_DMA_IRQHandler+0xa5c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a3a      	ldr	r2, [pc, #232]	; (800723c <HAL_DMA_IRQHandler+0xa60>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a39      	ldr	r2, [pc, #228]	; (8007240 <HAL_DMA_IRQHandler+0xa64>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_DMA_IRQHandler+0x988>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <HAL_DMA_IRQHandler+0x98a>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 823f 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2204      	movs	r2, #4
 800717e:	409a      	lsls	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80cd 	beq.w	8007324 <HAL_DMA_IRQHandler+0xb48>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80c7 	beq.w	8007324 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2204      	movs	r2, #4
 80071a0:	409a      	lsls	r2, r3
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d049      	beq.n	8007244 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8210 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071cc:	e20a      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8206 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e0:	e200      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe08>
 80071e2:	bf00      	nop
 80071e4:	40020010 	.word	0x40020010
 80071e8:	40020028 	.word	0x40020028
 80071ec:	40020040 	.word	0x40020040
 80071f0:	40020058 	.word	0x40020058
 80071f4:	40020070 	.word	0x40020070
 80071f8:	40020088 	.word	0x40020088
 80071fc:	400200a0 	.word	0x400200a0
 8007200:	400200b8 	.word	0x400200b8
 8007204:	40020410 	.word	0x40020410
 8007208:	40020428 	.word	0x40020428
 800720c:	40020440 	.word	0x40020440
 8007210:	40020458 	.word	0x40020458
 8007214:	40020470 	.word	0x40020470
 8007218:	40020488 	.word	0x40020488
 800721c:	400204a0 	.word	0x400204a0
 8007220:	400204b8 	.word	0x400204b8
 8007224:	58025408 	.word	0x58025408
 8007228:	5802541c 	.word	0x5802541c
 800722c:	58025430 	.word	0x58025430
 8007230:	58025444 	.word	0x58025444
 8007234:	58025458 	.word	0x58025458
 8007238:	5802546c 	.word	0x5802546c
 800723c:	58025480 	.word	0x58025480
 8007240:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d160      	bne.n	8007310 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a7f      	ldr	r2, [pc, #508]	; (8007450 <HAL_DMA_IRQHandler+0xc74>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d04a      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a7d      	ldr	r2, [pc, #500]	; (8007454 <HAL_DMA_IRQHandler+0xc78>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d045      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a7c      	ldr	r2, [pc, #496]	; (8007458 <HAL_DMA_IRQHandler+0xc7c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d040      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a7a      	ldr	r2, [pc, #488]	; (800745c <HAL_DMA_IRQHandler+0xc80>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d03b      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a79      	ldr	r2, [pc, #484]	; (8007460 <HAL_DMA_IRQHandler+0xc84>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d036      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a77      	ldr	r2, [pc, #476]	; (8007464 <HAL_DMA_IRQHandler+0xc88>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d031      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a76      	ldr	r2, [pc, #472]	; (8007468 <HAL_DMA_IRQHandler+0xc8c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d02c      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a74      	ldr	r2, [pc, #464]	; (800746c <HAL_DMA_IRQHandler+0xc90>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d027      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a73      	ldr	r2, [pc, #460]	; (8007470 <HAL_DMA_IRQHandler+0xc94>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d022      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a71      	ldr	r2, [pc, #452]	; (8007474 <HAL_DMA_IRQHandler+0xc98>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01d      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a70      	ldr	r2, [pc, #448]	; (8007478 <HAL_DMA_IRQHandler+0xc9c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a6e      	ldr	r2, [pc, #440]	; (800747c <HAL_DMA_IRQHandler+0xca0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a6d      	ldr	r2, [pc, #436]	; (8007480 <HAL_DMA_IRQHandler+0xca4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a6b      	ldr	r2, [pc, #428]	; (8007484 <HAL_DMA_IRQHandler+0xca8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a6a      	ldr	r2, [pc, #424]	; (8007488 <HAL_DMA_IRQHandler+0xcac>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a68      	ldr	r2, [pc, #416]	; (800748c <HAL_DMA_IRQHandler+0xcb0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <HAL_DMA_IRQHandler+0xb24>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0208 	bic.w	r2, r2, #8
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e007      	b.n	8007310 <HAL_DMA_IRQHandler+0xb34>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0204 	bic.w	r2, r2, #4
 800730e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8165 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007322:	e15f      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	2202      	movs	r2, #2
 800732e:	409a      	lsls	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80c5 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xce8>
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80bf 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	2202      	movs	r2, #2
 8007350:	409a      	lsls	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d018      	beq.n	8007392 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 813a 	beq.w	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737c:	e134      	b.n	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8130 	beq.w	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007390:	e12a      	b.n	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 8089 	bne.w	80074b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a2b      	ldr	r2, [pc, #172]	; (8007450 <HAL_DMA_IRQHandler+0xc74>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d04a      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a29      	ldr	r2, [pc, #164]	; (8007454 <HAL_DMA_IRQHandler+0xc78>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d045      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a28      	ldr	r2, [pc, #160]	; (8007458 <HAL_DMA_IRQHandler+0xc7c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d040      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a26      	ldr	r2, [pc, #152]	; (800745c <HAL_DMA_IRQHandler+0xc80>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d03b      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a25      	ldr	r2, [pc, #148]	; (8007460 <HAL_DMA_IRQHandler+0xc84>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d036      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a23      	ldr	r2, [pc, #140]	; (8007464 <HAL_DMA_IRQHandler+0xc88>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d031      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a22      	ldr	r2, [pc, #136]	; (8007468 <HAL_DMA_IRQHandler+0xc8c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d02c      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a20      	ldr	r2, [pc, #128]	; (800746c <HAL_DMA_IRQHandler+0xc90>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d027      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <HAL_DMA_IRQHandler+0xc94>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <HAL_DMA_IRQHandler+0xc98>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01d      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <HAL_DMA_IRQHandler+0xc9c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1a      	ldr	r2, [pc, #104]	; (800747c <HAL_DMA_IRQHandler+0xca0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <HAL_DMA_IRQHandler+0xca4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a17      	ldr	r2, [pc, #92]	; (8007484 <HAL_DMA_IRQHandler+0xca8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_DMA_IRQHandler+0xcac>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_DMA_IRQHandler+0xc62>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a14      	ldr	r2, [pc, #80]	; (800748c <HAL_DMA_IRQHandler+0xcb0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d128      	bne.n	8007490 <HAL_DMA_IRQHandler+0xcb4>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0214 	bic.w	r2, r2, #20
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e027      	b.n	80074a0 <HAL_DMA_IRQHandler+0xcc4>
 8007450:	40020010 	.word	0x40020010
 8007454:	40020028 	.word	0x40020028
 8007458:	40020040 	.word	0x40020040
 800745c:	40020058 	.word	0x40020058
 8007460:	40020070 	.word	0x40020070
 8007464:	40020088 	.word	0x40020088
 8007468:	400200a0 	.word	0x400200a0
 800746c:	400200b8 	.word	0x400200b8
 8007470:	40020410 	.word	0x40020410
 8007474:	40020428 	.word	0x40020428
 8007478:	40020440 	.word	0x40020440
 800747c:	40020458 	.word	0x40020458
 8007480:	40020470 	.word	0x40020470
 8007484:	40020488 	.word	0x40020488
 8007488:	400204a0 	.word	0x400204a0
 800748c:	400204b8 	.word	0x400204b8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 020a 	bic.w	r2, r2, #10
 800749e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8097 	beq.w	80075e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c2:	e091      	b.n	80075e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2208      	movs	r2, #8
 80074ce:	409a      	lsls	r2, r3
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8088 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8082 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a41      	ldr	r2, [pc, #260]	; (80075f0 <HAL_DMA_IRQHandler+0xe14>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a3f      	ldr	r2, [pc, #252]	; (80075f4 <HAL_DMA_IRQHandler+0xe18>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a3e      	ldr	r2, [pc, #248]	; (80075f8 <HAL_DMA_IRQHandler+0xe1c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3c      	ldr	r2, [pc, #240]	; (80075fc <HAL_DMA_IRQHandler+0xe20>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3b      	ldr	r2, [pc, #236]	; (8007600 <HAL_DMA_IRQHandler+0xe24>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a39      	ldr	r2, [pc, #228]	; (8007604 <HAL_DMA_IRQHandler+0xe28>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a38      	ldr	r2, [pc, #224]	; (8007608 <HAL_DMA_IRQHandler+0xe2c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a36      	ldr	r2, [pc, #216]	; (800760c <HAL_DMA_IRQHandler+0xe30>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a35      	ldr	r2, [pc, #212]	; (8007610 <HAL_DMA_IRQHandler+0xe34>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a33      	ldr	r2, [pc, #204]	; (8007614 <HAL_DMA_IRQHandler+0xe38>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a32      	ldr	r2, [pc, #200]	; (8007618 <HAL_DMA_IRQHandler+0xe3c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a30      	ldr	r2, [pc, #192]	; (800761c <HAL_DMA_IRQHandler+0xe40>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a2f      	ldr	r2, [pc, #188]	; (8007620 <HAL_DMA_IRQHandler+0xe44>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2d      	ldr	r2, [pc, #180]	; (8007624 <HAL_DMA_IRQHandler+0xe48>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2c      	ldr	r2, [pc, #176]	; (8007628 <HAL_DMA_IRQHandler+0xe4c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2a      	ldr	r2, [pc, #168]	; (800762c <HAL_DMA_IRQHandler+0xe50>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d108      	bne.n	8007598 <HAL_DMA_IRQHandler+0xdbc>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 021c 	bic.w	r2, r2, #28
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e007      	b.n	80075a8 <HAL_DMA_IRQHandler+0xdcc>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 020e 	bic.w	r2, r2, #14
 80075a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2201      	movs	r2, #1
 80075b2:	409a      	lsls	r2, r3
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
 80075de:	e004      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075ea:	3728      	adds	r7, #40	; 0x28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40020010 	.word	0x40020010
 80075f4:	40020028 	.word	0x40020028
 80075f8:	40020040 	.word	0x40020040
 80075fc:	40020058 	.word	0x40020058
 8007600:	40020070 	.word	0x40020070
 8007604:	40020088 	.word	0x40020088
 8007608:	400200a0 	.word	0x400200a0
 800760c:	400200b8 	.word	0x400200b8
 8007610:	40020410 	.word	0x40020410
 8007614:	40020428 	.word	0x40020428
 8007618:	40020440 	.word	0x40020440
 800761c:	40020458 	.word	0x40020458
 8007620:	40020470 	.word	0x40020470
 8007624:	40020488 	.word	0x40020488
 8007628:	400204a0 	.word	0x400204a0
 800762c:	400204b8 	.word	0x400204b8

08007630 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007648:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a7f      	ldr	r2, [pc, #508]	; (800784c <DMA_SetConfig+0x21c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d072      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a7d      	ldr	r2, [pc, #500]	; (8007850 <DMA_SetConfig+0x220>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d06d      	beq.n	800773a <DMA_SetConfig+0x10a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a7c      	ldr	r2, [pc, #496]	; (8007854 <DMA_SetConfig+0x224>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d068      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a7a      	ldr	r2, [pc, #488]	; (8007858 <DMA_SetConfig+0x228>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d063      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a79      	ldr	r2, [pc, #484]	; (800785c <DMA_SetConfig+0x22c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d05e      	beq.n	800773a <DMA_SetConfig+0x10a>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a77      	ldr	r2, [pc, #476]	; (8007860 <DMA_SetConfig+0x230>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d059      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a76      	ldr	r2, [pc, #472]	; (8007864 <DMA_SetConfig+0x234>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d054      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a74      	ldr	r2, [pc, #464]	; (8007868 <DMA_SetConfig+0x238>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d04f      	beq.n	800773a <DMA_SetConfig+0x10a>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a73      	ldr	r2, [pc, #460]	; (800786c <DMA_SetConfig+0x23c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d04a      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a71      	ldr	r2, [pc, #452]	; (8007870 <DMA_SetConfig+0x240>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d045      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a70      	ldr	r2, [pc, #448]	; (8007874 <DMA_SetConfig+0x244>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d040      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a6e      	ldr	r2, [pc, #440]	; (8007878 <DMA_SetConfig+0x248>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d03b      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a6d      	ldr	r2, [pc, #436]	; (800787c <DMA_SetConfig+0x24c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d036      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a6b      	ldr	r2, [pc, #428]	; (8007880 <DMA_SetConfig+0x250>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d031      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a6a      	ldr	r2, [pc, #424]	; (8007884 <DMA_SetConfig+0x254>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d02c      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a68      	ldr	r2, [pc, #416]	; (8007888 <DMA_SetConfig+0x258>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d027      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a67      	ldr	r2, [pc, #412]	; (800788c <DMA_SetConfig+0x25c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a65      	ldr	r2, [pc, #404]	; (8007890 <DMA_SetConfig+0x260>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d01d      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a64      	ldr	r2, [pc, #400]	; (8007894 <DMA_SetConfig+0x264>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a62      	ldr	r2, [pc, #392]	; (8007898 <DMA_SetConfig+0x268>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a61      	ldr	r2, [pc, #388]	; (800789c <DMA_SetConfig+0x26c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <DMA_SetConfig+0x10a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a5f      	ldr	r2, [pc, #380]	; (80078a0 <DMA_SetConfig+0x270>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5e      	ldr	r2, [pc, #376]	; (80078a4 <DMA_SetConfig+0x274>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a5c      	ldr	r2, [pc, #368]	; (80078a8 <DMA_SetConfig+0x278>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <DMA_SetConfig+0x10e>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <DMA_SetConfig+0x110>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800774c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800775e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a39      	ldr	r2, [pc, #228]	; (800784c <DMA_SetConfig+0x21c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d04a      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a38      	ldr	r2, [pc, #224]	; (8007850 <DMA_SetConfig+0x220>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d045      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a36      	ldr	r2, [pc, #216]	; (8007854 <DMA_SetConfig+0x224>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d040      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a35      	ldr	r2, [pc, #212]	; (8007858 <DMA_SetConfig+0x228>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d03b      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a33      	ldr	r2, [pc, #204]	; (800785c <DMA_SetConfig+0x22c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d036      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a32      	ldr	r2, [pc, #200]	; (8007860 <DMA_SetConfig+0x230>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d031      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a30      	ldr	r2, [pc, #192]	; (8007864 <DMA_SetConfig+0x234>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02c      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <DMA_SetConfig+0x238>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d027      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a2d      	ldr	r2, [pc, #180]	; (800786c <DMA_SetConfig+0x23c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a2c      	ldr	r2, [pc, #176]	; (8007870 <DMA_SetConfig+0x240>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01d      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <DMA_SetConfig+0x244>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a29      	ldr	r2, [pc, #164]	; (8007878 <DMA_SetConfig+0x248>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a27      	ldr	r2, [pc, #156]	; (800787c <DMA_SetConfig+0x24c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a26      	ldr	r2, [pc, #152]	; (8007880 <DMA_SetConfig+0x250>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a24      	ldr	r2, [pc, #144]	; (8007884 <DMA_SetConfig+0x254>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a23      	ldr	r2, [pc, #140]	; (8007888 <DMA_SetConfig+0x258>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d101      	bne.n	8007804 <DMA_SetConfig+0x1d4>
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <DMA_SetConfig+0x1d6>
 8007804:	2300      	movs	r3, #0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d059      	beq.n	80078be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	223f      	movs	r2, #63	; 0x3f
 8007814:	409a      	lsls	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007828:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d138      	bne.n	80078ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800784a:	e086      	b.n	800795a <DMA_SetConfig+0x32a>
 800784c:	40020010 	.word	0x40020010
 8007850:	40020028 	.word	0x40020028
 8007854:	40020040 	.word	0x40020040
 8007858:	40020058 	.word	0x40020058
 800785c:	40020070 	.word	0x40020070
 8007860:	40020088 	.word	0x40020088
 8007864:	400200a0 	.word	0x400200a0
 8007868:	400200b8 	.word	0x400200b8
 800786c:	40020410 	.word	0x40020410
 8007870:	40020428 	.word	0x40020428
 8007874:	40020440 	.word	0x40020440
 8007878:	40020458 	.word	0x40020458
 800787c:	40020470 	.word	0x40020470
 8007880:	40020488 	.word	0x40020488
 8007884:	400204a0 	.word	0x400204a0
 8007888:	400204b8 	.word	0x400204b8
 800788c:	58025408 	.word	0x58025408
 8007890:	5802541c 	.word	0x5802541c
 8007894:	58025430 	.word	0x58025430
 8007898:	58025444 	.word	0x58025444
 800789c:	58025458 	.word	0x58025458
 80078a0:	5802546c 	.word	0x5802546c
 80078a4:	58025480 	.word	0x58025480
 80078a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	60da      	str	r2, [r3, #12]
}
 80078bc:	e04d      	b.n	800795a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a29      	ldr	r2, [pc, #164]	; (8007968 <DMA_SetConfig+0x338>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d022      	beq.n	800790e <DMA_SetConfig+0x2de>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a27      	ldr	r2, [pc, #156]	; (800796c <DMA_SetConfig+0x33c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01d      	beq.n	800790e <DMA_SetConfig+0x2de>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a26      	ldr	r2, [pc, #152]	; (8007970 <DMA_SetConfig+0x340>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <DMA_SetConfig+0x2de>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a24      	ldr	r2, [pc, #144]	; (8007974 <DMA_SetConfig+0x344>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <DMA_SetConfig+0x2de>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a23      	ldr	r2, [pc, #140]	; (8007978 <DMA_SetConfig+0x348>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <DMA_SetConfig+0x2de>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a21      	ldr	r2, [pc, #132]	; (800797c <DMA_SetConfig+0x34c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <DMA_SetConfig+0x2de>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a20      	ldr	r2, [pc, #128]	; (8007980 <DMA_SetConfig+0x350>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <DMA_SetConfig+0x2de>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1e      	ldr	r2, [pc, #120]	; (8007984 <DMA_SetConfig+0x354>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <DMA_SetConfig+0x2e2>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <DMA_SetConfig+0x2e4>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d020      	beq.n	800795a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	2201      	movs	r2, #1
 8007922:	409a      	lsls	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d108      	bne.n	800794a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	60da      	str	r2, [r3, #12]
}
 8007948:	e007      	b.n	800795a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	60da      	str	r2, [r3, #12]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58025408 	.word	0x58025408
 800796c:	5802541c 	.word	0x5802541c
 8007970:	58025430 	.word	0x58025430
 8007974:	58025444 	.word	0x58025444
 8007978:	58025458 	.word	0x58025458
 800797c:	5802546c 	.word	0x5802546c
 8007980:	58025480 	.word	0x58025480
 8007984:	58025494 	.word	0x58025494

08007988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a42      	ldr	r2, [pc, #264]	; (8007aa0 <DMA_CalcBaseAndBitshift+0x118>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d04a      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a41      	ldr	r2, [pc, #260]	; (8007aa4 <DMA_CalcBaseAndBitshift+0x11c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d045      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <DMA_CalcBaseAndBitshift+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d040      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a3e      	ldr	r2, [pc, #248]	; (8007aac <DMA_CalcBaseAndBitshift+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d03b      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a3c      	ldr	r2, [pc, #240]	; (8007ab0 <DMA_CalcBaseAndBitshift+0x128>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d036      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a3b      	ldr	r2, [pc, #236]	; (8007ab4 <DMA_CalcBaseAndBitshift+0x12c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d031      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a39      	ldr	r2, [pc, #228]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02c      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a38      	ldr	r2, [pc, #224]	; (8007abc <DMA_CalcBaseAndBitshift+0x134>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d027      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a36      	ldr	r2, [pc, #216]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x138>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d022      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a35      	ldr	r2, [pc, #212]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x13c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d01d      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a33      	ldr	r2, [pc, #204]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x140>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a32      	ldr	r2, [pc, #200]	; (8007acc <DMA_CalcBaseAndBitshift+0x144>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a30      	ldr	r2, [pc, #192]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x148>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a2f      	ldr	r2, [pc, #188]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a2d      	ldr	r2, [pc, #180]	; (8007ad8 <DMA_CalcBaseAndBitshift+0x150>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <DMA_CalcBaseAndBitshift+0x154>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d101      	bne.n	8007a34 <DMA_CalcBaseAndBitshift+0xac>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <DMA_CalcBaseAndBitshift+0xae>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d024      	beq.n	8007a84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	3b10      	subs	r3, #16
 8007a42:	4a27      	ldr	r2, [pc, #156]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x158>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	4a24      	ldr	r2, [pc, #144]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a54:	5cd3      	ldrb	r3, [r2, r3]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d908      	bls.n	8007a74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	659a      	str	r2, [r3, #88]	; 0x58
 8007a72:	e00d      	b.n	8007a90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6593      	str	r3, [r2, #88]	; 0x58
 8007a82:	e005      	b.n	8007a90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40020010 	.word	0x40020010
 8007aa4:	40020028 	.word	0x40020028
 8007aa8:	40020040 	.word	0x40020040
 8007aac:	40020058 	.word	0x40020058
 8007ab0:	40020070 	.word	0x40020070
 8007ab4:	40020088 	.word	0x40020088
 8007ab8:	400200a0 	.word	0x400200a0
 8007abc:	400200b8 	.word	0x400200b8
 8007ac0:	40020410 	.word	0x40020410
 8007ac4:	40020428 	.word	0x40020428
 8007ac8:	40020440 	.word	0x40020440
 8007acc:	40020458 	.word	0x40020458
 8007ad0:	40020470 	.word	0x40020470
 8007ad4:	40020488 	.word	0x40020488
 8007ad8:	400204a0 	.word	0x400204a0
 8007adc:	400204b8 	.word	0x400204b8
 8007ae0:	aaaaaaab 	.word	0xaaaaaaab
 8007ae4:	0800e52c 	.word	0x0800e52c
 8007ae8:	fffffc00 	.word	0xfffffc00

08007aec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d120      	bne.n	8007b42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d858      	bhi.n	8007bba <DMA_CheckFifoParam+0xce>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <DMA_CheckFifoParam+0x24>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b33 	.word	0x08007b33
 8007b18:	08007b21 	.word	0x08007b21
 8007b1c:	08007bbb 	.word	0x08007bbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d048      	beq.n	8007bbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b30:	e045      	b.n	8007bbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b3a:	d142      	bne.n	8007bc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b40:	e03f      	b.n	8007bc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4a:	d123      	bne.n	8007b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d838      	bhi.n	8007bc6 <DMA_CheckFifoParam+0xda>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <DMA_CheckFifoParam+0x70>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b73 	.word	0x08007b73
 8007b64:	08007b6d 	.word	0x08007b6d
 8007b68:	08007b85 	.word	0x08007b85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8007b70:	e030      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d025      	beq.n	8007bca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b82:	e022      	b.n	8007bca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b8c:	d11f      	bne.n	8007bce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b92:	e01c      	b.n	8007bce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d902      	bls.n	8007ba2 <DMA_CheckFifoParam+0xb6>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d003      	beq.n	8007ba8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ba0:	e018      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ba6:	e015      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb8:	e00b      	b.n	8007bd2 <DMA_CheckFifoParam+0xe6>
        break;
 8007bba:	bf00      	nop
 8007bbc:	e00a      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e008      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bc2:	bf00      	nop
 8007bc4:	e006      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bc6:	bf00      	nop
 8007bc8:	e004      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e002      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
    break;
 8007bd2:	bf00      	nop
    }
  }

  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a38      	ldr	r2, [pc, #224]	; (8007cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d022      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a36      	ldr	r2, [pc, #216]	; (8007cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01d      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a35      	ldr	r2, [pc, #212]	; (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d018      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a33      	ldr	r2, [pc, #204]	; (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a32      	ldr	r2, [pc, #200]	; (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00e      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a30      	ldr	r2, [pc, #192]	; (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d009      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	; (8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d004      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d101      	bne.n	8007c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	3b08      	subs	r3, #8
 8007c54:	4a28      	ldr	r2, [pc, #160]	; (8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	091b      	lsrs	r3, r3, #4
 8007c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a24      	ldr	r2, [pc, #144]	; (8007d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	2201      	movs	r2, #1
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c80:	e024      	b.n	8007ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	3b10      	subs	r3, #16
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d806      	bhi.n	8007caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d902      	bls.n	8007caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007cbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	58025408 	.word	0x58025408
 8007cdc:	5802541c 	.word	0x5802541c
 8007ce0:	58025430 	.word	0x58025430
 8007ce4:	58025444 	.word	0x58025444
 8007ce8:	58025458 	.word	0x58025458
 8007cec:	5802546c 	.word	0x5802546c
 8007cf0:	58025480 	.word	0x58025480
 8007cf4:	58025494 	.word	0x58025494
 8007cf8:	cccccccd 	.word	0xcccccccd
 8007cfc:	16009600 	.word	0x16009600
 8007d00:	58025880 	.word	0x58025880
 8007d04:	aaaaaaab 	.word	0xaaaaaaab
 8007d08:	400204b8 	.word	0x400204b8
 8007d0c:	4002040f 	.word	0x4002040f
 8007d10:	10008200 	.word	0x10008200
 8007d14:	40020880 	.word	0x40020880

08007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d04a      	beq.n	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d847      	bhi.n	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d022      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d01d      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d018      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d101      	bne.n	8007d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007da0:	671a      	str	r2, [r3, #112]	; 0x70
 8007da2:	e009      	b.n	8007db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007db6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007dc4:	bf00      	nop
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	58025408 	.word	0x58025408
 8007dd4:	5802541c 	.word	0x5802541c
 8007dd8:	58025430 	.word	0x58025430
 8007ddc:	58025444 	.word	0x58025444
 8007de0:	58025458 	.word	0x58025458
 8007de4:	5802546c 	.word	0x5802546c
 8007de8:	58025480 	.word	0x58025480
 8007dec:	58025494 	.word	0x58025494
 8007df0:	1600963f 	.word	0x1600963f
 8007df4:	58025940 	.word	0x58025940
 8007df8:	1000823f 	.word	0x1000823f
 8007dfc:	40020940 	.word	0x40020940

08007e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e0e:	4b86      	ldr	r3, [pc, #536]	; (8008028 <HAL_GPIO_Init+0x228>)
 8007e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e12:	e18c      	b.n	800812e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	4013      	ands	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 817e 	beq.w	8008128 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d005      	beq.n	8007e44 <HAL_GPIO_Init+0x44>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d130      	bne.n	8007ea6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	2203      	movs	r2, #3
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43db      	mvns	r3, r3
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	091b      	lsrs	r3, r3, #4
 8007e90:	f003 0201 	and.w	r2, r3, #1
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d017      	beq.n	8007ee2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d123      	bne.n	8007f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	08da      	lsrs	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3208      	adds	r2, #8
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	220f      	movs	r2, #15
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	08da      	lsrs	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3208      	adds	r2, #8
 8007f30:	69b9      	ldr	r1, [r7, #24]
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	2203      	movs	r2, #3
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f003 0203 	and.w	r2, r3, #3
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80d8 	beq.w	8008128 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f78:	4b2c      	ldr	r3, [pc, #176]	; (800802c <HAL_GPIO_Init+0x22c>)
 8007f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f7e:	4a2b      	ldr	r2, [pc, #172]	; (800802c <HAL_GPIO_Init+0x22c>)
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f88:	4b28      	ldr	r3, [pc, #160]	; (800802c <HAL_GPIO_Init+0x22c>)
 8007f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f96:	4a26      	ldr	r2, [pc, #152]	; (8008030 <HAL_GPIO_Init+0x230>)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	220f      	movs	r2, #15
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <HAL_GPIO_Init+0x234>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d04a      	beq.n	8008058 <HAL_GPIO_Init+0x258>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a1c      	ldr	r2, [pc, #112]	; (8008038 <HAL_GPIO_Init+0x238>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d02b      	beq.n	8008022 <HAL_GPIO_Init+0x222>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a1b      	ldr	r2, [pc, #108]	; (800803c <HAL_GPIO_Init+0x23c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d025      	beq.n	800801e <HAL_GPIO_Init+0x21e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a1a      	ldr	r2, [pc, #104]	; (8008040 <HAL_GPIO_Init+0x240>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d01f      	beq.n	800801a <HAL_GPIO_Init+0x21a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a19      	ldr	r2, [pc, #100]	; (8008044 <HAL_GPIO_Init+0x244>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d019      	beq.n	8008016 <HAL_GPIO_Init+0x216>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a18      	ldr	r2, [pc, #96]	; (8008048 <HAL_GPIO_Init+0x248>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_GPIO_Init+0x212>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a17      	ldr	r2, [pc, #92]	; (800804c <HAL_GPIO_Init+0x24c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00d      	beq.n	800800e <HAL_GPIO_Init+0x20e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <HAL_GPIO_Init+0x250>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <HAL_GPIO_Init+0x20a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <HAL_GPIO_Init+0x254>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d101      	bne.n	8008006 <HAL_GPIO_Init+0x206>
 8008002:	2309      	movs	r3, #9
 8008004:	e029      	b.n	800805a <HAL_GPIO_Init+0x25a>
 8008006:	230a      	movs	r3, #10
 8008008:	e027      	b.n	800805a <HAL_GPIO_Init+0x25a>
 800800a:	2307      	movs	r3, #7
 800800c:	e025      	b.n	800805a <HAL_GPIO_Init+0x25a>
 800800e:	2306      	movs	r3, #6
 8008010:	e023      	b.n	800805a <HAL_GPIO_Init+0x25a>
 8008012:	2305      	movs	r3, #5
 8008014:	e021      	b.n	800805a <HAL_GPIO_Init+0x25a>
 8008016:	2304      	movs	r3, #4
 8008018:	e01f      	b.n	800805a <HAL_GPIO_Init+0x25a>
 800801a:	2303      	movs	r3, #3
 800801c:	e01d      	b.n	800805a <HAL_GPIO_Init+0x25a>
 800801e:	2302      	movs	r3, #2
 8008020:	e01b      	b.n	800805a <HAL_GPIO_Init+0x25a>
 8008022:	2301      	movs	r3, #1
 8008024:	e019      	b.n	800805a <HAL_GPIO_Init+0x25a>
 8008026:	bf00      	nop
 8008028:	58000080 	.word	0x58000080
 800802c:	58024400 	.word	0x58024400
 8008030:	58000400 	.word	0x58000400
 8008034:	58020000 	.word	0x58020000
 8008038:	58020400 	.word	0x58020400
 800803c:	58020800 	.word	0x58020800
 8008040:	58020c00 	.word	0x58020c00
 8008044:	58021000 	.word	0x58021000
 8008048:	58021400 	.word	0x58021400
 800804c:	58021800 	.word	0x58021800
 8008050:	58021c00 	.word	0x58021c00
 8008054:	58022400 	.word	0x58022400
 8008058:	2300      	movs	r3, #0
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	f002 0203 	and.w	r2, r2, #3
 8008060:	0092      	lsls	r2, r2, #2
 8008062:	4093      	lsls	r3, r2
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4313      	orrs	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800806a:	4938      	ldr	r1, [pc, #224]	; (800814c <HAL_GPIO_Init+0x34c>)
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	089b      	lsrs	r3, r3, #2
 8008070:	3302      	adds	r3, #2
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	43db      	mvns	r3, r3
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4013      	ands	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800809e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	43db      	mvns	r3, r3
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	4013      	ands	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	43db      	mvns	r3, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4013      	ands	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	3301      	adds	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	f47f ae6b 	bne.w	8007e14 <HAL_GPIO_Init+0x14>
  }
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	3724      	adds	r7, #36	; 0x24
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	58000400 	.word	0x58000400

08008150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
 800815c:	4613      	mov	r3, r2
 800815e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008160:	787b      	ldrb	r3, [r7, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008166:	887a      	ldrh	r2, [r7, #2]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800816c:	e003      	b.n	8008176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800816e:	887b      	ldrh	r3, [r7, #2]
 8008170:	041a      	lsls	r2, r3, #16
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	619a      	str	r2, [r3, #24]
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <HAL_PWREx_ConfigSupply+0x70>)
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b04      	cmp	r3, #4
 8008196:	d00a      	beq.n	80081ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008198:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <HAL_PWREx_ConfigSupply+0x70>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d001      	beq.n	80081aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e01f      	b.n	80081ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e01d      	b.n	80081ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <HAL_PWREx_ConfigSupply+0x70>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f023 0207 	bic.w	r2, r3, #7
 80081b6:	490f      	ldr	r1, [pc, #60]	; (80081f4 <HAL_PWREx_ConfigSupply+0x70>)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80081be:	f7fc fec9 	bl	8004f54 <HAL_GetTick>
 80081c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081c4:	e009      	b.n	80081da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081c6:	f7fc fec5 	bl	8004f54 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081d4:	d901      	bls.n	80081da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e007      	b.n	80081ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <HAL_PWREx_ConfigSupply+0x70>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e6:	d1ee      	bne.n	80081c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	58024800 	.word	0x58024800

080081f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08c      	sub	sp, #48	; 0x30
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e39d      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8087 	beq.w	8008326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008218:	4b88      	ldr	r3, [pc, #544]	; (800843c <HAL_RCC_OscConfig+0x244>)
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008222:	4b86      	ldr	r3, [pc, #536]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008226:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2b10      	cmp	r3, #16
 800822c:	d007      	beq.n	800823e <HAL_RCC_OscConfig+0x46>
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	2b18      	cmp	r3, #24
 8008232:	d110      	bne.n	8008256 <HAL_RCC_OscConfig+0x5e>
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d10b      	bne.n	8008256 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800823e:	4b7f      	ldr	r3, [pc, #508]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d06c      	beq.n	8008324 <HAL_RCC_OscConfig+0x12c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d168      	bne.n	8008324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e377      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825e:	d106      	bne.n	800826e <HAL_RCC_OscConfig+0x76>
 8008260:	4b76      	ldr	r3, [pc, #472]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a75      	ldr	r2, [pc, #468]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e02e      	b.n	80082cc <HAL_RCC_OscConfig+0xd4>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10c      	bne.n	8008290 <HAL_RCC_OscConfig+0x98>
 8008276:	4b71      	ldr	r3, [pc, #452]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a70      	ldr	r2, [pc, #448]	; (800843c <HAL_RCC_OscConfig+0x244>)
 800827c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	4b6e      	ldr	r3, [pc, #440]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a6d      	ldr	r2, [pc, #436]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	e01d      	b.n	80082cc <HAL_RCC_OscConfig+0xd4>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008298:	d10c      	bne.n	80082b4 <HAL_RCC_OscConfig+0xbc>
 800829a:	4b68      	ldr	r3, [pc, #416]	; (800843c <HAL_RCC_OscConfig+0x244>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a67      	ldr	r2, [pc, #412]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	4b65      	ldr	r3, [pc, #404]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a64      	ldr	r2, [pc, #400]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	e00b      	b.n	80082cc <HAL_RCC_OscConfig+0xd4>
 80082b4:	4b61      	ldr	r3, [pc, #388]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a60      	ldr	r2, [pc, #384]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	4b5e      	ldr	r3, [pc, #376]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a5d      	ldr	r2, [pc, #372]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d013      	beq.n	80082fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d4:	f7fc fe3e 	bl	8004f54 <HAL_GetTick>
 80082d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082da:	e008      	b.n	80082ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082dc:	f7fc fe3a 	bl	8004f54 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b64      	cmp	r3, #100	; 0x64
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e32b      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082ee:	4b53      	ldr	r3, [pc, #332]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0f0      	beq.n	80082dc <HAL_RCC_OscConfig+0xe4>
 80082fa:	e014      	b.n	8008326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fc:	f7fc fe2a 	bl	8004f54 <HAL_GetTick>
 8008300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008304:	f7fc fe26 	bl	8004f54 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b64      	cmp	r3, #100	; 0x64
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e317      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008316:	4b49      	ldr	r3, [pc, #292]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f0      	bne.n	8008304 <HAL_RCC_OscConfig+0x10c>
 8008322:	e000      	b.n	8008326 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 808c 	beq.w	800844c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008334:	4b41      	ldr	r3, [pc, #260]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800833c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800833e:	4b3f      	ldr	r3, [pc, #252]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <HAL_RCC_OscConfig+0x162>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	2b18      	cmp	r3, #24
 800834e:	d137      	bne.n	80083c0 <HAL_RCC_OscConfig+0x1c8>
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d132      	bne.n	80083c0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800835a:	4b38      	ldr	r3, [pc, #224]	; (800843c <HAL_RCC_OscConfig+0x244>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_RCC_OscConfig+0x17a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e2e9      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008372:	4b32      	ldr	r3, [pc, #200]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f023 0219 	bic.w	r2, r3, #25
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	492f      	ldr	r1, [pc, #188]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008380:	4313      	orrs	r3, r2
 8008382:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008384:	f7fc fde6 	bl	8004f54 <HAL_GetTick>
 8008388:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800838c:	f7fc fde2 	bl	8004f54 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e2d3      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800839e:	4b27      	ldr	r3, [pc, #156]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083aa:	4b24      	ldr	r3, [pc, #144]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	4920      	ldr	r1, [pc, #128]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083be:	e045      	b.n	800844c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d026      	beq.n	8008416 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083c8:	4b1c      	ldr	r3, [pc, #112]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f023 0219 	bic.w	r2, r3, #25
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	4919      	ldr	r1, [pc, #100]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fc fdbb 	bl	8004f54 <HAL_GetTick>
 80083de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083e0:	e008      	b.n	80083f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e2:	f7fc fdb7 	bl	8004f54 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e2a8      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f4:	4b11      	ldr	r3, [pc, #68]	; (800843c <HAL_RCC_OscConfig+0x244>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0f0      	beq.n	80083e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008400:	4b0e      	ldr	r3, [pc, #56]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	061b      	lsls	r3, r3, #24
 800840e:	490b      	ldr	r1, [pc, #44]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008410:	4313      	orrs	r3, r2
 8008412:	604b      	str	r3, [r1, #4]
 8008414:	e01a      	b.n	800844c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <HAL_RCC_OscConfig+0x244>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a08      	ldr	r2, [pc, #32]	; (800843c <HAL_RCC_OscConfig+0x244>)
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008422:	f7fc fd97 	bl	8004f54 <HAL_GetTick>
 8008426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008428:	e00a      	b.n	8008440 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800842a:	f7fc fd93 	bl	8004f54 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d903      	bls.n	8008440 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e284      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
 800843c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008440:	4b96      	ldr	r3, [pc, #600]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1ee      	bne.n	800842a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b00      	cmp	r3, #0
 8008456:	d06a      	beq.n	800852e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008458:	4b90      	ldr	r3, [pc, #576]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008460:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008462:	4b8e      	ldr	r3, [pc, #568]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b08      	cmp	r3, #8
 800846c:	d007      	beq.n	800847e <HAL_RCC_OscConfig+0x286>
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b18      	cmp	r3, #24
 8008472:	d11b      	bne.n	80084ac <HAL_RCC_OscConfig+0x2b4>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d116      	bne.n	80084ac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800847e:	4b87      	ldr	r3, [pc, #540]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_RCC_OscConfig+0x29e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	2b80      	cmp	r3, #128	; 0x80
 8008490:	d001      	beq.n	8008496 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e257      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008496:	4b81      	ldr	r3, [pc, #516]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	061b      	lsls	r3, r3, #24
 80084a4:	497d      	ldr	r1, [pc, #500]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084aa:	e040      	b.n	800852e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d023      	beq.n	80084fc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80084b4:	4b79      	ldr	r3, [pc, #484]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a78      	ldr	r2, [pc, #480]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fc fd48 	bl	8004f54 <HAL_GetTick>
 80084c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80084c8:	f7fc fd44 	bl	8004f54 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e235      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084da:	4b70      	ldr	r3, [pc, #448]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0f0      	beq.n	80084c8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084e6:	4b6d      	ldr	r3, [pc, #436]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	061b      	lsls	r3, r3, #24
 80084f4:	4969      	ldr	r1, [pc, #420]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60cb      	str	r3, [r1, #12]
 80084fa:	e018      	b.n	800852e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084fc:	4b67      	ldr	r3, [pc, #412]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a66      	ldr	r2, [pc, #408]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008508:	f7fc fd24 	bl	8004f54 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008510:	f7fc fd20 	bl	8004f54 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e211      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008522:	4b5e      	ldr	r3, [pc, #376]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f0      	bne.n	8008510 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d036      	beq.n	80085a8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d019      	beq.n	8008576 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008542:	4b56      	ldr	r3, [pc, #344]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008546:	4a55      	ldr	r2, [pc, #340]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854e:	f7fc fd01 	bl	8004f54 <HAL_GetTick>
 8008552:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008556:	f7fc fcfd 	bl	8004f54 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e1ee      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008568:	4b4c      	ldr	r3, [pc, #304]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 800856a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <HAL_RCC_OscConfig+0x35e>
 8008574:	e018      	b.n	80085a8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008576:	4b49      	ldr	r3, [pc, #292]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857a:	4a48      	ldr	r2, [pc, #288]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008582:	f7fc fce7 	bl	8004f54 <HAL_GetTick>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008588:	e008      	b.n	800859c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800858a:	f7fc fce3 	bl	8004f54 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d901      	bls.n	800859c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e1d4      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800859c:	4b3f      	ldr	r3, [pc, #252]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 800859e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1f0      	bne.n	800858a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d036      	beq.n	8008622 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d019      	beq.n	80085f0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085bc:	4b37      	ldr	r3, [pc, #220]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a36      	ldr	r2, [pc, #216]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80085c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085c8:	f7fc fcc4 	bl	8004f54 <HAL_GetTick>
 80085cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085d0:	f7fc fcc0 	bl	8004f54 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e1b1      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085e2:	4b2e      	ldr	r3, [pc, #184]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f0      	beq.n	80085d0 <HAL_RCC_OscConfig+0x3d8>
 80085ee:	e018      	b.n	8008622 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085f0:	4b2a      	ldr	r3, [pc, #168]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a29      	ldr	r2, [pc, #164]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 80085f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085fc:	f7fc fcaa 	bl	8004f54 <HAL_GetTick>
 8008600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008604:	f7fc fca6 	bl	8004f54 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e197      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008616:	4b21      	ldr	r3, [pc, #132]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f0      	bne.n	8008604 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8086 	beq.w	800873c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008630:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <HAL_RCC_OscConfig+0x4a8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1a      	ldr	r2, [pc, #104]	; (80086a0 <HAL_RCC_OscConfig+0x4a8>)
 8008636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800863c:	f7fc fc8a 	bl	8004f54 <HAL_GetTick>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008644:	f7fc fc86 	bl	8004f54 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	; 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e177      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <HAL_RCC_OscConfig+0x4a8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d106      	bne.n	8008678 <HAL_RCC_OscConfig+0x480>
 800866a:	4b0c      	ldr	r3, [pc, #48]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866e:	4a0b      	ldr	r2, [pc, #44]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008670:	f043 0301 	orr.w	r3, r3, #1
 8008674:	6713      	str	r3, [r2, #112]	; 0x70
 8008676:	e032      	b.n	80086de <HAL_RCC_OscConfig+0x4e6>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d111      	bne.n	80086a4 <HAL_RCC_OscConfig+0x4ac>
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	4a05      	ldr	r2, [pc, #20]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	6713      	str	r3, [r2, #112]	; 0x70
 800868c:	4b03      	ldr	r3, [pc, #12]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	4a02      	ldr	r2, [pc, #8]	; (800869c <HAL_RCC_OscConfig+0x4a4>)
 8008692:	f023 0304 	bic.w	r3, r3, #4
 8008696:	6713      	str	r3, [r2, #112]	; 0x70
 8008698:	e021      	b.n	80086de <HAL_RCC_OscConfig+0x4e6>
 800869a:	bf00      	nop
 800869c:	58024400 	.word	0x58024400
 80086a0:	58024800 	.word	0x58024800
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d10c      	bne.n	80086c6 <HAL_RCC_OscConfig+0x4ce>
 80086ac:	4b83      	ldr	r3, [pc, #524]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b0:	4a82      	ldr	r2, [pc, #520]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086b2:	f043 0304 	orr.w	r3, r3, #4
 80086b6:	6713      	str	r3, [r2, #112]	; 0x70
 80086b8:	4b80      	ldr	r3, [pc, #512]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086bc:	4a7f      	ldr	r2, [pc, #508]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086be:	f043 0301 	orr.w	r3, r3, #1
 80086c2:	6713      	str	r3, [r2, #112]	; 0x70
 80086c4:	e00b      	b.n	80086de <HAL_RCC_OscConfig+0x4e6>
 80086c6:	4b7d      	ldr	r3, [pc, #500]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	4a7c      	ldr	r2, [pc, #496]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	6713      	str	r3, [r2, #112]	; 0x70
 80086d2:	4b7a      	ldr	r3, [pc, #488]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	4a79      	ldr	r2, [pc, #484]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80086d8:	f023 0304 	bic.w	r3, r3, #4
 80086dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d015      	beq.n	8008712 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e6:	f7fc fc35 	bl	8004f54 <HAL_GetTick>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086ec:	e00a      	b.n	8008704 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ee:	f7fc fc31 	bl	8004f54 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e120      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008704:	4b6d      	ldr	r3, [pc, #436]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0ee      	beq.n	80086ee <HAL_RCC_OscConfig+0x4f6>
 8008710:	e014      	b.n	800873c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008712:	f7fc fc1f 	bl	8004f54 <HAL_GetTick>
 8008716:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008718:	e00a      	b.n	8008730 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800871a:	f7fc fc1b 	bl	8004f54 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	f241 3288 	movw	r2, #5000	; 0x1388
 8008728:	4293      	cmp	r3, r2
 800872a:	d901      	bls.n	8008730 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e10a      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008730:	4b62      	ldr	r3, [pc, #392]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1ee      	bne.n	800871a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80ff 	beq.w	8008944 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008746:	4b5d      	ldr	r3, [pc, #372]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874e:	2b18      	cmp	r3, #24
 8008750:	f000 80ba 	beq.w	80088c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b02      	cmp	r3, #2
 800875a:	f040 8095 	bne.w	8008888 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875e:	4b57      	ldr	r3, [pc, #348]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a56      	ldr	r2, [pc, #344]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876a:	f7fc fbf3 	bl	8004f54 <HAL_GetTick>
 800876e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008770:	e008      	b.n	8008784 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008772:	f7fc fbef 	bl	8004f54 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e0e0      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008784:	4b4d      	ldr	r3, [pc, #308]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f0      	bne.n	8008772 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008790:	4b4a      	ldr	r3, [pc, #296]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008794:	4b4a      	ldr	r3, [pc, #296]	; (80088c0 <HAL_RCC_OscConfig+0x6c8>)
 8008796:	4013      	ands	r3, r2
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087a0:	0112      	lsls	r2, r2, #4
 80087a2:	430a      	orrs	r2, r1
 80087a4:	4945      	ldr	r1, [pc, #276]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	628b      	str	r3, [r1, #40]	; 0x28
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	3b01      	subs	r3, #1
 80087b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	3b01      	subs	r3, #1
 80087ba:	025b      	lsls	r3, r3, #9
 80087bc:	b29b      	uxth	r3, r3
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	3b01      	subs	r3, #1
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	3b01      	subs	r3, #1
 80087d4:	061b      	lsls	r3, r3, #24
 80087d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087da:	4938      	ldr	r1, [pc, #224]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80087e0:	4b36      	ldr	r3, [pc, #216]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a35      	ldr	r2, [pc, #212]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087ec:	4b33      	ldr	r3, [pc, #204]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80087ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f0:	4b34      	ldr	r3, [pc, #208]	; (80088c4 <HAL_RCC_OscConfig+0x6cc>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087f8:	00d2      	lsls	r2, r2, #3
 80087fa:	4930      	ldr	r1, [pc, #192]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008800:	4b2e      	ldr	r3, [pc, #184]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	f023 020c 	bic.w	r2, r3, #12
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	492b      	ldr	r1, [pc, #172]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800880e:	4313      	orrs	r3, r2
 8008810:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008812:	4b2a      	ldr	r3, [pc, #168]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	f023 0202 	bic.w	r2, r3, #2
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	4927      	ldr	r1, [pc, #156]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008820:	4313      	orrs	r3, r2
 8008822:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800882a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800882e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008830:	4b22      	ldr	r3, [pc, #136]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	4a21      	ldr	r2, [pc, #132]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800883c:	4b1f      	ldr	r3, [pc, #124]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a1e      	ldr	r2, [pc, #120]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	4a1b      	ldr	r2, [pc, #108]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a18      	ldr	r2, [pc, #96]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800885a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800885e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008860:	f7fc fb78 	bl	8004f54 <HAL_GetTick>
 8008864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008868:	f7fc fb74 	bl	8004f54 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e065      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800887a:	4b10      	ldr	r3, [pc, #64]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0x670>
 8008886:	e05d      	b.n	8008944 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008888:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a0b      	ldr	r2, [pc, #44]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 800888e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7fc fb5e 	bl	8004f54 <HAL_GetTick>
 8008898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800889c:	f7fc fb5a 	bl	8004f54 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e04b      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088ae:	4b03      	ldr	r3, [pc, #12]	; (80088bc <HAL_RCC_OscConfig+0x6c4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f0      	bne.n	800889c <HAL_RCC_OscConfig+0x6a4>
 80088ba:	e043      	b.n	8008944 <HAL_RCC_OscConfig+0x74c>
 80088bc:	58024400 	.word	0x58024400
 80088c0:	fffffc0c 	.word	0xfffffc0c
 80088c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088c8:	4b21      	ldr	r3, [pc, #132]	; (8008950 <HAL_RCC_OscConfig+0x758>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <HAL_RCC_OscConfig+0x758>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d031      	beq.n	8008940 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f003 0203 	and.w	r2, r3, #3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d12a      	bne.n	8008940 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d122      	bne.n	8008940 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008904:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008906:	429a      	cmp	r2, r3
 8008908:	d11a      	bne.n	8008940 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	0a5b      	lsrs	r3, r3, #9
 800890e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008916:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008918:	429a      	cmp	r2, r3
 800891a:	d111      	bne.n	8008940 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0c1b      	lsrs	r3, r3, #16
 8008920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800892a:	429a      	cmp	r2, r3
 800892c:	d108      	bne.n	8008940 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	0e1b      	lsrs	r3, r3, #24
 8008932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800893c:	429a      	cmp	r2, r3
 800893e:	d001      	beq.n	8008944 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3730      	adds	r7, #48	; 0x30
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400

08008954 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e19c      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008968:	4b8a      	ldr	r3, [pc, #552]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d910      	bls.n	8008998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008976:	4b87      	ldr	r3, [pc, #540]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f023 020f 	bic.w	r2, r3, #15
 800897e:	4985      	ldr	r1, [pc, #532]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	4313      	orrs	r3, r2
 8008984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008986:	4b83      	ldr	r3, [pc, #524]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d001      	beq.n	8008998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e184      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d010      	beq.n	80089c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	4b7b      	ldr	r3, [pc, #492]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d908      	bls.n	80089c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089b4:	4b78      	ldr	r3, [pc, #480]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4975      	ldr	r1, [pc, #468]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d010      	beq.n	80089f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	695a      	ldr	r2, [r3, #20]
 80089d6:	4b70      	ldr	r3, [pc, #448]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089de:	429a      	cmp	r2, r3
 80089e0:	d908      	bls.n	80089f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089e2:	4b6d      	ldr	r3, [pc, #436]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	496a      	ldr	r1, [pc, #424]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d010      	beq.n	8008a22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699a      	ldr	r2, [r3, #24]
 8008a04:	4b64      	ldr	r3, [pc, #400]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d908      	bls.n	8008a22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a10:	4b61      	ldr	r3, [pc, #388]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	495e      	ldr	r1, [pc, #376]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d010      	beq.n	8008a50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69da      	ldr	r2, [r3, #28]
 8008a32:	4b59      	ldr	r3, [pc, #356]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d908      	bls.n	8008a50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a3e:	4b56      	ldr	r3, [pc, #344]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	4953      	ldr	r1, [pc, #332]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d010      	beq.n	8008a7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	4b4d      	ldr	r3, [pc, #308]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d908      	bls.n	8008a7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a6c:	4b4a      	ldr	r3, [pc, #296]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f023 020f 	bic.w	r2, r3, #15
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	4947      	ldr	r1, [pc, #284]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d055      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a8a:	4b43      	ldr	r3, [pc, #268]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4940      	ldr	r1, [pc, #256]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008aa4:	4b3c      	ldr	r3, [pc, #240]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d121      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e0f6      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d107      	bne.n	8008acc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008abc:	4b36      	ldr	r3, [pc, #216]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d115      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e0ea      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d107      	bne.n	8008ae4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ad4:	4b30      	ldr	r3, [pc, #192]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0de      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ae4:	4b2c      	ldr	r3, [pc, #176]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e0d6      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008af4:	4b28      	ldr	r3, [pc, #160]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	f023 0207 	bic.w	r2, r3, #7
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4925      	ldr	r1, [pc, #148]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b06:	f7fc fa25 	bl	8004f54 <HAL_GetTick>
 8008b0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b0c:	e00a      	b.n	8008b24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b0e:	f7fc fa21 	bl	8004f54 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e0be      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b24:	4b1c      	ldr	r3, [pc, #112]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d1eb      	bne.n	8008b0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d010      	beq.n	8008b64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d208      	bcs.n	8008b64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b52:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	f023 020f 	bic.w	r2, r3, #15
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	490e      	ldr	r1, [pc, #56]	; (8008b98 <HAL_RCC_ClockConfig+0x244>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b64:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 030f 	and.w	r3, r3, #15
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d214      	bcs.n	8008b9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f023 020f 	bic.w	r2, r3, #15
 8008b7a:	4906      	ldr	r1, [pc, #24]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b82:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <HAL_RCC_ClockConfig+0x240>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d005      	beq.n	8008b9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e086      	b.n	8008ca2 <HAL_RCC_ClockConfig+0x34e>
 8008b94:	52002000 	.word	0x52002000
 8008b98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d010      	beq.n	8008bca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	4b3f      	ldr	r3, [pc, #252]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d208      	bcs.n	8008bca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bb8:	4b3c      	ldr	r3, [pc, #240]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	4939      	ldr	r1, [pc, #228]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d010      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695a      	ldr	r2, [r3, #20]
 8008bda:	4b34      	ldr	r3, [pc, #208]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d208      	bcs.n	8008bf8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008be6:	4b31      	ldr	r3, [pc, #196]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	492e      	ldr	r1, [pc, #184]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d010      	beq.n	8008c26 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	4b28      	ldr	r3, [pc, #160]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d208      	bcs.n	8008c26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c14:	4b25      	ldr	r3, [pc, #148]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	4922      	ldr	r1, [pc, #136]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d010      	beq.n	8008c54 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	69da      	ldr	r2, [r3, #28]
 8008c36:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d208      	bcs.n	8008c54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c42:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	4917      	ldr	r1, [pc, #92]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c54:	f000 f834 	bl	8008cc0 <HAL_RCC_GetSysClockFreq>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4b14      	ldr	r3, [pc, #80]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	4912      	ldr	r1, [pc, #72]	; (8008cb0 <HAL_RCC_ClockConfig+0x35c>)
 8008c66:	5ccb      	ldrb	r3, [r1, r3]
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c72:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <HAL_RCC_ClockConfig+0x358>)
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <HAL_RCC_ClockConfig+0x35c>)
 8008c7c:	5cd3      	ldrb	r3, [r2, r3]
 8008c7e:	f003 031f 	and.w	r3, r3, #31
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	fa22 f303 	lsr.w	r3, r2, r3
 8008c88:	4a0a      	ldr	r2, [pc, #40]	; (8008cb4 <HAL_RCC_ClockConfig+0x360>)
 8008c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c8c:	4a0a      	ldr	r2, [pc, #40]	; (8008cb8 <HAL_RCC_ClockConfig+0x364>)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008c92:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <HAL_RCC_ClockConfig+0x368>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fc f912 	bl	8004ec0 <HAL_InitTick>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	0800e51c 	.word	0x0800e51c
 8008cb4:	24000014 	.word	0x24000014
 8008cb8:	24000010 	.word	0x24000010
 8008cbc:	24000018 	.word	0x24000018

08008cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b089      	sub	sp, #36	; 0x24
 8008cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cc6:	4bb3      	ldr	r3, [pc, #716]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cce:	2b18      	cmp	r3, #24
 8008cd0:	f200 8155 	bhi.w	8008f7e <HAL_RCC_GetSysClockFreq+0x2be>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008d41 	.word	0x08008d41
 8008ce0:	08008f7f 	.word	0x08008f7f
 8008ce4:	08008f7f 	.word	0x08008f7f
 8008ce8:	08008f7f 	.word	0x08008f7f
 8008cec:	08008f7f 	.word	0x08008f7f
 8008cf0:	08008f7f 	.word	0x08008f7f
 8008cf4:	08008f7f 	.word	0x08008f7f
 8008cf8:	08008f7f 	.word	0x08008f7f
 8008cfc:	08008d67 	.word	0x08008d67
 8008d00:	08008f7f 	.word	0x08008f7f
 8008d04:	08008f7f 	.word	0x08008f7f
 8008d08:	08008f7f 	.word	0x08008f7f
 8008d0c:	08008f7f 	.word	0x08008f7f
 8008d10:	08008f7f 	.word	0x08008f7f
 8008d14:	08008f7f 	.word	0x08008f7f
 8008d18:	08008f7f 	.word	0x08008f7f
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	08008f7f 	.word	0x08008f7f
 8008d24:	08008f7f 	.word	0x08008f7f
 8008d28:	08008f7f 	.word	0x08008f7f
 8008d2c:	08008f7f 	.word	0x08008f7f
 8008d30:	08008f7f 	.word	0x08008f7f
 8008d34:	08008f7f 	.word	0x08008f7f
 8008d38:	08008f7f 	.word	0x08008f7f
 8008d3c:	08008d73 	.word	0x08008d73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d40:	4b94      	ldr	r3, [pc, #592]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d4c:	4b91      	ldr	r3, [pc, #580]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	08db      	lsrs	r3, r3, #3
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	4a90      	ldr	r2, [pc, #576]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d58:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008d5e:	e111      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d60:	4b8d      	ldr	r3, [pc, #564]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d62:	61bb      	str	r3, [r7, #24]
    break;
 8008d64:	e10e      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008d66:	4b8d      	ldr	r3, [pc, #564]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d68:	61bb      	str	r3, [r7, #24]
    break;
 8008d6a:	e10b      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008d6c:	4b8c      	ldr	r3, [pc, #560]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d6e:	61bb      	str	r3, [r7, #24]
    break;
 8008d70:	e108      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d72:	4b88      	ldr	r3, [pc, #544]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008d7c:	4b85      	ldr	r3, [pc, #532]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d88:	4b82      	ldr	r3, [pc, #520]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d92:	4b80      	ldr	r3, [pc, #512]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80e1 	beq.w	8008f78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	f000 8083 	beq.w	8008ec4 <HAL_RCC_GetSysClockFreq+0x204>
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	f200 80a1 	bhi.w	8008f08 <HAL_RCC_GetSysClockFreq+0x248>
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x114>
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d056      	beq.n	8008e80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008dd2:	e099      	b.n	8008f08 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd4:	4b6f      	ldr	r3, [pc, #444]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d02d      	beq.n	8008e3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008de0:	4b6c      	ldr	r3, [pc, #432]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	08db      	lsrs	r3, r3, #3
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	4a6b      	ldr	r2, [pc, #428]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
 8008df0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0a:	4b62      	ldr	r3, [pc, #392]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008e3a:	e087      	b.n	8008f4c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008fa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4e:	4b51      	ldr	r3, [pc, #324]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e7e:	e065      	b.n	8008f4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e92:	4b40      	ldr	r3, [pc, #256]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ea6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec2:	e043      	b.n	8008f4c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008fb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed6:	4b2f      	ldr	r3, [pc, #188]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f06:	e021      	b.n	8008f4c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1a:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f4a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008f4c:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	0a5b      	lsrs	r3, r3, #9
 8008f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f56:	3301      	adds	r3, #1
 8008f58:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f70:	ee17 3a90 	vmov	r3, s15
 8008f74:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008f76:	e005      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61bb      	str	r3, [r7, #24]
    break;
 8008f7c:	e002      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008f7e:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f80:	61bb      	str	r3, [r7, #24]
    break;
 8008f82:	bf00      	nop
  }

  return sysclockfreq;
 8008f84:	69bb      	ldr	r3, [r7, #24]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3724      	adds	r7, #36	; 0x24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	58024400 	.word	0x58024400
 8008f98:	03d09000 	.word	0x03d09000
 8008f9c:	003d0900 	.word	0x003d0900
 8008fa0:	007a1200 	.word	0x007a1200
 8008fa4:	46000000 	.word	0x46000000
 8008fa8:	4c742400 	.word	0x4c742400
 8008fac:	4a742400 	.word	0x4a742400
 8008fb0:	4af42400 	.word	0x4af42400

08008fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008fba:	f7ff fe81 	bl	8008cc0 <HAL_RCC_GetSysClockFreq>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b10      	ldr	r3, [pc, #64]	; (8009004 <HAL_RCC_GetHCLKFreq+0x50>)
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	0a1b      	lsrs	r3, r3, #8
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	490f      	ldr	r1, [pc, #60]	; (8009008 <HAL_RCC_GetHCLKFreq+0x54>)
 8008fcc:	5ccb      	ldrb	r3, [r1, r3]
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <HAL_RCC_GetHCLKFreq+0x50>)
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	4a09      	ldr	r2, [pc, #36]	; (8009008 <HAL_RCC_GetHCLKFreq+0x54>)
 8008fe2:	5cd3      	ldrb	r3, [r2, r3]
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	fa22 f303 	lsr.w	r3, r2, r3
 8008fee:	4a07      	ldr	r2, [pc, #28]	; (800900c <HAL_RCC_GetHCLKFreq+0x58>)
 8008ff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ff2:	4a07      	ldr	r2, [pc, #28]	; (8009010 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ff8:	4b04      	ldr	r3, [pc, #16]	; (800900c <HAL_RCC_GetHCLKFreq+0x58>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	58024400 	.word	0x58024400
 8009008:	0800e51c 	.word	0x0800e51c
 800900c:	24000014 	.word	0x24000014
 8009010:	24000010 	.word	0x24000010

08009014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009018:	f7ff ffcc 	bl	8008fb4 <HAL_RCC_GetHCLKFreq>
 800901c:	4602      	mov	r2, r0
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	091b      	lsrs	r3, r3, #4
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	4904      	ldr	r1, [pc, #16]	; (800903c <HAL_RCC_GetPCLK1Freq+0x28>)
 800902a:	5ccb      	ldrb	r3, [r1, r3]
 800902c:	f003 031f 	and.w	r3, r3, #31
 8009030:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009034:	4618      	mov	r0, r3
 8009036:	bd80      	pop	{r7, pc}
 8009038:	58024400 	.word	0x58024400
 800903c:	0800e51c 	.word	0x0800e51c

08009040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009044:	f7ff ffb6 	bl	8008fb4 <HAL_RCC_GetHCLKFreq>
 8009048:	4602      	mov	r2, r0
 800904a:	4b06      	ldr	r3, [pc, #24]	; (8009064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	0a1b      	lsrs	r3, r3, #8
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	4904      	ldr	r1, [pc, #16]	; (8009068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009056:	5ccb      	ldrb	r3, [r1, r3]
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009060:	4618      	mov	r0, r3
 8009062:	bd80      	pop	{r7, pc}
 8009064:	58024400 	.word	0x58024400
 8009068:	0800e51c 	.word	0x0800e51c

0800906c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009074:	2300      	movs	r3, #0
 8009076:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009078:	2300      	movs	r3, #0
 800907a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d03f      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009090:	d02a      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009096:	d824      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800909c:	d018      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800909e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a2:	d81e      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80090a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ac:	d007      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80090ae:	e018      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090b0:	4ba4      	ldr	r3, [pc, #656]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	4aa3      	ldr	r2, [pc, #652]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090bc:	e015      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3304      	adds	r3, #4
 80090c2:	2102      	movs	r1, #2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f989 	bl	800a3dc <RCCEx_PLL2_Config>
 80090ca:	4603      	mov	r3, r0
 80090cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090ce:	e00c      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	2102      	movs	r1, #2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f001 fa32 	bl	800a540 <RCCEx_PLL3_Config>
 80090dc:	4603      	mov	r3, r0
 80090de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090e0:	e003      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	75fb      	strb	r3, [r7, #23]
      break;
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80090e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090f0:	4b94      	ldr	r3, [pc, #592]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fc:	4991      	ldr	r1, [pc, #580]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	650b      	str	r3, [r1, #80]	; 0x50
 8009102:	e001      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	2b00      	cmp	r3, #0
 8009112:	d03d      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009118:	2b04      	cmp	r3, #4
 800911a:	d826      	bhi.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800911c:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009122:	bf00      	nop
 8009124:	08009139 	.word	0x08009139
 8009128:	08009147 	.word	0x08009147
 800912c:	08009159 	.word	0x08009159
 8009130:	08009171 	.word	0x08009171
 8009134:	08009171 	.word	0x08009171
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009138:	4b82      	ldr	r3, [pc, #520]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	4a81      	ldr	r2, [pc, #516]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800913e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009144:	e015      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3304      	adds	r3, #4
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f001 f945 	bl	800a3dc <RCCEx_PLL2_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009156:	e00c      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3324      	adds	r3, #36	; 0x24
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f001 f9ee 	bl	800a540 <RCCEx_PLL3_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009168:	e003      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
      break;
 800916e:	e000      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009178:	4b72      	ldr	r3, [pc, #456]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800917a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917c:	f023 0207 	bic.w	r2, r3, #7
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009184:	496f      	ldr	r1, [pc, #444]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009186:	4313      	orrs	r3, r2
 8009188:	650b      	str	r3, [r1, #80]	; 0x50
 800918a:	e001      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	2b00      	cmp	r3, #0
 800919a:	d051      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091a2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80091a6:	d036      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80091a8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80091ac:	d830      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80091ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091b2:	d032      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80091b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091b8:	d82a      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80091ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091be:	d02e      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80091c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091c4:	d824      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80091c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091ca:	d018      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80091cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091d0:	d81e      	bhi.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x172>
 80091d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091da:	d007      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x180>
 80091dc:	e018      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091de:	4b59      	ldr	r3, [pc, #356]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a58      	ldr	r2, [pc, #352]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091ea:	e019      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f8f2 	bl	800a3dc <RCCEx_PLL2_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091fc:	e010      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3324      	adds	r3, #36	; 0x24
 8009202:	2100      	movs	r1, #0
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f99b 	bl	800a540 <RCCEx_PLL3_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800920e:	e007      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
      break;
 8009214:	e004      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009216:	bf00      	nop
 8009218:	e002      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800921a:	bf00      	nop
 800921c:	e000      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800921e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009226:	4b47      	ldr	r3, [pc, #284]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009234:	4943      	ldr	r1, [pc, #268]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009236:	4313      	orrs	r3, r2
 8009238:	658b      	str	r3, [r1, #88]	; 0x58
 800923a:	e001      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009248:	2b00      	cmp	r3, #0
 800924a:	d051      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009252:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009256:	d036      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009258:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800925c:	d830      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800925e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009262:	d032      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009268:	d82a      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800926a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800926e:	d02e      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009274:	d824      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800927a:	d018      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x242>
 800927c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009280:	d81e      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800928a:	d007      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800928c:	e018      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928e:	4b2d      	ldr	r3, [pc, #180]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	4a2c      	ldr	r2, [pc, #176]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800929a:	e019      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f001 f89a 	bl	800a3dc <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80092ac:	e010      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3324      	adds	r3, #36	; 0x24
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 f943 	bl	800a540 <RCCEx_PLL3_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092be:	e007      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	75fb      	strb	r3, [r7, #23]
      break;
 80092c4:	e004      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80092c6:	bf00      	nop
 80092c8:	e002      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80092ca:	bf00      	nop
 80092cc:	e000      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80092ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80092d6:	4b1b      	ldr	r3, [pc, #108]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80092d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092e4:	4917      	ldr	r1, [pc, #92]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	658b      	str	r3, [r1, #88]	; 0x58
 80092ea:	e001      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d035      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009300:	2b30      	cmp	r3, #48	; 0x30
 8009302:	d01c      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009304:	2b30      	cmp	r3, #48	; 0x30
 8009306:	d817      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009308:	2b20      	cmp	r3, #32
 800930a:	d00c      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800930c:	2b20      	cmp	r3, #32
 800930e:	d813      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d019      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009314:	2b10      	cmp	r3, #16
 8009316:	d10f      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	4a09      	ldr	r2, [pc, #36]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800931e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009324:	e011      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3304      	adds	r3, #4
 800932a:	2102      	movs	r1, #2
 800932c:	4618      	mov	r0, r3
 800932e:	f001 f855 	bl	800a3dc <RCCEx_PLL2_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009336:	e008      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
      break;
 800933c:	e005      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800933e:	bf00      	nop
 8009340:	e003      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
      break;
 8009348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009350:	4ba3      	ldr	r3, [pc, #652]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800935c:	49a0      	ldr	r1, [pc, #640]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800935e:	4313      	orrs	r3, r2
 8009360:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009362:	e001      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d047      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800937c:	d030      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800937e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009382:	d82a      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009384:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009388:	d02c      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800938a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800938e:	d824      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009394:	d018      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939a:	d81e      	bhi.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80093a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a4:	d007      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80093a6:	e018      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a8:	4b8d      	ldr	r3, [pc, #564]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4a8c      	ldr	r2, [pc, #560]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093b4:	e017      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3304      	adds	r3, #4
 80093ba:	2100      	movs	r1, #0
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 f80d 	bl	800a3dc <RCCEx_PLL2_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093c6:	e00e      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3324      	adds	r3, #36	; 0x24
 80093cc:	2100      	movs	r1, #0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 f8b6 	bl	800a540 <RCCEx_PLL3_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093d8:	e005      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
      break;
 80093de:	e002      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80093e0:	bf00      	nop
 80093e2:	e000      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80093e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093ec:	4b7c      	ldr	r3, [pc, #496]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f8:	4979      	ldr	r1, [pc, #484]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	650b      	str	r3, [r1, #80]	; 0x50
 80093fe:	e001      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d049      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009418:	d02e      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800941a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800941e:	d828      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009424:	d02a      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800942a:	d822      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800942c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009430:	d026      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009436:	d81c      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800943c:	d010      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800943e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009442:	d816      	bhi.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01d      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800944c:	d111      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3304      	adds	r3, #4
 8009452:	2101      	movs	r1, #1
 8009454:	4618      	mov	r0, r3
 8009456:	f000 ffc1 	bl	800a3dc <RCCEx_PLL2_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800945e:	e012      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3324      	adds	r3, #36	; 0x24
 8009464:	2101      	movs	r1, #1
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f86a 	bl	800a540 <RCCEx_PLL3_Config>
 800946c:	4603      	mov	r3, r0
 800946e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009470:	e009      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]
      break;
 8009476:	e006      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009478:	bf00      	nop
 800947a:	e004      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800947c:	bf00      	nop
 800947e:	e002      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009480:	bf00      	nop
 8009482:	e000      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d109      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800948c:	4b54      	ldr	r3, [pc, #336]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800948e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009490:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009498:	4951      	ldr	r1, [pc, #324]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800949a:	4313      	orrs	r3, r2
 800949c:	650b      	str	r3, [r1, #80]	; 0x50
 800949e:	e001      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d04b      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094ba:	d02e      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80094bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094c0:	d828      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80094c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c6:	d02a      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d822      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80094ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094d2:	d026      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80094d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094d8:	d81c      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80094da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094de:	d010      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80094e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094e4:	d816      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d01d      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80094ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ee:	d111      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3304      	adds	r3, #4
 80094f4:	2101      	movs	r1, #1
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 ff70 	bl	800a3dc <RCCEx_PLL2_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009500:	e012      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3324      	adds	r3, #36	; 0x24
 8009506:	2101      	movs	r1, #1
 8009508:	4618      	mov	r0, r3
 800950a:	f001 f819 	bl	800a540 <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009512:	e009      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
      break;
 8009518:	e006      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800951a:	bf00      	nop
 800951c:	e004      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800951e:	bf00      	nop
 8009520:	e002      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009522:	bf00      	nop
 8009524:	e000      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10a      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800952e:	4b2c      	ldr	r3, [pc, #176]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009532:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800953c:	4928      	ldr	r1, [pc, #160]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800953e:	4313      	orrs	r3, r2
 8009540:	658b      	str	r3, [r1, #88]	; 0x58
 8009542:	e001      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d02f      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800955c:	d00e      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800955e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009562:	d814      	bhi.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d015      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800956c:	d10f      	bne.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956e:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a1b      	ldr	r2, [pc, #108]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800957a:	e00c      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	2101      	movs	r1, #1
 8009582:	4618      	mov	r0, r3
 8009584:	f000 ff2a 	bl	800a3dc <RCCEx_PLL2_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800958c:	e003      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]
      break;
 8009592:	e000      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800959c:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800959e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095a8:	490d      	ldr	r1, [pc, #52]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	650b      	str	r3, [r1, #80]	; 0x50
 80095ae:	e001      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d034      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d81d      	bhi.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80095c8:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80095ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ce:	bf00      	nop
 80095d0:	0800960b 	.word	0x0800960b
 80095d4:	080095e5 	.word	0x080095e5
 80095d8:	080095f3 	.word	0x080095f3
 80095dc:	0800960b 	.word	0x0800960b
 80095e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e4:	4bb1      	ldr	r3, [pc, #708]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	4ab0      	ldr	r2, [pc, #704]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80095f0:	e00c      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	2102      	movs	r1, #2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 feef 	bl	800a3dc <RCCEx_PLL2_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009602:	e003      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
      break;
 8009608:	e000      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800960a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d109      	bne.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009612:	4ba6      	ldr	r3, [pc, #664]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009616:	f023 0203 	bic.w	r2, r3, #3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961e:	49a3      	ldr	r1, [pc, #652]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009620:	4313      	orrs	r3, r2
 8009622:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009624:	e001      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 8086 	beq.w	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009638:	4b9d      	ldr	r3, [pc, #628]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a9c      	ldr	r2, [pc, #624]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800963e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009644:	f7fb fc86 	bl	8004f54 <HAL_GetTick>
 8009648:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800964a:	e009      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800964c:	f7fb fc82 	bl	8004f54 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b64      	cmp	r3, #100	; 0x64
 8009658:	d902      	bls.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	75fb      	strb	r3, [r7, #23]
        break;
 800965e:	e005      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009660:	4b93      	ldr	r3, [pc, #588]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0ef      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d166      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009672:	4b8e      	ldr	r3, [pc, #568]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800967c:	4053      	eors	r3, r2
 800967e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009682:	2b00      	cmp	r3, #0
 8009684:	d013      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009686:	4b89      	ldr	r3, [pc, #548]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800968e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009690:	4b86      	ldr	r3, [pc, #536]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009694:	4a85      	ldr	r2, [pc, #532]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800969a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800969c:	4b83      	ldr	r3, [pc, #524]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800969e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a0:	4a82      	ldr	r2, [pc, #520]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096a8:	4a80      	ldr	r2, [pc, #512]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b8:	d115      	bne.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ba:	f7fb fc4b 	bl	8004f54 <HAL_GetTick>
 80096be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096c0:	e00b      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096c2:	f7fb fc47 	bl	8004f54 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d902      	bls.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	75fb      	strb	r3, [r7, #23]
            break;
 80096d8:	e005      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096da:	4b74      	ldr	r3, [pc, #464]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0ed      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d126      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096fa:	d10d      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80096fc:	4b6b      	ldr	r3, [pc, #428]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800970a:	0919      	lsrs	r1, r3, #4
 800970c:	4b69      	ldr	r3, [pc, #420]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800970e:	400b      	ands	r3, r1
 8009710:	4966      	ldr	r1, [pc, #408]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009712:	4313      	orrs	r3, r2
 8009714:	610b      	str	r3, [r1, #16]
 8009716:	e005      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009718:	4b64      	ldr	r3, [pc, #400]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	4a63      	ldr	r2, [pc, #396]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800971e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009722:	6113      	str	r3, [r2, #16]
 8009724:	4b61      	ldr	r3, [pc, #388]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009726:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800972e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009732:	495e      	ldr	r1, [pc, #376]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009734:	4313      	orrs	r3, r2
 8009736:	670b      	str	r3, [r1, #112]	; 0x70
 8009738:	e004      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	75bb      	strb	r3, [r7, #22]
 800973e:	e001      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d07e      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009754:	2b28      	cmp	r3, #40	; 0x28
 8009756:	d867      	bhi.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009758:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	0800982f 	.word	0x0800982f
 8009764:	08009829 	.word	0x08009829
 8009768:	08009829 	.word	0x08009829
 800976c:	08009829 	.word	0x08009829
 8009770:	08009829 	.word	0x08009829
 8009774:	08009829 	.word	0x08009829
 8009778:	08009829 	.word	0x08009829
 800977c:	08009829 	.word	0x08009829
 8009780:	08009805 	.word	0x08009805
 8009784:	08009829 	.word	0x08009829
 8009788:	08009829 	.word	0x08009829
 800978c:	08009829 	.word	0x08009829
 8009790:	08009829 	.word	0x08009829
 8009794:	08009829 	.word	0x08009829
 8009798:	08009829 	.word	0x08009829
 800979c:	08009829 	.word	0x08009829
 80097a0:	08009817 	.word	0x08009817
 80097a4:	08009829 	.word	0x08009829
 80097a8:	08009829 	.word	0x08009829
 80097ac:	08009829 	.word	0x08009829
 80097b0:	08009829 	.word	0x08009829
 80097b4:	08009829 	.word	0x08009829
 80097b8:	08009829 	.word	0x08009829
 80097bc:	08009829 	.word	0x08009829
 80097c0:	0800982f 	.word	0x0800982f
 80097c4:	08009829 	.word	0x08009829
 80097c8:	08009829 	.word	0x08009829
 80097cc:	08009829 	.word	0x08009829
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009829 	.word	0x08009829
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009829 	.word	0x08009829
 80097e0:	0800982f 	.word	0x0800982f
 80097e4:	08009829 	.word	0x08009829
 80097e8:	08009829 	.word	0x08009829
 80097ec:	08009829 	.word	0x08009829
 80097f0:	08009829 	.word	0x08009829
 80097f4:	08009829 	.word	0x08009829
 80097f8:	08009829 	.word	0x08009829
 80097fc:	08009829 	.word	0x08009829
 8009800:	0800982f 	.word	0x0800982f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3304      	adds	r3, #4
 8009808:	2101      	movs	r1, #1
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fde6 	bl	800a3dc <RCCEx_PLL2_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009814:	e00c      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3324      	adds	r3, #36	; 0x24
 800981a:	2101      	movs	r1, #1
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fe8f 	bl	800a540 <RCCEx_PLL3_Config>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009826:	e003      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	75fb      	strb	r3, [r7, #23]
      break;
 800982c:	e000      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800982e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009836:	4b1d      	ldr	r3, [pc, #116]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009842:	491a      	ldr	r1, [pc, #104]	; (80098ac <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009844:	4313      	orrs	r3, r2
 8009846:	654b      	str	r3, [r1, #84]	; 0x54
 8009848:	e001      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d03e      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	2b05      	cmp	r3, #5
 8009860:	d820      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	080098b9 	.word	0x080098b9
 800986c:	08009881 	.word	0x08009881
 8009870:	08009893 	.word	0x08009893
 8009874:	080098b9 	.word	0x080098b9
 8009878:	080098b9 	.word	0x080098b9
 800987c:	080098b9 	.word	0x080098b9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	2101      	movs	r1, #1
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fda8 	bl	800a3dc <RCCEx_PLL2_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009890:	e013      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3324      	adds	r3, #36	; 0x24
 8009896:	2101      	movs	r1, #1
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fe51 	bl	800a540 <RCCEx_PLL3_Config>
 800989e:	4603      	mov	r3, r0
 80098a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098a2:	e00a      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
      break;
 80098a8:	e007      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80098aa:	bf00      	nop
 80098ac:	58024400 	.word	0x58024400
 80098b0:	58024800 	.word	0x58024800
 80098b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80098b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d109      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098c0:	4b9f      	ldr	r3, [pc, #636]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80098c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c4:	f023 0207 	bic.w	r2, r3, #7
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098cc:	499c      	ldr	r1, [pc, #624]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	654b      	str	r3, [r1, #84]	; 0x54
 80098d2:	e001      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d039      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ea:	2b05      	cmp	r3, #5
 80098ec:	d820      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009937 	.word	0x08009937
 80098f8:	0800990d 	.word	0x0800990d
 80098fc:	0800991f 	.word	0x0800991f
 8009900:	08009937 	.word	0x08009937
 8009904:	08009937 	.word	0x08009937
 8009908:	08009937 	.word	0x08009937
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3304      	adds	r3, #4
 8009910:	2101      	movs	r1, #1
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fd62 	bl	800a3dc <RCCEx_PLL2_Config>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800991c:	e00c      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3324      	adds	r3, #36	; 0x24
 8009922:	2101      	movs	r1, #1
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fe0b 	bl	800a540 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800992e:	e003      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75fb      	strb	r3, [r7, #23]
      break;
 8009934:	e000      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800993e:	4b80      	ldr	r3, [pc, #512]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009942:	f023 0207 	bic.w	r2, r3, #7
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800994c:	497c      	ldr	r1, [pc, #496]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800994e:	4313      	orrs	r3, r2
 8009950:	658b      	str	r3, [r1, #88]	; 0x58
 8009952:	e001      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b00      	cmp	r3, #0
 8009962:	d04b      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800996e:	d02e      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009974:	d828      	bhi.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997a:	d02a      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800997c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009980:	d822      	bhi.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009986:	d026      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800998c:	d81c      	bhi.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800998e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009992:	d010      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009998:	d816      	bhi.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01d      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800999e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a2:	d111      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3304      	adds	r3, #4
 80099a8:	2100      	movs	r1, #0
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fd16 	bl	800a3dc <RCCEx_PLL2_Config>
 80099b0:	4603      	mov	r3, r0
 80099b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80099b4:	e012      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3324      	adds	r3, #36	; 0x24
 80099ba:	2102      	movs	r1, #2
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fdbf 	bl	800a540 <RCCEx_PLL3_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80099c6:	e009      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	75fb      	strb	r3, [r7, #23]
      break;
 80099cc:	e006      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80099ce:	bf00      	nop
 80099d0:	e004      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80099d2:	bf00      	nop
 80099d4:	e002      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80099da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099e2:	4b57      	ldr	r3, [pc, #348]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f0:	4953      	ldr	r1, [pc, #332]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	654b      	str	r3, [r1, #84]	; 0x54
 80099f6:	e001      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d04b      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a12:	d02e      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009a14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a18:	d828      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a1e:	d02a      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a24:	d822      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a2a:	d026      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a30:	d81c      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a36:	d010      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a3c:	d816      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d01d      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a46:	d111      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fcc4 	bl	800a3dc <RCCEx_PLL2_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a58:	e012      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3324      	adds	r3, #36	; 0x24
 8009a5e:	2102      	movs	r1, #2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fd6d 	bl	800a540 <RCCEx_PLL3_Config>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a6a:	e009      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a70:	e006      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009a72:	bf00      	nop
 8009a74:	e004      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009a76:	bf00      	nop
 8009a78:	e002      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009a7a:	bf00      	nop
 8009a7c:	e000      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10a      	bne.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a86:	4b2e      	ldr	r3, [pc, #184]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a94:	492a      	ldr	r1, [pc, #168]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	658b      	str	r3, [r1, #88]	; 0x58
 8009a9a:	e001      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d04d      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ab2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ab6:	d02e      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009ab8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009abc:	d828      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac2:	d02a      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac8:	d822      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009aca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ace:	d026      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009ad0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ad4:	d81c      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ada:	d010      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ae0:	d816      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d01d      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aea:	d111      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	2100      	movs	r1, #0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fc72 	bl	800a3dc <RCCEx_PLL2_Config>
 8009af8:	4603      	mov	r3, r0
 8009afa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009afc:	e012      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3324      	adds	r3, #36	; 0x24
 8009b02:	2102      	movs	r1, #2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fd1b 	bl	800a540 <RCCEx_PLL3_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b0e:	e009      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	75fb      	strb	r3, [r7, #23]
      break;
 8009b14:	e006      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b16:	bf00      	nop
 8009b18:	e004      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b1a:	bf00      	nop
 8009b1c:	e002      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b1e:	bf00      	nop
 8009b20:	e000      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10c      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b38:	4901      	ldr	r1, [pc, #4]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8009b3e:	e003      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d018      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5c:	d10a      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3324      	adds	r3, #36	; 0x24
 8009b62:	2102      	movs	r1, #2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fceb 	bl	800a540 <RCCEx_PLL3_Config>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009b74:	4b8a      	ldr	r3, [pc, #552]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b80:	4987      	ldr	r1, [pc, #540]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0310 	and.w	r3, r3, #16
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d01a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9c:	d10a      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3324      	adds	r3, #36	; 0x24
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 fccb 	bl	800a540 <RCCEx_PLL3_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bb4:	4b7a      	ldr	r3, [pc, #488]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc2:	4977      	ldr	r1, [pc, #476]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d034      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bde:	d01d      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009be4:	d817      	bhi.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bee:	d009      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009bf0:	e011      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fbef 	bl	800a3dc <RCCEx_PLL2_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c02:	e00c      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3324      	adds	r3, #36	; 0x24
 8009c08:	2102      	movs	r1, #2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fc98 	bl	800a540 <RCCEx_PLL3_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c14:	e003      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1a:	e000      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10a      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c24:	4b5e      	ldr	r3, [pc, #376]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c32:	495b      	ldr	r1, [pc, #364]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	658b      	str	r3, [r1, #88]	; 0x58
 8009c38:	e001      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d033      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c54:	d01c      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009c56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c5a:	d816      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c60:	d003      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c66:	d007      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009c68:	e00f      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c6a:	4b4d      	ldr	r3, [pc, #308]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6e:	4a4c      	ldr	r2, [pc, #304]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c76:	e00c      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3324      	adds	r3, #36	; 0x24
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fc5e 	bl	800a540 <RCCEx_PLL3_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c88:	e003      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8e:	e000      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c98:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca6:	493e      	ldr	r1, [pc, #248]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	654b      	str	r3, [r1, #84]	; 0x54
 8009cac:	e001      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d029      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cca:	d007      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ccc:	e00f      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cce:	4b34      	ldr	r3, [pc, #208]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd2:	4a33      	ldr	r2, [pc, #204]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009cda:	e00b      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	2102      	movs	r1, #2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fb7a 	bl	800a3dc <RCCEx_PLL2_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009cec:	e002      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009cfa:	4b29      	ldr	r3, [pc, #164]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d06:	4926      	ldr	r1, [pc, #152]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d0c:	e001      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3324      	adds	r3, #36	; 0x24
 8009d22:	2102      	movs	r1, #2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fc0b 	bl	800a540 <RCCEx_PLL3_Config>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d033      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d48:	d017      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d4e:	d811      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d54:	d013      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d5a:	d80b      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d010      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d64:	d106      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d66:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	4a0d      	ldr	r2, [pc, #52]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009d72:	e007      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	75fb      	strb	r3, [r7, #23]
      break;
 8009d78:	e004      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009d7a:	bf00      	nop
 8009d7c:	e002      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009d7e:	bf00      	nop
 8009d80:	e000      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10c      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d96:	4902      	ldr	r1, [pc, #8]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	654b      	str	r3, [r1, #84]	; 0x54
 8009d9c:	e004      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009d9e:	bf00      	nop
 8009da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d008      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009db4:	4b29      	ldr	r3, [pc, #164]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dc0:	4926      	ldr	r1, [pc, #152]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d008      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009dd2:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dde:	491f      	ldr	r1, [pc, #124]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00d      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009df0:	4b1a      	ldr	r3, [pc, #104]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	4a19      	ldr	r2, [pc, #100]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dfa:	6113      	str	r3, [r2, #16]
 8009dfc:	4b17      	ldr	r3, [pc, #92]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009dfe:	691a      	ldr	r2, [r3, #16]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e06:	4915      	ldr	r1, [pc, #84]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	da08      	bge.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e20:	490e      	ldr	r1, [pc, #56]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e32:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e40:	4906      	ldr	r1, [pc, #24]	; (8009e5c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009e46:	7dbb      	ldrb	r3, [r7, #22]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e000      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	58024400 	.word	0x58024400

08009e60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e64:	f7ff f8a6 	bl	8008fb4 <HAL_RCC_GetHCLKFreq>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	091b      	lsrs	r3, r3, #4
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	4904      	ldr	r1, [pc, #16]	; (8009e88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e76:	5ccb      	ldrb	r3, [r1, r3]
 8009e78:	f003 031f 	and.w	r3, r3, #31
 8009e7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	58024400 	.word	0x58024400
 8009e88:	0800e51c 	.word	0x0800e51c

08009e8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b089      	sub	sp, #36	; 0x24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e94:	4ba1      	ldr	r3, [pc, #644]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	f003 0303 	and.w	r3, r3, #3
 8009e9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009e9e:	4b9f      	ldr	r3, [pc, #636]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea2:	0b1b      	lsrs	r3, r3, #12
 8009ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009eaa:	4b9c      	ldr	r3, [pc, #624]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eae:	091b      	lsrs	r3, r3, #4
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009eb6:	4b99      	ldr	r3, [pc, #612]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eba:	08db      	lsrs	r3, r3, #3
 8009ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	fb02 f303 	mul.w	r3, r2, r3
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 8111 	beq.w	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	f000 8083 	beq.w	8009fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	f200 80a1 	bhi.w	800a02c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d056      	beq.n	8009fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ef6:	e099      	b.n	800a02c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef8:	4b88      	ldr	r3, [pc, #544]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d02d      	beq.n	8009f60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f04:	4b85      	ldr	r3, [pc, #532]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	08db      	lsrs	r3, r3, #3
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	4a84      	ldr	r2, [pc, #528]	; (800a120 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f10:	fa22 f303 	lsr.w	r3, r2, r3
 8009f14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	ee07 3a90 	vmov	s15, r3
 8009f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2e:	4b7b      	ldr	r3, [pc, #492]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f5e:	e087      	b.n	800a070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a128 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f72:	4b6a      	ldr	r3, [pc, #424]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fa2:	e065      	b.n	800a070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb6:	4b59      	ldr	r3, [pc, #356]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fe6:	e043      	b.n	800a070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a130 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffa:	4b48      	ldr	r3, [pc, #288]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a002:	ee07 3a90 	vmov	s15, r3
 800a006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a02a:	e021      	b.n	800a070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a12c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03e:	4b37      	ldr	r3, [pc, #220]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a052:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a06e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a070:	4b2a      	ldr	r3, [pc, #168]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a074:	0a5b      	lsrs	r3, r3, #9
 800a076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a096:	ee17 2a90 	vmov	r2, s15
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a09e:	4b1f      	ldr	r3, [pc, #124]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	0c1b      	lsrs	r3, r3, #16
 800a0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a8:	ee07 3a90 	vmov	s15, r3
 800a0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c4:	ee17 2a90 	vmov	r2, s15
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a0cc:	4b13      	ldr	r3, [pc, #76]	; (800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d0:	0e1b      	lsrs	r3, r3, #24
 800a0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f2:	ee17 2a90 	vmov	r2, s15
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a0fa:	e008      	b.n	800a10e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	609a      	str	r2, [r3, #8]
}
 800a10e:	bf00      	nop
 800a110:	3724      	adds	r7, #36	; 0x24
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	58024400 	.word	0x58024400
 800a120:	03d09000 	.word	0x03d09000
 800a124:	46000000 	.word	0x46000000
 800a128:	4c742400 	.word	0x4c742400
 800a12c:	4a742400 	.word	0x4a742400
 800a130:	4af42400 	.word	0x4af42400

0800a134 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a134:	b480      	push	{r7}
 800a136:	b089      	sub	sp, #36	; 0x24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a13c:	4ba1      	ldr	r3, [pc, #644]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	f003 0303 	and.w	r3, r3, #3
 800a144:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a146:	4b9f      	ldr	r3, [pc, #636]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	0d1b      	lsrs	r3, r3, #20
 800a14c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a150:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a152:	4b9c      	ldr	r3, [pc, #624]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	0a1b      	lsrs	r3, r3, #8
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a15e:	4b99      	ldr	r3, [pc, #612]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a162:	08db      	lsrs	r3, r3, #3
 800a164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	ee07 3a90 	vmov	s15, r3
 800a172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 8111 	beq.w	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	2b02      	cmp	r3, #2
 800a186:	f000 8083 	beq.w	800a290 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	f200 80a1 	bhi.w	800a2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d056      	beq.n	800a24c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a19e:	e099      	b.n	800a2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1a0:	4b88      	ldr	r3, [pc, #544]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0320 	and.w	r3, r3, #32
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d02d      	beq.n	800a208 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1ac:	4b85      	ldr	r3, [pc, #532]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	08db      	lsrs	r3, r3, #3
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	4a84      	ldr	r2, [pc, #528]	; (800a3c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	ee07 3a90 	vmov	s15, r3
 800a1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d6:	4b7b      	ldr	r3, [pc, #492]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a202:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a206:	e087      	b.n	800a318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21a:	4b6a      	ldr	r3, [pc, #424]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a222:	ee07 3a90 	vmov	s15, r3
 800a226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a22e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a24a:	e065      	b.n	800a318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	ee07 3a90 	vmov	s15, r3
 800a252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a256:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25e:	4b59      	ldr	r3, [pc, #356]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a272:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a28e:	e043      	b.n	800a318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	ee07 3a90 	vmov	s15, r3
 800a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a2:	4b48      	ldr	r3, [pc, #288]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2aa:	ee07 3a90 	vmov	s15, r3
 800a2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2d2:	e021      	b.n	800a318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e6:	4b37      	ldr	r3, [pc, #220]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a3cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a316:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a318:	4b2a      	ldr	r3, [pc, #168]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	0a5b      	lsrs	r3, r3, #9
 800a31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a32e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a332:	edd7 6a07 	vldr	s13, [r7, #28]
 800a336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a33a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a33e:	ee17 2a90 	vmov	r2, s15
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a346:	4b1f      	ldr	r3, [pc, #124]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	0c1b      	lsrs	r3, r3, #16
 800a34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a350:	ee07 3a90 	vmov	s15, r3
 800a354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a35c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a360:	edd7 6a07 	vldr	s13, [r7, #28]
 800a364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a36c:	ee17 2a90 	vmov	r2, s15
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a374:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	0e1b      	lsrs	r3, r3, #24
 800a37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a38a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a38e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a39a:	ee17 2a90 	vmov	r2, s15
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	609a      	str	r2, [r3, #8]
}
 800a3b6:	bf00      	nop
 800a3b8:	3724      	adds	r7, #36	; 0x24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	58024400 	.word	0x58024400
 800a3c8:	03d09000 	.word	0x03d09000
 800a3cc:	46000000 	.word	0x46000000
 800a3d0:	4c742400 	.word	0x4c742400
 800a3d4:	4a742400 	.word	0x4a742400
 800a3d8:	4af42400 	.word	0x4af42400

0800a3dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3ea:	4b53      	ldr	r3, [pc, #332]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d101      	bne.n	800a3fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e099      	b.n	800a52e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3fa:	4b4f      	ldr	r3, [pc, #316]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a4e      	ldr	r2, [pc, #312]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a400:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a406:	f7fa fda5 	bl	8004f54 <HAL_GetTick>
 800a40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a40c:	e008      	b.n	800a420 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a40e:	f7fa fda1 	bl	8004f54 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d901      	bls.n	800a420 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e086      	b.n	800a52e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a420:	4b45      	ldr	r3, [pc, #276]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1f0      	bne.n	800a40e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a42c:	4b42      	ldr	r3, [pc, #264]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a430:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	031b      	lsls	r3, r3, #12
 800a43a:	493f      	ldr	r1, [pc, #252]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	628b      	str	r3, [r1, #40]	; 0x28
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	3b01      	subs	r3, #1
 800a446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	3b01      	subs	r3, #1
 800a450:	025b      	lsls	r3, r3, #9
 800a452:	b29b      	uxth	r3, r3
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	041b      	lsls	r3, r3, #16
 800a45e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	3b01      	subs	r3, #1
 800a46a:	061b      	lsls	r3, r3, #24
 800a46c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a470:	4931      	ldr	r1, [pc, #196]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a472:	4313      	orrs	r3, r2
 800a474:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a476:	4b30      	ldr	r3, [pc, #192]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	492d      	ldr	r1, [pc, #180]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a484:	4313      	orrs	r3, r2
 800a486:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a488:	4b2b      	ldr	r3, [pc, #172]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	f023 0220 	bic.w	r2, r3, #32
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	4928      	ldr	r1, [pc, #160]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a496:	4313      	orrs	r3, r2
 800a498:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a49a:	4b27      	ldr	r3, [pc, #156]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	4a26      	ldr	r2, [pc, #152]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4a0:	f023 0310 	bic.w	r3, r3, #16
 800a4a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a4a6:	4b24      	ldr	r3, [pc, #144]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4aa:	4b24      	ldr	r3, [pc, #144]	; (800a53c <RCCEx_PLL2_Config+0x160>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	69d2      	ldr	r2, [r2, #28]
 800a4b2:	00d2      	lsls	r2, r2, #3
 800a4b4:	4920      	ldr	r1, [pc, #128]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a4ba:	4b1f      	ldr	r3, [pc, #124]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	4a1e      	ldr	r2, [pc, #120]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4c0:	f043 0310 	orr.w	r3, r3, #16
 800a4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a4cc:	4b1a      	ldr	r3, [pc, #104]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	4a19      	ldr	r2, [pc, #100]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4d8:	e00f      	b.n	800a4fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d106      	bne.n	800a4ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4e0:	4b15      	ldr	r3, [pc, #84]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	4a14      	ldr	r2, [pc, #80]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4ec:	e005      	b.n	800a4fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4ee:	4b12      	ldr	r3, [pc, #72]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	4a11      	ldr	r2, [pc, #68]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4fa:	4b0f      	ldr	r3, [pc, #60]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a0e      	ldr	r2, [pc, #56]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a506:	f7fa fd25 	bl	8004f54 <HAL_GetTick>
 800a50a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a50c:	e008      	b.n	800a520 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a50e:	f7fa fd21 	bl	8004f54 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d901      	bls.n	800a520 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e006      	b.n	800a52e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a520:	4b05      	ldr	r3, [pc, #20]	; (800a538 <RCCEx_PLL2_Config+0x15c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d0f0      	beq.n	800a50e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58024400 	.word	0x58024400
 800a53c:	ffff0007 	.word	0xffff0007

0800a540 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a54e:	4b53      	ldr	r3, [pc, #332]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	2b03      	cmp	r3, #3
 800a558:	d101      	bne.n	800a55e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e099      	b.n	800a692 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a55e:	4b4f      	ldr	r3, [pc, #316]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a4e      	ldr	r2, [pc, #312]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a56a:	f7fa fcf3 	bl	8004f54 <HAL_GetTick>
 800a56e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a570:	e008      	b.n	800a584 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a572:	f7fa fcef 	bl	8004f54 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d901      	bls.n	800a584 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e086      	b.n	800a692 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a584:	4b45      	ldr	r3, [pc, #276]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1f0      	bne.n	800a572 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a590:	4b42      	ldr	r3, [pc, #264]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a594:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	051b      	lsls	r3, r3, #20
 800a59e:	493f      	ldr	r1, [pc, #252]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	628b      	str	r3, [r1, #40]	; 0x28
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	025b      	lsls	r3, r3, #9
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	041b      	lsls	r3, r3, #16
 800a5c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	061b      	lsls	r3, r3, #24
 800a5d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5d4:	4931      	ldr	r1, [pc, #196]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5da:	4b30      	ldr	r3, [pc, #192]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	492d      	ldr	r1, [pc, #180]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5ec:	4b2b      	ldr	r3, [pc, #172]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	4928      	ldr	r1, [pc, #160]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5fe:	4b27      	ldr	r3, [pc, #156]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	4a26      	ldr	r2, [pc, #152]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a608:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a60a:	4b24      	ldr	r3, [pc, #144]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a60c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a60e:	4b24      	ldr	r3, [pc, #144]	; (800a6a0 <RCCEx_PLL3_Config+0x160>)
 800a610:	4013      	ands	r3, r2
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	69d2      	ldr	r2, [r2, #28]
 800a616:	00d2      	lsls	r2, r2, #3
 800a618:	4920      	ldr	r1, [pc, #128]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a61e:	4b1f      	ldr	r3, [pc, #124]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	4a1e      	ldr	r2, [pc, #120]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d106      	bne.n	800a63e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a630:	4b1a      	ldr	r3, [pc, #104]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	4a19      	ldr	r2, [pc, #100]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a63a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a63c:	e00f      	b.n	800a65e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d106      	bne.n	800a652 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a644:	4b15      	ldr	r3, [pc, #84]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	4a14      	ldr	r2, [pc, #80]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a64a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a64e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a650:	e005      	b.n	800a65e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a652:	4b12      	ldr	r3, [pc, #72]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a11      	ldr	r2, [pc, #68]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a65e:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a0e      	ldr	r2, [pc, #56]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a66a:	f7fa fc73 	bl	8004f54 <HAL_GetTick>
 800a66e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a670:	e008      	b.n	800a684 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a672:	f7fa fc6f 	bl	8004f54 <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d901      	bls.n	800a684 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e006      	b.n	800a692 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a684:	4b05      	ldr	r3, [pc, #20]	; (800a69c <RCCEx_PLL3_Config+0x15c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0f0      	beq.n	800a672 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	58024400 	.word	0x58024400
 800a6a0:	ffff0007 	.word	0xffff0007

0800a6a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e049      	b.n	800a74a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7fa f864 	bl	8004798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	f000 fdc0 	bl	800b268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b01      	cmp	r3, #1
 800a766:	d001      	beq.n	800a76c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	e05e      	b.n	800a82a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0201 	orr.w	r2, r2, #1
 800a782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a2b      	ldr	r2, [pc, #172]	; (800a838 <HAL_TIM_Base_Start_IT+0xe4>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d02c      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a796:	d027      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a27      	ldr	r2, [pc, #156]	; (800a83c <HAL_TIM_Base_Start_IT+0xe8>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d022      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a26      	ldr	r2, [pc, #152]	; (800a840 <HAL_TIM_Base_Start_IT+0xec>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d01d      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a24      	ldr	r2, [pc, #144]	; (800a844 <HAL_TIM_Base_Start_IT+0xf0>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d018      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a23      	ldr	r2, [pc, #140]	; (800a848 <HAL_TIM_Base_Start_IT+0xf4>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d013      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a21      	ldr	r2, [pc, #132]	; (800a84c <HAL_TIM_Base_Start_IT+0xf8>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00e      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a20      	ldr	r2, [pc, #128]	; (800a850 <HAL_TIM_Base_Start_IT+0xfc>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d009      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a1e      	ldr	r2, [pc, #120]	; (800a854 <HAL_TIM_Base_Start_IT+0x100>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d004      	beq.n	800a7e8 <HAL_TIM_Base_Start_IT+0x94>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a1d      	ldr	r2, [pc, #116]	; (800a858 <HAL_TIM_Base_Start_IT+0x104>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d115      	bne.n	800a814 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <HAL_TIM_Base_Start_IT+0x108>)
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b06      	cmp	r3, #6
 800a7f8:	d015      	beq.n	800a826 <HAL_TIM_Base_Start_IT+0xd2>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a800:	d011      	beq.n	800a826 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f042 0201 	orr.w	r2, r2, #1
 800a810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a812:	e008      	b.n	800a826 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e000      	b.n	800a828 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40010000 	.word	0x40010000
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800
 800a844:	40000c00 	.word	0x40000c00
 800a848:	40010400 	.word	0x40010400
 800a84c:	40001800 	.word	0x40001800
 800a850:	40014000 	.word	0x40014000
 800a854:	4000e000 	.word	0x4000e000
 800a858:	4000e400 	.word	0x4000e400
 800a85c:	00010007 	.word	0x00010007

0800a860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e049      	b.n	800a906 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d106      	bne.n	800a88c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7f9 ffce 	bl	8004828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	4610      	mov	r0, r2
 800a8a0:	f000 fce2 	bl	800b268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d109      	bne.n	800a934 <HAL_TIM_PWM_Start+0x24>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b01      	cmp	r3, #1
 800a92a:	bf14      	ite	ne
 800a92c:	2301      	movne	r3, #1
 800a92e:	2300      	moveq	r3, #0
 800a930:	b2db      	uxtb	r3, r3
 800a932:	e03c      	b.n	800a9ae <HAL_TIM_PWM_Start+0x9e>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2b04      	cmp	r3, #4
 800a938:	d109      	bne.n	800a94e <HAL_TIM_PWM_Start+0x3e>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b01      	cmp	r3, #1
 800a944:	bf14      	ite	ne
 800a946:	2301      	movne	r3, #1
 800a948:	2300      	moveq	r3, #0
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	e02f      	b.n	800a9ae <HAL_TIM_PWM_Start+0x9e>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b08      	cmp	r3, #8
 800a952:	d109      	bne.n	800a968 <HAL_TIM_PWM_Start+0x58>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	bf14      	ite	ne
 800a960:	2301      	movne	r3, #1
 800a962:	2300      	moveq	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	e022      	b.n	800a9ae <HAL_TIM_PWM_Start+0x9e>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b0c      	cmp	r3, #12
 800a96c:	d109      	bne.n	800a982 <HAL_TIM_PWM_Start+0x72>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b01      	cmp	r3, #1
 800a978:	bf14      	ite	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	2300      	moveq	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	e015      	b.n	800a9ae <HAL_TIM_PWM_Start+0x9e>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b10      	cmp	r3, #16
 800a986:	d109      	bne.n	800a99c <HAL_TIM_PWM_Start+0x8c>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b01      	cmp	r3, #1
 800a992:	bf14      	ite	ne
 800a994:	2301      	movne	r3, #1
 800a996:	2300      	moveq	r3, #0
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	e008      	b.n	800a9ae <HAL_TIM_PWM_Start+0x9e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e0ab      	b.n	800ab0e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d104      	bne.n	800a9c6 <HAL_TIM_PWM_Start+0xb6>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9c4:	e023      	b.n	800aa0e <HAL_TIM_PWM_Start+0xfe>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d104      	bne.n	800a9d6 <HAL_TIM_PWM_Start+0xc6>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9d4:	e01b      	b.n	800aa0e <HAL_TIM_PWM_Start+0xfe>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d104      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0xd6>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9e4:	e013      	b.n	800aa0e <HAL_TIM_PWM_Start+0xfe>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b0c      	cmp	r3, #12
 800a9ea:	d104      	bne.n	800a9f6 <HAL_TIM_PWM_Start+0xe6>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9f4:	e00b      	b.n	800aa0e <HAL_TIM_PWM_Start+0xfe>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b10      	cmp	r3, #16
 800a9fa:	d104      	bne.n	800aa06 <HAL_TIM_PWM_Start+0xf6>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa04:	e003      	b.n	800aa0e <HAL_TIM_PWM_Start+0xfe>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2202      	movs	r2, #2
 800aa0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2201      	movs	r2, #1
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 ffa2 	bl	800b960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a3d      	ldr	r2, [pc, #244]	; (800ab18 <HAL_TIM_PWM_Start+0x208>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d013      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x13e>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a3c      	ldr	r2, [pc, #240]	; (800ab1c <HAL_TIM_PWM_Start+0x20c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d00e      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x13e>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a3a      	ldr	r2, [pc, #232]	; (800ab20 <HAL_TIM_PWM_Start+0x210>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d009      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x13e>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a39      	ldr	r2, [pc, #228]	; (800ab24 <HAL_TIM_PWM_Start+0x214>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d004      	beq.n	800aa4e <HAL_TIM_PWM_Start+0x13e>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a37      	ldr	r2, [pc, #220]	; (800ab28 <HAL_TIM_PWM_Start+0x218>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d101      	bne.n	800aa52 <HAL_TIM_PWM_Start+0x142>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <HAL_TIM_PWM_Start+0x144>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a2a      	ldr	r2, [pc, #168]	; (800ab18 <HAL_TIM_PWM_Start+0x208>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d02c      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa7a:	d027      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a2a      	ldr	r2, [pc, #168]	; (800ab2c <HAL_TIM_PWM_Start+0x21c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d022      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <HAL_TIM_PWM_Start+0x220>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d01d      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a27      	ldr	r2, [pc, #156]	; (800ab34 <HAL_TIM_PWM_Start+0x224>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d018      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a1f      	ldr	r2, [pc, #124]	; (800ab1c <HAL_TIM_PWM_Start+0x20c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d013      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a23      	ldr	r2, [pc, #140]	; (800ab38 <HAL_TIM_PWM_Start+0x228>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00e      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a1b      	ldr	r2, [pc, #108]	; (800ab20 <HAL_TIM_PWM_Start+0x210>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d009      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a1f      	ldr	r2, [pc, #124]	; (800ab3c <HAL_TIM_PWM_Start+0x22c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <HAL_TIM_PWM_Start+0x1bc>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a1e      	ldr	r2, [pc, #120]	; (800ab40 <HAL_TIM_PWM_Start+0x230>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d115      	bne.n	800aaf8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	689a      	ldr	r2, [r3, #8]
 800aad2:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <HAL_TIM_PWM_Start+0x234>)
 800aad4:	4013      	ands	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b06      	cmp	r3, #6
 800aadc:	d015      	beq.n	800ab0a <HAL_TIM_PWM_Start+0x1fa>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae4:	d011      	beq.n	800ab0a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f042 0201 	orr.w	r2, r2, #1
 800aaf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf6:	e008      	b.n	800ab0a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0201 	orr.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	e000      	b.n	800ab0c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	40010000 	.word	0x40010000
 800ab1c:	40010400 	.word	0x40010400
 800ab20:	40014000 	.word	0x40014000
 800ab24:	40014400 	.word	0x40014400
 800ab28:	40014800 	.word	0x40014800
 800ab2c:	40000400 	.word	0x40000400
 800ab30:	40000800 	.word	0x40000800
 800ab34:	40000c00 	.word	0x40000c00
 800ab38:	40001800 	.word	0x40001800
 800ab3c:	4000e000 	.word	0x4000e000
 800ab40:	4000e400 	.word	0x4000e400
 800ab44:	00010007 	.word	0x00010007

0800ab48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e08f      	b.n	800ac7c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7f9 fd03 	bl	800457c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2202      	movs	r2, #2
 800ab7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6899      	ldr	r1, [r3, #8]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	4b3e      	ldr	r3, [pc, #248]	; (800ac84 <HAL_TIM_Encoder_Init+0x13c>)
 800ab8a:	400b      	ands	r3, r1
 800ab8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f000 fb65 	bl	800b268 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4b31      	ldr	r3, [pc, #196]	; (800ac88 <HAL_TIM_Encoder_Init+0x140>)
 800abc4:	4013      	ands	r3, r2
 800abc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	021b      	lsls	r3, r3, #8
 800abd2:	4313      	orrs	r3, r2
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	4b2b      	ldr	r3, [pc, #172]	; (800ac8c <HAL_TIM_Encoder_Init+0x144>)
 800abde:	4013      	ands	r3, r2
 800abe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	4b2a      	ldr	r3, [pc, #168]	; (800ac90 <HAL_TIM_Encoder_Init+0x148>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	4313      	orrs	r3, r2
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	011a      	lsls	r2, r3, #4
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	031b      	lsls	r3, r3, #12
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ac16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ac1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	fffebff8 	.word	0xfffebff8
 800ac88:	fffffcfc 	.word	0xfffffcfc
 800ac8c:	fffff3f3 	.word	0xfffff3f3
 800ac90:	ffff0f0f 	.word	0xffff0f0f

0800ac94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aca4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800acac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d110      	bne.n	800ace6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d102      	bne.n	800acd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800acca:	7b7b      	ldrb	r3, [r7, #13]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d001      	beq.n	800acd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e069      	b.n	800ada8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace4:	e031      	b.n	800ad4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d110      	bne.n	800ad0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d102      	bne.n	800acf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800acf2:	7b3b      	ldrb	r3, [r7, #12]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d001      	beq.n	800acfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e055      	b.n	800ada8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad0c:	e01d      	b.n	800ad4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d108      	bne.n	800ad26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d105      	bne.n	800ad26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad1a:	7b7b      	ldrb	r3, [r7, #13]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d102      	bne.n	800ad26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad20:	7b3b      	ldrb	r3, [r7, #12]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d001      	beq.n	800ad2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e03e      	b.n	800ada8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2202      	movs	r2, #2
 800ad36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2202      	movs	r2, #2
 800ad46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <HAL_TIM_Encoder_Start+0xc4>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	d008      	beq.n	800ad68 <HAL_TIM_Encoder_Start+0xd4>
 800ad56:	e00f      	b.n	800ad78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	2100      	movs	r1, #0
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fdfd 	bl	800b960 <TIM_CCxChannelCmd>
      break;
 800ad66:	e016      	b.n	800ad96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	2104      	movs	r1, #4
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 fdf5 	bl	800b960 <TIM_CCxChannelCmd>
      break;
 800ad76:	e00e      	b.n	800ad96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fded 	bl	800b960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fde6 	bl	800b960 <TIM_CCxChannelCmd>
      break;
 800ad94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f042 0201 	orr.w	r2, r2, #1
 800ada4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d122      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b02      	cmp	r3, #2
 800add2:	d11b      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f06f 0202 	mvn.w	r2, #2
 800addc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa1a 	bl	800b22c <HAL_TIM_IC_CaptureCallback>
 800adf8:	e005      	b.n	800ae06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa0c 	bl	800b218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fa1d 	bl	800b240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f003 0304 	and.w	r3, r3, #4
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d122      	bne.n	800ae60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d11b      	bne.n	800ae60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f06f 0204 	mvn.w	r2, #4
 800ae30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f9f0 	bl	800b22c <HAL_TIM_IC_CaptureCallback>
 800ae4c:	e005      	b.n	800ae5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f9e2 	bl	800b218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f9f3 	bl	800b240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b08      	cmp	r3, #8
 800ae6c:	d122      	bne.n	800aeb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f003 0308 	and.w	r3, r3, #8
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d11b      	bne.n	800aeb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f06f 0208 	mvn.w	r2, #8
 800ae84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2204      	movs	r2, #4
 800ae8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f003 0303 	and.w	r3, r3, #3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f9c6 	bl	800b22c <HAL_TIM_IC_CaptureCallback>
 800aea0:	e005      	b.n	800aeae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f9b8 	bl	800b218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f9c9 	bl	800b240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	f003 0310 	and.w	r3, r3, #16
 800aebe:	2b10      	cmp	r3, #16
 800aec0:	d122      	bne.n	800af08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f003 0310 	and.w	r3, r3, #16
 800aecc:	2b10      	cmp	r3, #16
 800aece:	d11b      	bne.n	800af08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f06f 0210 	mvn.w	r2, #16
 800aed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2208      	movs	r2, #8
 800aede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f99c 	bl	800b22c <HAL_TIM_IC_CaptureCallback>
 800aef4:	e005      	b.n	800af02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f98e 	bl	800b218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f99f 	bl	800b240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b01      	cmp	r3, #1
 800af14:	d10e      	bne.n	800af34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b01      	cmp	r3, #1
 800af22:	d107      	bne.n	800af34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f06f 0201 	mvn.w	r2, #1
 800af2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7f8 fdc0 	bl	8003ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3e:	2b80      	cmp	r3, #128	; 0x80
 800af40:	d10e      	bne.n	800af60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4c:	2b80      	cmp	r3, #128	; 0x80
 800af4e:	d107      	bne.n	800af60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fe6c 	bl	800bc38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af6e:	d10e      	bne.n	800af8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af7a:	2b80      	cmp	r3, #128	; 0x80
 800af7c:	d107      	bne.n	800af8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fe5f 	bl	800bc4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af98:	2b40      	cmp	r3, #64	; 0x40
 800af9a:	d10e      	bne.n	800afba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa6:	2b40      	cmp	r3, #64	; 0x40
 800afa8:	d107      	bne.n	800afba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f94d 	bl	800b254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	f003 0320 	and.w	r3, r3, #32
 800afc4:	2b20      	cmp	r3, #32
 800afc6:	d10e      	bne.n	800afe6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d107      	bne.n	800afe6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f06f 0220 	mvn.w	r2, #32
 800afde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fe1f 	bl	800bc24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b006:	2b01      	cmp	r3, #1
 800b008:	d101      	bne.n	800b00e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b00a:	2302      	movs	r3, #2
 800b00c:	e0ff      	b.n	800b20e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b14      	cmp	r3, #20
 800b01a:	f200 80f0 	bhi.w	800b1fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b01e:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b079 	.word	0x0800b079
 800b028:	0800b1ff 	.word	0x0800b1ff
 800b02c:	0800b1ff 	.word	0x0800b1ff
 800b030:	0800b1ff 	.word	0x0800b1ff
 800b034:	0800b0b9 	.word	0x0800b0b9
 800b038:	0800b1ff 	.word	0x0800b1ff
 800b03c:	0800b1ff 	.word	0x0800b1ff
 800b040:	0800b1ff 	.word	0x0800b1ff
 800b044:	0800b0fb 	.word	0x0800b0fb
 800b048:	0800b1ff 	.word	0x0800b1ff
 800b04c:	0800b1ff 	.word	0x0800b1ff
 800b050:	0800b1ff 	.word	0x0800b1ff
 800b054:	0800b13b 	.word	0x0800b13b
 800b058:	0800b1ff 	.word	0x0800b1ff
 800b05c:	0800b1ff 	.word	0x0800b1ff
 800b060:	0800b1ff 	.word	0x0800b1ff
 800b064:	0800b17d 	.word	0x0800b17d
 800b068:	0800b1ff 	.word	0x0800b1ff
 800b06c:	0800b1ff 	.word	0x0800b1ff
 800b070:	0800b1ff 	.word	0x0800b1ff
 800b074:	0800b1bd 	.word	0x0800b1bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f998 	bl	800b3b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f042 0208 	orr.w	r2, r2, #8
 800b092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699a      	ldr	r2, [r3, #24]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 0204 	bic.w	r2, r2, #4
 800b0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6999      	ldr	r1, [r3, #24]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	691a      	ldr	r2, [r3, #16]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	619a      	str	r2, [r3, #24]
      break;
 800b0b6:	e0a5      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 fa08 	bl	800b4d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699a      	ldr	r2, [r3, #24]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699a      	ldr	r2, [r3, #24]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6999      	ldr	r1, [r3, #24]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	021a      	lsls	r2, r3, #8
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	619a      	str	r2, [r3, #24]
      break;
 800b0f8:	e084      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68b9      	ldr	r1, [r7, #8]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fa71 	bl	800b5e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	69da      	ldr	r2, [r3, #28]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f042 0208 	orr.w	r2, r2, #8
 800b114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	69da      	ldr	r2, [r3, #28]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f022 0204 	bic.w	r2, r2, #4
 800b124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69d9      	ldr	r1, [r3, #28]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	691a      	ldr	r2, [r3, #16]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	61da      	str	r2, [r3, #28]
      break;
 800b138:	e064      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fad9 	bl	800b6f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	69da      	ldr	r2, [r3, #28]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	69da      	ldr	r2, [r3, #28]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	69d9      	ldr	r1, [r3, #28]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	021a      	lsls	r2, r3, #8
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	61da      	str	r2, [r3, #28]
      break;
 800b17a:	e043      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68b9      	ldr	r1, [r7, #8]
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fb22 	bl	800b7cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0208 	orr.w	r2, r2, #8
 800b196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0204 	bic.w	r2, r2, #4
 800b1a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	691a      	ldr	r2, [r3, #16]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b1ba:	e023      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fb66 	bl	800b894 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	021a      	lsls	r2, r3, #8
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b1fc:	e002      	b.n	800b204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	75fb      	strb	r3, [r7, #23]
      break;
 800b202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop

0800b218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a44      	ldr	r2, [pc, #272]	; (800b38c <TIM_Base_SetConfig+0x124>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d013      	beq.n	800b2a8 <TIM_Base_SetConfig+0x40>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b286:	d00f      	beq.n	800b2a8 <TIM_Base_SetConfig+0x40>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a41      	ldr	r2, [pc, #260]	; (800b390 <TIM_Base_SetConfig+0x128>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00b      	beq.n	800b2a8 <TIM_Base_SetConfig+0x40>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a40      	ldr	r2, [pc, #256]	; (800b394 <TIM_Base_SetConfig+0x12c>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d007      	beq.n	800b2a8 <TIM_Base_SetConfig+0x40>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a3f      	ldr	r2, [pc, #252]	; (800b398 <TIM_Base_SetConfig+0x130>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d003      	beq.n	800b2a8 <TIM_Base_SetConfig+0x40>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a3e      	ldr	r2, [pc, #248]	; (800b39c <TIM_Base_SetConfig+0x134>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d108      	bne.n	800b2ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a33      	ldr	r2, [pc, #204]	; (800b38c <TIM_Base_SetConfig+0x124>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d027      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c8:	d023      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a30      	ldr	r2, [pc, #192]	; (800b390 <TIM_Base_SetConfig+0x128>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d01f      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a2f      	ldr	r2, [pc, #188]	; (800b394 <TIM_Base_SetConfig+0x12c>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d01b      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a2e      	ldr	r2, [pc, #184]	; (800b398 <TIM_Base_SetConfig+0x130>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d017      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a2d      	ldr	r2, [pc, #180]	; (800b39c <TIM_Base_SetConfig+0x134>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d013      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a2c      	ldr	r2, [pc, #176]	; (800b3a0 <TIM_Base_SetConfig+0x138>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d00f      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a2b      	ldr	r2, [pc, #172]	; (800b3a4 <TIM_Base_SetConfig+0x13c>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00b      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a2a      	ldr	r2, [pc, #168]	; (800b3a8 <TIM_Base_SetConfig+0x140>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d007      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a29      	ldr	r2, [pc, #164]	; (800b3ac <TIM_Base_SetConfig+0x144>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d003      	beq.n	800b312 <TIM_Base_SetConfig+0xaa>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a28      	ldr	r2, [pc, #160]	; (800b3b0 <TIM_Base_SetConfig+0x148>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d108      	bne.n	800b324 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4313      	orrs	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a10      	ldr	r2, [pc, #64]	; (800b38c <TIM_Base_SetConfig+0x124>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d00f      	beq.n	800b370 <TIM_Base_SetConfig+0x108>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a12      	ldr	r2, [pc, #72]	; (800b39c <TIM_Base_SetConfig+0x134>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d00b      	beq.n	800b370 <TIM_Base_SetConfig+0x108>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a11      	ldr	r2, [pc, #68]	; (800b3a0 <TIM_Base_SetConfig+0x138>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d007      	beq.n	800b370 <TIM_Base_SetConfig+0x108>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a10      	ldr	r2, [pc, #64]	; (800b3a4 <TIM_Base_SetConfig+0x13c>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d003      	beq.n	800b370 <TIM_Base_SetConfig+0x108>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a0f      	ldr	r2, [pc, #60]	; (800b3a8 <TIM_Base_SetConfig+0x140>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d103      	bne.n	800b378 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	615a      	str	r2, [r3, #20]
}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	40010000 	.word	0x40010000
 800b390:	40000400 	.word	0x40000400
 800b394:	40000800 	.word	0x40000800
 800b398:	40000c00 	.word	0x40000c00
 800b39c:	40010400 	.word	0x40010400
 800b3a0:	40014000 	.word	0x40014000
 800b3a4:	40014400 	.word	0x40014400
 800b3a8:	40014800 	.word	0x40014800
 800b3ac:	4000e000 	.word	0x4000e000
 800b3b0:	4000e400 	.word	0x4000e400

0800b3b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	f023 0201 	bic.w	r2, r3, #1
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4b37      	ldr	r3, [pc, #220]	; (800b4bc <TIM_OC1_SetConfig+0x108>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f023 0302 	bic.w	r3, r3, #2
 800b3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a2d      	ldr	r2, [pc, #180]	; (800b4c0 <TIM_OC1_SetConfig+0x10c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d00f      	beq.n	800b430 <TIM_OC1_SetConfig+0x7c>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a2c      	ldr	r2, [pc, #176]	; (800b4c4 <TIM_OC1_SetConfig+0x110>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d00b      	beq.n	800b430 <TIM_OC1_SetConfig+0x7c>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a2b      	ldr	r2, [pc, #172]	; (800b4c8 <TIM_OC1_SetConfig+0x114>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d007      	beq.n	800b430 <TIM_OC1_SetConfig+0x7c>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a2a      	ldr	r2, [pc, #168]	; (800b4cc <TIM_OC1_SetConfig+0x118>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d003      	beq.n	800b430 <TIM_OC1_SetConfig+0x7c>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a29      	ldr	r2, [pc, #164]	; (800b4d0 <TIM_OC1_SetConfig+0x11c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d10c      	bne.n	800b44a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	f023 0308 	bic.w	r3, r3, #8
 800b436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	4313      	orrs	r3, r2
 800b440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f023 0304 	bic.w	r3, r3, #4
 800b448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a1c      	ldr	r2, [pc, #112]	; (800b4c0 <TIM_OC1_SetConfig+0x10c>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d00f      	beq.n	800b472 <TIM_OC1_SetConfig+0xbe>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a1b      	ldr	r2, [pc, #108]	; (800b4c4 <TIM_OC1_SetConfig+0x110>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d00b      	beq.n	800b472 <TIM_OC1_SetConfig+0xbe>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <TIM_OC1_SetConfig+0x114>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d007      	beq.n	800b472 <TIM_OC1_SetConfig+0xbe>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a19      	ldr	r2, [pc, #100]	; (800b4cc <TIM_OC1_SetConfig+0x118>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d003      	beq.n	800b472 <TIM_OC1_SetConfig+0xbe>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a18      	ldr	r2, [pc, #96]	; (800b4d0 <TIM_OC1_SetConfig+0x11c>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d111      	bne.n	800b496 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	4313      	orrs	r3, r2
 800b48a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	621a      	str	r2, [r3, #32]
}
 800b4b0:	bf00      	nop
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	fffeff8f 	.word	0xfffeff8f
 800b4c0:	40010000 	.word	0x40010000
 800b4c4:	40010400 	.word	0x40010400
 800b4c8:	40014000 	.word	0x40014000
 800b4cc:	40014400 	.word	0x40014400
 800b4d0:	40014800 	.word	0x40014800

0800b4d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	f023 0210 	bic.w	r2, r3, #16
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	4b34      	ldr	r3, [pc, #208]	; (800b5d0 <TIM_OC2_SetConfig+0xfc>)
 800b500:	4013      	ands	r3, r2
 800b502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4313      	orrs	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f023 0320 	bic.w	r3, r3, #32
 800b51e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	011b      	lsls	r3, r3, #4
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	4313      	orrs	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a29      	ldr	r2, [pc, #164]	; (800b5d4 <TIM_OC2_SetConfig+0x100>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d003      	beq.n	800b53c <TIM_OC2_SetConfig+0x68>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a28      	ldr	r2, [pc, #160]	; (800b5d8 <TIM_OC2_SetConfig+0x104>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d10d      	bne.n	800b558 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a1e      	ldr	r2, [pc, #120]	; (800b5d4 <TIM_OC2_SetConfig+0x100>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d00f      	beq.n	800b580 <TIM_OC2_SetConfig+0xac>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a1d      	ldr	r2, [pc, #116]	; (800b5d8 <TIM_OC2_SetConfig+0x104>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00b      	beq.n	800b580 <TIM_OC2_SetConfig+0xac>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a1c      	ldr	r2, [pc, #112]	; (800b5dc <TIM_OC2_SetConfig+0x108>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d007      	beq.n	800b580 <TIM_OC2_SetConfig+0xac>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a1b      	ldr	r2, [pc, #108]	; (800b5e0 <TIM_OC2_SetConfig+0x10c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d003      	beq.n	800b580 <TIM_OC2_SetConfig+0xac>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a1a      	ldr	r2, [pc, #104]	; (800b5e4 <TIM_OC2_SetConfig+0x110>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d113      	bne.n	800b5a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b58e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	4313      	orrs	r3, r2
 800b59a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	621a      	str	r2, [r3, #32]
}
 800b5c2:	bf00      	nop
 800b5c4:	371c      	adds	r7, #28
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	feff8fff 	.word	0xfeff8fff
 800b5d4:	40010000 	.word	0x40010000
 800b5d8:	40010400 	.word	0x40010400
 800b5dc:	40014000 	.word	0x40014000
 800b5e0:	40014400 	.word	0x40014400
 800b5e4:	40014800 	.word	0x40014800

0800b5e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	4b33      	ldr	r3, [pc, #204]	; (800b6e0 <TIM_OC3_SetConfig+0xf8>)
 800b614:	4013      	ands	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f023 0303 	bic.w	r3, r3, #3
 800b61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a28      	ldr	r2, [pc, #160]	; (800b6e4 <TIM_OC3_SetConfig+0xfc>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d003      	beq.n	800b64e <TIM_OC3_SetConfig+0x66>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a27      	ldr	r2, [pc, #156]	; (800b6e8 <TIM_OC3_SetConfig+0x100>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d10d      	bne.n	800b66a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	021b      	lsls	r3, r3, #8
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	4313      	orrs	r3, r2
 800b660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a1d      	ldr	r2, [pc, #116]	; (800b6e4 <TIM_OC3_SetConfig+0xfc>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d00f      	beq.n	800b692 <TIM_OC3_SetConfig+0xaa>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a1c      	ldr	r2, [pc, #112]	; (800b6e8 <TIM_OC3_SetConfig+0x100>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d00b      	beq.n	800b692 <TIM_OC3_SetConfig+0xaa>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a1b      	ldr	r2, [pc, #108]	; (800b6ec <TIM_OC3_SetConfig+0x104>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d007      	beq.n	800b692 <TIM_OC3_SetConfig+0xaa>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a1a      	ldr	r2, [pc, #104]	; (800b6f0 <TIM_OC3_SetConfig+0x108>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d003      	beq.n	800b692 <TIM_OC3_SetConfig+0xaa>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a19      	ldr	r2, [pc, #100]	; (800b6f4 <TIM_OC3_SetConfig+0x10c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d113      	bne.n	800b6ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	011b      	lsls	r3, r3, #4
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	621a      	str	r2, [r3, #32]
}
 800b6d4:	bf00      	nop
 800b6d6:	371c      	adds	r7, #28
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	fffeff8f 	.word	0xfffeff8f
 800b6e4:	40010000 	.word	0x40010000
 800b6e8:	40010400 	.word	0x40010400
 800b6ec:	40014000 	.word	0x40014000
 800b6f0:	40014400 	.word	0x40014400
 800b6f4:	40014800 	.word	0x40014800

0800b6f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	4b24      	ldr	r3, [pc, #144]	; (800b7b4 <TIM_OC4_SetConfig+0xbc>)
 800b724:	4013      	ands	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	021b      	lsls	r3, r3, #8
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	4313      	orrs	r3, r2
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	031b      	lsls	r3, r3, #12
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a19      	ldr	r2, [pc, #100]	; (800b7b8 <TIM_OC4_SetConfig+0xc0>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d00f      	beq.n	800b778 <TIM_OC4_SetConfig+0x80>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a18      	ldr	r2, [pc, #96]	; (800b7bc <TIM_OC4_SetConfig+0xc4>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d00b      	beq.n	800b778 <TIM_OC4_SetConfig+0x80>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a17      	ldr	r2, [pc, #92]	; (800b7c0 <TIM_OC4_SetConfig+0xc8>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d007      	beq.n	800b778 <TIM_OC4_SetConfig+0x80>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a16      	ldr	r2, [pc, #88]	; (800b7c4 <TIM_OC4_SetConfig+0xcc>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d003      	beq.n	800b778 <TIM_OC4_SetConfig+0x80>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a15      	ldr	r2, [pc, #84]	; (800b7c8 <TIM_OC4_SetConfig+0xd0>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d109      	bne.n	800b78c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b77e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	019b      	lsls	r3, r3, #6
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4313      	orrs	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	621a      	str	r2, [r3, #32]
}
 800b7a6:	bf00      	nop
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	feff8fff 	.word	0xfeff8fff
 800b7b8:	40010000 	.word	0x40010000
 800b7bc:	40010400 	.word	0x40010400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800

0800b7cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4b21      	ldr	r3, [pc, #132]	; (800b87c <TIM_OC5_SetConfig+0xb0>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b80c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	041b      	lsls	r3, r3, #16
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a18      	ldr	r2, [pc, #96]	; (800b880 <TIM_OC5_SetConfig+0xb4>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <TIM_OC5_SetConfig+0x76>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a17      	ldr	r2, [pc, #92]	; (800b884 <TIM_OC5_SetConfig+0xb8>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <TIM_OC5_SetConfig+0x76>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a16      	ldr	r2, [pc, #88]	; (800b888 <TIM_OC5_SetConfig+0xbc>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <TIM_OC5_SetConfig+0x76>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a15      	ldr	r2, [pc, #84]	; (800b88c <TIM_OC5_SetConfig+0xc0>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <TIM_OC5_SetConfig+0x76>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a14      	ldr	r2, [pc, #80]	; (800b890 <TIM_OC5_SetConfig+0xc4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d109      	bne.n	800b856 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	021b      	lsls	r3, r3, #8
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	4313      	orrs	r3, r2
 800b854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	621a      	str	r2, [r3, #32]
}
 800b870:	bf00      	nop
 800b872:	371c      	adds	r7, #28
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	fffeff8f 	.word	0xfffeff8f
 800b880:	40010000 	.word	0x40010000
 800b884:	40010400 	.word	0x40010400
 800b888:	40014000 	.word	0x40014000
 800b88c:	40014400 	.word	0x40014400
 800b890:	40014800 	.word	0x40014800

0800b894 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	4b22      	ldr	r3, [pc, #136]	; (800b948 <TIM_OC6_SetConfig+0xb4>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	021b      	lsls	r3, r3, #8
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	051b      	lsls	r3, r3, #20
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a19      	ldr	r2, [pc, #100]	; (800b94c <TIM_OC6_SetConfig+0xb8>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d00f      	beq.n	800b90c <TIM_OC6_SetConfig+0x78>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a18      	ldr	r2, [pc, #96]	; (800b950 <TIM_OC6_SetConfig+0xbc>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d00b      	beq.n	800b90c <TIM_OC6_SetConfig+0x78>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a17      	ldr	r2, [pc, #92]	; (800b954 <TIM_OC6_SetConfig+0xc0>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d007      	beq.n	800b90c <TIM_OC6_SetConfig+0x78>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a16      	ldr	r2, [pc, #88]	; (800b958 <TIM_OC6_SetConfig+0xc4>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d003      	beq.n	800b90c <TIM_OC6_SetConfig+0x78>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a15      	ldr	r2, [pc, #84]	; (800b95c <TIM_OC6_SetConfig+0xc8>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d109      	bne.n	800b920 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b912:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	029b      	lsls	r3, r3, #10
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	621a      	str	r2, [r3, #32]
}
 800b93a:	bf00      	nop
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	feff8fff 	.word	0xfeff8fff
 800b94c:	40010000 	.word	0x40010000
 800b950:	40010400 	.word	0x40010400
 800b954:	40014000 	.word	0x40014000
 800b958:	40014400 	.word	0x40014400
 800b95c:	40014800 	.word	0x40014800

0800b960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f003 031f 	and.w	r3, r3, #31
 800b972:	2201      	movs	r2, #1
 800b974:	fa02 f303 	lsl.w	r3, r2, r3
 800b978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a1a      	ldr	r2, [r3, #32]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	43db      	mvns	r3, r3
 800b982:	401a      	ands	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a1a      	ldr	r2, [r3, #32]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	f003 031f 	and.w	r3, r3, #31
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	fa01 f303 	lsl.w	r3, r1, r3
 800b998:	431a      	orrs	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	621a      	str	r2, [r3, #32]
}
 800b99e:	bf00      	nop
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
	...

0800b9ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d101      	bne.n	800b9c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	e077      	b.n	800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a35      	ldr	r2, [pc, #212]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d004      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a34      	ldr	r2, [pc, #208]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d108      	bne.n	800ba0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a25      	ldr	r2, [pc, #148]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d02c      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba36:	d027      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a22      	ldr	r2, [pc, #136]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d022      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a21      	ldr	r2, [pc, #132]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d01d      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1f      	ldr	r2, [pc, #124]	; (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d018      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1a      	ldr	r2, [pc, #104]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d013      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1b      	ldr	r2, [pc, #108]	; (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d00e      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a1a      	ldr	r2, [pc, #104]	; (800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d009      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a18      	ldr	r2, [pc, #96]	; (800badc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d004      	beq.n	800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d10c      	bne.n	800baa2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	40010000 	.word	0x40010000
 800bac4:	40010400 	.word	0x40010400
 800bac8:	40000400 	.word	0x40000400
 800bacc:	40000800 	.word	0x40000800
 800bad0:	40000c00 	.word	0x40000c00
 800bad4:	40001800 	.word	0x40001800
 800bad8:	40014000 	.word	0x40014000
 800badc:	4000e000 	.word	0x4000e000
 800bae0:	4000e400 	.word	0x4000e400

0800bae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e087      	b.n	800bc10 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	041b      	lsls	r3, r3, #16
 800bb76:	4313      	orrs	r3, r2
 800bb78:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a27      	ldr	r2, [pc, #156]	; (800bc1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d004      	beq.n	800bb8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a25      	ldr	r2, [pc, #148]	; (800bc20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d106      	bne.n	800bb9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	69db      	ldr	r3, [r3, #28]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a1e      	ldr	r2, [pc, #120]	; (800bc1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d004      	beq.n	800bbb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a1d      	ldr	r2, [pc, #116]	; (800bc20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d126      	bne.n	800bbfe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	051b      	lsls	r3, r3, #20
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a0e      	ldr	r2, [pc, #56]	; (800bc1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d004      	beq.n	800bbf0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a0d      	ldr	r2, [pc, #52]	; (800bc20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d106      	bne.n	800bbfe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	40010000 	.word	0x40010000
 800bc20:	40010400 	.word	0x40010400

0800bc24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e042      	b.n	800bcf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d106      	bne.n	800bc8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7f8 feb3 	bl	80049f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2224      	movs	r2, #36	; 0x24
 800bc8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f022 0201 	bic.w	r2, r2, #1
 800bca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fcdc 	bl	800c660 <UART_SetConfig>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d101      	bne.n	800bcb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e022      	b.n	800bcf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 fb3c 	bl	800d338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	689a      	ldr	r2, [r3, #8]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bcde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f042 0201 	orr.w	r2, r2, #1
 800bcee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f001 fbc3 	bl	800d47c <UART_CheckIdleState>
 800bcf6:	4603      	mov	r3, r0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d17a      	bne.n	800be0e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <HAL_UART_Transmit_DMA+0x24>
 800bd1e:	88fb      	ldrh	r3, [r7, #6]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	e073      	b.n	800be10 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d101      	bne.n	800bd36 <HAL_UART_Transmit_DMA+0x36>
 800bd32:	2302      	movs	r3, #2
 800bd34:	e06c      	b.n	800be10 <HAL_UART_Transmit_DMA+0x110>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	88fa      	ldrh	r2, [r7, #6]
 800bd48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	88fa      	ldrh	r2, [r7, #6]
 800bd50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2221      	movs	r2, #33	; 0x21
 800bd60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02c      	beq.n	800bdc6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd70:	4a29      	ldr	r2, [pc, #164]	; (800be18 <HAL_UART_Transmit_DMA+0x118>)
 800bd72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd78:	4a28      	ldr	r2, [pc, #160]	; (800be1c <HAL_UART_Transmit_DMA+0x11c>)
 800bd7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd80:	4a27      	ldr	r2, [pc, #156]	; (800be20 <HAL_UART_Transmit_DMA+0x120>)
 800bd82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd88:	2200      	movs	r2, #0
 800bd8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd94:	4619      	mov	r1, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3328      	adds	r3, #40	; 0x28
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	88fb      	ldrh	r3, [r7, #6]
 800bda0:	f7f9 fd4e 	bl	8005840 <HAL_DMA_Start_IT>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00d      	beq.n	800bdc6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2210      	movs	r2, #16
 800bdae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e024      	b.n	800be10 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2240      	movs	r2, #64	; 0x40
 800bdcc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3308      	adds	r3, #8
 800bddc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	613b      	str	r3, [r7, #16]
   return(result);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdec:	627b      	str	r3, [r7, #36]	; 0x24
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf6:	623a      	str	r2, [r7, #32]
 800bdf8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	69f9      	ldr	r1, [r7, #28]
 800bdfc:	6a3a      	ldr	r2, [r7, #32]
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	61bb      	str	r3, [r7, #24]
   return(result);
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e5      	bne.n	800bdd6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	e000      	b.n	800be10 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800be0e:	2302      	movs	r3, #2
  }
}
 800be10:	4618      	mov	r0, r3
 800be12:	3728      	adds	r7, #40	; 0x28
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	0800d945 	.word	0x0800d945
 800be1c:	0800d9db 	.word	0x0800d9db
 800be20:	0800db51 	.word	0x0800db51

0800be24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	4613      	mov	r3, r2
 800be30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be38:	2b20      	cmp	r3, #32
 800be3a:	d142      	bne.n	800bec2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <HAL_UART_Receive_DMA+0x24>
 800be42:	88fb      	ldrh	r3, [r7, #6]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e03b      	b.n	800bec4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be52:	2b01      	cmp	r3, #1
 800be54:	d101      	bne.n	800be5a <HAL_UART_Receive_DMA+0x36>
 800be56:	2302      	movs	r3, #2
 800be58:	e034      	b.n	800bec4 <HAL_UART_Receive_DMA+0xa0>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a17      	ldr	r2, [pc, #92]	; (800becc <HAL_UART_Receive_DMA+0xa8>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d01f      	beq.n	800beb2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d018      	beq.n	800beb2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	613b      	str	r3, [r7, #16]
   return(result);
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be94:	627b      	str	r3, [r7, #36]	; 0x24
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9e:	623b      	str	r3, [r7, #32]
 800bea0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	69f9      	ldr	r1, [r7, #28]
 800bea4:	6a3a      	ldr	r2, [r7, #32]
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e6      	bne.n	800be80 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	461a      	mov	r2, r3
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f001 fbf3 	bl	800d6a4 <UART_Start_Receive_DMA>
 800bebe:	4603      	mov	r3, r0
 800bec0:	e000      	b.n	800bec4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bec2:	2302      	movs	r3, #2
  }
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3728      	adds	r7, #40	; 0x28
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	58000c00 	.word	0x58000c00

0800bed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b0ba      	sub	sp, #232	; 0xe8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	69db      	ldr	r3, [r3, #28]
 800bede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bef6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800befa:	f640 030f 	movw	r3, #2063	; 0x80f
 800befe:	4013      	ands	r3, r2
 800bf00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11b      	bne.n	800bf44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf10:	f003 0320 	and.w	r3, r3, #32
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d015      	beq.n	800bf44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf1c:	f003 0320 	and.w	r3, r3, #32
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d105      	bne.n	800bf30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d009      	beq.n	800bf44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 835a 	beq.w	800c5ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	4798      	blx	r3
      }
      return;
 800bf42:	e354      	b.n	800c5ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 811f 	beq.w	800c18c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf52:	4b8b      	ldr	r3, [pc, #556]	; (800c180 <HAL_UART_IRQHandler+0x2b0>)
 800bf54:	4013      	ands	r3, r2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d106      	bne.n	800bf68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf5e:	4b89      	ldr	r3, [pc, #548]	; (800c184 <HAL_UART_IRQHandler+0x2b4>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 8112 	beq.w	800c18c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d011      	beq.n	800bf98 <HAL_UART_IRQHandler+0xc8>
 800bf74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2201      	movs	r2, #1
 800bf86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf8e:	f043 0201 	orr.w	r2, r3, #1
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d011      	beq.n	800bfc8 <HAL_UART_IRQHandler+0xf8>
 800bfa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfbe:	f043 0204 	orr.w	r2, r3, #4
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfcc:	f003 0304 	and.w	r3, r3, #4
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d011      	beq.n	800bff8 <HAL_UART_IRQHandler+0x128>
 800bfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2204      	movs	r2, #4
 800bfe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfee:	f043 0202 	orr.w	r2, r3, #2
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bffc:	f003 0308 	and.w	r3, r3, #8
 800c000:	2b00      	cmp	r3, #0
 800c002:	d017      	beq.n	800c034 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c008:	f003 0320 	and.w	r3, r3, #32
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c010:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c014:	4b5a      	ldr	r3, [pc, #360]	; (800c180 <HAL_UART_IRQHandler+0x2b0>)
 800c016:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2208      	movs	r2, #8
 800c022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c02a:	f043 0208 	orr.w	r2, r3, #8
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d012      	beq.n	800c066 <HAL_UART_IRQHandler+0x196>
 800c040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00c      	beq.n	800c066 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c05c:	f043 0220 	orr.w	r2, r3, #32
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 82c0 	beq.w	800c5f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c076:	f003 0320 	and.w	r3, r3, #32
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d013      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c082:	f003 0320 	and.w	r3, r3, #32
 800c086:	2b00      	cmp	r3, #0
 800c088:	d105      	bne.n	800c096 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d007      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ba:	2b40      	cmp	r3, #64	; 0x40
 800c0bc:	d005      	beq.n	800c0ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d04f      	beq.n	800c16a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f001 fbd4 	bl	800d878 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0da:	2b40      	cmp	r3, #64	; 0x40
 800c0dc:	d141      	bne.n	800c162 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3308      	adds	r3, #8
 800c106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c10a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c10e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1d9      	bne.n	800c0de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d013      	beq.n	800c15a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c136:	4a14      	ldr	r2, [pc, #80]	; (800c188 <HAL_UART_IRQHandler+0x2b8>)
 800c138:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fa f906 	bl	8006350 <HAL_DMA_Abort_IT>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d017      	beq.n	800c17a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c154:	4610      	mov	r0, r2
 800c156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c158:	e00f      	b.n	800c17a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa6a 	bl	800c634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c160:	e00b      	b.n	800c17a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fa66 	bl	800c634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c168:	e007      	b.n	800c17a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa62 	bl	800c634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c178:	e23b      	b.n	800c5f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c17a:	bf00      	nop
    return;
 800c17c:	e239      	b.n	800c5f2 <HAL_UART_IRQHandler+0x722>
 800c17e:	bf00      	nop
 800c180:	10000001 	.word	0x10000001
 800c184:	04000120 	.word	0x04000120
 800c188:	0800dbd1 	.word	0x0800dbd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c190:	2b01      	cmp	r3, #1
 800c192:	f040 81ce 	bne.w	800c532 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c19a:	f003 0310 	and.w	r3, r3, #16
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 81c7 	beq.w	800c532 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a8:	f003 0310 	and.w	r3, r3, #16
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 81c0 	beq.w	800c532 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2210      	movs	r2, #16
 800c1b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c4:	2b40      	cmp	r3, #64	; 0x40
 800c1c6:	f040 813b 	bne.w	800c440 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a8b      	ldr	r2, [pc, #556]	; (800c400 <HAL_UART_IRQHandler+0x530>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d059      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a89      	ldr	r2, [pc, #548]	; (800c404 <HAL_UART_IRQHandler+0x534>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d053      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a87      	ldr	r2, [pc, #540]	; (800c408 <HAL_UART_IRQHandler+0x538>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d04d      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a85      	ldr	r2, [pc, #532]	; (800c40c <HAL_UART_IRQHandler+0x53c>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d047      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a83      	ldr	r2, [pc, #524]	; (800c410 <HAL_UART_IRQHandler+0x540>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d041      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a81      	ldr	r2, [pc, #516]	; (800c414 <HAL_UART_IRQHandler+0x544>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d03b      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a7f      	ldr	r2, [pc, #508]	; (800c418 <HAL_UART_IRQHandler+0x548>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d035      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a7d      	ldr	r2, [pc, #500]	; (800c41c <HAL_UART_IRQHandler+0x54c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d02f      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a7b      	ldr	r2, [pc, #492]	; (800c420 <HAL_UART_IRQHandler+0x550>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d029      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a79      	ldr	r2, [pc, #484]	; (800c424 <HAL_UART_IRQHandler+0x554>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d023      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a77      	ldr	r2, [pc, #476]	; (800c428 <HAL_UART_IRQHandler+0x558>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d01d      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a75      	ldr	r2, [pc, #468]	; (800c42c <HAL_UART_IRQHandler+0x55c>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d017      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a73      	ldr	r2, [pc, #460]	; (800c430 <HAL_UART_IRQHandler+0x560>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d011      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a71      	ldr	r2, [pc, #452]	; (800c434 <HAL_UART_IRQHandler+0x564>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d00b      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a6f      	ldr	r2, [pc, #444]	; (800c438 <HAL_UART_IRQHandler+0x568>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d005      	beq.n	800c28a <HAL_UART_IRQHandler+0x3ba>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a6d      	ldr	r2, [pc, #436]	; (800c43c <HAL_UART_IRQHandler+0x56c>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d105      	bne.n	800c296 <HAL_UART_IRQHandler+0x3c6>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	b29b      	uxth	r3, r3
 800c294:	e004      	b.n	800c2a0 <HAL_UART_IRQHandler+0x3d0>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 81a4 	beq.w	800c5f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	f080 819c 	bcs.w	800c5f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2d2:	f000 8086 	beq.w	800c3e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
 800c2e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c2ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c300:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c304:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c30c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c310:	e841 2300 	strex	r3, r2, [r1]
 800c314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1da      	bne.n	800c2d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3308      	adds	r3, #8
 800c326:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c32a:	e853 3f00 	ldrex	r3, [r3]
 800c32e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c332:	f023 0301 	bic.w	r3, r3, #1
 800c336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3308      	adds	r3, #8
 800c340:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c344:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c348:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c34c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c350:	e841 2300 	strex	r3, r2, [r1]
 800c354:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e1      	bne.n	800c320 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3308      	adds	r3, #8
 800c362:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c36e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c380:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c382:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c386:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c38e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e3      	bne.n	800c35c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b2:	f023 0310 	bic.w	r3, r3, #16
 800c3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3cc:	e841 2300 	strex	r3, r2, [r1]
 800c3d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1e4      	bne.n	800c3a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f9 fc99 	bl	8005d14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f926 	bl	800c648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3fc:	e0fb      	b.n	800c5f6 <HAL_UART_IRQHandler+0x726>
 800c3fe:	bf00      	nop
 800c400:	40020010 	.word	0x40020010
 800c404:	40020028 	.word	0x40020028
 800c408:	40020040 	.word	0x40020040
 800c40c:	40020058 	.word	0x40020058
 800c410:	40020070 	.word	0x40020070
 800c414:	40020088 	.word	0x40020088
 800c418:	400200a0 	.word	0x400200a0
 800c41c:	400200b8 	.word	0x400200b8
 800c420:	40020410 	.word	0x40020410
 800c424:	40020428 	.word	0x40020428
 800c428:	40020440 	.word	0x40020440
 800c42c:	40020458 	.word	0x40020458
 800c430:	40020470 	.word	0x40020470
 800c434:	40020488 	.word	0x40020488
 800c438:	400204a0 	.word	0x400204a0
 800c43c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 80cc 	beq.w	800c5fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 80c7 	beq.w	800c5fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c48e:	647b      	str	r3, [r7, #68]	; 0x44
 800c490:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e4      	bne.n	800c46c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	e853 3f00 	ldrex	r3, [r3]
 800c4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4b2:	6a3a      	ldr	r2, [r7, #32]
 800c4b4:	4b54      	ldr	r3, [pc, #336]	; (800c608 <HAL_UART_IRQHandler+0x738>)
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c4c6:	633a      	str	r2, [r7, #48]	; 0x30
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e3      	bne.n	800c4a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0310 	bic.w	r3, r3, #16
 800c502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c514:	69b9      	ldr	r1, [r7, #24]
 800c516:	69fa      	ldr	r2, [r7, #28]
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	617b      	str	r3, [r7, #20]
   return(result);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1e4      	bne.n	800c4ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c528:	4619      	mov	r1, r3
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f88c 	bl	800c648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c530:	e063      	b.n	800c5fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00e      	beq.n	800c55c <HAL_UART_IRQHandler+0x68c>
 800c53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d008      	beq.n	800c55c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f001 fb7c 	bl	800dc52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c55a:	e051      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c564:	2b00      	cmp	r3, #0
 800c566:	d014      	beq.n	800c592 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c56c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c570:	2b00      	cmp	r3, #0
 800c572:	d105      	bne.n	800c580 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d008      	beq.n	800c592 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c584:	2b00      	cmp	r3, #0
 800c586:	d03a      	beq.n	800c5fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	4798      	blx	r3
    }
    return;
 800c590:	e035      	b.n	800c5fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d009      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x6e2>
 800c59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d003      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f001 fb26 	bl	800dbfc <UART_EndTransmit_IT>
    return;
 800c5b0:	e026      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <HAL_UART_IRQHandler+0x702>
 800c5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fb55 	bl	800dc7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5d0:	e016      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d010      	beq.n	800c600 <HAL_UART_IRQHandler+0x730>
 800c5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da0c      	bge.n	800c600 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f001 fb3d 	bl	800dc66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5ec:	e008      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
      return;
 800c5ee:	bf00      	nop
 800c5f0:	e006      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
    return;
 800c5f2:	bf00      	nop
 800c5f4:	e004      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
      return;
 800c5f6:	bf00      	nop
 800c5f8:	e002      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
      return;
 800c5fa:	bf00      	nop
 800c5fc:	e000      	b.n	800c600 <HAL_UART_IRQHandler+0x730>
    return;
 800c5fe:	bf00      	nop
  }
}
 800c600:	37e8      	adds	r7, #232	; 0xe8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	effffffe 	.word	0xeffffffe

0800c60c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c614:	bf00      	nop
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c664:	b092      	sub	sp, #72	; 0x48
 800c666:	af00      	add	r7, sp, #0
 800c668:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	431a      	orrs	r2, r3
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	431a      	orrs	r2, r3
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	69db      	ldr	r3, [r3, #28]
 800c684:	4313      	orrs	r3, r2
 800c686:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	4bbe      	ldr	r3, [pc, #760]	; (800c988 <UART_SetConfig+0x328>)
 800c690:	4013      	ands	r3, r2
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	6812      	ldr	r2, [r2, #0]
 800c696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c698:	430b      	orrs	r3, r1
 800c69a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	68da      	ldr	r2, [r3, #12]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4ab3      	ldr	r2, [pc, #716]	; (800c98c <UART_SetConfig+0x32c>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d004      	beq.n	800c6cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689a      	ldr	r2, [r3, #8]
 800c6d2:	4baf      	ldr	r3, [pc, #700]	; (800c990 <UART_SetConfig+0x330>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	6812      	ldr	r2, [r2, #0]
 800c6da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6dc:	430b      	orrs	r3, r1
 800c6de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e6:	f023 010f 	bic.w	r1, r3, #15
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	430a      	orrs	r2, r1
 800c6f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4aa6      	ldr	r2, [pc, #664]	; (800c994 <UART_SetConfig+0x334>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d177      	bne.n	800c7f0 <UART_SetConfig+0x190>
 800c700:	4ba5      	ldr	r3, [pc, #660]	; (800c998 <UART_SetConfig+0x338>)
 800c702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c708:	2b28      	cmp	r3, #40	; 0x28
 800c70a:	d86d      	bhi.n	800c7e8 <UART_SetConfig+0x188>
 800c70c:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <UART_SetConfig+0xb4>)
 800c70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c712:	bf00      	nop
 800c714:	0800c7b9 	.word	0x0800c7b9
 800c718:	0800c7e9 	.word	0x0800c7e9
 800c71c:	0800c7e9 	.word	0x0800c7e9
 800c720:	0800c7e9 	.word	0x0800c7e9
 800c724:	0800c7e9 	.word	0x0800c7e9
 800c728:	0800c7e9 	.word	0x0800c7e9
 800c72c:	0800c7e9 	.word	0x0800c7e9
 800c730:	0800c7e9 	.word	0x0800c7e9
 800c734:	0800c7c1 	.word	0x0800c7c1
 800c738:	0800c7e9 	.word	0x0800c7e9
 800c73c:	0800c7e9 	.word	0x0800c7e9
 800c740:	0800c7e9 	.word	0x0800c7e9
 800c744:	0800c7e9 	.word	0x0800c7e9
 800c748:	0800c7e9 	.word	0x0800c7e9
 800c74c:	0800c7e9 	.word	0x0800c7e9
 800c750:	0800c7e9 	.word	0x0800c7e9
 800c754:	0800c7c9 	.word	0x0800c7c9
 800c758:	0800c7e9 	.word	0x0800c7e9
 800c75c:	0800c7e9 	.word	0x0800c7e9
 800c760:	0800c7e9 	.word	0x0800c7e9
 800c764:	0800c7e9 	.word	0x0800c7e9
 800c768:	0800c7e9 	.word	0x0800c7e9
 800c76c:	0800c7e9 	.word	0x0800c7e9
 800c770:	0800c7e9 	.word	0x0800c7e9
 800c774:	0800c7d1 	.word	0x0800c7d1
 800c778:	0800c7e9 	.word	0x0800c7e9
 800c77c:	0800c7e9 	.word	0x0800c7e9
 800c780:	0800c7e9 	.word	0x0800c7e9
 800c784:	0800c7e9 	.word	0x0800c7e9
 800c788:	0800c7e9 	.word	0x0800c7e9
 800c78c:	0800c7e9 	.word	0x0800c7e9
 800c790:	0800c7e9 	.word	0x0800c7e9
 800c794:	0800c7d9 	.word	0x0800c7d9
 800c798:	0800c7e9 	.word	0x0800c7e9
 800c79c:	0800c7e9 	.word	0x0800c7e9
 800c7a0:	0800c7e9 	.word	0x0800c7e9
 800c7a4:	0800c7e9 	.word	0x0800c7e9
 800c7a8:	0800c7e9 	.word	0x0800c7e9
 800c7ac:	0800c7e9 	.word	0x0800c7e9
 800c7b0:	0800c7e9 	.word	0x0800c7e9
 800c7b4:	0800c7e1 	.word	0x0800c7e1
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e326      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c6:	e322      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7c8:	2308      	movs	r3, #8
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e31e      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7d0:	2310      	movs	r3, #16
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e31a      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7d8:	2320      	movs	r3, #32
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e316      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7e0:	2340      	movs	r3, #64	; 0x40
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e312      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7e8:	2380      	movs	r3, #128	; 0x80
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ee:	e30e      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a69      	ldr	r2, [pc, #420]	; (800c99c <UART_SetConfig+0x33c>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d130      	bne.n	800c85c <UART_SetConfig+0x1fc>
 800c7fa:	4b67      	ldr	r3, [pc, #412]	; (800c998 <UART_SetConfig+0x338>)
 800c7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fe:	f003 0307 	and.w	r3, r3, #7
 800c802:	2b05      	cmp	r3, #5
 800c804:	d826      	bhi.n	800c854 <UART_SetConfig+0x1f4>
 800c806:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <UART_SetConfig+0x1ac>)
 800c808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80c:	0800c825 	.word	0x0800c825
 800c810:	0800c82d 	.word	0x0800c82d
 800c814:	0800c835 	.word	0x0800c835
 800c818:	0800c83d 	.word	0x0800c83d
 800c81c:	0800c845 	.word	0x0800c845
 800c820:	0800c84d 	.word	0x0800c84d
 800c824:	2300      	movs	r3, #0
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e2f0      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c82c:	2304      	movs	r3, #4
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e2ec      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c834:	2308      	movs	r3, #8
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e2e8      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c83c:	2310      	movs	r3, #16
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e2e4      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c844:	2320      	movs	r3, #32
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e2e0      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c84c:	2340      	movs	r3, #64	; 0x40
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e2dc      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c854:	2380      	movs	r3, #128	; 0x80
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85a:	e2d8      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a4f      	ldr	r2, [pc, #316]	; (800c9a0 <UART_SetConfig+0x340>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d130      	bne.n	800c8c8 <UART_SetConfig+0x268>
 800c866:	4b4c      	ldr	r3, [pc, #304]	; (800c998 <UART_SetConfig+0x338>)
 800c868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86a:	f003 0307 	and.w	r3, r3, #7
 800c86e:	2b05      	cmp	r3, #5
 800c870:	d826      	bhi.n	800c8c0 <UART_SetConfig+0x260>
 800c872:	a201      	add	r2, pc, #4	; (adr r2, 800c878 <UART_SetConfig+0x218>)
 800c874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c878:	0800c891 	.word	0x0800c891
 800c87c:	0800c899 	.word	0x0800c899
 800c880:	0800c8a1 	.word	0x0800c8a1
 800c884:	0800c8a9 	.word	0x0800c8a9
 800c888:	0800c8b1 	.word	0x0800c8b1
 800c88c:	0800c8b9 	.word	0x0800c8b9
 800c890:	2300      	movs	r3, #0
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e2ba      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c898:	2304      	movs	r3, #4
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e2b6      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c8a0:	2308      	movs	r3, #8
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a6:	e2b2      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c8a8:	2310      	movs	r3, #16
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e2ae      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c8b0:	2320      	movs	r3, #32
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e2aa      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c8b8:	2340      	movs	r3, #64	; 0x40
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8be:	e2a6      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c8c0:	2380      	movs	r3, #128	; 0x80
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c6:	e2a2      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a35      	ldr	r2, [pc, #212]	; (800c9a4 <UART_SetConfig+0x344>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d130      	bne.n	800c934 <UART_SetConfig+0x2d4>
 800c8d2:	4b31      	ldr	r3, [pc, #196]	; (800c998 <UART_SetConfig+0x338>)
 800c8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b05      	cmp	r3, #5
 800c8dc:	d826      	bhi.n	800c92c <UART_SetConfig+0x2cc>
 800c8de:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <UART_SetConfig+0x284>)
 800c8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e4:	0800c8fd 	.word	0x0800c8fd
 800c8e8:	0800c905 	.word	0x0800c905
 800c8ec:	0800c90d 	.word	0x0800c90d
 800c8f0:	0800c915 	.word	0x0800c915
 800c8f4:	0800c91d 	.word	0x0800c91d
 800c8f8:	0800c925 	.word	0x0800c925
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c902:	e284      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c904:	2304      	movs	r3, #4
 800c906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90a:	e280      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c90c:	2308      	movs	r3, #8
 800c90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c912:	e27c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c914:	2310      	movs	r3, #16
 800c916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91a:	e278      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c91c:	2320      	movs	r3, #32
 800c91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c922:	e274      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c924:	2340      	movs	r3, #64	; 0x40
 800c926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92a:	e270      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c92c:	2380      	movs	r3, #128	; 0x80
 800c92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c932:	e26c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a1b      	ldr	r2, [pc, #108]	; (800c9a8 <UART_SetConfig+0x348>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d142      	bne.n	800c9c4 <UART_SetConfig+0x364>
 800c93e:	4b16      	ldr	r3, [pc, #88]	; (800c998 <UART_SetConfig+0x338>)
 800c940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c942:	f003 0307 	and.w	r3, r3, #7
 800c946:	2b05      	cmp	r3, #5
 800c948:	d838      	bhi.n	800c9bc <UART_SetConfig+0x35c>
 800c94a:	a201      	add	r2, pc, #4	; (adr r2, 800c950 <UART_SetConfig+0x2f0>)
 800c94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c950:	0800c969 	.word	0x0800c969
 800c954:	0800c971 	.word	0x0800c971
 800c958:	0800c979 	.word	0x0800c979
 800c95c:	0800c981 	.word	0x0800c981
 800c960:	0800c9ad 	.word	0x0800c9ad
 800c964:	0800c9b5 	.word	0x0800c9b5
 800c968:	2300      	movs	r3, #0
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e24e      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c970:	2304      	movs	r3, #4
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e24a      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c978:	2308      	movs	r3, #8
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e246      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c980:	2310      	movs	r3, #16
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e242      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c988:	cfff69f3 	.word	0xcfff69f3
 800c98c:	58000c00 	.word	0x58000c00
 800c990:	11fff4ff 	.word	0x11fff4ff
 800c994:	40011000 	.word	0x40011000
 800c998:	58024400 	.word	0x58024400
 800c99c:	40004400 	.word	0x40004400
 800c9a0:	40004800 	.word	0x40004800
 800c9a4:	40004c00 	.word	0x40004c00
 800c9a8:	40005000 	.word	0x40005000
 800c9ac:	2320      	movs	r3, #32
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e22c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c9b4:	2340      	movs	r3, #64	; 0x40
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e228      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c9bc:	2380      	movs	r3, #128	; 0x80
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c2:	e224      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4ab1      	ldr	r2, [pc, #708]	; (800cc90 <UART_SetConfig+0x630>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d176      	bne.n	800cabc <UART_SetConfig+0x45c>
 800c9ce:	4bb1      	ldr	r3, [pc, #708]	; (800cc94 <UART_SetConfig+0x634>)
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9d6:	2b28      	cmp	r3, #40	; 0x28
 800c9d8:	d86c      	bhi.n	800cab4 <UART_SetConfig+0x454>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0x380>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800ca85 	.word	0x0800ca85
 800c9e4:	0800cab5 	.word	0x0800cab5
 800c9e8:	0800cab5 	.word	0x0800cab5
 800c9ec:	0800cab5 	.word	0x0800cab5
 800c9f0:	0800cab5 	.word	0x0800cab5
 800c9f4:	0800cab5 	.word	0x0800cab5
 800c9f8:	0800cab5 	.word	0x0800cab5
 800c9fc:	0800cab5 	.word	0x0800cab5
 800ca00:	0800ca8d 	.word	0x0800ca8d
 800ca04:	0800cab5 	.word	0x0800cab5
 800ca08:	0800cab5 	.word	0x0800cab5
 800ca0c:	0800cab5 	.word	0x0800cab5
 800ca10:	0800cab5 	.word	0x0800cab5
 800ca14:	0800cab5 	.word	0x0800cab5
 800ca18:	0800cab5 	.word	0x0800cab5
 800ca1c:	0800cab5 	.word	0x0800cab5
 800ca20:	0800ca95 	.word	0x0800ca95
 800ca24:	0800cab5 	.word	0x0800cab5
 800ca28:	0800cab5 	.word	0x0800cab5
 800ca2c:	0800cab5 	.word	0x0800cab5
 800ca30:	0800cab5 	.word	0x0800cab5
 800ca34:	0800cab5 	.word	0x0800cab5
 800ca38:	0800cab5 	.word	0x0800cab5
 800ca3c:	0800cab5 	.word	0x0800cab5
 800ca40:	0800ca9d 	.word	0x0800ca9d
 800ca44:	0800cab5 	.word	0x0800cab5
 800ca48:	0800cab5 	.word	0x0800cab5
 800ca4c:	0800cab5 	.word	0x0800cab5
 800ca50:	0800cab5 	.word	0x0800cab5
 800ca54:	0800cab5 	.word	0x0800cab5
 800ca58:	0800cab5 	.word	0x0800cab5
 800ca5c:	0800cab5 	.word	0x0800cab5
 800ca60:	0800caa5 	.word	0x0800caa5
 800ca64:	0800cab5 	.word	0x0800cab5
 800ca68:	0800cab5 	.word	0x0800cab5
 800ca6c:	0800cab5 	.word	0x0800cab5
 800ca70:	0800cab5 	.word	0x0800cab5
 800ca74:	0800cab5 	.word	0x0800cab5
 800ca78:	0800cab5 	.word	0x0800cab5
 800ca7c:	0800cab5 	.word	0x0800cab5
 800ca80:	0800caad 	.word	0x0800caad
 800ca84:	2301      	movs	r3, #1
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8a:	e1c0      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800ca8c:	2304      	movs	r3, #4
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca92:	e1bc      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800ca94:	2308      	movs	r3, #8
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9a:	e1b8      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800ca9c:	2310      	movs	r3, #16
 800ca9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa2:	e1b4      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800caa4:	2320      	movs	r3, #32
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caaa:	e1b0      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800caac:	2340      	movs	r3, #64	; 0x40
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab2:	e1ac      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cab4:	2380      	movs	r3, #128	; 0x80
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caba:	e1a8      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a75      	ldr	r2, [pc, #468]	; (800cc98 <UART_SetConfig+0x638>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d130      	bne.n	800cb28 <UART_SetConfig+0x4c8>
 800cac6:	4b73      	ldr	r3, [pc, #460]	; (800cc94 <UART_SetConfig+0x634>)
 800cac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caca:	f003 0307 	and.w	r3, r3, #7
 800cace:	2b05      	cmp	r3, #5
 800cad0:	d826      	bhi.n	800cb20 <UART_SetConfig+0x4c0>
 800cad2:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <UART_SetConfig+0x478>)
 800cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad8:	0800caf1 	.word	0x0800caf1
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800cb01 	.word	0x0800cb01
 800cae4:	0800cb09 	.word	0x0800cb09
 800cae8:	0800cb11 	.word	0x0800cb11
 800caec:	0800cb19 	.word	0x0800cb19
 800caf0:	2300      	movs	r3, #0
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf6:	e18a      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800caf8:	2304      	movs	r3, #4
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafe:	e186      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb00:	2308      	movs	r3, #8
 800cb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb06:	e182      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb08:	2310      	movs	r3, #16
 800cb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0e:	e17e      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb10:	2320      	movs	r3, #32
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb16:	e17a      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb18:	2340      	movs	r3, #64	; 0x40
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1e:	e176      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb20:	2380      	movs	r3, #128	; 0x80
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb26:	e172      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a5b      	ldr	r2, [pc, #364]	; (800cc9c <UART_SetConfig+0x63c>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d130      	bne.n	800cb94 <UART_SetConfig+0x534>
 800cb32:	4b58      	ldr	r3, [pc, #352]	; (800cc94 <UART_SetConfig+0x634>)
 800cb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb36:	f003 0307 	and.w	r3, r3, #7
 800cb3a:	2b05      	cmp	r3, #5
 800cb3c:	d826      	bhi.n	800cb8c <UART_SetConfig+0x52c>
 800cb3e:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <UART_SetConfig+0x4e4>)
 800cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb44:	0800cb5d 	.word	0x0800cb5d
 800cb48:	0800cb65 	.word	0x0800cb65
 800cb4c:	0800cb6d 	.word	0x0800cb6d
 800cb50:	0800cb75 	.word	0x0800cb75
 800cb54:	0800cb7d 	.word	0x0800cb7d
 800cb58:	0800cb85 	.word	0x0800cb85
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e154      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb64:	2304      	movs	r3, #4
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e150      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb6c:	2308      	movs	r3, #8
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb72:	e14c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb74:	2310      	movs	r3, #16
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7a:	e148      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb82:	e144      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb84:	2340      	movs	r3, #64	; 0x40
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8a:	e140      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb8c:	2380      	movs	r3, #128	; 0x80
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb92:	e13c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a41      	ldr	r2, [pc, #260]	; (800cca0 <UART_SetConfig+0x640>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	f040 8082 	bne.w	800cca4 <UART_SetConfig+0x644>
 800cba0:	4b3c      	ldr	r3, [pc, #240]	; (800cc94 <UART_SetConfig+0x634>)
 800cba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cba8:	2b28      	cmp	r3, #40	; 0x28
 800cbaa:	d86d      	bhi.n	800cc88 <UART_SetConfig+0x628>
 800cbac:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <UART_SetConfig+0x554>)
 800cbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb2:	bf00      	nop
 800cbb4:	0800cc59 	.word	0x0800cc59
 800cbb8:	0800cc89 	.word	0x0800cc89
 800cbbc:	0800cc89 	.word	0x0800cc89
 800cbc0:	0800cc89 	.word	0x0800cc89
 800cbc4:	0800cc89 	.word	0x0800cc89
 800cbc8:	0800cc89 	.word	0x0800cc89
 800cbcc:	0800cc89 	.word	0x0800cc89
 800cbd0:	0800cc89 	.word	0x0800cc89
 800cbd4:	0800cc61 	.word	0x0800cc61
 800cbd8:	0800cc89 	.word	0x0800cc89
 800cbdc:	0800cc89 	.word	0x0800cc89
 800cbe0:	0800cc89 	.word	0x0800cc89
 800cbe4:	0800cc89 	.word	0x0800cc89
 800cbe8:	0800cc89 	.word	0x0800cc89
 800cbec:	0800cc89 	.word	0x0800cc89
 800cbf0:	0800cc89 	.word	0x0800cc89
 800cbf4:	0800cc69 	.word	0x0800cc69
 800cbf8:	0800cc89 	.word	0x0800cc89
 800cbfc:	0800cc89 	.word	0x0800cc89
 800cc00:	0800cc89 	.word	0x0800cc89
 800cc04:	0800cc89 	.word	0x0800cc89
 800cc08:	0800cc89 	.word	0x0800cc89
 800cc0c:	0800cc89 	.word	0x0800cc89
 800cc10:	0800cc89 	.word	0x0800cc89
 800cc14:	0800cc71 	.word	0x0800cc71
 800cc18:	0800cc89 	.word	0x0800cc89
 800cc1c:	0800cc89 	.word	0x0800cc89
 800cc20:	0800cc89 	.word	0x0800cc89
 800cc24:	0800cc89 	.word	0x0800cc89
 800cc28:	0800cc89 	.word	0x0800cc89
 800cc2c:	0800cc89 	.word	0x0800cc89
 800cc30:	0800cc89 	.word	0x0800cc89
 800cc34:	0800cc79 	.word	0x0800cc79
 800cc38:	0800cc89 	.word	0x0800cc89
 800cc3c:	0800cc89 	.word	0x0800cc89
 800cc40:	0800cc89 	.word	0x0800cc89
 800cc44:	0800cc89 	.word	0x0800cc89
 800cc48:	0800cc89 	.word	0x0800cc89
 800cc4c:	0800cc89 	.word	0x0800cc89
 800cc50:	0800cc89 	.word	0x0800cc89
 800cc54:	0800cc81 	.word	0x0800cc81
 800cc58:	2301      	movs	r3, #1
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5e:	e0d6      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc60:	2304      	movs	r3, #4
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc66:	e0d2      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc68:	2308      	movs	r3, #8
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6e:	e0ce      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc70:	2310      	movs	r3, #16
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e0ca      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e0c6      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc80:	2340      	movs	r3, #64	; 0x40
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e0c2      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc88:	2380      	movs	r3, #128	; 0x80
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8e:	e0be      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cc90:	40011400 	.word	0x40011400
 800cc94:	58024400 	.word	0x58024400
 800cc98:	40007800 	.word	0x40007800
 800cc9c:	40007c00 	.word	0x40007c00
 800cca0:	40011800 	.word	0x40011800
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4aad      	ldr	r2, [pc, #692]	; (800cf60 <UART_SetConfig+0x900>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d176      	bne.n	800cd9c <UART_SetConfig+0x73c>
 800ccae:	4bad      	ldr	r3, [pc, #692]	; (800cf64 <UART_SetConfig+0x904>)
 800ccb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccb6:	2b28      	cmp	r3, #40	; 0x28
 800ccb8:	d86c      	bhi.n	800cd94 <UART_SetConfig+0x734>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <UART_SetConfig+0x660>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cd65 	.word	0x0800cd65
 800ccc4:	0800cd95 	.word	0x0800cd95
 800ccc8:	0800cd95 	.word	0x0800cd95
 800cccc:	0800cd95 	.word	0x0800cd95
 800ccd0:	0800cd95 	.word	0x0800cd95
 800ccd4:	0800cd95 	.word	0x0800cd95
 800ccd8:	0800cd95 	.word	0x0800cd95
 800ccdc:	0800cd95 	.word	0x0800cd95
 800cce0:	0800cd6d 	.word	0x0800cd6d
 800cce4:	0800cd95 	.word	0x0800cd95
 800cce8:	0800cd95 	.word	0x0800cd95
 800ccec:	0800cd95 	.word	0x0800cd95
 800ccf0:	0800cd95 	.word	0x0800cd95
 800ccf4:	0800cd95 	.word	0x0800cd95
 800ccf8:	0800cd95 	.word	0x0800cd95
 800ccfc:	0800cd95 	.word	0x0800cd95
 800cd00:	0800cd75 	.word	0x0800cd75
 800cd04:	0800cd95 	.word	0x0800cd95
 800cd08:	0800cd95 	.word	0x0800cd95
 800cd0c:	0800cd95 	.word	0x0800cd95
 800cd10:	0800cd95 	.word	0x0800cd95
 800cd14:	0800cd95 	.word	0x0800cd95
 800cd18:	0800cd95 	.word	0x0800cd95
 800cd1c:	0800cd95 	.word	0x0800cd95
 800cd20:	0800cd7d 	.word	0x0800cd7d
 800cd24:	0800cd95 	.word	0x0800cd95
 800cd28:	0800cd95 	.word	0x0800cd95
 800cd2c:	0800cd95 	.word	0x0800cd95
 800cd30:	0800cd95 	.word	0x0800cd95
 800cd34:	0800cd95 	.word	0x0800cd95
 800cd38:	0800cd95 	.word	0x0800cd95
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cd85 	.word	0x0800cd85
 800cd44:	0800cd95 	.word	0x0800cd95
 800cd48:	0800cd95 	.word	0x0800cd95
 800cd4c:	0800cd95 	.word	0x0800cd95
 800cd50:	0800cd95 	.word	0x0800cd95
 800cd54:	0800cd95 	.word	0x0800cd95
 800cd58:	0800cd95 	.word	0x0800cd95
 800cd5c:	0800cd95 	.word	0x0800cd95
 800cd60:	0800cd8d 	.word	0x0800cd8d
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6a:	e050      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd72:	e04c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd74:	2308      	movs	r3, #8
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7a:	e048      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd82:	e044      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd84:	2320      	movs	r3, #32
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8a:	e040      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd8c:	2340      	movs	r3, #64	; 0x40
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd92:	e03c      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd94:	2380      	movs	r3, #128	; 0x80
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9a:	e038      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a71      	ldr	r2, [pc, #452]	; (800cf68 <UART_SetConfig+0x908>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d130      	bne.n	800ce08 <UART_SetConfig+0x7a8>
 800cda6:	4b6f      	ldr	r3, [pc, #444]	; (800cf64 <UART_SetConfig+0x904>)
 800cda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d826      	bhi.n	800ce00 <UART_SetConfig+0x7a0>
 800cdb2:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <UART_SetConfig+0x758>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cdd1 	.word	0x0800cdd1
 800cdbc:	0800cdd9 	.word	0x0800cdd9
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800cde9 	.word	0x0800cde9
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf9 	.word	0x0800cdf9
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd6:	e01a      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cdd8:	2304      	movs	r3, #4
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdde:	e016      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cde0:	2308      	movs	r3, #8
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cde6:	e012      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cde8:	2310      	movs	r3, #16
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdee:	e00e      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cdf0:	2320      	movs	r3, #32
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf6:	e00a      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800cdf8:	2340      	movs	r3, #64	; 0x40
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfe:	e006      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800ce00:	2380      	movs	r3, #128	; 0x80
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce06:	e002      	b.n	800ce0e <UART_SetConfig+0x7ae>
 800ce08:	2380      	movs	r3, #128	; 0x80
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a55      	ldr	r2, [pc, #340]	; (800cf68 <UART_SetConfig+0x908>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	f040 80f8 	bne.w	800d00a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce1e:	2b20      	cmp	r3, #32
 800ce20:	dc46      	bgt.n	800ceb0 <UART_SetConfig+0x850>
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	db75      	blt.n	800cf12 <UART_SetConfig+0x8b2>
 800ce26:	3b02      	subs	r3, #2
 800ce28:	2b1e      	cmp	r3, #30
 800ce2a:	d872      	bhi.n	800cf12 <UART_SetConfig+0x8b2>
 800ce2c:	a201      	add	r2, pc, #4	; (adr r2, 800ce34 <UART_SetConfig+0x7d4>)
 800ce2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce32:	bf00      	nop
 800ce34:	0800ceb7 	.word	0x0800ceb7
 800ce38:	0800cf13 	.word	0x0800cf13
 800ce3c:	0800cebf 	.word	0x0800cebf
 800ce40:	0800cf13 	.word	0x0800cf13
 800ce44:	0800cf13 	.word	0x0800cf13
 800ce48:	0800cf13 	.word	0x0800cf13
 800ce4c:	0800cecf 	.word	0x0800cecf
 800ce50:	0800cf13 	.word	0x0800cf13
 800ce54:	0800cf13 	.word	0x0800cf13
 800ce58:	0800cf13 	.word	0x0800cf13
 800ce5c:	0800cf13 	.word	0x0800cf13
 800ce60:	0800cf13 	.word	0x0800cf13
 800ce64:	0800cf13 	.word	0x0800cf13
 800ce68:	0800cf13 	.word	0x0800cf13
 800ce6c:	0800cedf 	.word	0x0800cedf
 800ce70:	0800cf13 	.word	0x0800cf13
 800ce74:	0800cf13 	.word	0x0800cf13
 800ce78:	0800cf13 	.word	0x0800cf13
 800ce7c:	0800cf13 	.word	0x0800cf13
 800ce80:	0800cf13 	.word	0x0800cf13
 800ce84:	0800cf13 	.word	0x0800cf13
 800ce88:	0800cf13 	.word	0x0800cf13
 800ce8c:	0800cf13 	.word	0x0800cf13
 800ce90:	0800cf13 	.word	0x0800cf13
 800ce94:	0800cf13 	.word	0x0800cf13
 800ce98:	0800cf13 	.word	0x0800cf13
 800ce9c:	0800cf13 	.word	0x0800cf13
 800cea0:	0800cf13 	.word	0x0800cf13
 800cea4:	0800cf13 	.word	0x0800cf13
 800cea8:	0800cf13 	.word	0x0800cf13
 800ceac:	0800cf05 	.word	0x0800cf05
 800ceb0:	2b40      	cmp	r3, #64	; 0x40
 800ceb2:	d02a      	beq.n	800cf0a <UART_SetConfig+0x8aa>
 800ceb4:	e02d      	b.n	800cf12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ceb6:	f7fc ffd3 	bl	8009e60 <HAL_RCCEx_GetD3PCLK1Freq>
 800ceba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cebc:	e02f      	b.n	800cf1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fc ffe2 	bl	8009e8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cecc:	e027      	b.n	800cf1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cece:	f107 0318 	add.w	r3, r7, #24
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fd f92e 	bl	800a134 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cedc:	e01f      	b.n	800cf1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cede:	4b21      	ldr	r3, [pc, #132]	; (800cf64 <UART_SetConfig+0x904>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0320 	and.w	r3, r3, #32
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d009      	beq.n	800cefe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceea:	4b1e      	ldr	r3, [pc, #120]	; (800cf64 <UART_SetConfig+0x904>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	08db      	lsrs	r3, r3, #3
 800cef0:	f003 0303 	and.w	r3, r3, #3
 800cef4:	4a1d      	ldr	r2, [pc, #116]	; (800cf6c <UART_SetConfig+0x90c>)
 800cef6:	fa22 f303 	lsr.w	r3, r2, r3
 800cefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cefc:	e00f      	b.n	800cf1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cefe:	4b1b      	ldr	r3, [pc, #108]	; (800cf6c <UART_SetConfig+0x90c>)
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf02:	e00c      	b.n	800cf1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf04:	4b1a      	ldr	r3, [pc, #104]	; (800cf70 <UART_SetConfig+0x910>)
 800cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf08:	e009      	b.n	800cf1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf10:	e005      	b.n	800cf1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cf12:	2300      	movs	r3, #0
 800cf14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f000 81ee 	beq.w	800d302 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2a:	4a12      	ldr	r2, [pc, #72]	; (800cf74 <UART_SetConfig+0x914>)
 800cf2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf30:	461a      	mov	r2, r3
 800cf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf34:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	685a      	ldr	r2, [r3, #4]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	4413      	add	r3, r2
 800cf44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d305      	bcc.n	800cf56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d910      	bls.n	800cf78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf5c:	e1d1      	b.n	800d302 <UART_SetConfig+0xca2>
 800cf5e:	bf00      	nop
 800cf60:	40011c00 	.word	0x40011c00
 800cf64:	58024400 	.word	0x58024400
 800cf68:	58000c00 	.word	0x58000c00
 800cf6c:	03d09000 	.word	0x03d09000
 800cf70:	003d0900 	.word	0x003d0900
 800cf74:	0800e534 	.word	0x0800e534
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	60bb      	str	r3, [r7, #8]
 800cf7e:	60fa      	str	r2, [r7, #12]
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf84:	4ac0      	ldr	r2, [pc, #768]	; (800d288 <UART_SetConfig+0xc28>)
 800cf86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	607a      	str	r2, [r7, #4]
 800cf92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf9a:	f7f3 f9c1 	bl	8000320 <__aeabi_uldivmod>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	f04f 0200 	mov.w	r2, #0
 800cfaa:	f04f 0300 	mov.w	r3, #0
 800cfae:	020b      	lsls	r3, r1, #8
 800cfb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfb4:	0202      	lsls	r2, r0, #8
 800cfb6:	6979      	ldr	r1, [r7, #20]
 800cfb8:	6849      	ldr	r1, [r1, #4]
 800cfba:	0849      	lsrs	r1, r1, #1
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	eb12 0804 	adds.w	r8, r2, r4
 800cfc6:	eb43 0905 	adc.w	r9, r3, r5
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	469a      	mov	sl, r3
 800cfd2:	4693      	mov	fp, r2
 800cfd4:	4652      	mov	r2, sl
 800cfd6:	465b      	mov	r3, fp
 800cfd8:	4640      	mov	r0, r8
 800cfda:	4649      	mov	r1, r9
 800cfdc:	f7f3 f9a0 	bl	8000320 <__aeabi_uldivmod>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfee:	d308      	bcc.n	800d002 <UART_SetConfig+0x9a2>
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cff6:	d204      	bcs.n	800d002 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cffe:	60da      	str	r2, [r3, #12]
 800d000:	e17f      	b.n	800d302 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d008:	e17b      	b.n	800d302 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	69db      	ldr	r3, [r3, #28]
 800d00e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d012:	f040 80bd 	bne.w	800d190 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d016:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	dc48      	bgt.n	800d0b0 <UART_SetConfig+0xa50>
 800d01e:	2b00      	cmp	r3, #0
 800d020:	db7b      	blt.n	800d11a <UART_SetConfig+0xaba>
 800d022:	2b20      	cmp	r3, #32
 800d024:	d879      	bhi.n	800d11a <UART_SetConfig+0xaba>
 800d026:	a201      	add	r2, pc, #4	; (adr r2, 800d02c <UART_SetConfig+0x9cc>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d0b7 	.word	0x0800d0b7
 800d030:	0800d0bf 	.word	0x0800d0bf
 800d034:	0800d11b 	.word	0x0800d11b
 800d038:	0800d11b 	.word	0x0800d11b
 800d03c:	0800d0c7 	.word	0x0800d0c7
 800d040:	0800d11b 	.word	0x0800d11b
 800d044:	0800d11b 	.word	0x0800d11b
 800d048:	0800d11b 	.word	0x0800d11b
 800d04c:	0800d0d7 	.word	0x0800d0d7
 800d050:	0800d11b 	.word	0x0800d11b
 800d054:	0800d11b 	.word	0x0800d11b
 800d058:	0800d11b 	.word	0x0800d11b
 800d05c:	0800d11b 	.word	0x0800d11b
 800d060:	0800d11b 	.word	0x0800d11b
 800d064:	0800d11b 	.word	0x0800d11b
 800d068:	0800d11b 	.word	0x0800d11b
 800d06c:	0800d0e7 	.word	0x0800d0e7
 800d070:	0800d11b 	.word	0x0800d11b
 800d074:	0800d11b 	.word	0x0800d11b
 800d078:	0800d11b 	.word	0x0800d11b
 800d07c:	0800d11b 	.word	0x0800d11b
 800d080:	0800d11b 	.word	0x0800d11b
 800d084:	0800d11b 	.word	0x0800d11b
 800d088:	0800d11b 	.word	0x0800d11b
 800d08c:	0800d11b 	.word	0x0800d11b
 800d090:	0800d11b 	.word	0x0800d11b
 800d094:	0800d11b 	.word	0x0800d11b
 800d098:	0800d11b 	.word	0x0800d11b
 800d09c:	0800d11b 	.word	0x0800d11b
 800d0a0:	0800d11b 	.word	0x0800d11b
 800d0a4:	0800d11b 	.word	0x0800d11b
 800d0a8:	0800d11b 	.word	0x0800d11b
 800d0ac:	0800d10d 	.word	0x0800d10d
 800d0b0:	2b40      	cmp	r3, #64	; 0x40
 800d0b2:	d02e      	beq.n	800d112 <UART_SetConfig+0xab2>
 800d0b4:	e031      	b.n	800d11a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0b6:	f7fb ffad 	bl	8009014 <HAL_RCC_GetPCLK1Freq>
 800d0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0bc:	e033      	b.n	800d126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0be:	f7fb ffbf 	bl	8009040 <HAL_RCC_GetPCLK2Freq>
 800d0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0c4:	e02f      	b.n	800d126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fc fede 	bl	8009e8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0d4:	e027      	b.n	800d126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0d6:	f107 0318 	add.w	r3, r7, #24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fd f82a 	bl	800a134 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e4:	e01f      	b.n	800d126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0e6:	4b69      	ldr	r3, [pc, #420]	; (800d28c <UART_SetConfig+0xc2c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 0320 	and.w	r3, r3, #32
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d009      	beq.n	800d106 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0f2:	4b66      	ldr	r3, [pc, #408]	; (800d28c <UART_SetConfig+0xc2c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	08db      	lsrs	r3, r3, #3
 800d0f8:	f003 0303 	and.w	r3, r3, #3
 800d0fc:	4a64      	ldr	r2, [pc, #400]	; (800d290 <UART_SetConfig+0xc30>)
 800d0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d104:	e00f      	b.n	800d126 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d106:	4b62      	ldr	r3, [pc, #392]	; (800d290 <UART_SetConfig+0xc30>)
 800d108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d10a:	e00c      	b.n	800d126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d10c:	4b61      	ldr	r3, [pc, #388]	; (800d294 <UART_SetConfig+0xc34>)
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d110:	e009      	b.n	800d126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d118:	e005      	b.n	800d126 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 80ea 	beq.w	800d302 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	4a55      	ldr	r2, [pc, #340]	; (800d288 <UART_SetConfig+0xc28>)
 800d134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d138:	461a      	mov	r2, r3
 800d13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d140:	005a      	lsls	r2, r3, #1
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	085b      	lsrs	r3, r3, #1
 800d148:	441a      	add	r2, r3
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d152:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d156:	2b0f      	cmp	r3, #15
 800d158:	d916      	bls.n	800d188 <UART_SetConfig+0xb28>
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d160:	d212      	bcs.n	800d188 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	b29b      	uxth	r3, r3
 800d166:	f023 030f 	bic.w	r3, r3, #15
 800d16a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	085b      	lsrs	r3, r3, #1
 800d170:	b29b      	uxth	r3, r3
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	b29a      	uxth	r2, r3
 800d178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d17a:	4313      	orrs	r3, r2
 800d17c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d184:	60da      	str	r2, [r3, #12]
 800d186:	e0bc      	b.n	800d302 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d18e:	e0b8      	b.n	800d302 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d190:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d194:	2b20      	cmp	r3, #32
 800d196:	dc4b      	bgt.n	800d230 <UART_SetConfig+0xbd0>
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f2c0 8087 	blt.w	800d2ac <UART_SetConfig+0xc4c>
 800d19e:	2b20      	cmp	r3, #32
 800d1a0:	f200 8084 	bhi.w	800d2ac <UART_SetConfig+0xc4c>
 800d1a4:	a201      	add	r2, pc, #4	; (adr r2, 800d1ac <UART_SetConfig+0xb4c>)
 800d1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1aa:	bf00      	nop
 800d1ac:	0800d237 	.word	0x0800d237
 800d1b0:	0800d23f 	.word	0x0800d23f
 800d1b4:	0800d2ad 	.word	0x0800d2ad
 800d1b8:	0800d2ad 	.word	0x0800d2ad
 800d1bc:	0800d247 	.word	0x0800d247
 800d1c0:	0800d2ad 	.word	0x0800d2ad
 800d1c4:	0800d2ad 	.word	0x0800d2ad
 800d1c8:	0800d2ad 	.word	0x0800d2ad
 800d1cc:	0800d257 	.word	0x0800d257
 800d1d0:	0800d2ad 	.word	0x0800d2ad
 800d1d4:	0800d2ad 	.word	0x0800d2ad
 800d1d8:	0800d2ad 	.word	0x0800d2ad
 800d1dc:	0800d2ad 	.word	0x0800d2ad
 800d1e0:	0800d2ad 	.word	0x0800d2ad
 800d1e4:	0800d2ad 	.word	0x0800d2ad
 800d1e8:	0800d2ad 	.word	0x0800d2ad
 800d1ec:	0800d267 	.word	0x0800d267
 800d1f0:	0800d2ad 	.word	0x0800d2ad
 800d1f4:	0800d2ad 	.word	0x0800d2ad
 800d1f8:	0800d2ad 	.word	0x0800d2ad
 800d1fc:	0800d2ad 	.word	0x0800d2ad
 800d200:	0800d2ad 	.word	0x0800d2ad
 800d204:	0800d2ad 	.word	0x0800d2ad
 800d208:	0800d2ad 	.word	0x0800d2ad
 800d20c:	0800d2ad 	.word	0x0800d2ad
 800d210:	0800d2ad 	.word	0x0800d2ad
 800d214:	0800d2ad 	.word	0x0800d2ad
 800d218:	0800d2ad 	.word	0x0800d2ad
 800d21c:	0800d2ad 	.word	0x0800d2ad
 800d220:	0800d2ad 	.word	0x0800d2ad
 800d224:	0800d2ad 	.word	0x0800d2ad
 800d228:	0800d2ad 	.word	0x0800d2ad
 800d22c:	0800d29f 	.word	0x0800d29f
 800d230:	2b40      	cmp	r3, #64	; 0x40
 800d232:	d037      	beq.n	800d2a4 <UART_SetConfig+0xc44>
 800d234:	e03a      	b.n	800d2ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d236:	f7fb feed 	bl	8009014 <HAL_RCC_GetPCLK1Freq>
 800d23a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d23c:	e03c      	b.n	800d2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d23e:	f7fb feff 	bl	8009040 <HAL_RCC_GetPCLK2Freq>
 800d242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d244:	e038      	b.n	800d2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fc fe1e 	bl	8009e8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d254:	e030      	b.n	800d2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d256:	f107 0318 	add.w	r3, r7, #24
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fc ff6a 	bl	800a134 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d264:	e028      	b.n	800d2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d266:	4b09      	ldr	r3, [pc, #36]	; (800d28c <UART_SetConfig+0xc2c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 0320 	and.w	r3, r3, #32
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d012      	beq.n	800d298 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d272:	4b06      	ldr	r3, [pc, #24]	; (800d28c <UART_SetConfig+0xc2c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	08db      	lsrs	r3, r3, #3
 800d278:	f003 0303 	and.w	r3, r3, #3
 800d27c:	4a04      	ldr	r2, [pc, #16]	; (800d290 <UART_SetConfig+0xc30>)
 800d27e:	fa22 f303 	lsr.w	r3, r2, r3
 800d282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d284:	e018      	b.n	800d2b8 <UART_SetConfig+0xc58>
 800d286:	bf00      	nop
 800d288:	0800e534 	.word	0x0800e534
 800d28c:	58024400 	.word	0x58024400
 800d290:	03d09000 	.word	0x03d09000
 800d294:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d298:	4b24      	ldr	r3, [pc, #144]	; (800d32c <UART_SetConfig+0xccc>)
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d29c:	e00c      	b.n	800d2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d29e:	4b24      	ldr	r3, [pc, #144]	; (800d330 <UART_SetConfig+0xcd0>)
 800d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a2:	e009      	b.n	800d2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2aa:	e005      	b.n	800d2b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2b6:	bf00      	nop
    }

    if (pclk != 0U)
 800d2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d021      	beq.n	800d302 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c2:	4a1c      	ldr	r2, [pc, #112]	; (800d334 <UART_SetConfig+0xcd4>)
 800d2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	085b      	lsrs	r3, r3, #1
 800d2d6:	441a      	add	r2, r3
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2e0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e4:	2b0f      	cmp	r3, #15
 800d2e6:	d909      	bls.n	800d2fc <UART_SetConfig+0xc9c>
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ee:	d205      	bcs.n	800d2fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	60da      	str	r2, [r3, #12]
 800d2fa:	e002      	b.n	800d302 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	2201      	movs	r2, #1
 800d306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2200      	movs	r2, #0
 800d316:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2200      	movs	r2, #0
 800d31c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d31e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d322:	4618      	mov	r0, r3
 800d324:	3748      	adds	r7, #72	; 0x48
 800d326:	46bd      	mov	sp, r7
 800d328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d32c:	03d09000 	.word	0x03d09000
 800d330:	003d0900 	.word	0x003d0900
 800d334:	0800e534 	.word	0x0800e534

0800d338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d344:	f003 0301 	and.w	r3, r3, #1
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00a      	beq.n	800d362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d366:	f003 0302 	and.w	r3, r3, #2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	430a      	orrs	r2, r1
 800d382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00a      	beq.n	800d3a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	430a      	orrs	r2, r1
 800d3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3aa:	f003 0308 	and.w	r3, r3, #8
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00a      	beq.n	800d3c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	430a      	orrs	r2, r1
 800d3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3cc:	f003 0310 	and.w	r3, r3, #16
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00a      	beq.n	800d3ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	430a      	orrs	r2, r1
 800d3e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ee:	f003 0320 	and.w	r3, r3, #32
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00a      	beq.n	800d40c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	430a      	orrs	r2, r1
 800d40a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01a      	beq.n	800d44e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	430a      	orrs	r2, r1
 800d42c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d436:	d10a      	bne.n	800d44e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	430a      	orrs	r2, r1
 800d44c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	430a      	orrs	r2, r1
 800d46e:	605a      	str	r2, [r3, #4]
  }
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af02      	add	r7, sp, #8
 800d482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d48c:	f7f7 fd62 	bl	8004f54 <HAL_GetTick>
 800d490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 0308 	and.w	r3, r3, #8
 800d49c:	2b08      	cmp	r3, #8
 800d49e:	d10e      	bne.n	800d4be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f82f 	bl	800d512 <UART_WaitOnFlagUntilTimeout>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e025      	b.n	800d50a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 0304 	and.w	r3, r3, #4
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d10e      	bne.n	800d4ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f819 	bl	800d512 <UART_WaitOnFlagUntilTimeout>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e00f      	b.n	800d50a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b09c      	sub	sp, #112	; 0x70
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	60b9      	str	r1, [r7, #8]
 800d51c:	603b      	str	r3, [r7, #0]
 800d51e:	4613      	mov	r3, r2
 800d520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d522:	e0a9      	b.n	800d678 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d52a:	f000 80a5 	beq.w	800d678 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d52e:	f7f7 fd11 	bl	8004f54 <HAL_GetTick>
 800d532:	4602      	mov	r2, r0
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d302      	bcc.n	800d544 <UART_WaitOnFlagUntilTimeout+0x32>
 800d53e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d540:	2b00      	cmp	r3, #0
 800d542:	d140      	bne.n	800d5c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d54c:	e853 3f00 	ldrex	r3, [r3]
 800d550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d558:	667b      	str	r3, [r7, #100]	; 0x64
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	461a      	mov	r2, r3
 800d560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d562:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d564:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d56a:	e841 2300 	strex	r3, r2, [r1]
 800d56e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e6      	bne.n	800d544 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3308      	adds	r3, #8
 800d57c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d580:	e853 3f00 	ldrex	r3, [r3]
 800d584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d588:	f023 0301 	bic.w	r3, r3, #1
 800d58c:	663b      	str	r3, [r7, #96]	; 0x60
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	3308      	adds	r3, #8
 800d594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d596:	64ba      	str	r2, [r7, #72]	; 0x48
 800d598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d59c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e5      	bne.n	800d576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e069      	b.n	800d69a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 0304 	and.w	r3, r3, #4
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d051      	beq.n	800d678 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	69db      	ldr	r3, [r3, #28]
 800d5da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5e2:	d149      	bne.n	800d678 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	e853 3f00 	ldrex	r3, [r3]
 800d5fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d602:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d60c:	637b      	str	r3, [r7, #52]	; 0x34
 800d60e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d614:	e841 2300 	strex	r3, r2, [r1]
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e6      	bne.n	800d5ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3308      	adds	r3, #8
 800d626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	613b      	str	r3, [r7, #16]
   return(result);
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f023 0301 	bic.w	r3, r3, #1
 800d636:	66bb      	str	r3, [r7, #104]	; 0x68
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3308      	adds	r3, #8
 800d63e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d640:	623a      	str	r2, [r7, #32]
 800d642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	69f9      	ldr	r1, [r7, #28]
 800d646:	6a3a      	ldr	r2, [r7, #32]
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e5      	bne.n	800d620 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2220      	movs	r2, #32
 800d658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2220      	movs	r2, #32
 800d660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2220      	movs	r2, #32
 800d668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	e010      	b.n	800d69a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	69da      	ldr	r2, [r3, #28]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	4013      	ands	r3, r2
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	429a      	cmp	r2, r3
 800d686:	bf0c      	ite	eq
 800d688:	2301      	moveq	r3, #1
 800d68a:	2300      	movne	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	461a      	mov	r2, r3
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	429a      	cmp	r2, r3
 800d694:	f43f af46 	beq.w	800d524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3770      	adds	r7, #112	; 0x70
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
	...

0800d6a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b096      	sub	sp, #88	; 0x58
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	88fa      	ldrh	r2, [r7, #6]
 800d6bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2222      	movs	r2, #34	; 0x22
 800d6cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d02c      	beq.n	800d732 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6dc:	4a42      	ldr	r2, [pc, #264]	; (800d7e8 <UART_Start_Receive_DMA+0x144>)
 800d6de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e4:	4a41      	ldr	r2, [pc, #260]	; (800d7ec <UART_Start_Receive_DMA+0x148>)
 800d6e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ec:	4a40      	ldr	r2, [pc, #256]	; (800d7f0 <UART_Start_Receive_DMA+0x14c>)
 800d6ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3324      	adds	r3, #36	; 0x24
 800d702:	4619      	mov	r1, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d708:	461a      	mov	r2, r3
 800d70a:	88fb      	ldrh	r3, [r7, #6]
 800d70c:	f7f8 f898 	bl	8005840 <HAL_DMA_Start_IT>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00d      	beq.n	800d732 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2210      	movs	r2, #16
 800d71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2220      	movs	r2, #32
 800d72a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e055      	b.n	800d7de <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d018      	beq.n	800d774 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74a:	e853 3f00 	ldrex	r3, [r3]
 800d74e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d756:	657b      	str	r3, [r7, #84]	; 0x54
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	461a      	mov	r2, r3
 800d75e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d760:	64bb      	str	r3, [r7, #72]	; 0x48
 800d762:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d764:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d768:	e841 2300 	strex	r3, r2, [r1]
 800d76c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1e6      	bne.n	800d742 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	3308      	adds	r3, #8
 800d77a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	e853 3f00 	ldrex	r3, [r3]
 800d782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d786:	f043 0301 	orr.w	r3, r3, #1
 800d78a:	653b      	str	r3, [r7, #80]	; 0x50
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3308      	adds	r3, #8
 800d792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d794:	637a      	str	r2, [r7, #52]	; 0x34
 800d796:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d79a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d79c:	e841 2300 	strex	r3, r2, [r1]
 800d7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1e5      	bne.n	800d774 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3308      	adds	r3, #8
 800d7ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	e853 3f00 	ldrex	r3, [r3]
 800d7b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3308      	adds	r3, #8
 800d7c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7c8:	623a      	str	r2, [r7, #32]
 800d7ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7cc:	69f9      	ldr	r1, [r7, #28]
 800d7ce:	6a3a      	ldr	r2, [r7, #32]
 800d7d0:	e841 2300 	strex	r3, r2, [r1]
 800d7d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1e5      	bne.n	800d7a8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3758      	adds	r7, #88	; 0x58
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	0800d9f7 	.word	0x0800d9f7
 800d7ec:	0800db19 	.word	0x0800db19
 800d7f0:	0800db51 	.word	0x0800db51

0800d7f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b08f      	sub	sp, #60	; 0x3c
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	e853 3f00 	ldrex	r3, [r3]
 800d808:	61fb      	str	r3, [r7, #28]
   return(result);
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d810:	637b      	str	r3, [r7, #52]	; 0x34
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d81c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d822:	e841 2300 	strex	r3, r2, [r1]
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e6      	bne.n	800d7fc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3308      	adds	r3, #8
 800d834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	e853 3f00 	ldrex	r3, [r3]
 800d83c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d844:	633b      	str	r3, [r7, #48]	; 0x30
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3308      	adds	r3, #8
 800d84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84e:	61ba      	str	r2, [r7, #24]
 800d850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d852:	6979      	ldr	r1, [r7, #20]
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	e841 2300 	strex	r3, r2, [r1]
 800d85a:	613b      	str	r3, [r7, #16]
   return(result);
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1e5      	bne.n	800d82e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2220      	movs	r2, #32
 800d866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d86a:	bf00      	nop
 800d86c:	373c      	adds	r7, #60	; 0x3c
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
	...

0800d878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d878:	b480      	push	{r7}
 800d87a:	b095      	sub	sp, #84	; 0x54
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	e853 3f00 	ldrex	r3, [r3]
 800d88c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d894:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d89e:	643b      	str	r3, [r7, #64]	; 0x40
 800d8a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8a6:	e841 2300 	strex	r3, r2, [r1]
 800d8aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1e6      	bne.n	800d880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8c2:	69fa      	ldr	r2, [r7, #28]
 800d8c4:	4b1e      	ldr	r3, [pc, #120]	; (800d940 <UART_EndRxTransfer+0xc8>)
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e5      	bne.n	800d8b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d118      	bne.n	800d920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	e853 3f00 	ldrex	r3, [r3]
 800d8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	f023 0310 	bic.w	r3, r3, #16
 800d902:	647b      	str	r3, [r7, #68]	; 0x44
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	461a      	mov	r2, r3
 800d90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d90c:	61bb      	str	r3, [r7, #24]
 800d90e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d910:	6979      	ldr	r1, [r7, #20]
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	e841 2300 	strex	r3, r2, [r1]
 800d918:	613b      	str	r3, [r7, #16]
   return(result);
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d1e6      	bne.n	800d8ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2220      	movs	r2, #32
 800d924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d934:	bf00      	nop
 800d936:	3754      	adds	r7, #84	; 0x54
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	effffffe 	.word	0xeffffffe

0800d944 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b090      	sub	sp, #64	; 0x40
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d950:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d95a:	d037      	beq.n	800d9cc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d95e:	2200      	movs	r2, #0
 800d960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3308      	adds	r3, #8
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	e853 3f00 	ldrex	r3, [r3]
 800d972:	623b      	str	r3, [r7, #32]
   return(result);
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d97a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	3308      	adds	r3, #8
 800d982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d984:	633a      	str	r2, [r7, #48]	; 0x30
 800d986:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d98c:	e841 2300 	strex	r3, r2, [r1]
 800d990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e5      	bne.n	800d964 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	e853 3f00 	ldrex	r3, [r3]
 800d9a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b6:	61fb      	str	r3, [r7, #28]
 800d9b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ba:	69b9      	ldr	r1, [r7, #24]
 800d9bc:	69fa      	ldr	r2, [r7, #28]
 800d9be:	e841 2300 	strex	r3, r2, [r1]
 800d9c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1e6      	bne.n	800d998 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9ca:	e002      	b.n	800d9d2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d9cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9ce:	f7f5 fa1d 	bl	8002e0c <HAL_UART_TxCpltCallback>
}
 800d9d2:	bf00      	nop
 800d9d4:	3740      	adds	r7, #64	; 0x40
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7fe fe0f 	bl	800c60c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9ee:	bf00      	nop
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b09c      	sub	sp, #112	; 0x70
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da02:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	69db      	ldr	r3, [r3, #28]
 800da08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da0c:	d071      	beq.n	800daf2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800da0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da10:	2200      	movs	r2, #0
 800da12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da1e:	e853 3f00 	ldrex	r3, [r3]
 800da22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800da2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da34:	65bb      	str	r3, [r7, #88]	; 0x58
 800da36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da3c:	e841 2300 	strex	r3, r2, [r1]
 800da40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1e6      	bne.n	800da16 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3308      	adds	r3, #8
 800da4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	e853 3f00 	ldrex	r3, [r3]
 800da56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da5a:	f023 0301 	bic.w	r3, r3, #1
 800da5e:	667b      	str	r3, [r7, #100]	; 0x64
 800da60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	3308      	adds	r3, #8
 800da66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da68:	647a      	str	r2, [r7, #68]	; 0x44
 800da6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da70:	e841 2300 	strex	r3, r2, [r1]
 800da74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1e5      	bne.n	800da48 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3308      	adds	r3, #8
 800da82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	e853 3f00 	ldrex	r3, [r3]
 800da8a:	623b      	str	r3, [r7, #32]
   return(result);
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da92:	663b      	str	r3, [r7, #96]	; 0x60
 800da94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	3308      	adds	r3, #8
 800da9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da9c:	633a      	str	r2, [r7, #48]	; 0x30
 800da9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa4:	e841 2300 	strex	r3, r2, [r1]
 800daa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1e5      	bne.n	800da7c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dab2:	2220      	movs	r2, #32
 800dab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d118      	bne.n	800daf2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	60fb      	str	r3, [r7, #12]
   return(result);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f023 0310 	bic.w	r3, r3, #16
 800dad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dade:	61fb      	str	r3, [r7, #28]
 800dae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae2:	69b9      	ldr	r1, [r7, #24]
 800dae4:	69fa      	ldr	r2, [r7, #28]
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	617b      	str	r3, [r7, #20]
   return(result);
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e6      	bne.n	800dac0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d107      	bne.n	800db0a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dafc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db00:	4619      	mov	r1, r3
 800db02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db04:	f7fe fda0 	bl	800c648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db08:	e002      	b.n	800db10 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800db0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db0c:	f7f5 f990 	bl	8002e30 <HAL_UART_RxCpltCallback>
}
 800db10:	bf00      	nop
 800db12:	3770      	adds	r7, #112	; 0x70
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d109      	bne.n	800db42 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db34:	085b      	lsrs	r3, r3, #1
 800db36:	b29b      	uxth	r3, r3
 800db38:	4619      	mov	r1, r3
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f7fe fd84 	bl	800c648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db40:	e002      	b.n	800db48 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7fe fd6c 	bl	800c620 <HAL_UART_RxHalfCpltCallback>
}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db64:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db78:	2b80      	cmp	r3, #128	; 0x80
 800db7a:	d109      	bne.n	800db90 <UART_DMAError+0x40>
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	2b21      	cmp	r3, #33	; 0x21
 800db80:	d106      	bne.n	800db90 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2200      	movs	r2, #0
 800db86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db8a:	6978      	ldr	r0, [r7, #20]
 800db8c:	f7ff fe32 	bl	800d7f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db9a:	2b40      	cmp	r3, #64	; 0x40
 800db9c:	d109      	bne.n	800dbb2 <UART_DMAError+0x62>
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2b22      	cmp	r3, #34	; 0x22
 800dba2:	d106      	bne.n	800dbb2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800dbac:	6978      	ldr	r0, [r7, #20]
 800dbae:	f7ff fe63 	bl	800d878 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbb8:	f043 0210 	orr.w	r2, r3, #16
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbc2:	6978      	ldr	r0, [r7, #20]
 800dbc4:	f7fe fd36 	bl	800c634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbc8:	bf00      	nop
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7fe fd20 	bl	800c634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbf4:	bf00      	nop
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b088      	sub	sp, #32
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	e853 3f00 	ldrex	r3, [r3]
 800dc10:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc18:	61fb      	str	r3, [r7, #28]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	61bb      	str	r3, [r7, #24]
 800dc24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc26:	6979      	ldr	r1, [r7, #20]
 800dc28:	69ba      	ldr	r2, [r7, #24]
 800dc2a:	e841 2300 	strex	r3, r2, [r1]
 800dc2e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1e6      	bne.n	800dc04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2220      	movs	r2, #32
 800dc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7f5 f8e1 	bl	8002e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc4a:	bf00      	nop
 800dc4c:	3720      	adds	r7, #32
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc5a:	bf00      	nop
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc6e:	bf00      	nop
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b083      	sub	sp, #12
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc82:	bf00      	nop
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b085      	sub	sp, #20
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d101      	bne.n	800dca4 <HAL_UARTEx_DisableFifoMode+0x16>
 800dca0:	2302      	movs	r3, #2
 800dca2:	e027      	b.n	800dcf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2224      	movs	r2, #36	; 0x24
 800dcb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f022 0201 	bic.w	r2, r2, #1
 800dcca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2220      	movs	r2, #32
 800dce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d101      	bne.n	800dd18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd14:	2302      	movs	r3, #2
 800dd16:	e02d      	b.n	800dd74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2224      	movs	r2, #36	; 0x24
 800dd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0201 	bic.w	r2, r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	430a      	orrs	r2, r1
 800dd52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f84f 	bl	800ddf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2220      	movs	r2, #32
 800dd66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d101      	bne.n	800dd94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd90:	2302      	movs	r3, #2
 800dd92:	e02d      	b.n	800ddf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2224      	movs	r2, #36	; 0x24
 800dda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f022 0201 	bic.w	r2, r2, #1
 800ddba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	430a      	orrs	r2, r1
 800ddce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 f811 	bl	800ddf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2220      	movs	r2, #32
 800dde2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de04:	2b00      	cmp	r3, #0
 800de06:	d108      	bne.n	800de1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de18:	e031      	b.n	800de7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de1a:	2310      	movs	r3, #16
 800de1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de1e:	2310      	movs	r3, #16
 800de20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	0e5b      	lsrs	r3, r3, #25
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	f003 0307 	and.w	r3, r3, #7
 800de30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	0f5b      	lsrs	r3, r3, #29
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f003 0307 	and.w	r3, r3, #7
 800de40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de42:	7bbb      	ldrb	r3, [r7, #14]
 800de44:	7b3a      	ldrb	r2, [r7, #12]
 800de46:	4911      	ldr	r1, [pc, #68]	; (800de8c <UARTEx_SetNbDataToProcess+0x94>)
 800de48:	5c8a      	ldrb	r2, [r1, r2]
 800de4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de4e:	7b3a      	ldrb	r2, [r7, #12]
 800de50:	490f      	ldr	r1, [pc, #60]	; (800de90 <UARTEx_SetNbDataToProcess+0x98>)
 800de52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de54:	fb93 f3f2 	sdiv	r3, r3, r2
 800de58:	b29a      	uxth	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de60:	7bfb      	ldrb	r3, [r7, #15]
 800de62:	7b7a      	ldrb	r2, [r7, #13]
 800de64:	4909      	ldr	r1, [pc, #36]	; (800de8c <UARTEx_SetNbDataToProcess+0x94>)
 800de66:	5c8a      	ldrb	r2, [r1, r2]
 800de68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de6c:	7b7a      	ldrb	r2, [r7, #13]
 800de6e:	4908      	ldr	r1, [pc, #32]	; (800de90 <UARTEx_SetNbDataToProcess+0x98>)
 800de70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de72:	fb93 f3f2 	sdiv	r3, r3, r2
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	0800e54c 	.word	0x0800e54c
 800de90:	0800e554 	.word	0x0800e554

0800de94 <__cxa_pure_virtual>:
 800de94:	b508      	push	{r3, lr}
 800de96:	f000 f80d 	bl	800deb4 <_ZSt9terminatev>

0800de9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800de9a:	b508      	push	{r3, lr}
 800de9c:	4780      	blx	r0
 800de9e:	f000 f80e 	bl	800debe <abort>
	...

0800dea4 <_ZSt13get_terminatev>:
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <_ZSt13get_terminatev+0xc>)
 800dea6:	6818      	ldr	r0, [r3, #0]
 800dea8:	f3bf 8f5b 	dmb	ish
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	24000020 	.word	0x24000020

0800deb4 <_ZSt9terminatev>:
 800deb4:	b508      	push	{r3, lr}
 800deb6:	f7ff fff5 	bl	800dea4 <_ZSt13get_terminatev>
 800deba:	f7ff ffee 	bl	800de9a <_ZN10__cxxabiv111__terminateEPFvvE>

0800debe <abort>:
 800debe:	b508      	push	{r3, lr}
 800dec0:	2006      	movs	r0, #6
 800dec2:	f000 f873 	bl	800dfac <raise>
 800dec6:	2001      	movs	r0, #1
 800dec8:	f7f6 fedc 	bl	8004c84 <_exit>

0800decc <__errno>:
 800decc:	4b01      	ldr	r3, [pc, #4]	; (800ded4 <__errno+0x8>)
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	24000024 	.word	0x24000024

0800ded8 <__libc_init_array>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	4d0d      	ldr	r5, [pc, #52]	; (800df10 <__libc_init_array+0x38>)
 800dedc:	4c0d      	ldr	r4, [pc, #52]	; (800df14 <__libc_init_array+0x3c>)
 800dede:	1b64      	subs	r4, r4, r5
 800dee0:	10a4      	asrs	r4, r4, #2
 800dee2:	2600      	movs	r6, #0
 800dee4:	42a6      	cmp	r6, r4
 800dee6:	d109      	bne.n	800defc <__libc_init_array+0x24>
 800dee8:	4d0b      	ldr	r5, [pc, #44]	; (800df18 <__libc_init_array+0x40>)
 800deea:	4c0c      	ldr	r4, [pc, #48]	; (800df1c <__libc_init_array+0x44>)
 800deec:	f000 f9b0 	bl	800e250 <_init>
 800def0:	1b64      	subs	r4, r4, r5
 800def2:	10a4      	asrs	r4, r4, #2
 800def4:	2600      	movs	r6, #0
 800def6:	42a6      	cmp	r6, r4
 800def8:	d105      	bne.n	800df06 <__libc_init_array+0x2e>
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	f855 3b04 	ldr.w	r3, [r5], #4
 800df00:	4798      	blx	r3
 800df02:	3601      	adds	r6, #1
 800df04:	e7ee      	b.n	800dee4 <__libc_init_array+0xc>
 800df06:	f855 3b04 	ldr.w	r3, [r5], #4
 800df0a:	4798      	blx	r3
 800df0c:	3601      	adds	r6, #1
 800df0e:	e7f2      	b.n	800def6 <__libc_init_array+0x1e>
 800df10:	0800e564 	.word	0x0800e564
 800df14:	0800e564 	.word	0x0800e564
 800df18:	0800e564 	.word	0x0800e564
 800df1c:	0800e574 	.word	0x0800e574

0800df20 <memcpy>:
 800df20:	440a      	add	r2, r1
 800df22:	4291      	cmp	r1, r2
 800df24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800df28:	d100      	bne.n	800df2c <memcpy+0xc>
 800df2a:	4770      	bx	lr
 800df2c:	b510      	push	{r4, lr}
 800df2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df36:	4291      	cmp	r1, r2
 800df38:	d1f9      	bne.n	800df2e <memcpy+0xe>
 800df3a:	bd10      	pop	{r4, pc}

0800df3c <memset>:
 800df3c:	4402      	add	r2, r0
 800df3e:	4603      	mov	r3, r0
 800df40:	4293      	cmp	r3, r2
 800df42:	d100      	bne.n	800df46 <memset+0xa>
 800df44:	4770      	bx	lr
 800df46:	f803 1b01 	strb.w	r1, [r3], #1
 800df4a:	e7f9      	b.n	800df40 <memset+0x4>

0800df4c <realloc>:
 800df4c:	4b02      	ldr	r3, [pc, #8]	; (800df58 <realloc+0xc>)
 800df4e:	460a      	mov	r2, r1
 800df50:	4601      	mov	r1, r0
 800df52:	6818      	ldr	r0, [r3, #0]
 800df54:	f000 b8da 	b.w	800e10c <_realloc_r>
 800df58:	24000024 	.word	0x24000024

0800df5c <_raise_r>:
 800df5c:	291f      	cmp	r1, #31
 800df5e:	b538      	push	{r3, r4, r5, lr}
 800df60:	4604      	mov	r4, r0
 800df62:	460d      	mov	r5, r1
 800df64:	d904      	bls.n	800df70 <_raise_r+0x14>
 800df66:	2316      	movs	r3, #22
 800df68:	6003      	str	r3, [r0, #0]
 800df6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df6e:	bd38      	pop	{r3, r4, r5, pc}
 800df70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df72:	b112      	cbz	r2, 800df7a <_raise_r+0x1e>
 800df74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df78:	b94b      	cbnz	r3, 800df8e <_raise_r+0x32>
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 f830 	bl	800dfe0 <_getpid_r>
 800df80:	462a      	mov	r2, r5
 800df82:	4601      	mov	r1, r0
 800df84:	4620      	mov	r0, r4
 800df86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df8a:	f000 b817 	b.w	800dfbc <_kill_r>
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d00a      	beq.n	800dfa8 <_raise_r+0x4c>
 800df92:	1c59      	adds	r1, r3, #1
 800df94:	d103      	bne.n	800df9e <_raise_r+0x42>
 800df96:	2316      	movs	r3, #22
 800df98:	6003      	str	r3, [r0, #0]
 800df9a:	2001      	movs	r0, #1
 800df9c:	e7e7      	b.n	800df6e <_raise_r+0x12>
 800df9e:	2400      	movs	r4, #0
 800dfa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	4798      	blx	r3
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e7e0      	b.n	800df6e <_raise_r+0x12>

0800dfac <raise>:
 800dfac:	4b02      	ldr	r3, [pc, #8]	; (800dfb8 <raise+0xc>)
 800dfae:	4601      	mov	r1, r0
 800dfb0:	6818      	ldr	r0, [r3, #0]
 800dfb2:	f7ff bfd3 	b.w	800df5c <_raise_r>
 800dfb6:	bf00      	nop
 800dfb8:	24000024 	.word	0x24000024

0800dfbc <_kill_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	4d07      	ldr	r5, [pc, #28]	; (800dfdc <_kill_r+0x20>)
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	4608      	mov	r0, r1
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	602b      	str	r3, [r5, #0]
 800dfca:	f7f6 fe4b 	bl	8004c64 <_kill>
 800dfce:	1c43      	adds	r3, r0, #1
 800dfd0:	d102      	bne.n	800dfd8 <_kill_r+0x1c>
 800dfd2:	682b      	ldr	r3, [r5, #0]
 800dfd4:	b103      	cbz	r3, 800dfd8 <_kill_r+0x1c>
 800dfd6:	6023      	str	r3, [r4, #0]
 800dfd8:	bd38      	pop	{r3, r4, r5, pc}
 800dfda:	bf00      	nop
 800dfdc:	2400112c 	.word	0x2400112c

0800dfe0 <_getpid_r>:
 800dfe0:	f7f6 be38 	b.w	8004c54 <_getpid>

0800dfe4 <sbrk_aligned>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	4e0e      	ldr	r6, [pc, #56]	; (800e020 <sbrk_aligned+0x3c>)
 800dfe8:	460c      	mov	r4, r1
 800dfea:	6831      	ldr	r1, [r6, #0]
 800dfec:	4605      	mov	r5, r0
 800dfee:	b911      	cbnz	r1, 800dff6 <sbrk_aligned+0x12>
 800dff0:	f000 f8bc 	bl	800e16c <_sbrk_r>
 800dff4:	6030      	str	r0, [r6, #0]
 800dff6:	4621      	mov	r1, r4
 800dff8:	4628      	mov	r0, r5
 800dffa:	f000 f8b7 	bl	800e16c <_sbrk_r>
 800dffe:	1c43      	adds	r3, r0, #1
 800e000:	d00a      	beq.n	800e018 <sbrk_aligned+0x34>
 800e002:	1cc4      	adds	r4, r0, #3
 800e004:	f024 0403 	bic.w	r4, r4, #3
 800e008:	42a0      	cmp	r0, r4
 800e00a:	d007      	beq.n	800e01c <sbrk_aligned+0x38>
 800e00c:	1a21      	subs	r1, r4, r0
 800e00e:	4628      	mov	r0, r5
 800e010:	f000 f8ac 	bl	800e16c <_sbrk_r>
 800e014:	3001      	adds	r0, #1
 800e016:	d101      	bne.n	800e01c <sbrk_aligned+0x38>
 800e018:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e01c:	4620      	mov	r0, r4
 800e01e:	bd70      	pop	{r4, r5, r6, pc}
 800e020:	24001128 	.word	0x24001128

0800e024 <_malloc_r>:
 800e024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	1ccd      	adds	r5, r1, #3
 800e02a:	f025 0503 	bic.w	r5, r5, #3
 800e02e:	3508      	adds	r5, #8
 800e030:	2d0c      	cmp	r5, #12
 800e032:	bf38      	it	cc
 800e034:	250c      	movcc	r5, #12
 800e036:	2d00      	cmp	r5, #0
 800e038:	4607      	mov	r7, r0
 800e03a:	db01      	blt.n	800e040 <_malloc_r+0x1c>
 800e03c:	42a9      	cmp	r1, r5
 800e03e:	d905      	bls.n	800e04c <_malloc_r+0x28>
 800e040:	230c      	movs	r3, #12
 800e042:	603b      	str	r3, [r7, #0]
 800e044:	2600      	movs	r6, #0
 800e046:	4630      	mov	r0, r6
 800e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e04c:	4e2e      	ldr	r6, [pc, #184]	; (800e108 <_malloc_r+0xe4>)
 800e04e:	f000 f89d 	bl	800e18c <__malloc_lock>
 800e052:	6833      	ldr	r3, [r6, #0]
 800e054:	461c      	mov	r4, r3
 800e056:	bb34      	cbnz	r4, 800e0a6 <_malloc_r+0x82>
 800e058:	4629      	mov	r1, r5
 800e05a:	4638      	mov	r0, r7
 800e05c:	f7ff ffc2 	bl	800dfe4 <sbrk_aligned>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	4604      	mov	r4, r0
 800e064:	d14d      	bne.n	800e102 <_malloc_r+0xde>
 800e066:	6834      	ldr	r4, [r6, #0]
 800e068:	4626      	mov	r6, r4
 800e06a:	2e00      	cmp	r6, #0
 800e06c:	d140      	bne.n	800e0f0 <_malloc_r+0xcc>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	4631      	mov	r1, r6
 800e072:	4638      	mov	r0, r7
 800e074:	eb04 0803 	add.w	r8, r4, r3
 800e078:	f000 f878 	bl	800e16c <_sbrk_r>
 800e07c:	4580      	cmp	r8, r0
 800e07e:	d13a      	bne.n	800e0f6 <_malloc_r+0xd2>
 800e080:	6821      	ldr	r1, [r4, #0]
 800e082:	3503      	adds	r5, #3
 800e084:	1a6d      	subs	r5, r5, r1
 800e086:	f025 0503 	bic.w	r5, r5, #3
 800e08a:	3508      	adds	r5, #8
 800e08c:	2d0c      	cmp	r5, #12
 800e08e:	bf38      	it	cc
 800e090:	250c      	movcc	r5, #12
 800e092:	4629      	mov	r1, r5
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff ffa5 	bl	800dfe4 <sbrk_aligned>
 800e09a:	3001      	adds	r0, #1
 800e09c:	d02b      	beq.n	800e0f6 <_malloc_r+0xd2>
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	442b      	add	r3, r5
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	e00e      	b.n	800e0c4 <_malloc_r+0xa0>
 800e0a6:	6822      	ldr	r2, [r4, #0]
 800e0a8:	1b52      	subs	r2, r2, r5
 800e0aa:	d41e      	bmi.n	800e0ea <_malloc_r+0xc6>
 800e0ac:	2a0b      	cmp	r2, #11
 800e0ae:	d916      	bls.n	800e0de <_malloc_r+0xba>
 800e0b0:	1961      	adds	r1, r4, r5
 800e0b2:	42a3      	cmp	r3, r4
 800e0b4:	6025      	str	r5, [r4, #0]
 800e0b6:	bf18      	it	ne
 800e0b8:	6059      	strne	r1, [r3, #4]
 800e0ba:	6863      	ldr	r3, [r4, #4]
 800e0bc:	bf08      	it	eq
 800e0be:	6031      	streq	r1, [r6, #0]
 800e0c0:	5162      	str	r2, [r4, r5]
 800e0c2:	604b      	str	r3, [r1, #4]
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	f104 060b 	add.w	r6, r4, #11
 800e0ca:	f000 f865 	bl	800e198 <__malloc_unlock>
 800e0ce:	f026 0607 	bic.w	r6, r6, #7
 800e0d2:	1d23      	adds	r3, r4, #4
 800e0d4:	1af2      	subs	r2, r6, r3
 800e0d6:	d0b6      	beq.n	800e046 <_malloc_r+0x22>
 800e0d8:	1b9b      	subs	r3, r3, r6
 800e0da:	50a3      	str	r3, [r4, r2]
 800e0dc:	e7b3      	b.n	800e046 <_malloc_r+0x22>
 800e0de:	6862      	ldr	r2, [r4, #4]
 800e0e0:	42a3      	cmp	r3, r4
 800e0e2:	bf0c      	ite	eq
 800e0e4:	6032      	streq	r2, [r6, #0]
 800e0e6:	605a      	strne	r2, [r3, #4]
 800e0e8:	e7ec      	b.n	800e0c4 <_malloc_r+0xa0>
 800e0ea:	4623      	mov	r3, r4
 800e0ec:	6864      	ldr	r4, [r4, #4]
 800e0ee:	e7b2      	b.n	800e056 <_malloc_r+0x32>
 800e0f0:	4634      	mov	r4, r6
 800e0f2:	6876      	ldr	r6, [r6, #4]
 800e0f4:	e7b9      	b.n	800e06a <_malloc_r+0x46>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	603b      	str	r3, [r7, #0]
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	f000 f84c 	bl	800e198 <__malloc_unlock>
 800e100:	e7a1      	b.n	800e046 <_malloc_r+0x22>
 800e102:	6025      	str	r5, [r4, #0]
 800e104:	e7de      	b.n	800e0c4 <_malloc_r+0xa0>
 800e106:	bf00      	nop
 800e108:	24001124 	.word	0x24001124

0800e10c <_realloc_r>:
 800e10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e110:	4680      	mov	r8, r0
 800e112:	4614      	mov	r4, r2
 800e114:	460e      	mov	r6, r1
 800e116:	b921      	cbnz	r1, 800e122 <_realloc_r+0x16>
 800e118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e11c:	4611      	mov	r1, r2
 800e11e:	f7ff bf81 	b.w	800e024 <_malloc_r>
 800e122:	b92a      	cbnz	r2, 800e130 <_realloc_r+0x24>
 800e124:	f000 f83e 	bl	800e1a4 <_free_r>
 800e128:	4625      	mov	r5, r4
 800e12a:	4628      	mov	r0, r5
 800e12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e130:	f000 f884 	bl	800e23c <_malloc_usable_size_r>
 800e134:	4284      	cmp	r4, r0
 800e136:	4607      	mov	r7, r0
 800e138:	d802      	bhi.n	800e140 <_realloc_r+0x34>
 800e13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e13e:	d812      	bhi.n	800e166 <_realloc_r+0x5a>
 800e140:	4621      	mov	r1, r4
 800e142:	4640      	mov	r0, r8
 800e144:	f7ff ff6e 	bl	800e024 <_malloc_r>
 800e148:	4605      	mov	r5, r0
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d0ed      	beq.n	800e12a <_realloc_r+0x1e>
 800e14e:	42bc      	cmp	r4, r7
 800e150:	4622      	mov	r2, r4
 800e152:	4631      	mov	r1, r6
 800e154:	bf28      	it	cs
 800e156:	463a      	movcs	r2, r7
 800e158:	f7ff fee2 	bl	800df20 <memcpy>
 800e15c:	4631      	mov	r1, r6
 800e15e:	4640      	mov	r0, r8
 800e160:	f000 f820 	bl	800e1a4 <_free_r>
 800e164:	e7e1      	b.n	800e12a <_realloc_r+0x1e>
 800e166:	4635      	mov	r5, r6
 800e168:	e7df      	b.n	800e12a <_realloc_r+0x1e>
	...

0800e16c <_sbrk_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4d06      	ldr	r5, [pc, #24]	; (800e188 <_sbrk_r+0x1c>)
 800e170:	2300      	movs	r3, #0
 800e172:	4604      	mov	r4, r0
 800e174:	4608      	mov	r0, r1
 800e176:	602b      	str	r3, [r5, #0]
 800e178:	f7f6 fd8e 	bl	8004c98 <_sbrk>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d102      	bne.n	800e186 <_sbrk_r+0x1a>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b103      	cbz	r3, 800e186 <_sbrk_r+0x1a>
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	2400112c 	.word	0x2400112c

0800e18c <__malloc_lock>:
 800e18c:	4801      	ldr	r0, [pc, #4]	; (800e194 <__malloc_lock+0x8>)
 800e18e:	f000 b85d 	b.w	800e24c <__retarget_lock_acquire_recursive>
 800e192:	bf00      	nop
 800e194:	24001130 	.word	0x24001130

0800e198 <__malloc_unlock>:
 800e198:	4801      	ldr	r0, [pc, #4]	; (800e1a0 <__malloc_unlock+0x8>)
 800e19a:	f000 b858 	b.w	800e24e <__retarget_lock_release_recursive>
 800e19e:	bf00      	nop
 800e1a0:	24001130 	.word	0x24001130

0800e1a4 <_free_r>:
 800e1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1a6:	2900      	cmp	r1, #0
 800e1a8:	d044      	beq.n	800e234 <_free_r+0x90>
 800e1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ae:	9001      	str	r0, [sp, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1b6:	bfb8      	it	lt
 800e1b8:	18e4      	addlt	r4, r4, r3
 800e1ba:	f7ff ffe7 	bl	800e18c <__malloc_lock>
 800e1be:	4a1e      	ldr	r2, [pc, #120]	; (800e238 <_free_r+0x94>)
 800e1c0:	9801      	ldr	r0, [sp, #4]
 800e1c2:	6813      	ldr	r3, [r2, #0]
 800e1c4:	b933      	cbnz	r3, 800e1d4 <_free_r+0x30>
 800e1c6:	6063      	str	r3, [r4, #4]
 800e1c8:	6014      	str	r4, [r2, #0]
 800e1ca:	b003      	add	sp, #12
 800e1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1d0:	f7ff bfe2 	b.w	800e198 <__malloc_unlock>
 800e1d4:	42a3      	cmp	r3, r4
 800e1d6:	d908      	bls.n	800e1ea <_free_r+0x46>
 800e1d8:	6825      	ldr	r5, [r4, #0]
 800e1da:	1961      	adds	r1, r4, r5
 800e1dc:	428b      	cmp	r3, r1
 800e1de:	bf01      	itttt	eq
 800e1e0:	6819      	ldreq	r1, [r3, #0]
 800e1e2:	685b      	ldreq	r3, [r3, #4]
 800e1e4:	1949      	addeq	r1, r1, r5
 800e1e6:	6021      	streq	r1, [r4, #0]
 800e1e8:	e7ed      	b.n	800e1c6 <_free_r+0x22>
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	b10b      	cbz	r3, 800e1f4 <_free_r+0x50>
 800e1f0:	42a3      	cmp	r3, r4
 800e1f2:	d9fa      	bls.n	800e1ea <_free_r+0x46>
 800e1f4:	6811      	ldr	r1, [r2, #0]
 800e1f6:	1855      	adds	r5, r2, r1
 800e1f8:	42a5      	cmp	r5, r4
 800e1fa:	d10b      	bne.n	800e214 <_free_r+0x70>
 800e1fc:	6824      	ldr	r4, [r4, #0]
 800e1fe:	4421      	add	r1, r4
 800e200:	1854      	adds	r4, r2, r1
 800e202:	42a3      	cmp	r3, r4
 800e204:	6011      	str	r1, [r2, #0]
 800e206:	d1e0      	bne.n	800e1ca <_free_r+0x26>
 800e208:	681c      	ldr	r4, [r3, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	6053      	str	r3, [r2, #4]
 800e20e:	4421      	add	r1, r4
 800e210:	6011      	str	r1, [r2, #0]
 800e212:	e7da      	b.n	800e1ca <_free_r+0x26>
 800e214:	d902      	bls.n	800e21c <_free_r+0x78>
 800e216:	230c      	movs	r3, #12
 800e218:	6003      	str	r3, [r0, #0]
 800e21a:	e7d6      	b.n	800e1ca <_free_r+0x26>
 800e21c:	6825      	ldr	r5, [r4, #0]
 800e21e:	1961      	adds	r1, r4, r5
 800e220:	428b      	cmp	r3, r1
 800e222:	bf04      	itt	eq
 800e224:	6819      	ldreq	r1, [r3, #0]
 800e226:	685b      	ldreq	r3, [r3, #4]
 800e228:	6063      	str	r3, [r4, #4]
 800e22a:	bf04      	itt	eq
 800e22c:	1949      	addeq	r1, r1, r5
 800e22e:	6021      	streq	r1, [r4, #0]
 800e230:	6054      	str	r4, [r2, #4]
 800e232:	e7ca      	b.n	800e1ca <_free_r+0x26>
 800e234:	b003      	add	sp, #12
 800e236:	bd30      	pop	{r4, r5, pc}
 800e238:	24001124 	.word	0x24001124

0800e23c <_malloc_usable_size_r>:
 800e23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e240:	1f18      	subs	r0, r3, #4
 800e242:	2b00      	cmp	r3, #0
 800e244:	bfbc      	itt	lt
 800e246:	580b      	ldrlt	r3, [r1, r0]
 800e248:	18c0      	addlt	r0, r0, r3
 800e24a:	4770      	bx	lr

0800e24c <__retarget_lock_acquire_recursive>:
 800e24c:	4770      	bx	lr

0800e24e <__retarget_lock_release_recursive>:
 800e24e:	4770      	bx	lr

0800e250 <_init>:
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	bf00      	nop
 800e254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e256:	bc08      	pop	{r3}
 800e258:	469e      	mov	lr, r3
 800e25a:	4770      	bx	lr

0800e25c <_fini>:
 800e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25e:	bf00      	nop
 800e260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e262:	bc08      	pop	{r3}
 800e264:	469e      	mov	lr, r3
 800e266:	4770      	bx	lr
