
Eurobot_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de44  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800e118  0800e118  0001e118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e42c  0800e42c  0001e42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800e434  0800e434  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e440  0800e440  0001e440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010aac  24000078  0800e4bc  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24010b24  0800e4bc  00020b24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a106  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043cd  00000000  00000000  0004a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001570  00000000  00000000  0004e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  0004faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c70  00000000  00000000  00050f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d747  00000000  00000000  00086ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156739  00000000  00000000  000a42e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001faa20  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f30  00000000  00000000  001faa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e0fc 	.word	0x0800e0fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800e0fc 	.word	0x0800e0fc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_ZN8DC_Motor4InitEv>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

namespace DC_Motor {

void Init() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// Init interrupt for reading encoder's CNT
	HAL_TIM_Base_Start_IT(&htim13);
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <_ZN8DC_Motor4InitEv+0x50>)
 8000682:	f009 ffbd 	bl	800a600 <HAL_TIM_Base_Start_IT>

	// Init Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Motor[0]
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <_ZN8DC_Motor4InitEv+0x54>)
 800068a:	f00a fa59 	bl	800ab40 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Motor[1]
 800068e:	213c      	movs	r1, #60	; 0x3c
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <_ZN8DC_Motor4InitEv+0x58>)
 8000692:	f00a fa55 	bl	800ab40 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Motor[2]
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <_ZN8DC_Motor4InitEv+0x5c>)
 800069a:	f00a fa51 	bl	800ab40 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Motor[3]
 800069e:	213c      	movs	r1, #60	; 0x3c
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <_ZN8DC_Motor4InitEv+0x60>)
 80006a2:	f00a fa4d 	bl	800ab40 <HAL_TIM_Encoder_Start>

	// Init Motor PWM
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Motor[0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006aa:	f00a f887 	bl	800a7bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // Motor[1]
 80006ae:	2100      	movs	r1, #0
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006b2:	f00a f883 	bl	800a7bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // Motor[2]
 80006b6:	2100      	movs	r1, #0
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006ba:	f00a f87f 	bl	800a7bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Motor[3]
 80006be:	2104      	movs	r1, #4
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006c2:	f00a f87b 	bl	800a7bc <HAL_TIM_PWM_Start>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	240108f4 	.word	0x240108f4
 80006d0:	240106e0 	.word	0x240106e0
 80006d4:	240107c4 	.word	0x240107c4
 80006d8:	2401072c 	.word	0x2401072c
 80006dc:	24010778 	.word	0x24010778
 80006e0:	240108a8 	.word	0x240108a8
 80006e4:	24010940 	.word	0x24010940

080006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>:

void Motor::Init(short num, TIM_HandleTypeDef *TIM, double P, double I, double D) {
 80006e8:	b480      	push	{r7}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6278      	str	r0, [r7, #36]	; 0x24
 80006f0:	460b      	mov	r3, r1
 80006f2:	61fa      	str	r2, [r7, #28]
 80006f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80006f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80006fc:	ed87 2b00 	vstr	d2, [r7]
 8000700:	847b      	strh	r3, [r7, #34]	; 0x22
	this->num = num;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000706:	821a      	strh	r2, [r3, #16]
	this->TIM = TIM;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	615a      	str	r2, [r3, #20]
	this->P = P;
 800070e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000714:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->I = I;
 8000718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800071a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800071e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	this->D = D;
 8000722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000728:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800072c:	bf00      	nop
 800072e:	372c      	adds	r7, #44	; 0x2c
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>:

void Motor::UpdatePID() {
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	double p = 0, d = 0;
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Record Prev error
	this->error_before = this->error;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// Count current error
	this->error = this->Vgoal - this->Vnow;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	ed93 7b08 	vldr	d7, [r3, #32]
 8000770:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58

	// Count P
	p = this->P * this->error;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000786:	ee26 7b07 	vmul.f64	d7, d6, d7
 800078a:	ed87 7b04 	vstr	d7, [r7, #16]

	// Count I
	this->i += this->I * this->error * COUNT_TIME;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007a4:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80007f8 <_ZN8DC_Motor5Motor9UpdatePIDEv+0xc0>
 80007a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
//	else if (this->i < 0 - this->I_lim)
//		this->i = 0 - this->I_lim;

	// Count D
//	d = this->D * (this->error - this->error_before) / COUNT_TIME;
	d = 0;
 80007b6:	f04f 0200 	mov.w	r2, #0
 80007ba:	f04f 0300 	mov.w	r3, #0
 80007be:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Output = P + I + D
	this->u = (double) p + this->i + d;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80007c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80007cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80007d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80007d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	ed83 7b02 	vstr	d7, [r3, #8]
//	else if (this->u > 0.6) {
//		this->u = 0.6;
//	}

	// Record Prev output
	this->prev_u = this->u;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return;
 80007ea:	bf00      	nop
}
 80007ec:	371c      	adds	r7, #28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80007fc:	3f50624d 	.word	0x3f50624d

08000800 <_ZN8DC_Motor5Motor10UpdateVnowEv>:

void Motor::UpdateVnow() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	// First, get CNT for this loop
	CNT = __HAL_TIM_GET_COUNTER(TIM);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000810:	b21a      	sxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	839a      	strh	r2, [r3, #28]

	Record_CNT();
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f831 	bl	800087e <_ZN8DC_Motor5Motor10Record_CNTEv>
	Vnow = CNT * CONST_FOR_MOTOR[num];  // Unit : m / s
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <_ZN8DC_Motor5Motor10UpdateVnowEv+0x58>)
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4413      	add	r3, r2
 8000836:	ed93 7b00 	vldr	d7, [r3]
 800083a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	ed83 7b08 	vstr	d7, [r3, #32]
//	if (isMove && num == 0 && DC_index < 2000) {
//		DC_motor_Vnow[DC_index++] = Vnow;
//	}

	// Finally, reset the counter CNT
	__HAL_TIM_SET_COUNTER(TIM, 0);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800e2b0 	.word	0x0800e2b0

0800085c <_ZN8DC_Motor5Motor8SetVgoalEd>:

void Motor::SetVgoal(double Vgoal) {
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	ed87 0b00 	vstr	d0, [r7]
	this->Vgoal = Vgoal;
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800086e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <_ZN8DC_Motor5Motor10Record_CNTEv>:

void Motor::Record_CNT() {
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	continue_CNT += CNT;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8000890:	441a      	add	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	619a      	str	r2, [r3, #24]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <_ZN8DC_Motor5Motor9Reset_CNTEv>:

void Motor::Reset_CNT() {
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	continue_CNT = 0;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_ZN8DC_Motor5Motor7MoveDisEv>:

double Motor::MoveDis() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	double dis = continue_CNT * CONST_FOR_MOTOR[num];
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <_ZN8DC_Motor5Motor7MoveDisEv+0x44>)
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	4413      	add	r3, r2
 80008dc:	ed93 7b00 	vldr	d7, [r3]
 80008e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008e4:	ed87 7b02 	vstr	d7, [r7, #8]

	Reset_CNT();
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffda 	bl	80008a2 <_ZN8DC_Motor5Motor9Reset_CNTEv>

	return dis;
 80008ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80008f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80008f6:	eeb0 0b47 	vmov.f64	d0, d7
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	0800e2b0 	.word	0x0800e2b0

08000904 <_ZN8DC_Motor5Motor7GetVnowEv>:

double Motor::GetVnow() {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return Vnow;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000912:	ec43 2b17 	vmov	d7, r2, r3
}
 8000916:	eeb0 0b47 	vmov.f64	d0, d7
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_ZN8DC_Motor5MotorC1Ev>:

namespace DC_Motor {

class Motor {
public:
	Motor() {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	839a      	strh	r2, [r3, #28]
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 0200 	mov.w	r2, #0
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_ZN8DC_Motor5MotorC1Ev+0x98>)
 8000970:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	f04f 0300 	mov.w	r3, #0
 800098c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80009a4:	461a      	mov	r2, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c2 3ef0 	str.w	r3, [r2, #3824]	; 0xef0
	}
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40440000 	.word	0x40440000

080009c0 <_ZN8CAR_INFOC1Ev>:

typedef struct {
	double Vx = 0.0;
	double Vy = 0.0;
	double Omega = 0.0;
} CAR_INFO;
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	f04f 0300 	mov.w	r3, #0
 80009d2:	e9c1 2300 	strd	r2, r3, [r1]
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 0200 	mov.w	r2, #0
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_ZN4OmniC1Ev>:
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim15;

Omni omni;

Omni::Omni() {
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2403      	movs	r4, #3
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	db08      	blt.n	8000a24 <_ZN4OmniC1Ev+0x24>
 8000a12:	4628      	mov	r0, r5
 8000a14:	f7ff ff86 	bl	8000924 <_ZN8DC_Motor5MotorC1Ev>
 8000a18:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000a1c:	442b      	add	r3, r5
 8000a1e:	461d      	mov	r5, r3
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e7f4      	b.n	8000a0e <_ZN4OmniC1Ev+0xe>
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffc7 	bl	80009c0 <_ZN8CAR_INFOC1Ev>
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	f64f 33f8 	movw	r3, #64504	; 0xfbf8
 8000a38:	4413      	add	r3, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffc0 	bl	80009c0 <_ZN8CAR_INFOC1Ev>
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000a46:	4413      	add	r3, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ffb9 	bl	80009c0 <_ZN8CAR_INFOC1Ev>
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000a54:	4413      	add	r3, r2
 8000a56:	4619      	mov	r1, r3
 8000a58:	a305      	add	r3, pc, #20	; (adr r3, 8000a70 <_ZN4OmniC1Ev+0x70>)
 8000a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5e:	e941 2302 	strd	r2, r3, [r1, #-8]
}
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6c:	f3af 8000 	nop.w
 8000a70:	3d70a3d7 	.word	0x3d70a3d7
 8000a74:	3fc3d70a 	.word	0x3fc3d70a

08000a78 <_ZN4Omni4InitEv>:

void Omni::Init() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	this->motors[0].Init(0, &htim2, 3.7, 471.0, 0.);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000a86:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000a8a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <_ZN4Omni4InitEv+0xa0>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe28 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[1].Init(1, &htim5, 3.7, 471.0, 0.);
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000a9e:	4413      	add	r3, r2
 8000aa0:	ed9f 2b17 	vldr	d2, [pc, #92]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000aa4:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000aa8:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <_ZN4Omni4InitEv+0xa4>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe19 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[2].Init(2, &htim3, 3.7, 471.0, 0.);
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000abc:	4413      	add	r3, r2
 8000abe:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000ac2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000ac6:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <_ZN4Omni4InitEv+0xa8>)
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe0a 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[3].Init(3, &htim4, 3.7, 471.0, 0.);
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000ada:	4413      	add	r3, r2
 8000adc:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8000b00 <_ZN4Omni4InitEv+0x88>
 8000ae0:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8000b08 <_ZN4Omni4InitEv+0x90>
 8000ae4:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000b10 <_ZN4Omni4InitEv+0x98>
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <_ZN4Omni4InitEv+0xac>)
 8000aea:	2103      	movs	r1, #3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdfb 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>

	DC_Motor::Init();
 8000af2:	f7ff fdc3 	bl	800067c <_ZN8DC_Motor4InitEv>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
	...
 8000b0c:	407d7000 	.word	0x407d7000
 8000b10:	9999999a 	.word	0x9999999a
 8000b14:	400d9999 	.word	0x400d9999
 8000b18:	240106e0 	.word	0x240106e0
 8000b1c:	240107c4 	.word	0x240107c4
 8000b20:	2401072c 	.word	0x2401072c
 8000b24:	24010778 	.word	0x24010778

08000b28 <_ZN4Omni16Get_Car_locationEv>:

void Omni::Get_Car_location() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	double m[4];
	for (int i = 0; i < 4; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dc16      	bgt.n	8000b68 <_ZN4Omni16Get_Car_locationEv+0x40>
		m[i] = this->motors[i].MoveDis();
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff feb7 	bl	80008bc <_ZN8DC_Motor5Motor7MoveDisEv>
 8000b4e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	3330      	adds	r3, #48	; 0x30
 8000b58:	443b      	add	r3, r7
 8000b5a:	3b28      	subs	r3, #40	; 0x28
 8000b5c:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	3301      	adds	r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b66:	e7e5      	b.n	8000b34 <_ZN4Omni16Get_Car_locationEv+0xc>
	}
//	NowCarLocation.Vx += -m[1] + m[3];
//	NowCarLocation.Vy += m[0] - m[2];
//	NowCarLocation.Omega += (m[0] + m[1] + m[2] + m[3]) / 4. / CarRadius;
}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZN4Omni16UpdateNowCarInfoEv>:

void Omni::UpdateNowCarInfo() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	ed2d 8b02 	vpush	{d8}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	// Get each motors' Vnow
	// Unit : m/s , rad/s
	this->UpdateMotorVnow();
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f8b1 	bl	8000ce4 <_ZN4Omni15UpdateMotorVnowEv>

	NowCarInfo.Vx = (motors[3].GetVnow() - motors[1].GetVnow());
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000b88:	4413      	add	r3, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff feba 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000b90:	eeb0 8b40 	vmov.f64	d8, d0
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff feb1 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba6:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8000bb0:	4413      	add	r3, r2
 8000bb2:	ed83 7b00 	vstr	d7, [r3]
	NowCarInfo.Vy = (motors[0].GetVnow() - motors[2].GetVnow());
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fea3 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bbe:	eeb0 8b40 	vmov.f64	d8, d0
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000bc8:	4413      	add	r3, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fe9a 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bd0:	eeb0 7b40 	vmov.f64	d7, d0
 8000bd4:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	f64f 33f0 	movw	r3, #64496	; 0xfbf0
 8000bde:	4413      	add	r3, r2
 8000be0:	ed03 7b02 	vstr	d7, [r3, #-8]
	NowCarInfo.Omega = (motors[0].GetVnow() + motors[1].GetVnow() + motors[2].GetVnow() + motors[3].GetVnow()) * CarRadius;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe8c 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bec:	eeb0 8b40 	vmov.f64	d8, d0
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fe83 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000bfe:	eeb0 7b40 	vmov.f64	d7, d0
 8000c02:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fe78 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c14:	eeb0 7b40 	vmov.f64	d7, d0
 8000c18:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000c22:	4413      	add	r3, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe6d 	bl	8000904 <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c2e:	ee38 6b07 	vadd.f64	d6, d8, d7
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000c38:	4413      	add	r3, r2
 8000c3a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	f64f 33f0 	movw	r3, #64496	; 0xfbf0
 8000c48:	4413      	add	r3, r2
 8000c4a:	ed83 7b00 	vstr	d7, [r3]
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	ecbd 8b02 	vpop	{d8}
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_ZN4Omni14SetGoalCarInfoEddd>:

// Set all motors' velocity base on Car Vgoal.
void Omni::SetGoalCarInfo(double Vx, double Vy, double Omega) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	61f8      	str	r0, [r7, #28]
 8000c62:	ed87 0b04 	vstr	d0, [r7, #16]
 8000c66:	ed87 1b02 	vstr	d1, [r7, #8]
 8000c6a:	ed87 2b00 	vstr	d2, [r7]
	this->GoalCarInfo.Vx = Vx;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000c74:	4619      	mov	r1, r3
 8000c76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c7a:	e941 2302 	strd	r2, r3, [r1, #-8]
	this->GoalCarInfo.Vy = Vy;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000c84:	4619      	mov	r1, r3
 8000c86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c8a:	e9c1 2300 	strd	r2, r3, [r1]
	this->GoalCarInfo.Omega = Omega;
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000c94:	4413      	add	r3, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c9c:	e941 2302 	strd	r2, r3, [r1, #-8]

	SetMotorVgoal();
 8000ca0:	69f8      	ldr	r0, [r7, #28]
 8000ca2:	f000 f8f5 	bl	8000e90 <_ZN4Omni13SetMotorVgoalEv>
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_ZN4Omni10Update_PIDEv>:

void Omni::Update_PID() {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	dc0d      	bgt.n	8000cdc <_ZN4Omni10Update_PIDEv+0x2e>
		this->motors[i].UpdatePID();
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000cc6:	fb02 f303 	mul.w	r3, r2, r3
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd32 	bl	8000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>
	for (int i = 0; i < 4; i++) {
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e7ee      	b.n	8000cba <_ZN4Omni10Update_PIDEv+0xc>
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_ZN4Omni15UpdateMotorVnowEv>:

void Omni::UpdateMotorVnow() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	dc0d      	bgt.n	8000d12 <_ZN4Omni15UpdateMotorVnowEv+0x2e>
		this->motors[i].UpdateVnow();
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f643 62f8 	movw	r2, #16120	; 0x3ef8
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd7b 	bl	8000800 <_ZN8DC_Motor5Motor10UpdateVnowEv>
	for (int i = 0; i < 4; i++) {
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e7ee      	b.n	8000cf0 <_ZN4Omni15UpdateMotorVnowEv+0xc>
	}
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	0000      	movs	r0, r0
 8000d1c:	0000      	movs	r0, r0
	...

08000d20 <_ZN4Omni4MoveEv>:

// TODO : Check for the DIR
void Omni::Move() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	// DIR
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (motors[0].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	bfcc      	ite	gt
 8000d38:	2301      	movgt	r3, #1
 8000d3a:	2300      	movle	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f083 0301 	eor.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4a:	484b      	ldr	r0, [pc, #300]	; (8000e78 <_ZN4Omni4MoveEv+0x158>)
 8000d4c:	f007 f956 	bl	8007ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (motors[1].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8000d56:	ed93 7b00 	vldr	d7, [r3]
 8000d5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d62:	bfcc      	ite	gt
 8000d64:	2301      	movgt	r3, #1
 8000d66:	2300      	movle	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	4841      	ldr	r0, [pc, #260]	; (8000e7c <_ZN4Omni4MoveEv+0x15c>)
 8000d78:	f007 f940 	bl	8007ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, (motors[2].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f503 43fc 	add.w	r3, r3, #32256	; 0x7e00
 8000d82:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000d86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8e:	bfcc      	ite	gt
 8000d90:	2301      	movgt	r3, #1
 8000d92:	2300      	movle	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f083 0301 	eor.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4837      	ldr	r0, [pc, #220]	; (8000e80 <_ZN4Omni4MoveEv+0x160>)
 8000da2:	f007 f92b 	bl	8007ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (motors[3].u > 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	f64b 43f0 	movw	r3, #48368	; 0xbcf0
 8000dac:	4413      	add	r3, r2
 8000dae:	ed93 7b00 	vldr	d7, [r3]
 8000db2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	bfcc      	ite	gt
 8000dbc:	2301      	movgt	r3, #1
 8000dbe:	2300      	movle	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f083 0301 	eor.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <_ZN4Omni4MoveEv+0x164>)
 8000dd0:	f007 f914 	bl	8007ffc <HAL_GPIO_WritePin>

	// PWM
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, int(fabs(motors[0].u) * 3200));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	ed93 7b02 	vldr	d7, [r3, #8]
 8000dda:	eeb0 7bc7 	vabs.f64	d7, d7
 8000dde:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000e70 <_ZN4Omni4MoveEv+0x150>
 8000de2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000de6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <_ZN4Omni4MoveEv+0x168>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	ee17 2a90 	vmov	r2, s15
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, int(fabs(motors[1].u) * 3200));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8000dfa:	ed93 7b00 	vldr	d7, [r3]
 8000dfe:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e02:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000e70 <_ZN4Omni4MoveEv+0x150>
 8000e06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e0a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <_ZN4Omni4MoveEv+0x168>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	ee17 2a90 	vmov	r2, s15
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, int(fabs(motors[2].u) * 3200));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f503 43fc 	add.w	r3, r3, #32256	; 0x7e00
 8000e1e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000e22:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e26:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000e70 <_ZN4Omni4MoveEv+0x150>
 8000e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <_ZN4Omni4MoveEv+0x16c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	ee17 2a90 	vmov	r2, s15
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, int(fabs(motors[3].u) * 3200));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	f64b 43f0 	movw	r3, #48368	; 0xbcf0
 8000e42:	4413      	add	r3, r2
 8000e44:	ed93 7b00 	vldr	d7, [r3]
 8000e48:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e4c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000e70 <_ZN4Omni4MoveEv+0x150>
 8000e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_ZN4Omni4MoveEv+0x16c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	ee17 2a90 	vmov	r2, s15
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	00000000 	.word	0x00000000
 8000e74:	40a90000 	.word	0x40a90000
 8000e78:	58020c00 	.word	0x58020c00
 8000e7c:	58020400 	.word	0x58020400
 8000e80:	58021000 	.word	0x58021000
 8000e84:	58020800 	.word	0x58020800
 8000e88:	240108a8 	.word	0x240108a8
 8000e8c:	24010940 	.word	0x24010940

08000e90 <_ZN4Omni13SetMotorVgoalEv>:

void Omni::SetMotorVgoal() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	// Unit : m/s
	this->motors[0].SetVgoal(GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8000ea0:	ed93 6b00 	vldr	d6, [r3]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	f64f 4330 	movw	r3, #64560	; 0xfc30
 8000eaa:	4413      	add	r3, r2
 8000eac:	ed13 5b02 	vldr	d5, [r3, #-8]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8000eb6:	4413      	add	r3, r2
 8000eb8:	ed13 7b02 	vldr	d7, [r3, #-8]
 8000ebc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ec0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ec4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec8:	4608      	mov	r0, r1
 8000eca:	f7ff fcc7 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[1].SetVgoal(-GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	f643 63f8 	movw	r3, #16120	; 0x3ef8
 8000ed4:	4413      	add	r3, r2
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000edc:	440a      	add	r2, r1
 8000ede:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000ee8:	440a      	add	r2, r1
 8000eea:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000eee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000ef8:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000efc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f00:	eeb0 0b47 	vmov.f64	d0, d7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fca9 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[2].SetVgoal(-GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	f647 53f0 	movw	r3, #32240	; 0x7df0
 8000f10:	4413      	add	r3, r2
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000f18:	440a      	add	r2, r1
 8000f1a:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000f24:	440a      	add	r2, r1
 8000f26:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000f34:	ed92 7b00 	vldr	d7, [r2]
 8000f38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc8b 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[3].SetVgoal(GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	f64b 43e8 	movw	r3, #48360	; 0xbce8
 8000f4c:	4413      	add	r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000f54:	ed12 6b02 	vldr	d6, [r2, #-8]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	f64f 4230 	movw	r2, #64560	; 0xfc30
 8000f5e:	440a      	add	r2, r1
 8000f60:	ed12 5b02 	vldr	d5, [r2, #-8]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	f64f 4210 	movw	r2, #64528	; 0xfc10
 8000f6a:	440a      	add	r2, r1
 8000f6c:	ed12 7b02 	vldr	d7, [r2, #-8]
 8000f70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f78:	eeb0 0b47 	vmov.f64	d0, d7
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fc6d 	bl	800085c <_ZN8DC_Motor5Motor8SetVgoalEd>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_ZN4Omni13GetNowCarInfoEv>:

CAR_INFO Omni::GetNowCarInfo() {
 8000f8a:	b4b0      	push	{r4, r5, r7}
 8000f8c:	b08f      	sub	sp, #60	; 0x3c
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	61f8      	str	r0, [r7, #28]
	return NowCarInfo;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000f98:	f107 0420 	add.w	r4, r7, #32
 8000f9c:	f503 653e 	add.w	r5, r3, #3040	; 0xbe0
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa8:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fac:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000fb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fb8:	ec45 4b15 	vmov	d5, r4, r5
 8000fbc:	ec41 0b16 	vmov	d6, r0, r1
 8000fc0:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fc4:	eeb0 0b45 	vmov.f64	d0, d5
 8000fc8:	eeb0 1b46 	vmov.f64	d1, d6
 8000fcc:	eeb0 2b47 	vmov.f64	d2, d7
 8000fd0:	373c      	adds	r7, #60	; 0x3c
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bcb0      	pop	{r4, r5, r7}
 8000fd6:	4770      	bx	lr

08000fd8 <_Z41__static_initialization_and_destruction_0ii>:
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d107      	bne.n	8000ff8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d102      	bne.n	8000ff8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Omni omni;
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000ff4:	f7ff fd04 	bl	8000a00 <_ZN4OmniC1Ev>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	24000098 	.word	0x24000098

08001004 <_GLOBAL__sub_I_omni>:
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
 8001008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff ffe3 	bl	8000fd8 <_Z41__static_initialization_and_destruction_0ii>
 8001012:	bd80      	pop	{r7, pc}

08001014 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <_ZN3ros3MsgC1Ev+0x1c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	0800e3dc 	.word	0x0800e3dc

08001034 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ffe8 	bl	8001014 <_ZN3ros3MsgC1Ev>
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0800e3c4 	.word	0x0800e3c4

08001084 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001084:	b480      	push	{r7}
 8001086:	b08b      	sub	sp, #44	; 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001098:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800109c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	4401      	add	r1, r0
 80010a6:	b2d3      	uxtb	r3, r2
 80010a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80010aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	0a02      	lsrs	r2, r0, #8
 80010b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010bc:	0a0b      	lsrs	r3, r1, #8
 80010be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010c0:	3101      	adds	r1, #1
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	4401      	add	r1, r0
 80010c6:	b2d3      	uxtb	r3, r2
 80010c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80010ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	0c02      	lsrs	r2, r0, #16
 80010d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010dc:	0c0b      	lsrs	r3, r1, #16
 80010de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e0:	3102      	adds	r1, #2
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	4401      	add	r1, r0
 80010e6:	b2d3      	uxtb	r3, r2
 80010e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80010ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	0e02      	lsrs	r2, r0, #24
 80010f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010fc:	0e0b      	lsrs	r3, r1, #24
 80010fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001100:	3103      	adds	r1, #3
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	4401      	add	r1, r0
 8001106:	b2d3      	uxtb	r3, r2
 8001108:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800110a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	000a      	movs	r2, r1
 8001118:	2300      	movs	r3, #0
 800111a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111c:	3104      	adds	r1, #4
 800111e:	6838      	ldr	r0, [r7, #0]
 8001120:	4401      	add	r1, r0
 8001122:	b2d3      	uxtb	r3, r2
 8001124:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001126:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	0a0a      	lsrs	r2, r1, #8
 8001134:	2300      	movs	r3, #0
 8001136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001138:	3105      	adds	r1, #5
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	4401      	add	r1, r0
 800113e:	b2d3      	uxtb	r3, r2
 8001140:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001142:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0c0a      	lsrs	r2, r1, #16
 8001150:	2300      	movs	r3, #0
 8001152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001154:	3106      	adds	r1, #6
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	4401      	add	r1, r0
 800115a:	b2d3      	uxtb	r3, r2
 800115c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800115e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	0e0a      	lsrs	r2, r1, #24
 800116c:	2300      	movs	r3, #0
 800116e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001170:	3107      	adds	r1, #7
 8001172:	6838      	ldr	r0, [r7, #0]
 8001174:	4401      	add	r1, r0
 8001176:	b2d3      	uxtb	r3, r2
 8001178:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	3308      	adds	r3, #8
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001186:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800118a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800118e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	4401      	add	r1, r0
 8001194:	b2d3      	uxtb	r3, r2
 8001196:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	0a02      	lsrs	r2, r0, #8
 80011a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011aa:	0a0b      	lsrs	r3, r1, #8
 80011ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ae:	3101      	adds	r1, #1
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	4401      	add	r1, r0
 80011b4:	b2d3      	uxtb	r3, r2
 80011b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80011b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	0c02      	lsrs	r2, r0, #16
 80011c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011ca:	0c0b      	lsrs	r3, r1, #16
 80011cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ce:	3102      	adds	r1, #2
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	4401      	add	r1, r0
 80011d4:	b2d3      	uxtb	r3, r2
 80011d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80011d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	0e02      	lsrs	r2, r0, #24
 80011e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011ea:	0e0b      	lsrs	r3, r1, #24
 80011ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ee:	3103      	adds	r1, #3
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	4401      	add	r1, r0
 80011f4:	b2d3      	uxtb	r3, r2
 80011f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80011f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	000a      	movs	r2, r1
 8001206:	2300      	movs	r3, #0
 8001208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800120a:	3104      	adds	r1, #4
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	4401      	add	r1, r0
 8001210:	b2d3      	uxtb	r3, r2
 8001212:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001214:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	0a0a      	lsrs	r2, r1, #8
 8001222:	2300      	movs	r3, #0
 8001224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001226:	3105      	adds	r1, #5
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	4401      	add	r1, r0
 800122c:	b2d3      	uxtb	r3, r2
 800122e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001230:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	0c0a      	lsrs	r2, r1, #16
 800123e:	2300      	movs	r3, #0
 8001240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001242:	3106      	adds	r1, #6
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	4401      	add	r1, r0
 8001248:	b2d3      	uxtb	r3, r2
 800124a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800124c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	0e0a      	lsrs	r2, r1, #24
 800125a:	2300      	movs	r3, #0
 800125c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800125e:	3107      	adds	r1, #7
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	4401      	add	r1, r0
 8001264:	b2d3      	uxtb	r3, r2
 8001266:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	3308      	adds	r3, #8
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001274:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800127c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	4401      	add	r1, r0
 8001282:	b2d3      	uxtb	r3, r2
 8001284:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	0a02      	lsrs	r2, r0, #8
 8001294:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001298:	0a0b      	lsrs	r3, r1, #8
 800129a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800129c:	3101      	adds	r1, #1
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	4401      	add	r1, r0
 80012a2:	b2d3      	uxtb	r3, r2
 80012a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80012a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	0c02      	lsrs	r2, r0, #16
 80012b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012b8:	0c0b      	lsrs	r3, r1, #16
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	3102      	adds	r1, #2
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	4401      	add	r1, r0
 80012c2:	b2d3      	uxtb	r3, r2
 80012c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80012c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	0e02      	lsrs	r2, r0, #24
 80012d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012d8:	0e0b      	lsrs	r3, r1, #24
 80012da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012dc:	3103      	adds	r1, #3
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	4401      	add	r1, r0
 80012e2:	b2d3      	uxtb	r3, r2
 80012e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80012e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	000a      	movs	r2, r1
 80012f4:	2300      	movs	r3, #0
 80012f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f8:	3104      	adds	r1, #4
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	4401      	add	r1, r0
 80012fe:	b2d3      	uxtb	r3, r2
 8001300:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	0a0a      	lsrs	r2, r1, #8
 8001310:	2300      	movs	r3, #0
 8001312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001314:	3105      	adds	r1, #5
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	4401      	add	r1, r0
 800131a:	b2d3      	uxtb	r3, r2
 800131c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800131e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	0c0a      	lsrs	r2, r1, #16
 800132c:	2300      	movs	r3, #0
 800132e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001330:	3106      	adds	r1, #6
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	4401      	add	r1, r0
 8001336:	b2d3      	uxtb	r3, r2
 8001338:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800133a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	0e0a      	lsrs	r2, r1, #24
 8001348:	2300      	movs	r3, #0
 800134a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800134c:	3107      	adds	r1, #7
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	4401      	add	r1, r0
 8001352:	b2d3      	uxtb	r3, r2
 8001354:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	3308      	adds	r3, #8
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800135e:	4618      	mov	r0, r3
 8001360:	372c      	adds	r7, #44	; 0x2c
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800136a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800136e:	b0eb      	sub	sp, #428	; 0x1ac
 8001370:	af00      	add	r7, sp, #0
 8001372:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8001376:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800138c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001390:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001394:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	461c      	mov	r4, r3
 80013a2:	4615      	mov	r5, r2
 80013a4:	ea40 0804 	orr.w	r8, r0, r4
 80013a8:	ea41 0905 	orr.w	r9, r1, r5
 80013ac:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80013b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2200      	movs	r2, #0
 80013c6:	469a      	mov	sl, r3
 80013c8:	4693      	mov	fp, r2
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80013d6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80013da:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80013de:	ea40 0402 	orr.w	r4, r0, r2
 80013e2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80013e6:	430b      	orrs	r3, r1
 80013e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013ec:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80013f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80013f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013fc:	1c9a      	adds	r2, r3, #2
 80013fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2200      	movs	r2, #0
 800140a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800140e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800141e:	464c      	mov	r4, r9
 8001420:	0423      	lsls	r3, r4, #16
 8001422:	4644      	mov	r4, r8
 8001424:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001428:	4644      	mov	r4, r8
 800142a:	0422      	lsls	r2, r4, #16
 800142c:	ea40 0402 	orr.w	r4, r0, r2
 8001430:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8001434:	430b      	orrs	r3, r1
 8001436:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800143a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800143e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001442:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001446:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800144a:	1cda      	adds	r2, r3, #3
 800144c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2200      	movs	r2, #0
 8001458:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800145c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001460:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001464:	4623      	mov	r3, r4
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800146c:	4623      	mov	r3, r4
 800146e:	061b      	lsls	r3, r3, #24
 8001470:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001474:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8001478:	4623      	mov	r3, r4
 800147a:	4303      	orrs	r3, r0
 800147c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001480:	462b      	mov	r3, r5
 8001482:	430b      	orrs	r3, r1
 8001484:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001488:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800148c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001490:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001494:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001498:	1d1a      	adds	r2, r3, #4
 800149a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80014aa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80014ba:	0023      	movs	r3, r4
 80014bc:	2200      	movs	r2, #0
 80014be:	ea40 0402 	orr.w	r4, r0, r2
 80014c2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80014c6:	430b      	orrs	r3, r1
 80014c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80014cc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80014d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80014d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014dc:	1d5a      	adds	r2, r3, #5
 80014de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80014ee:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80014fe:	0223      	lsls	r3, r4, #8
 8001500:	2200      	movs	r2, #0
 8001502:	ea40 0402 	orr.w	r4, r0, r2
 8001506:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800150a:	430b      	orrs	r3, r1
 800150c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001510:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001514:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001518:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800151c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001520:	1d9a      	adds	r2, r3, #6
 8001522:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2200      	movs	r2, #0
 800152e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001532:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001542:	0423      	lsls	r3, r4, #16
 8001544:	2200      	movs	r2, #0
 8001546:	ea40 0402 	orr.w	r4, r0, r2
 800154a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800154e:	430b      	orrs	r3, r1
 8001550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001554:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001558:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800155c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001560:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001564:	1dda      	adds	r2, r3, #7
 8001566:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800156a:	4413      	add	r3, r2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2200      	movs	r2, #0
 8001572:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001576:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8001586:	0623      	lsls	r3, r4, #24
 8001588:	2200      	movs	r2, #0
 800158a:	ea40 0402 	orr.w	r4, r0, r2
 800158e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8001592:	430b      	orrs	r3, r1
 8001594:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001598:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800159c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80015a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80015a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80015ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015b0:	3308      	adds	r3, #8
 80015b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015c2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80015c6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80015ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015da:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80015de:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80015e2:	4623      	mov	r3, r4
 80015e4:	4303      	orrs	r3, r0
 80015e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015ea:	462b      	mov	r3, r5
 80015ec:	430b      	orrs	r3, r1
 80015ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015f2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80015f6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015fa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80015fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001614:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001624:	464c      	mov	r4, r9
 8001626:	0223      	lsls	r3, r4, #8
 8001628:	4644      	mov	r4, r8
 800162a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800162e:	4644      	mov	r4, r8
 8001630:	0222      	lsls	r2, r4, #8
 8001632:	ea40 0402 	orr.w	r4, r0, r2
 8001636:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800163a:	430b      	orrs	r3, r1
 800163c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001640:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001644:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001648:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800164c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001650:	1c9a      	adds	r2, r3, #2
 8001652:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2200      	movs	r2, #0
 800165e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001672:	464c      	mov	r4, r9
 8001674:	0423      	lsls	r3, r4, #16
 8001676:	4644      	mov	r4, r8
 8001678:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800167c:	4644      	mov	r4, r8
 800167e:	0422      	lsls	r2, r4, #16
 8001680:	ea40 0402 	orr.w	r4, r0, r2
 8001684:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8001688:	430b      	orrs	r3, r1
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800168e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8001692:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001696:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800169a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800169e:	1cda      	adds	r2, r3, #3
 80016a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80016b0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80016b4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80016b8:	4623      	mov	r3, r4
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016c0:	4623      	mov	r3, r4
 80016c2:	061b      	lsls	r3, r3, #24
 80016c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80016c8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016cc:	4623      	mov	r3, r4
 80016ce:	4303      	orrs	r3, r0
 80016d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016d4:	462b      	mov	r3, r5
 80016d6:	430b      	orrs	r3, r1
 80016d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016dc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80016e0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80016e4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80016e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016ec:	1d1a      	adds	r2, r3, #4
 80016ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2200      	movs	r2, #0
 80016fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800170e:	0023      	movs	r3, r4
 8001710:	2200      	movs	r2, #0
 8001712:	ea40 0402 	orr.w	r4, r0, r2
 8001716:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800171a:	430b      	orrs	r3, r1
 800171c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001720:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8001724:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001728:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800172c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001730:	1d5a      	adds	r2, r3, #5
 8001732:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2200      	movs	r2, #0
 800173e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001742:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8001752:	0223      	lsls	r3, r4, #8
 8001754:	2200      	movs	r2, #0
 8001756:	ea40 0402 	orr.w	r4, r0, r2
 800175a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800175e:	430b      	orrs	r3, r1
 8001760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001764:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001768:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800176c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001770:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001774:	1d9a      	adds	r2, r3, #6
 8001776:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2200      	movs	r2, #0
 8001782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001786:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8001796:	0423      	lsls	r3, r4, #16
 8001798:	2200      	movs	r2, #0
 800179a:	ea40 0402 	orr.w	r4, r0, r2
 800179e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80017a2:	430b      	orrs	r3, r1
 80017a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80017a8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80017ac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80017b0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017b8:	1dda      	adds	r2, r3, #7
 80017ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80017da:	0623      	lsls	r3, r4, #24
 80017dc:	2200      	movs	r2, #0
 80017de:	ea40 0402 	orr.w	r4, r0, r2
 80017e2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80017e6:	430b      	orrs	r3, r1
 80017e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80017ec:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80017f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80017f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017fc:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8001800:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001804:	3308      	adds	r3, #8
 8001806:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001816:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800181a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800181e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2200      	movs	r2, #0
 800182a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800182e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001832:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001836:	4623      	mov	r3, r4
 8001838:	4303      	orrs	r3, r0
 800183a:	67bb      	str	r3, [r7, #120]	; 0x78
 800183c:	462b      	mov	r3, r5
 800183e:	430b      	orrs	r3, r1
 8001840:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001842:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001846:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800184a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800184e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2200      	movs	r2, #0
 8001860:	673b      	str	r3, [r7, #112]	; 0x70
 8001862:	677a      	str	r2, [r7, #116]	; 0x74
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001870:	464c      	mov	r4, r9
 8001872:	0223      	lsls	r3, r4, #8
 8001874:	4644      	mov	r4, r8
 8001876:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800187a:	4644      	mov	r4, r8
 800187c:	0222      	lsls	r2, r4, #8
 800187e:	ea40 0402 	orr.w	r4, r0, r2
 8001882:	66bc      	str	r4, [r7, #104]	; 0x68
 8001884:	430b      	orrs	r3, r1
 8001886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001888:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800188c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001890:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001894:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001898:	1c9a      	adds	r2, r3, #2
 800189a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	663b      	str	r3, [r7, #96]	; 0x60
 80018a8:	667a      	str	r2, [r7, #100]	; 0x64
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80018b6:	464c      	mov	r4, r9
 80018b8:	0423      	lsls	r3, r4, #16
 80018ba:	4644      	mov	r4, r8
 80018bc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80018c0:	4644      	mov	r4, r8
 80018c2:	0422      	lsls	r2, r4, #16
 80018c4:	ea40 0402 	orr.w	r4, r0, r2
 80018c8:	65bc      	str	r4, [r7, #88]	; 0x58
 80018ca:	430b      	orrs	r3, r1
 80018cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80018d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80018da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018de:	1cda      	adds	r2, r3, #3
 80018e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2200      	movs	r2, #0
 80018ec:	653b      	str	r3, [r7, #80]	; 0x50
 80018ee:	657a      	str	r2, [r7, #84]	; 0x54
 80018f0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80018f4:	4623      	mov	r3, r4
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fa:	4623      	mov	r3, r4
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001900:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001904:	4623      	mov	r3, r4
 8001906:	4303      	orrs	r3, r0
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
 800190a:	462b      	mov	r3, r5
 800190c:	430b      	orrs	r3, r1
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
 8001910:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001914:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001918:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800191c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001920:	1d1a      	adds	r2, r3, #4
 8001922:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2200      	movs	r2, #0
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001930:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800193c:	0023      	movs	r3, r4
 800193e:	2200      	movs	r2, #0
 8001940:	ea40 0402 	orr.w	r4, r0, r2
 8001944:	633c      	str	r4, [r7, #48]	; 0x30
 8001946:	430b      	orrs	r3, r1
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
 800194a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800194e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001952:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001956:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800195a:	1d5a      	adds	r2, r3, #5
 800195c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2200      	movs	r2, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
 800196a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001976:	0223      	lsls	r3, r4, #8
 8001978:	2200      	movs	r2, #0
 800197a:	ea40 0402 	orr.w	r4, r0, r2
 800197e:	623c      	str	r4, [r7, #32]
 8001980:	430b      	orrs	r3, r1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001988:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800198c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001990:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001994:	3306      	adds	r3, #6
 8001996:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	61fa      	str	r2, [r7, #28]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	69bc      	ldr	r4, [r7, #24]
 80019b0:	0423      	lsls	r3, r4, #16
 80019b2:	2200      	movs	r2, #0
 80019b4:	ea40 0402 	orr.w	r4, r0, r2
 80019b8:	613c      	str	r4, [r7, #16]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80019c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019ce:	3307      	adds	r3, #7
 80019d0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2200      	movs	r2, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	60fa      	str	r2, [r7, #12]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	68bc      	ldr	r4, [r7, #8]
 80019ea:	0623      	lsls	r3, r4, #24
 80019ec:	2200      	movs	r2, #0
 80019ee:	ea40 0402 	orr.w	r4, r0, r2
 80019f2:	603c      	str	r4, [r7, #0]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8001a00:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001a04:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001a08:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8001a0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a10:	3308      	adds	r3, #8
 8001a12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8001a16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001a20:	46bd      	mov	sp, r7
 8001a22:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a26:	4770      	bx	lr

08001a28 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	0800e118 	.word	0x0800e118

08001a44 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	0800e130 	.word	0x0800e130

08001a60 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fad2 	bl	8001014 <_ZN3ros3MsgC1Ev>
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3308      	adds	r3, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fada 	bl	8001034 <_ZN13geometry_msgs7Vector3C1Ev>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3328      	adds	r3, #40	; 0x28
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fad5 	bl	8001034 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0800e3ac 	.word	0x0800e3ac

08001a98 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0008 	add.w	r0, r3, #8
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff fae6 	bl	8001084 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff fad9 	bl	8001084 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ada:	68fb      	ldr	r3, [r7, #12]
    }
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f103 0008 	add.w	r0, r3, #8
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fc33 	bl	800136a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff fc26 	bl	800136a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
     return offset;
 8001b26:	68fb      	ldr	r3, [r7, #12]
    }
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	0800e154 	.word	0x0800e154

08001b4c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	0800e168 	.word	0x0800e168

08001b68 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
      data()
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fa3c 	bl	8001014 <_ZN3ros3MsgC1Ev>
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ffde 	bl	8001b68 <_ZN3ros4TimeC1Ev>
    {
    }
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0800e394 	.word	0x0800e394

08001bbc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2ca      	uxtb	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	0a19      	lsrs	r1, r3, #8
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3301      	adds	r3, #1
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0c19      	lsrs	r1, r3, #16
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	0e19      	lsrs	r1, r3, #24
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3303      	adds	r3, #3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3304      	adds	r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6899      	ldr	r1, [r3, #8]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a19      	lsrs	r1, r3, #8
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	0c19      	lsrs	r1, r3, #16
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0e19      	lsrs	r1, r3, #24
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3303      	adds	r3, #3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	440b      	add	r3, r1
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	440b      	add	r3, r1
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3303      	adds	r3, #3
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	440b      	add	r3, r1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	440b      	add	r3, r1
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	440b      	add	r3, r1
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3303      	adds	r3, #3
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	440b      	add	r3, r1
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d26:	68fb      	ldr	r3, [r7, #12]
    }
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	0800e18c 	.word	0x0800e18c

08001d50 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	0800e19c 	.word	0x0800e19c

08001d6c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f94c 	bl	8001014 <_ZN3ros3MsgC1Ev>
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	809a      	strh	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
    {
    }
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	0800e37c 	.word	0x0800e37c
 8001db0:	0800e1c0 	.word	0x0800e1c0

08001db4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8899      	ldrh	r1, [r3, #4]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	889b      	ldrh	r3, [r3, #4]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	b2ca      	uxtb	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3302      	adds	r3, #2
 8001de8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fa8e 	bl	8000310 <strlen>
 8001df4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ff7a 	bl	8002cf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3304      	adds	r3, #4
 8001e08:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	18d0      	adds	r0, r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4619      	mov	r1, r3
 8001e18:	f00b ffd8 	bl	800ddcc <memcpy>
      offset += length_topic_name;
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4413      	add	r3, r2
 8001e22:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fa71 	bl	8000310 <strlen>
 8001e2e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	6979      	ldr	r1, [r7, #20]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 ff5d 	bl	8002cf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	18d0      	adds	r0, r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f00b ffbb 	bl	800ddcc <memcpy>
      offset += length_message_type;
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fa54 	bl	8000310 <strlen>
 8001e68:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 ff40 	bl	8002cf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	18d0      	adds	r0, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f00b ff9e 	bl	800ddcc <memcpy>
      offset += length_md5sum;
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	b2ca      	uxtb	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	0a19      	lsrs	r1, r3, #8
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0e19      	lsrs	r1, r3, #24
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
    }
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	; 0x28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	889b      	ldrh	r3, [r3, #4]
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	440b      	add	r3, r1
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	3302      	adds	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	441a      	add	r2, r3
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fefc 	bl	8002d34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d20c      	bcs.n	8001f6c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	441a      	add	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	440b      	add	r3, r1
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	3301      	adds	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	e7ec      	b.n	8001f46 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4413      	add	r3, r2
 8001f72:	3b01      	subs	r3, #1
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	441a      	add	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	441a      	add	r2, r3
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fec9 	bl	8002d34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	6a3a      	ldr	r2, [r7, #32]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d20c      	bcs.n	8001fd2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	441a      	add	r2, r3
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	e7ec      	b.n	8001fac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fe96 	bl	8002d34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	3304      	adds	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	429a      	cmp	r2, r3
 800201c:	d20c      	bcs.n	8002038 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	441a      	add	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3b01      	subs	r3, #1
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	440b      	add	r3, r1
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3301      	adds	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e7ec      	b.n	8002012 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4413      	add	r3, r2
 800203e:	3b01      	subs	r3, #1
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	3b01      	subs	r3, #1
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	441a      	add	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	440a      	add	r2, r1
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	3301      	adds	r3, #1
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	440b      	add	r3, r1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4313      	orrs	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	3302      	adds	r3, #2
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	440b      	add	r3, r1
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	4313      	orrs	r3, r2
 8002090:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	3303      	adds	r3, #3
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	440b      	add	r3, r1
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	061b      	lsls	r3, r3, #24
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3304      	adds	r3, #4
 80020ae:	61bb      	str	r3, [r7, #24]
     return offset;
 80020b0:	69bb      	ldr	r3, [r7, #24]
    }
 80020b2:	4618      	mov	r0, r3
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	0800e1c4 	.word	0x0800e1c4

080020d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	0800e1e0 	.word	0x0800e1e0

080020f4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe ff88 	bl	8001014 <_ZN3ros3MsgC1Ev>
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	711a      	strb	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002114:	609a      	str	r2, [r3, #8]
    {
    }
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	0800e364 	.word	0x0800e364
 8002124:	0800e1c0 	.word	0x0800e1c0

08002128 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	7912      	ldrb	r2, [r2, #4]
 8002140:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3301      	adds	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f8df 	bl	8000310 <strlen>
 8002152:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fdcb 	bl	8002cf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	18d0      	adds	r0, r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4619      	mov	r1, r3
 8002176:	f00b fe29 	bl	800ddcc <memcpy>
      offset += length_msg;
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
      return offset;
 8002182:	68fb      	ldr	r3, [r7, #12]
    }
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	3301      	adds	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	441a      	add	r2, r3
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fdbb 	bl	8002d34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	3304      	adds	r3, #4
 80021c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d20c      	bcs.n	80021ee <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	441a      	add	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3b01      	subs	r3, #1
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	440b      	add	r3, r1
 80021e2:	7812      	ldrb	r2, [r2, #0]
 80021e4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e7ec      	b.n	80021c8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	3b01      	subs	r3, #1
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3b01      	subs	r3, #1
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
     return offset;
 8002212:	693b      	ldr	r3, [r7, #16]
    }
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	0800e204 	.word	0x0800e204

08002238 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0800e218 	.word	0x0800e218

08002254 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fed8 	bl	8001014 <_ZN3ros3MsgC1Ev>
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	0800e34c 	.word	0x0800e34c

0800229c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	0a19      	lsrs	r1, r3, #8
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0c19      	lsrs	r1, r3, #16
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3302      	adds	r3, #2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	b2ca      	uxtb	r2, r1
 80022da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0e19      	lsrs	r1, r3, #24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	3303      	adds	r3, #3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	b2ca      	uxtb	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	3304      	adds	r3, #4
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d22b      	bcs.n	800235a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4413      	add	r3, r2
 8002318:	b2ca      	uxtb	r2, r1
 800231a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	0a19      	lsrs	r1, r3, #8
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	3301      	adds	r3, #1
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4413      	add	r3, r2
 8002328:	b2ca      	uxtb	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	0c19      	lsrs	r1, r3, #16
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3302      	adds	r3, #2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	b2ca      	uxtb	r2, r1
 800233a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	0e19      	lsrs	r1, r3, #24
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	3303      	adds	r3, #3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	b2ca      	uxtb	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3304      	adds	r3, #4
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	3301      	adds	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	e7ce      	b.n	80022f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6919      	ldr	r1, [r3, #16]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	0a19      	lsrs	r1, r3, #8
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	4413      	add	r3, r2
 8002376:	b2ca      	uxtb	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	0c19      	lsrs	r1, r3, #16
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3302      	adds	r3, #2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4413      	add	r3, r2
 8002388:	b2ca      	uxtb	r2, r1
 800238a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	0e19      	lsrs	r1, r3, #24
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	3303      	adds	r3, #3
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3304      	adds	r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d22b      	bcs.n	800240a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	0a19      	lsrs	r1, r3, #8
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3301      	adds	r3, #1
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	b2ca      	uxtb	r2, r1
 80023da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0c19      	lsrs	r1, r3, #16
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	3302      	adds	r3, #2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	0e19      	lsrs	r1, r3, #24
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	3303      	adds	r3, #3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3304      	adds	r3, #4
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e7ce      	b.n	80023a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69d9      	ldr	r1, [r3, #28]
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	0a19      	lsrs	r1, r3, #8
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	b2ca      	uxtb	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	0c19      	lsrs	r1, r3, #16
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3302      	adds	r3, #2
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	4413      	add	r3, r2
 8002438:	b2ca      	uxtb	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	0e19      	lsrs	r1, r3, #24
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	3303      	adds	r3, #3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3304      	adds	r3, #4
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	429a      	cmp	r2, r3
 8002460:	d228      	bcs.n	80024b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fd ff4e 	bl	8000310 <strlen>
 8002474:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fc3a 	bl	8002cf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	3304      	adds	r3, #4
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	18d0      	adds	r0, r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4619      	mov	r1, r3
 80024a0:	f00b fc94 	bl	800ddcc <memcpy>
      offset += length_stringsi;
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4413      	add	r3, r2
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	3301      	adds	r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e7d1      	b.n	8002458 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024b6:	4618      	mov	r0, r3
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024be:	b580      	push	{r7, lr}
 80024c0:	b08e      	sub	sp, #56	; 0x38
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d8:	3301      	adds	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ea:	3302      	adds	r3, #2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	6a3a      	ldr	r2, [r7, #32]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	3303      	adds	r3, #3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	6a3a      	ldr	r2, [r7, #32]
 8002508:	4313      	orrs	r3, r2
 800250a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	3304      	adds	r3, #4
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	6a3a      	ldr	r2, [r7, #32]
 8002518:	429a      	cmp	r2, r3
 800251a:	d90a      	bls.n	8002532 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f00b fc66 	bl	800ddf8 <realloc>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002538:	2300      	movs	r3, #0
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002542:	429a      	cmp	r2, r3
 8002544:	d236      	bcs.n	80025b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	440a      	add	r2, r1
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	3301      	adds	r3, #1
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	440b      	add	r3, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256e:	3302      	adds	r3, #2
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	440b      	add	r3, r1
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	3303      	adds	r3, #3
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	3304      	adds	r3, #4
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	3301      	adds	r3, #1
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
 80025b2:	e7c3      	b.n	800253c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	3301      	adds	r3, #1
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	3302      	adds	r3, #2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	3303      	adds	r3, #3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	3304      	adds	r3, #4
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	429a      	cmp	r2, r3
 8002602:	d90a      	bls.n	800261a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f00b fbf2 	bl	800ddf8 <realloc>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	429a      	cmp	r2, r3
 800262c:	d236      	bcs.n	800269c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	440a      	add	r2, r1
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	3301      	adds	r3, #1
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	440b      	add	r3, r1
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	3302      	adds	r3, #2
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	440b      	add	r3, r1
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	3303      	adds	r3, #3
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	440b      	add	r3, r1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	3304      	adds	r3, #4
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	3214      	adds	r2, #20
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	3301      	adds	r3, #1
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	e7c3      	b.n	8002624 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	3301      	adds	r3, #1
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	3302      	adds	r3, #2
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	3303      	adds	r3, #3
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026de:	3304      	adds	r3, #4
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d90a      	bls.n	8002702 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f00b fb7e 	bl	800ddf8 <realloc>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002712:	429a      	cmp	r2, r3
 8002714:	d23f      	bcs.n	8002796 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	441a      	add	r2, r3
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fb06 	bl	8002d34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	3304      	adds	r3, #4
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	429a      	cmp	r2, r3
 800273c:	d20c      	bcs.n	8002758 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	441a      	add	r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3b01      	subs	r3, #1
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	440b      	add	r3, r1
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3301      	adds	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e7ec      	b.n	8002732 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	3b01      	subs	r3, #1
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	3b01      	subs	r3, #1
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	441a      	add	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	3220      	adds	r2, #32
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	3301      	adds	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
 8002794:	e7ba      	b.n	800270c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002798:	4618      	mov	r0, r3
 800279a:	3738      	adds	r7, #56	; 0x38
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	0800e2d0 	.word	0x0800e2d0

080027bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	0800e23c 	.word	0x0800e23c

080027d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68d8      	ldr	r0, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6891      	ldr	r1, [r2, #8]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4798      	blx	r3
 8002824:	4603      	mov	r3, r0
  };
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
  }
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a42      	ldr	r2, [pc, #264]	; (8002964 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d068      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a40      	ldr	r2, [pc, #256]	; (8002968 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d061      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3d      	ldr	r2, [pc, #244]	; (800296c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d05a      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a3b      	ldr	r2, [pc, #236]	; (8002970 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d053      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a38      	ldr	r2, [pc, #224]	; (8002974 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d04c      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a36      	ldr	r2, [pc, #216]	; (8002978 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d045      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a33      	ldr	r2, [pc, #204]	; (800297c <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d03e      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a31      	ldr	r2, [pc, #196]	; (8002980 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d037      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d030      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d029      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a29      	ldr	r2, [pc, #164]	; (800298c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d022      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a27      	ldr	r2, [pc, #156]	; (8002990 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01b      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a24      	ldr	r2, [pc, #144]	; (8002994 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d014      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00d      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1f      	ldr	r2, [pc, #124]	; (800299c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d006      	beq.n	8002930 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d109      	bne.n	8002944 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002942:	e008      	b.n	8002956 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002952:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40020010 	.word	0x40020010
 8002968:	40020028 	.word	0x40020028
 800296c:	40020040 	.word	0x40020040
 8002970:	40020058 	.word	0x40020058
 8002974:	40020070 	.word	0x40020070
 8002978:	40020088 	.word	0x40020088
 800297c:	400200a0 	.word	0x400200a0
 8002980:	400200b8 	.word	0x400200b8
 8002984:	40020410 	.word	0x40020410
 8002988:	40020428 	.word	0x40020428
 800298c:	40020440 	.word	0x40020440
 8002990:	40020458 	.word	0x40020458
 8002994:	40020470 	.word	0x40020470
 8002998:	40020488 	.word	0x40020488
 800299c:	400204a0 	.word	0x400204a0
 80029a0:	400204b8 	.word	0x400204b8

080029a4 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
			huart(&huart1), rind(0), twind(0), tfind(0) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <_ZN13STM32HardwareC1Ev+0x34>)
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	2401098c 	.word	0x2401098c

080029dc <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f804 	bl	80029f2 <_ZN13STM32Hardware10reset_rbufEv>
	}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a06:	4619      	mov	r1, r3
 8002a08:	f009 f962 	bl	800bcd0 <HAL_UART_Receive_DMA>
	}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_ZN13STM32Hardware4readEv>:

	int read() {
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
		int c = -1;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a20:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff0d 	bl	8002848 <_ZN13STM32Hardware10getRdmaIndEv>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	429c      	cmp	r4, r3
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a44:	1c59      	adds	r1, r3, #1
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	791b      	ldrb	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8002a64:	68fb      	ldr	r3, [r7, #12]
	}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
	...

08002a70 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d108      	bne.n	8002a96 <_ZN13STM32Hardware5flushEv+0x26>
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f083 0301 	eor.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <_ZN13STM32Hardware5flushEv+0x26>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <_ZN13STM32Hardware5flushEv+0x28>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03f      	beq.n	8002b1c <_ZN13STM32Hardware5flushEv+0xac>
			mutex = true;
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d031      	beq.n	8002b16 <_ZN13STM32Hardware5flushEv+0xa6>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20a      	bcs.n	8002ad8 <_ZN13STM32Hardware5flushEv+0x68>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	e006      	b.n	8002ae6 <_ZN13STM32Hardware5flushEv+0x76>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002af2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	89fa      	ldrh	r2, [r7, #14]
 8002afc:	4619      	mov	r1, r3
 8002afe:	f009 f855 	bl	800bbac <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 8002b16:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
		}
	}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2400fcc8 	.word	0x2400fcc8

08002b28 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
		int n = length;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3e:	bfa8      	it	ge
 8002b40:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b44:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b4c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	bf28      	it	cs
 8002b56:	4613      	movcs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f00b f92d 	bl	800ddcc <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d00b      	beq.n	8002ba6 <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	18d1      	adds	r1, r2, r3
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f00b f913 	bl	800ddcc <memcpy>
		}

		flush();
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff62 	bl	8002a70 <_ZN13STM32Hardware5flushEv>
	}
 8002bac:	bf00      	nop
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 8002bbc:	f002 f920 	bl	8004e00 <HAL_GetTick>
 8002bc0:	4603      	mov	r3, r0
	}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE>:

ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);

ros::Publisher CarVelPub("Toposition", &CarVnow);

void ROS::GoalVel_CB(const geometry_msgs::Twist &msg) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	omni.SetGoalCarInfo(msg.linear.x, msg.linear.y, msg.angular.z);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	ed93 7b04 	vldr	d7, [r3, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	ed93 6b06 	vldr	d6, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8002be6:	eeb0 2b45 	vmov.f64	d2, d5
 8002bea:	eeb0 1b46 	vmov.f64	d1, d6
 8002bee:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf2:	4803      	ldr	r0, [pc, #12]	; (8002c00 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE+0x34>)
 8002bf4:	f7fe f831 	bl	8000c5a <_ZN4Omni14SetGoalCarInfoEddd>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	24000098 	.word	0x24000098

08002c04 <_ZN3ROS5setupEv>:

void ROS::setup() {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	nh.initNode();
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <_ZN3ROS5setupEv+0x24>)
 8002c0a:	f000 f97d 	bl	8002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(CarVelSub);
 8002c0e:	4907      	ldr	r1, [pc, #28]	; (8002c2c <_ZN3ROS5setupEv+0x28>)
 8002c10:	4805      	ldr	r0, [pc, #20]	; (8002c28 <_ZN3ROS5setupEv+0x24>)
 8002c12:	f000 f996 	bl	8002f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	nh.advertise(CarVelPub);
 8002c16:	4906      	ldr	r1, [pc, #24]	; (8002c30 <_ZN3ROS5setupEv+0x2c>)
 8002c18:	4803      	ldr	r0, [pc, #12]	; (8002c28 <_ZN3ROS5setupEv+0x24>)
 8002c1a:	f000 f9bd 	bl	8002f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	HAL_TIM_Base_Start_IT(&htim7);
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <_ZN3ROS5setupEv+0x30>)
 8002c20:	f007 fcee 	bl	800a600 <HAL_TIM_Base_Start_IT>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2400fccc 	.word	0x2400fccc
 8002c2c:	24010668 	.word	0x24010668
 8002c30:	240106c8 	.word	0x240106c8
 8002c34:	24010810 	.word	0x24010810

08002c38 <_ZN3ROS4loopEv>:

void ROS::loop() {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <_ZN3ROS4loopEv+0x10>)
 8002c3e:	f000 f9db 	bl	8002ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2400fccc 	.word	0x2400fccc

08002c4c <_ZN3ROS10PubCarVnowEv>:

void ROS::PubCarVnow() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
	NowCarInfo = omni.GetNowCarInfo();
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <_ZN3ROS10PubCarVnowEv+0x54>)
 8002c52:	f7fe f99a 	bl	8000f8a <_ZN4Omni13GetNowCarInfoEv>
 8002c56:	eeb0 5b40 	vmov.f64	d5, d0
 8002c5a:	eeb0 6b41 	vmov.f64	d6, d1
 8002c5e:	eeb0 7b42 	vmov.f64	d7, d2
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c64:	ed83 5b00 	vstr	d5, [r3]
 8002c68:	ed83 6b02 	vstr	d6, [r3, #8]
 8002c6c:	ed83 7b04 	vstr	d7, [r3, #16]

	CarVnow.linear.x = NowCarInfo.Vx;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002c78:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CarVnow.linear.y = NowCarInfo.Vy;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c82:	4909      	ldr	r1, [pc, #36]	; (8002ca8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002c84:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CarVnow.angular.z = NowCarInfo.Omega;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c8e:	4906      	ldr	r1, [pc, #24]	; (8002ca8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002c90:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	CarVelPub.publish(&CarVnow);
 8002c94:	4904      	ldr	r1, [pc, #16]	; (8002ca8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <_ZN3ROS10PubCarVnowEv+0x60>)
 8002c98:	f7ff fdb5 	bl	8002806 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	24000098 	.word	0x24000098
 8002ca4:	24010650 	.word	0x24010650
 8002ca8:	24010608 	.word	0x24010608
 8002cac:	240106c8 	.word	0x240106c8

08002cb0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <HAL_UART_TxCpltCallback+0x20>)
 8002cba:	f000 fb76 	bl	80033aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fed5 	bl	8002a70 <_ZN13STM32Hardware5flushEv>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2400fccc 	.word	0x2400fccc

08002cd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8002cdc:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <HAL_UART_RxCpltCallback+0x20>)
 8002cde:	f000 fb64 	bl	80033aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fe84 	bl	80029f2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2400fccc 	.word	0x2400fccc

08002cf8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d80d      	bhi.n	8002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	fa22 f103 	lsr.w	r1, r2, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	b2ca      	uxtb	r2, r1
 8002d1e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e7ee      	b.n	8002d06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d811      	bhi.n	8002d72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	440a      	add	r2, r1
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	00d2      	lsls	r2, r2, #3
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e7ea      	b.n	8002d48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	0800e338 	.word	0x0800e338

08002da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffe8 	bl	8002d80 <_ZN3ros15NodeHandleBase_C1Ev>
 8002db0:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fdf2 	bl	80029a4 <_ZN13STM32HardwareC1Ev>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fa40 	bl	8002254 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b18      	cmp	r3, #24
 8002ddc:	d80b      	bhi.n	8002df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e7f0      	b.n	8002dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b18      	cmp	r3, #24
 8002dfe:	d80a      	bhi.n	8002e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e08:	2100      	movs	r1, #0
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	3301      	adds	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e7f1      	b.n	8002dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e20:	d20a      	bcs.n	8002e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e7f0      	b.n	8002e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e42:	d20a      	bcs.n	8002e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e7f0      	b.n	8002e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	0800e30c 	.word	0x0800e30c

08002ea0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	0800e320 	.word	0x0800e320

08002ec0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ffe5 	bl	8002ea0 <_ZN3ros11Subscriber_C1Ev>
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3310      	adds	r3, #16
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fdbd 	bl	8001a60 <_ZN13geometry_msgs5TwistC1Ev>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
  };
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	0800e2f4 	.word	0x0800e2f4

08002f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fd61 	bl	80029dc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b18      	cmp	r3, #24
 8002f54:	dc19      	bgt.n	8002f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
        return true;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e004      	b.n	8002f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e7e2      	b.n	8002f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002f8a:	2300      	movs	r3, #0
  }
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b18      	cmp	r3, #24
 8002faa:	dc1e      	bgt.n	8002fea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d111      	bne.n	8002fe2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	60da      	str	r2, [r3, #12]
        return true;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e004      	b.n	8002fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e7dd      	b.n	8002fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002fea:	2300      	movs	r3, #0
  }
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fdd5 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 800300a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800301a:	4293      	cmp	r3, r2
 800301c:	d903      	bls.n	8003026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d903      	bls.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800304a:	2b00      	cmp	r3, #0
 800304c:	d014      	beq.n	8003078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fdae 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003064:	429a      	cmp	r2, r3
 8003066:	bf8c      	ite	hi
 8003068:	2301      	movhi	r3, #1
 800306a:	2300      	movls	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003072:	f06f 0301 	mvn.w	r3, #1
 8003076:	e194      	b.n	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fcc9 	bl	8002a14 <_ZN13STM32Hardware4readEv>
 8003082:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f2c0 8174 	blt.w	8003374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d11e      	bne.n	80030e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	b2d1      	uxtb	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	460a      	mov	r2, r1
 80030be:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1b4      	bne.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2208      	movs	r2, #8
 80030de:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030e2:	e7af      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d128      	bne.n	8003140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2bff      	cmp	r3, #255	; 0xff
 80030f2:	d10d      	bne.n	8003110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f103 0214 	add.w	r2, r3, #20
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800310e:	e799      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fd4d 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	bf8c      	ite	hi
 8003128:	2301      	movhi	r3, #1
 800312a:	2300      	movls	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d088      	beq.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800313a:	f06f 0301 	mvn.w	r3, #1
 800313e:	e130      	b.n	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003146:	2b01      	cmp	r3, #1
 8003148:	d118      	bne.n	800317c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2bfe      	cmp	r3, #254	; 0xfe
 800314e:	d107      	bne.n	8003160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800315e:	e771      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f af68 	bne.w	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f924 	bl	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800317a:	e763      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003182:	2b02      	cmp	r3, #2
 8003184:	d113      	bne.n	80031ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80031ac:	e74a      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d110      	bne.n	80031da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	441a      	add	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031d8:	e734      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d116      	bne.n	8003212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80031ea:	425a      	negs	r2, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	bf58      	it	pl
 80031f2:	4253      	negpl	r3, r2
 80031f4:	2bff      	cmp	r3, #255	; 0xff
 80031f6:	d107      	bne.n	8003208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003206:	e71d      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003210:	e718      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003218:	2b05      	cmp	r3, #5
 800321a:	d10f      	bne.n	800323c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800323a:	e703      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003242:	2b06      	cmp	r3, #6
 8003244:	d117      	bne.n	8003276 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2207      	movs	r2, #7
 800325c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f aeec 	bne.w	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2208      	movs	r2, #8
 8003270:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003274:	e6e6      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800327c:	2b08      	cmp	r3, #8
 800327e:	f47f aee1 	bne.w	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003290:	425a      	negs	r2, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	bf58      	it	pl
 8003298:	4253      	negpl	r3, r2
 800329a:	2bff      	cmp	r3, #255	; 0xff
 800329c:	f47f aed2 	bne.w	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d110      	bne.n	80032cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f889 	bl	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8a4 	bl	80033fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ca:	e06a      	b.n	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032d2:	2b0a      	cmp	r3, #10
 80032d4:	d107      	bne.n	80032e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f96c 	bl	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80032e4:	e6ae      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032ec:	2b06      	cmp	r3, #6
 80032ee:	d10e      	bne.n	800330e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7ff f8dd 	bl	80024be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800330c:	e69a      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003314:	2b0b      	cmp	r3, #11
 8003316:	d104      	bne.n	8003322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003320:	e690      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003328:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f43f ae84 	beq.w	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003342:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f202 2222 	addw	r2, r2, #546	; 0x222
 800334c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003356:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800336e:	4611      	mov	r1, r2
 8003370:	4798      	blx	r3
    while (true)
 8003372:	e667      	b.n	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003374:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00f      	beq.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800338e:	4293      	cmp	r3, r2
 8003390:	d906      	bls.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f815 	bl	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80033a0:	2300      	movs	r3, #0
  }
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
  }
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fbdc 	bl	8001b8c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f107 020c 	add.w	r2, r7, #12
 80033de:	210a      	movs	r1, #10
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
    rt_time = hardware_.time();
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fbe3 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80033fe:	b590      	push	{r4, r7, lr}
 8003400:	b08b      	sub	sp, #44	; 0x2c
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fcae 	bl	8001d6c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	2b18      	cmp	r3, #24
 8003418:	dc63      	bgt.n	80034e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d056      	beq.n	80034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	b29b      	uxth	r3, r3
 800343e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3308      	adds	r3, #8
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4608      	mov	r0, r1
 800347a:	4798      	blx	r3
 800347c:	4603      	mov	r3, r0
 800347e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4608      	mov	r0, r1
 80034a8:	4798      	blx	r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80034ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681c      	ldr	r4, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff f9b0 	bl	800282e <_ZN3ros9Publisher15getEndpointTypeEv>
 80034ce:	4601      	mov	r1, r0
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	461a      	mov	r2, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	3301      	adds	r3, #1
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	e798      	b.n	8003414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b18      	cmp	r3, #24
 80034ea:	dc5f      	bgt.n	80035ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80034f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d053      	beq.n	80035a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	b29b      	uxth	r3, r3
 800350c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003526:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3308      	adds	r3, #8
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4608      	mov	r0, r1
 800353e:	4798      	blx	r3
 8003540:	4603      	mov	r3, r0
 8003542:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	f202 2222 	addw	r2, r2, #546	; 0x222
 800354c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4608      	mov	r0, r1
 8003564:	4798      	blx	r3
 8003566:	4603      	mov	r3, r0
 8003568:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800356a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681c      	ldr	r4, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800357e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	f202 2222 	addw	r2, r2, #546	; 0x222
 800358a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3304      	adds	r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4608      	mov	r0, r1
 8003596:	4798      	blx	r3
 8003598:	4601      	mov	r1, r0
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	461a      	mov	r2, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	3301      	adds	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	e79c      	b.n	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80035b4:	bf00      	nop
 80035b6:	372c      	adds	r7, #44	; 0x2c
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}

080035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fade 	bl	8001b8c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff faed 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80035e6:	f107 0308 	add.w	r3, r7, #8
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fb3d 	bl	8001c6c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4915      	ldr	r1, [pc, #84]	; (800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80035f8:	fba1 1303 	umull	r1, r3, r1, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003602:	6939      	ldr	r1, [r7, #16]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003608:	fba3 0302 	umull	r0, r3, r3, r2
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003612:	fb00 f303 	mul.w	r3, r0, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	440b      	add	r3, r1
 8003620:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8a6 	bl	800377c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fabd 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	10624dd3 	.word	0x10624dd3
 8003650:	000f4240 	.word	0x000f4240

08003654 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b63      	cmp	r3, #99	; 0x63
 8003664:	dd09      	ble.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003676:	2300      	movs	r3, #0
 8003678:	e079      	b.n	800376e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003686:	3207      	adds	r2, #7
 8003688:	4611      	mov	r1, r2
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	22ff      	movs	r2, #255	; 0xff
 8003694:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	22fe      	movs	r2, #254	; 0xfe
 800369c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80036c6:	4413      	add	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	b21b      	sxth	r3, r3
 80036e2:	121b      	asrs	r3, r3, #8
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80036f2:	2305      	movs	r3, #5
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3306      	adds	r3, #6
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	dc0d      	bgt.n	800371c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	3301      	adds	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e7ec      	b.n	80036f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3307      	adds	r3, #7
 8003720:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	425a      	negs	r2, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	bf58      	it	pl
 800372c:	4253      	negpl	r3, r2
 800372e:	b2da      	uxtb	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1c59      	adds	r1, r3, #1
 8003734:	6179      	str	r1, [r7, #20]
 8003736:	43d2      	mvns	r2, r2
 8003738:	b2d1      	uxtb	r1, r2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	460a      	mov	r2, r1
 8003740:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374a:	dc0a      	bgt.n	8003762 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4619      	mov	r1, r3
 800375a:	f7ff f9e5 	bl	8002b28 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	e005      	b.n	800376e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003762:	4905      	ldr	r1, [pc, #20]	; (8003778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f849 	bl	80037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800376a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	0800e260 	.word	0x0800e260

0800377c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fa12 	bl	8002bb4 <_ZN13STM32Hardware4timeEv>
 8003790:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4915      	ldr	r1, [pc, #84]	; (80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800379a:	fba1 1303 	umull	r1, r3, r1, r3
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037b2:	fba3 0302 	umull	r0, r3, r3, r2
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037bc:	fb00 f303 	mul.w	r3, r0, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	4a0c      	ldr	r2, [pc, #48]	; (80037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	1aca      	subs	r2, r1, r3
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f7fc ff1e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	10624dd3 	.word	0x10624dd3
 80037f4:	000f4240 	.word	0x000f4240
 80037f8:	3b9aca00 	.word	0x3b9aca00

080037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	2103      	movs	r1, #3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f804 	bl	8003818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	460b      	mov	r3, r1
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fc62 	bl	80020f4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003830:	7afb      	ldrb	r3, [r7, #11]
 8003832:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f107 0214 	add.w	r2, r7, #20
 8003842:	2107      	movs	r1, #7
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	4798      	blx	r3
  }
 8003848:	bf00      	nop
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_Z41__static_initialization_and_destruction_0ii>:

void ROS::init(void) {
//	nh.getHardware()->init();
}
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d116      	bne.n	800388e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800386a:	480b      	ldr	r0, [pc, #44]	; (8003898 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800386c:	f7ff fa98 	bl	8002da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist CarVnow;
 8003870:	480a      	ldr	r0, [pc, #40]	; (800389c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003872:	f7fe f8f5 	bl	8001a60 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> CarVelSub("cmd_vel", ROS::GoalVel_CB);
 8003876:	2301      	movs	r3, #1
 8003878:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800387c:	480a      	ldr	r0, [pc, #40]	; (80038a8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800387e:	f7ff fb1f 	bl	8002ec0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher CarVelPub("Toposition", &CarVnow);
 8003882:	2300      	movs	r3, #0
 8003884:	4a05      	ldr	r2, [pc, #20]	; (800389c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003886:	4909      	ldr	r1, [pc, #36]	; (80038ac <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800388a:	f7fe ffa5 	bl	80027d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2400fccc 	.word	0x2400fccc
 800389c:	24010608 	.word	0x24010608
 80038a0:	08002bcd 	.word	0x08002bcd
 80038a4:	0800e29c 	.word	0x0800e29c
 80038a8:	24010668 	.word	0x24010668
 80038ac:	0800e2a4 	.word	0x0800e2a4
 80038b0:	240106c8 	.word	0x240106c8

080038b4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3310      	adds	r3, #16
 80038c2:	6839      	ldr	r1, [r7, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe f90d 	bl	8001ae4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	3210      	adds	r2, #16
 80038d2:	4610      	mov	r0, r2
 80038d4:	4798      	blx	r3
  }
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3310      	adds	r3, #16
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe f914 	bl	8001b30 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003908:	4603      	mov	r3, r0
  }
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3310      	adds	r3, #16
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe f914 	bl	8001b4c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003924:	4603      	mov	r3, r0
  }
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
    return configured_;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_GLOBAL__sub_I_nh>:
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
 800394c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003950:	2001      	movs	r0, #1
 8003952:	f7ff ff7d 	bl	8003850 <_Z41__static_initialization_and_destruction_0ii>
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim12;

// Count ROS frequency.
static int ROS_CAR_FREQUENCY = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d122      	bne.n	80039b0 <HAL_TIM_PeriodElapsedCallback+0x58>

		// Update Car Vnow
		omni.UpdateNowCarInfo();
 800396a:	4818      	ldr	r0, [pc, #96]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800396c:	f7fd f900 	bl	8000b70 <_ZN4Omni16UpdateNowCarInfoEv>

		// Update four wheel's PID value.
		omni.Update_PID();
 8003970:	4816      	ldr	r0, [pc, #88]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003972:	f7fd f99c 	bl	8000cae <_ZN4Omni10Update_PIDEv>

		// Output GPIO and PWM
		omni.Move();
 8003976:	4815      	ldr	r0, [pc, #84]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003978:	f7fd f9d2 	bl	8000d20 <_ZN4Omni4MoveEv>

		// Debug from Live Expressions ( Optional )
		omni.SetMotorVgoal();
 800397c:	4813      	ldr	r0, [pc, #76]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800397e:	f7fd fa87 	bl	8000e90 <_ZN4Omni13SetMotorVgoalEv>

		// ROS pub -> Mecanum
		if (++ROS_CAR_FREQUENCY >= ROS_CAR_PUB_FREQUENCY) {
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b09      	cmp	r3, #9
 8003992:	bfcc      	ite	gt
 8003994:	2301      	movgt	r3, #1
 8003996:	2300      	movle	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00f      	beq.n	80039be <HAL_TIM_PeriodElapsedCallback+0x66>
			ROS_CAR_FREQUENCY = 0;
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
			omni.Get_Car_location();
 80039a4:	4809      	ldr	r0, [pc, #36]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039a6:	f7fd f8bf 	bl	8000b28 <_ZN4Omni16Get_Car_locationEv>
			ROS::PubCarVnow();
 80039aa:	f7ff f94f 	bl	8002c4c <_ZN3ROS10PubCarVnowEv>
		}
	}
	else if (htim->Instance == TIM7) {
		ROS::loop();
	}
}
 80039ae:	e006      	b.n	80039be <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim->Instance == TIM7) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PeriodElapsedCallback+0x66>
		ROS::loop();
 80039ba:	f7ff f93d 	bl	8002c38 <_ZN3ROS4loopEv>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40001c00 	.word	0x40001c00
 80039cc:	24000098 	.word	0x24000098
 80039d0:	240106dc 	.word	0x240106dc
 80039d4:	40001400 	.word	0x40001400

080039d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80039dc:	f001 f98a 	bl	8004cf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80039e0:	f000 f81c 	bl	8003a1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80039e4:	f000 fc2a 	bl	800423c <MX_GPIO_Init>
	MX_TIM2_Init();
 80039e8:	f000 f888 	bl	8003afc <MX_TIM2_Init>
	MX_TIM3_Init();
 80039ec:	f000 f8da 	bl	8003ba4 <MX_TIM3_Init>
	MX_TIM4_Init();
 80039f0:	f000 f92e 	bl	8003c50 <MX_TIM4_Init>
	MX_TIM5_Init();
 80039f4:	f000 f982 	bl	8003cfc <MX_TIM5_Init>
	MX_TIM12_Init();
 80039f8:	f000 fa9e 	bl	8003f38 <MX_TIM12_Init>
	MX_TIM15_Init();
 80039fc:	f000 fb10 	bl	8004020 <MX_TIM15_Init>
	MX_TIM13_Init();
 8003a00:	f000 faea 	bl	8003fd8 <MX_TIM13_Init>
	MX_DMA_Init();
 8003a04:	f000 fbf2 	bl	80041ec <MX_DMA_Init>
	MX_USART1_UART_Init();
 8003a08:	f000 fb9c 	bl	8004144 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003a0c:	f000 f9cc 	bl	8003da8 <MX_TIM7_Init>
	MX_TIM8_Init();
 8003a10:	f000 fa00 	bl	8003e14 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */

	main_function();
 8003a14:	f000 fcde 	bl	80043d4 <main_function>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003a18:	e7fe      	b.n	8003a18 <main+0x40>
	...

08003a1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b09c      	sub	sp, #112	; 0x70
 8003a20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a26:	224c      	movs	r2, #76	; 0x4c
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f00a f9dc 	bl	800dde8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	2220      	movs	r2, #32
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00a f9d6 	bl	800dde8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003a3c:	2002      	movs	r0, #2
 8003a3e:	f004 faf7 	bl	8008030 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <SystemClock_Config+0xdc>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	; (8003af8 <SystemClock_Config+0xdc>)
 8003a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a54:	6193      	str	r3, [r2, #24]
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <SystemClock_Config+0xdc>)
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8003a62:	bf00      	nop
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <SystemClock_Config+0xdc>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a70:	d1f8      	bne.n	8003a64 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a80:	2302      	movs	r3, #2
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003a84:	2304      	movs	r3, #4
 8003a86:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 256;
 8003a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a92:	2302      	movs	r3, #2
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003a96:	2302      	movs	r3, #2
 8003a98:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fafa 	bl	80080a4 <HAL_RCC_OscConfig>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <SystemClock_Config+0x9e>
		Error_Handler();
 8003ab6:	f000 fc87 	bl	80043c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8003aba:	233f      	movs	r3, #63	; 0x3f
 8003abc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003ace:	2340      	movs	r3, #64	; 0x40
 8003ad0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003ad8:	2340      	movs	r3, #64	; 0x40
 8003ada:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 fe8d 	bl	8008800 <HAL_RCC_ClockConfig>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <SystemClock_Config+0xd4>
		Error_Handler();
 8003aec:	f000 fc6c 	bl	80043c8 <Error_Handler>
	}
}
 8003af0:	bf00      	nop
 8003af2:	3770      	adds	r7, #112	; 0x70
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	58024800 	.word	0x58024800

08003afc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f00a f96c 	bl	800dde8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b10:	463b      	mov	r3, r7
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b20:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003b22:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b34:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b42:	2303      	movs	r3, #3
 8003b44:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	480c      	ldr	r0, [pc, #48]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b6e:	f006 ff41 	bl	800a9f4 <HAL_TIM_Encoder_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM2_Init+0x80>
		Error_Handler();
 8003b78:	f000 fc26 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003b84:	463b      	mov	r3, r7
 8003b86:	4619      	mov	r1, r3
 8003b88:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_TIM2_Init+0xa4>)
 8003b8a:	f007 fe65 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM2_Init+0x9c>
		Error_Handler();
 8003b94:	f000 fc18 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003b98:	bf00      	nop
 8003b9a:	3730      	adds	r7, #48	; 0x30
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	240106e0 	.word	0x240106e0

08003ba4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08c      	sub	sp, #48	; 0x30
 8003ba8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f00a f918 	bl	800dde8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003bb8:	463b      	mov	r3, r7
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003bc2:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003bc4:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <MX_TIM3_Init+0xa8>)
 8003bc6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003bc8:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bda:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003be8:	2303      	movs	r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c00:	2301      	movs	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	4619      	mov	r1, r3
 8003c12:	480d      	ldr	r0, [pc, #52]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003c14:	f006 feee 	bl	800a9f4 <HAL_TIM_Encoder_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003c1e:	f000 fbd3 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4806      	ldr	r0, [pc, #24]	; (8003c48 <MX_TIM3_Init+0xa4>)
 8003c30:	f007 fe12 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_TIM3_Init+0x9a>
		Error_Handler();
 8003c3a:	f000 fbc5 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003c3e:	bf00      	nop
 8003c40:	3730      	adds	r7, #48	; 0x30
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2401072c 	.word	0x2401072c
 8003c4c:	40000400 	.word	0x40000400

08003c50 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f00a f8c2 	bl	800dde8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c64:	463b      	mov	r3, r7
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <MX_TIM4_Init+0xa8>)
 8003c72:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c86:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c94:	2303      	movs	r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cac:	2301      	movs	r3, #1
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	480d      	ldr	r0, [pc, #52]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003cc0:	f006 fe98 	bl	800a9f4 <HAL_TIM_Encoder_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003cca:	f000 fb7d 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <MX_TIM4_Init+0xa4>)
 8003cdc:	f007 fdbc 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM4_Init+0x9a>
		Error_Handler();
 8003ce6:	f000 fb6f 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	3730      	adds	r7, #48	; 0x30
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	24010778 	.word	0x24010778
 8003cf8:	40000800 	.word	0x40000800

08003cfc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f00a f86c 	bl	800dde8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d10:	463b      	mov	r3, r7
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d1c:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <MX_TIM5_Init+0xa8>)
 8003d1e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003d20:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d32:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3a:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d40:	2303      	movs	r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d6c:	f006 fe42 	bl	800a9f4 <HAL_TIM_Encoder_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM5_Init+0x7e>
		Error_Handler();
 8003d76:	f000 fb27 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003d82:	463b      	mov	r3, r7
 8003d84:	4619      	mov	r1, r3
 8003d86:	4806      	ldr	r0, [pc, #24]	; (8003da0 <MX_TIM5_Init+0xa4>)
 8003d88:	f007 fd66 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_TIM5_Init+0x9a>
		Error_Handler();
 8003d92:	f000 fb19 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003d96:	bf00      	nop
 8003d98:	3730      	adds	r7, #48	; 0x30
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	240107c4 	.word	0x240107c4
 8003da4:	40000c00 	.word	0x40000c00

08003da8 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <MX_TIM7_Init+0x68>)
 8003dbc:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 127;
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003dc0:	227f      	movs	r2, #127	; 0x7f
 8003dc2:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9999;
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003dcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003dd0:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003dda:	f006 fbb9 	bl	800a550 <HAL_TIM_Base_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003de4:	f000 faf0 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4805      	ldr	r0, [pc, #20]	; (8003e0c <MX_TIM7_Init+0x64>)
 8003df6:	f007 fd2f 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM7_Init+0x5c>
		Error_Handler();
 8003e00:	f000 fae2 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	24010810 	.word	0x24010810
 8003e10:	40001400 	.word	0x40001400

08003e14 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b098      	sub	sp, #96	; 0x60
 8003e18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	611a      	str	r2, [r3, #16]
 8003e36:	615a      	str	r2, [r3, #20]
 8003e38:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2234      	movs	r2, #52	; 0x34
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f009 ffd1 	bl	800dde8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003e46:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e48:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <MX_TIM8_Init+0x120>)
 8003e4a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 12799;
 8003e4c:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e4e:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8003e52:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e54:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 9999;
 8003e5a:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e60:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003e68:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003e74:	482e      	ldr	r0, [pc, #184]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e76:	f006 fc49 	bl	800a70c <HAL_TIM_PWM_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM8_Init+0x70>
		Error_Handler();
 8003e80:	f000 faa2 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8003e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e94:	4619      	mov	r1, r3
 8003e96:	4826      	ldr	r0, [pc, #152]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003e98:	f007 fcde 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_TIM8_Init+0x92>
		Error_Handler();
 8003ea2:	f000 fa91 	bl	80043c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ea6:	2360      	movs	r3, #96	; 0x60
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 5000;
 8003eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003ec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4818      	ldr	r0, [pc, #96]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003ece:	f006 ffe5 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_TIM8_Init+0xc8>
		Error_Handler();
 8003ed8:	f000 fa76 	bl	80043c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ef4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4807      	ldr	r0, [pc, #28]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003f12:	f007 fd3d 	bl	800b990 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM8_Init+0x10c>
		Error_Handler();
 8003f1c:	f000 fa54 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003f20:	4803      	ldr	r0, [pc, #12]	; (8003f30 <MX_TIM8_Init+0x11c>)
 8003f22:	f000 fc2d 	bl	8004780 <HAL_TIM_MspPostInit>

}
 8003f26:	bf00      	nop
 8003f28:	3760      	adds	r7, #96	; 0x60
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2401085c 	.word	0x2401085c
 8003f34:	40010400 	.word	0x40010400

08003f38 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
 8003f4c:	615a      	str	r2, [r3, #20]
 8003f4e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f52:	4a20      	ldr	r2, [pc, #128]	; (8003fd4 <MX_TIM12_Init+0x9c>)
 8003f54:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 3199;
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f64:	f640 427f 	movw	r2, #3199	; 0xc7f
 8003f68:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8003f76:	4816      	ldr	r0, [pc, #88]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f78:	f006 fbc8 	bl	800a70c <HAL_TIM_PWM_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM12_Init+0x4e>
		Error_Handler();
 8003f82:	f000 fa21 	bl	80043c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f86:	2360      	movs	r3, #96	; 0x60
 8003f88:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003f9e:	f006 ff7d 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM12_Init+0x74>
		Error_Handler();
 8003fa8:	f000 fa0e 	bl	80043c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	2204      	movs	r2, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4807      	ldr	r0, [pc, #28]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003fb4:	f006 ff72 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM12_Init+0x8a>
		Error_Handler();
 8003fbe:	f000 fa03 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8003fc2:	4803      	ldr	r0, [pc, #12]	; (8003fd0 <MX_TIM12_Init+0x98>)
 8003fc4:	f000 fbdc 	bl	8004780 <HAL_TIM_MspPostInit>

}
 8003fc8:	bf00      	nop
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	240108a8 	.word	0x240108a8
 8003fd4:	40001800 	.word	0x40001800

08003fd8 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <MX_TIM13_Init+0x40>)
 8003fde:	4a0f      	ldr	r2, [pc, #60]	; (800401c <MX_TIM13_Init+0x44>)
 8003fe0:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 127;
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <MX_TIM13_Init+0x40>)
 8003fe4:	227f      	movs	r2, #127	; 0x7f
 8003fe6:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <MX_TIM13_Init+0x40>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <MX_TIM13_Init+0x40>)
 8003ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ff4:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <MX_TIM13_Init+0x40>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_TIM13_Init+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8004002:	4805      	ldr	r0, [pc, #20]	; (8004018 <MX_TIM13_Init+0x40>)
 8004004:	f006 faa4 	bl	800a550 <HAL_TIM_Base_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800400e:	f000 f9db 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	240108f4 	.word	0x240108f4
 800401c:	40001c00 	.word	0x40001c00

08004020 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b098      	sub	sp, #96	; 0x60
 8004024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004032:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	609a      	str	r2, [r3, #8]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	611a      	str	r2, [r3, #16]
 8004042:	615a      	str	r2, [r3, #20]
 8004044:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004046:	1d3b      	adds	r3, r7, #4
 8004048:	2234      	movs	r2, #52	; 0x34
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f009 fecb 	bl	800dde8 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004052:	4b3a      	ldr	r3, [pc, #232]	; (800413c <MX_TIM15_Init+0x11c>)
 8004054:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <MX_TIM15_Init+0x120>)
 8004056:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8004058:	4b38      	ldr	r3, [pc, #224]	; (800413c <MX_TIM15_Init+0x11c>)
 800405a:	2200      	movs	r2, #0
 800405c:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <MX_TIM15_Init+0x11c>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 3199;
 8004064:	4b35      	ldr	r3, [pc, #212]	; (800413c <MX_TIM15_Init+0x11c>)
 8004066:	f640 427f 	movw	r2, #3199	; 0xc7f
 800406a:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800406c:	4b33      	ldr	r3, [pc, #204]	; (800413c <MX_TIM15_Init+0x11c>)
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8004072:	4b32      	ldr	r3, [pc, #200]	; (800413c <MX_TIM15_Init+0x11c>)
 8004074:	2200      	movs	r2, #0
 8004076:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004078:	4b30      	ldr	r3, [pc, #192]	; (800413c <MX_TIM15_Init+0x11c>)
 800407a:	2200      	movs	r2, #0
 800407c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 800407e:	482f      	ldr	r0, [pc, #188]	; (800413c <MX_TIM15_Init+0x11c>)
 8004080:	f006 fb44 	bl	800a70c <HAL_TIM_PWM_Init>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_TIM15_Init+0x6e>
		Error_Handler();
 800408a:	f000 f99d 	bl	80043c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004092:	2300      	movs	r3, #0
 8004094:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK) {
 8004096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800409a:	4619      	mov	r1, r3
 800409c:	4827      	ldr	r0, [pc, #156]	; (800413c <MX_TIM15_Init+0x11c>)
 800409e:	f007 fbdb 	bl	800b858 <HAL_TIMEx_MasterConfigSynchronization>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_TIM15_Init+0x8c>
		Error_Handler();
 80040a8:	f000 f98e 	bl	80043c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ac:	2360      	movs	r3, #96	; 0x60
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040b4:	2300      	movs	r3, #0
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040b8:	2300      	movs	r3, #0
 80040ba:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040c0:	2300      	movs	r3, #0
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040c4:	2300      	movs	r3, #0
 80040c6:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80040c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040cc:	2200      	movs	r2, #0
 80040ce:	4619      	mov	r1, r3
 80040d0:	481a      	ldr	r0, [pc, #104]	; (800413c <MX_TIM15_Init+0x11c>)
 80040d2:	f006 fee3 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM15_Init+0xc0>
		Error_Handler();
 80040dc:	f000 f974 	bl	80043c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80040e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040e4:	2204      	movs	r2, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4814      	ldr	r0, [pc, #80]	; (800413c <MX_TIM15_Init+0x11c>)
 80040ea:	f006 fed7 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM15_Init+0xd8>
		Error_Handler();
 80040f4:	f000 f968 	bl	80043c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800410c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004110:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4807      	ldr	r0, [pc, #28]	; (800413c <MX_TIM15_Init+0x11c>)
 8004120:	f007 fc36 	bl	800b990 <HAL_TIMEx_ConfigBreakDeadTime>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM15_Init+0x10e>
		Error_Handler();
 800412a:	f000 f94d 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 800412e:	4803      	ldr	r0, [pc, #12]	; (800413c <MX_TIM15_Init+0x11c>)
 8004130:	f000 fb26 	bl	8004780 <HAL_TIM_MspPostInit>

}
 8004134:	bf00      	nop
 8004136:	3760      	adds	r7, #96	; 0x60
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	24010940 	.word	0x24010940
 8004140:	40014000 	.word	0x40014000

08004144 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004148:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 800414a:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <MX_USART1_UART_Init+0xa4>)
 800414c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800414e:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004154:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 800415e:	2200      	movs	r2, #0
 8004160:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004164:	2200      	movs	r2, #0
 8004166:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 800416a:	220c      	movs	r2, #12
 800416c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004170:	2200      	movs	r2, #0
 8004172:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004176:	2200      	movs	r2, #0
 8004178:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 800417c:	2200      	movs	r2, #0
 800417e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004180:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004188:	2240      	movs	r2, #64	; 0x40
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
	huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 800418e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
	huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 8004196:	2200      	movs	r2, #0
 8004198:	649a      	str	r2, [r3, #72]	; 0x48
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800419a:	4812      	ldr	r0, [pc, #72]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 800419c:	f007 fcb6 	bl	800bb0c <HAL_UART_Init>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_USART1_UART_Init+0x66>
		Error_Handler();
 80041a6:	f000 f90f 	bl	80043c8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80041aa:	2100      	movs	r1, #0
 80041ac:	480d      	ldr	r0, [pc, #52]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 80041ae:	f009 fcfd 	bl	800dbac <HAL_UARTEx_SetTxFifoThreshold>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_USART1_UART_Init+0x78>
		Error_Handler();
 80041b8:	f000 f906 	bl	80043c8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80041bc:	2100      	movs	r1, #0
 80041be:	4809      	ldr	r0, [pc, #36]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 80041c0:	f009 fd32 	bl	800dc28 <HAL_UARTEx_SetRxFifoThreshold>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_USART1_UART_Init+0x8a>
		Error_Handler();
 80041ca:	f000 f8fd 	bl	80043c8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80041ce:	4805      	ldr	r0, [pc, #20]	; (80041e4 <MX_USART1_UART_Init+0xa0>)
 80041d0:	f009 fcb3 	bl	800db3a <HAL_UARTEx_DisableFifoMode>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_USART1_UART_Init+0x9a>
		Error_Handler();
 80041da:	f000 f8f5 	bl	80043c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2401098c 	.word	0x2401098c
 80041e8:	40011000 	.word	0x40011000

080041ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <MX_DMA_Init+0x4c>)
 80041f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041f8:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <MX_DMA_Init+0x4c>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <MX_DMA_Init+0x4c>)
 8004204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	200b      	movs	r0, #11
 8004216:	f000 feda 	bl	8004fce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800421a:	200b      	movs	r0, #11
 800421c:	f000 fef1 	bl	8005002 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	200c      	movs	r0, #12
 8004226:	f000 fed2 	bl	8004fce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800422a:	200c      	movs	r0, #12
 800422c:	f000 fee9 	bl	8005002 <HAL_NVIC_EnableIRQ>

}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	58024400 	.word	0x58024400

0800423c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004242:	f107 031c 	add.w	r3, r7, #28
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004252:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004258:	4a56      	ldr	r2, [pc, #344]	; (80043b4 <MX_GPIO_Init+0x178>)
 800425a:	f043 0310 	orr.w	r3, r3, #16
 800425e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004262:	4b54      	ldr	r3, [pc, #336]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004276:	4a4f      	ldr	r2, [pc, #316]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004280:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004294:	4a47      	ldr	r2, [pc, #284]	; (80043b4 <MX_GPIO_Init+0x178>)
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800429e:	4b45      	ldr	r3, [pc, #276]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80042ac:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b2:	4a40      	ldr	r2, [pc, #256]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042bc:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	4b3a      	ldr	r3, [pc, #232]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042da:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ee:	4a31      	ldr	r2, [pc, #196]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f8:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <MX_GPIO_Init+0x178>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004306:	2200      	movs	r2, #0
 8004308:	2108      	movs	r1, #8
 800430a:	482b      	ldr	r0, [pc, #172]	; (80043b8 <MX_GPIO_Init+0x17c>)
 800430c:	f003 fe76 	bl	8007ffc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004310:	2200      	movs	r2, #0
 8004312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004316:	4829      	ldr	r0, [pc, #164]	; (80043bc <MX_GPIO_Init+0x180>)
 8004318:	f003 fe70 	bl	8007ffc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800431c:	2200      	movs	r2, #0
 800431e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004322:	4827      	ldr	r0, [pc, #156]	; (80043c0 <MX_GPIO_Init+0x184>)
 8004324:	f003 fe6a 	bl	8007ffc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8004328:	2200      	movs	r2, #0
 800432a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800432e:	4825      	ldr	r0, [pc, #148]	; (80043c4 <MX_GPIO_Init+0x188>)
 8004330:	f003 fe64 	bl	8007ffc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004334:	2308      	movs	r3, #8
 8004336:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004338:	2301      	movs	r3, #1
 800433a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004340:	2300      	movs	r3, #0
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	4619      	mov	r1, r3
 800434a:	481b      	ldr	r0, [pc, #108]	; (80043b8 <MX_GPIO_Init+0x17c>)
 800434c:	f003 fcae 	bl	8007cac <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004354:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004356:	2301      	movs	r3, #1
 8004358:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435e:	2300      	movs	r3, #0
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004362:	f107 031c 	add.w	r3, r7, #28
 8004366:	4619      	mov	r1, r3
 8004368:	4814      	ldr	r0, [pc, #80]	; (80043bc <MX_GPIO_Init+0x180>)
 800436a:	f003 fc9f 	bl	8007cac <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800436e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004372:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004374:	2301      	movs	r3, #1
 8004376:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004380:	f107 031c 	add.w	r3, r7, #28
 8004384:	4619      	mov	r1, r3
 8004386:	480e      	ldr	r0, [pc, #56]	; (80043c0 <MX_GPIO_Init+0x184>)
 8004388:	f003 fc90 	bl	8007cac <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800438c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004390:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004392:	2301      	movs	r3, #1
 8004394:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439a:	2300      	movs	r3, #0
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800439e:	f107 031c 	add.w	r3, r7, #28
 80043a2:	4619      	mov	r1, r3
 80043a4:	4807      	ldr	r0, [pc, #28]	; (80043c4 <MX_GPIO_Init+0x188>)
 80043a6:	f003 fc81 	bl	8007cac <HAL_GPIO_Init>

}
 80043aa:	bf00      	nop
 80043ac:	3730      	adds	r7, #48	; 0x30
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
 80043b8:	58021000 	.word	0x58021000
 80043bc:	58020800 	.word	0x58020800
 80043c0:	58020400 	.word	0x58020400
 80043c4:	58020c00 	.word	0x58020c00

080043c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043cc:	b672      	cpsid	i
}
 80043ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80043d0:	e7fe      	b.n	80043d0 <Error_Handler+0x8>
	...

080043d4 <main_function>:
#include "Omni.h"

// For LED blink
extern TIM_HandleTypeDef htim8;

void main_function() {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	// Init
	ROS::setup();
 80043d8:	f7fe fc14 	bl	8002c04 <_ZN3ROS5setupEv>
	omni.Init();
 80043dc:	4803      	ldr	r0, [pc, #12]	; (80043ec <main_function+0x18>)
 80043de:	f7fc fb4b 	bl	8000a78 <_ZN4Omni4InitEv>

	// For LED blink
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80043e2:	2100      	movs	r1, #0
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <main_function+0x1c>)
 80043e6:	f006 f9e9 	bl	800a7bc <HAL_TIM_PWM_Start>
#ifdef DEBUGGER_MODE
	DebugMode.DebuggingMode();
	return;
#endif

	while (true) {
 80043ea:	e7fe      	b.n	80043ea <main_function+0x16>
 80043ec:	24000098 	.word	0x24000098
 80043f0:	2401085c 	.word	0x2401085c

080043f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_MspInit+0x30>)
 80043fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_MspInit+0x30>)
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_MspInit+0x30>)
 800440c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	58024400 	.word	0x58024400

08004428 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b090      	sub	sp, #64	; 0x40
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d14e      	bne.n	80044e8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800444a:	4b77      	ldr	r3, [pc, #476]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800444c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004450:	4a75      	ldr	r2, [pc, #468]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800445a:	4b73      	ldr	r3, [pc, #460]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800445c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800446a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446e:	4a6e      	ldr	r2, [pc, #440]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004478:	4b6b      	ldr	r3, [pc, #428]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800447a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800448c:	4a66      	ldr	r2, [pc, #408]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004496:	4b64      	ldr	r3, [pc, #400]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	2302      	movs	r3, #2
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044b6:	2301      	movs	r3, #1
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044be:	4619      	mov	r1, r3
 80044c0:	485a      	ldr	r0, [pc, #360]	; (800462c <HAL_TIM_Encoder_MspInit+0x204>)
 80044c2:	f003 fbf3 	bl	8007cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044c6:	2308      	movs	r3, #8
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2300      	movs	r3, #0
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044d6:	2301      	movs	r3, #1
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044de:	4619      	mov	r1, r3
 80044e0:	4853      	ldr	r0, [pc, #332]	; (8004630 <HAL_TIM_Encoder_MspInit+0x208>)
 80044e2:	f003 fbe3 	bl	8007cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80044e6:	e09b      	b.n	8004620 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a51      	ldr	r2, [pc, #324]	; (8004634 <HAL_TIM_Encoder_MspInit+0x20c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d12e      	bne.n	8004550 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044f2:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80044f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044f8:	4a4b      	ldr	r2, [pc, #300]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004502:	4b49      	ldr	r3, [pc, #292]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004510:	4b45      	ldr	r3, [pc, #276]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004516:	4a44      	ldr	r2, [pc, #272]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004520:	4b41      	ldr	r3, [pc, #260]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004532:	2302      	movs	r3, #2
 8004534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	2300      	movs	r3, #0
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	2300      	movs	r3, #0
 800453c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800453e:	2302      	movs	r3, #2
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004546:	4619      	mov	r1, r3
 8004548:	4839      	ldr	r0, [pc, #228]	; (8004630 <HAL_TIM_Encoder_MspInit+0x208>)
 800454a:	f003 fbaf 	bl	8007cac <HAL_GPIO_Init>
}
 800454e:	e067      	b.n	8004620 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a38      	ldr	r2, [pc, #224]	; (8004638 <HAL_TIM_Encoder_MspInit+0x210>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d12f      	bne.n	80045ba <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800455a:	4b33      	ldr	r3, [pc, #204]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800455c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004560:	4a31      	ldr	r2, [pc, #196]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004562:	f043 0304 	orr.w	r3, r3, #4
 8004566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800456a:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800456c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004578:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800457a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800457e:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004588:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 800458a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004596:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a4:	2300      	movs	r3, #0
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045a8:	2302      	movs	r3, #2
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b0:	4619      	mov	r1, r3
 80045b2:	4822      	ldr	r0, [pc, #136]	; (800463c <HAL_TIM_Encoder_MspInit+0x214>)
 80045b4:	f003 fb7a 	bl	8007cac <HAL_GPIO_Init>
}
 80045b8:	e032      	b.n	8004620 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a20      	ldr	r2, [pc, #128]	; (8004640 <HAL_TIM_Encoder_MspInit+0x218>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d12d      	bne.n	8004620 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80045c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80045cc:	f043 0308 	orr.w	r3, r3, #8
 80045d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045d4:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80045d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e2:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80045e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e8:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <HAL_TIM_Encoder_MspInit+0x200>)
 80045f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004600:	2303      	movs	r3, #3
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004610:	2302      	movs	r3, #2
 8004612:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004618:	4619      	mov	r1, r3
 800461a:	4804      	ldr	r0, [pc, #16]	; (800462c <HAL_TIM_Encoder_MspInit+0x204>)
 800461c:	f003 fb46 	bl	8007cac <HAL_GPIO_Init>
}
 8004620:	bf00      	nop
 8004622:	3740      	adds	r7, #64	; 0x40
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	58024400 	.word	0x58024400
 800462c:	58020000 	.word	0x58020000
 8004630:	58020400 	.word	0x58020400
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	58020c00 	.word	0x58020c00
 8004640:	40000c00 	.word	0x40000c00

08004644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_TIM_Base_MspInit+0x84>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d117      	bne.n	8004686 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_TIM_Base_MspInit+0x88>)
 8004658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_TIM_Base_MspInit+0x88>)
 800465e:	f043 0320 	orr.w	r3, r3, #32
 8004662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_TIM_Base_MspInit+0x88>)
 8004668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004674:	2200      	movs	r2, #0
 8004676:	2100      	movs	r1, #0
 8004678:	2037      	movs	r0, #55	; 0x37
 800467a:	f000 fca8 	bl	8004fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800467e:	2037      	movs	r0, #55	; 0x37
 8004680:	f000 fcbf 	bl	8005002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004684:	e01b      	b.n	80046be <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM13)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a11      	ldr	r2, [pc, #68]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d116      	bne.n	80046be <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_TIM_Base_MspInit+0x88>)
 8004692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004696:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <HAL_TIM_Base_MspInit+0x88>)
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_TIM_Base_MspInit+0x88>)
 80046a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	202c      	movs	r0, #44	; 0x2c
 80046b4:	f000 fc8b 	bl	8004fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80046b8:	202c      	movs	r0, #44	; 0x2c
 80046ba:	f000 fca2 	bl	8005002 <HAL_NVIC_EnableIRQ>
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40001400 	.word	0x40001400
 80046cc:	58024400 	.word	0x58024400
 80046d0:	40001c00 	.word	0x40001c00

080046d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_TIM_PWM_MspInit+0x9c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d117      	bne.n	8004716 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 80046e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ec:	4a21      	ldr	r2, [pc, #132]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046f6:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 80046f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	202c      	movs	r0, #44	; 0x2c
 800470a:	f000 fc60 	bl	8004fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800470e:	202c      	movs	r0, #44	; 0x2c
 8004710:	f000 fc77 	bl	8005002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004714:	e028      	b.n	8004768 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM12)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_TIM_PWM_MspInit+0xa4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10f      	bne.n	8004740 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 8004722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 8004728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 8004732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
}
 800473e:	e013      	b.n	8004768 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM15)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0d      	ldr	r2, [pc, #52]	; (800477c <HAL_TIM_PWM_MspInit+0xa8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 800474c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_TIM_PWM_MspInit+0xa0>)
 800475c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40010400 	.word	0x40010400
 8004774:	58024400 	.word	0x58024400
 8004778:	40001800 	.word	0x40001800
 800477c:	40014000 	.word	0x40014000

08004780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_TIM_MspPostInit+0x100>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d11f      	bne.n	80047e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a2:	4b38      	ldr	r3, [pc, #224]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 80047a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047a8:	4a36      	ldr	r2, [pc, #216]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047b2:	4b34      	ldr	r3, [pc, #208]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 80047b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047cc:	2300      	movs	r3, #0
 80047ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047d0:	2303      	movs	r3, #3
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	4619      	mov	r1, r3
 80047da:	482b      	ldr	r0, [pc, #172]	; (8004888 <HAL_TIM_MspPostInit+0x108>)
 80047dc:	f003 fa66 	bl	8007cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80047e0:	e049      	b.n	8004876 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM12)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <HAL_TIM_MspPostInit+0x10c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d120      	bne.n	800482e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ec:	4b25      	ldr	r3, [pc, #148]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 80047ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f2:	4a24      	ldr	r2, [pc, #144]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 80047fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800480a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800480e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004810:	2302      	movs	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800481c:	2302      	movs	r3, #2
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4619      	mov	r1, r3
 8004826:	481a      	ldr	r0, [pc, #104]	; (8004890 <HAL_TIM_MspPostInit+0x110>)
 8004828:	f003 fa40 	bl	8007cac <HAL_GPIO_Init>
}
 800482c:	e023      	b.n	8004876 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_TIM_MspPostInit+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d11e      	bne.n	8004876 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 800483a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800483e:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 8004840:	f043 0310 	orr.w	r3, r3, #16
 8004844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_TIM_MspPostInit+0x104>)
 800484a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004856:	2360      	movs	r3, #96	; 0x60
 8004858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485a:	2302      	movs	r3, #2
 800485c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004866:	2304      	movs	r3, #4
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	4619      	mov	r1, r3
 8004870:	4809      	ldr	r0, [pc, #36]	; (8004898 <HAL_TIM_MspPostInit+0x118>)
 8004872:	f003 fa1b 	bl	8007cac <HAL_GPIO_Init>
}
 8004876:	bf00      	nop
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40010400 	.word	0x40010400
 8004884:	58024400 	.word	0x58024400
 8004888:	58020800 	.word	0x58020800
 800488c:	40001800 	.word	0x40001800
 8004890:	58020400 	.word	0x58020400
 8004894:	40014000 	.word	0x40014000
 8004898:	58021000 	.word	0x58021000

0800489c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b0b6      	sub	sp, #216	; 0xd8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048b4:	f107 0310 	add.w	r3, r7, #16
 80048b8:	22b4      	movs	r2, #180	; 0xb4
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f009 fa93 	bl	800dde8 <memset>
  if(huart->Instance==USART1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a57      	ldr	r2, [pc, #348]	; (8004a24 <HAL_UART_MspInit+0x188>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	f040 80a7 	bne.w	8004a1c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048d8:	f107 0310 	add.w	r3, r7, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 fb1b 	bl	8008f18 <HAL_RCCEx_PeriphCLKConfig>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80048e8:	f7ff fd6e 	bl	80043c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048ec:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <HAL_UART_MspInit+0x18c>)
 80048ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f2:	4a4d      	ldr	r2, [pc, #308]	; (8004a28 <HAL_UART_MspInit+0x18c>)
 80048f4:	f043 0310 	orr.w	r3, r3, #16
 80048f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048fc:	4b4a      	ldr	r3, [pc, #296]	; (8004a28 <HAL_UART_MspInit+0x18c>)
 80048fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_UART_MspInit+0x18c>)
 800490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004910:	4a45      	ldr	r2, [pc, #276]	; (8004a28 <HAL_UART_MspInit+0x18c>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800491a:	4b43      	ldr	r3, [pc, #268]	; (8004a28 <HAL_UART_MspInit+0x18c>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004928:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800492c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004942:	2307      	movs	r3, #7
 8004944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800494c:	4619      	mov	r1, r3
 800494e:	4837      	ldr	r0, [pc, #220]	; (8004a2c <HAL_UART_MspInit+0x190>)
 8004950:	f003 f9ac 	bl	8007cac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004956:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <HAL_UART_MspInit+0x198>)
 8004958:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800495a:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <HAL_UART_MspInit+0x194>)
 800495c:	2229      	movs	r2, #41	; 0x29
 800495e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004960:	4b33      	ldr	r3, [pc, #204]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004962:	2200      	movs	r2, #0
 8004964:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004966:	4b32      	ldr	r3, [pc, #200]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004968:	2200      	movs	r2, #0
 800496a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800496c:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <HAL_UART_MspInit+0x194>)
 800496e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004972:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004974:	4b2e      	ldr	r3, [pc, #184]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004976:	2200      	movs	r2, #0
 8004978:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800497a:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_UART_MspInit+0x194>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800498c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800498e:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004990:	2200      	movs	r2, #0
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004994:	4826      	ldr	r0, [pc, #152]	; (8004a30 <HAL_UART_MspInit+0x194>)
 8004996:	f000 fb4f 	bl	8005038 <HAL_DMA_Init>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80049a0:	f7ff fd12 	bl	80043c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_UART_MspInit+0x194>)
 80049a8:	67da      	str	r2, [r3, #124]	; 0x7c
 80049aa:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_UART_MspInit+0x194>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80049b0:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049b2:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <HAL_UART_MspInit+0x1a0>)
 80049b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049b8:	222a      	movs	r2, #42	; 0x2a
 80049ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c2:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049d6:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80049dc:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ea:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80049f0:	4811      	ldr	r0, [pc, #68]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 80049f2:	f000 fb21 	bl	8005038 <HAL_DMA_Init>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80049fc:	f7ff fce4 	bl	80043c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 8004a04:	679a      	str	r2, [r3, #120]	; 0x78
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <HAL_UART_MspInit+0x19c>)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2025      	movs	r0, #37	; 0x25
 8004a12:	f000 fadc 	bl	8004fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a16:	2025      	movs	r0, #37	; 0x25
 8004a18:	f000 faf3 	bl	8005002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a1c:	bf00      	nop
 8004a1e:	37d8      	adds	r7, #216	; 0xd8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40011000 	.word	0x40011000
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	58020000 	.word	0x58020000
 8004a30:	24010a1c 	.word	0x24010a1c
 8004a34:	40020010 	.word	0x40020010
 8004a38:	24010a94 	.word	0x24010a94
 8004a3c:	40020028 	.word	0x40020028

08004a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <NMI_Handler+0x4>

08004a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a4a:	e7fe      	b.n	8004a4a <HardFault_Handler+0x4>

08004a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <MemManage_Handler+0x4>

08004a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <BusFault_Handler+0x4>

08004a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a5c:	e7fe      	b.n	8004a5c <UsageFault_Handler+0x4>

08004a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a8c:	f000 f9a4 	bl	8004dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <DMA1_Stream0_IRQHandler+0x10>)
 8004a9a:	f001 fdf5 	bl	8006688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	24010a1c 	.word	0x24010a1c

08004aa8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <DMA1_Stream1_IRQHandler+0x10>)
 8004aae:	f001 fdeb 	bl	8006688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	24010a94 	.word	0x24010a94

08004abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <USART1_IRQHandler+0x10>)
 8004ac2:	f007 f95b 	bl	800bd7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	2401098c 	.word	0x2401098c

08004ad0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004ad4:	4803      	ldr	r0, [pc, #12]	; (8004ae4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004ad6:	f006 f8c1 	bl	800ac5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004ada:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004adc:	f006 f8be 	bl	800ac5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004ae0:	bf00      	nop
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2401085c 	.word	0x2401085c
 8004ae8:	240108f4 	.word	0x240108f4

08004aec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <TIM7_IRQHandler+0x10>)
 8004af2:	f006 f8b3 	bl	800ac5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	24010810 	.word	0x24010810

08004b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
	return 1;
 8004b04:	2301      	movs	r3, #1
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <_kill>:

int _kill(int pid, int sig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b1a:	f009 f92d 	bl	800dd78 <__errno>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2216      	movs	r2, #22
 8004b22:	601a      	str	r2, [r3, #0]
	return -1;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <_exit>:

void _exit (int status)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ffe7 	bl	8004b10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b42:	e7fe      	b.n	8004b42 <_exit+0x12>

08004b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <_sbrk+0x5c>)
 8004b4e:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <_sbrk+0x60>)
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <_sbrk+0x64>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <_sbrk+0x64>)
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <_sbrk+0x68>)
 8004b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <_sbrk+0x64>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d207      	bcs.n	8004b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b74:	f009 f900 	bl	800dd78 <__errno>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b82:	e009      	b.n	8004b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b84:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <_sbrk+0x64>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <_sbrk+0x64>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <_sbrk+0x64>)
 8004b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	24050000 	.word	0x24050000
 8004ba4:	00000400 	.word	0x00000400
 8004ba8:	24010b0c 	.word	0x24010b0c
 8004bac:	24010b28 	.word	0x24010b28

08004bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <SystemInit+0xd0>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <SystemInit+0xd0>)
 8004bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <SystemInit+0xd4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	2b06      	cmp	r3, #6
 8004bce:	d807      	bhi.n	8004be0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <SystemInit+0xd4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 030f 	bic.w	r3, r3, #15
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <SystemInit+0xd4>)
 8004bda:	f043 0307 	orr.w	r3, r3, #7
 8004bde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004be0:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <SystemInit+0xd8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <SystemInit+0xd8>)
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bec:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <SystemInit+0xd8>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bf2:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <SystemInit+0xd8>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4924      	ldr	r1, [pc, #144]	; (8004c88 <SystemInit+0xd8>)
 8004bf8:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <SystemInit+0xdc>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <SystemInit+0xd4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <SystemInit+0xd4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 030f 	bic.w	r3, r3, #15
 8004c12:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <SystemInit+0xd4>)
 8004c14:	f043 0307 	orr.w	r3, r3, #7
 8004c18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <SystemInit+0xd8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <SystemInit+0xd8>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c26:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <SystemInit+0xd8>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <SystemInit+0xd8>)
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <SystemInit+0xe0>)
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <SystemInit+0xd8>)
 8004c34:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <SystemInit+0xe4>)
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c38:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <SystemInit+0xd8>)
 8004c3a:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <SystemInit+0xe8>)
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <SystemInit+0xd8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <SystemInit+0xd8>)
 8004c46:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <SystemInit+0xe8>)
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <SystemInit+0xd8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <SystemInit+0xd8>)
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <SystemInit+0xe8>)
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <SystemInit+0xd8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <SystemInit+0xd8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <SystemInit+0xd8>)
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c68:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <SystemInit+0xd8>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <SystemInit+0xec>)
 8004c70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000ed00 	.word	0xe000ed00
 8004c84:	52002000 	.word	0x52002000
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c90:	02020200 	.word	0x02020200
 8004c94:	01ff0000 	.word	0x01ff0000
 8004c98:	01010280 	.word	0x01010280
 8004c9c:	52004000 	.word	0x52004000

08004ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ca4:	f7ff ff84 	bl	8004bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ca8:	480c      	ldr	r0, [pc, #48]	; (8004cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004caa:	490d      	ldr	r1, [pc, #52]	; (8004ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cb0:	e002      	b.n	8004cb8 <LoopCopyDataInit>

08004cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cb6:	3304      	adds	r3, #4

08004cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cbc:	d3f9      	bcc.n	8004cb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cc0:	4c0a      	ldr	r4, [pc, #40]	; (8004cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cc4:	e001      	b.n	8004cca <LoopFillZerobss>

08004cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cc8:	3204      	adds	r2, #4

08004cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ccc:	d3fb      	bcc.n	8004cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cce:	f009 f859 	bl	800dd84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cd2:	f7fe fe81 	bl	80039d8 <main>
  bx  lr
 8004cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004cdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004ce0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004ce4:	0800e444 	.word	0x0800e444
  ldr r2, =_sbss
 8004ce8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004cec:	24010b24 	.word	0x24010b24

08004cf0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cf0:	e7fe      	b.n	8004cf0 <ADC3_IRQHandler>
	...

08004cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f000 f95c 	bl	8004fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d00:	f003 ff34 	bl	8008b6c <HAL_RCC_GetSysClockFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_Init+0x68>)
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	4913      	ldr	r1, [pc, #76]	; (8004d60 <HAL_Init+0x6c>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_Init+0x68>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <HAL_Init+0x6c>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <HAL_Init+0x70>)
 8004d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <HAL_Init+0x74>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d3e:	200f      	movs	r0, #15
 8004d40:	f000 f814 	bl	8004d6c <HAL_InitTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e002      	b.n	8004d54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d4e:	f7ff fb51 	bl	80043f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	0800e3ec 	.word	0x0800e3ec
 8004d64:	24000004 	.word	0x24000004
 8004d68:	24000000 	.word	0x24000000

08004d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_InitTick+0x60>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e021      	b.n	8004dc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d80:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <HAL_InitTick+0x64>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_InitTick+0x60>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f941 	bl	800501e <HAL_SYSTICK_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e00e      	b.n	8004dc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d80a      	bhi.n	8004dc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dac:	2200      	movs	r2, #0
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db4:	f000 f90b 	bl	8004fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004db8:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <HAL_InitTick+0x68>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2400000c 	.word	0x2400000c
 8004dd0:	24000000 	.word	0x24000000
 8004dd4:	24000008 	.word	0x24000008

08004dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_IncTick+0x20>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_IncTick+0x24>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4413      	add	r3, r2
 8004de8:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <HAL_IncTick+0x24>)
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	2400000c 	.word	0x2400000c
 8004dfc:	24010b10 	.word	0x24010b10

08004e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return uwTick;
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <HAL_GetTick+0x14>)
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	24010b10 	.word	0x24010b10

08004e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e28:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <__NVIC_SetPriorityGrouping+0x40>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e34:	4013      	ands	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <__NVIC_SetPriorityGrouping+0x44>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e46:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <__NVIC_SetPriorityGrouping+0x40>)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	60d3      	str	r3, [r2, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000ed00 	.word	0xe000ed00
 8004e5c:	05fa0000 	.word	0x05fa0000

08004e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <__NVIC_GetPriorityGrouping+0x18>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f003 0307 	and.w	r3, r3, #7
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	db0b      	blt.n	8004ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	f003 021f 	and.w	r2, r3, #31
 8004e94:	4907      	ldr	r1, [pc, #28]	; (8004eb4 <__NVIC_EnableIRQ+0x38>)
 8004e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	e000e100 	.word	0xe000e100

08004eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	6039      	str	r1, [r7, #0]
 8004ec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	db0a      	blt.n	8004ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	490c      	ldr	r1, [pc, #48]	; (8004f04 <__NVIC_SetPriority+0x4c>)
 8004ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed6:	0112      	lsls	r2, r2, #4
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	440b      	add	r3, r1
 8004edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee0:	e00a      	b.n	8004ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4908      	ldr	r1, [pc, #32]	; (8004f08 <__NVIC_SetPriority+0x50>)
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	0112      	lsls	r2, r2, #4
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	761a      	strb	r2, [r3, #24]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	e000e100 	.word	0xe000e100
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f1c3 0307 	rsb	r3, r3, #7
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	bf28      	it	cs
 8004f2a:	2304      	movcs	r3, #4
 8004f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3304      	adds	r3, #4
 8004f32:	2b06      	cmp	r3, #6
 8004f34:	d902      	bls.n	8004f3c <NVIC_EncodePriority+0x30>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3b03      	subs	r3, #3
 8004f3a:	e000      	b.n	8004f3e <NVIC_EncodePriority+0x32>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43da      	mvns	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	401a      	ands	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	43d9      	mvns	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f64:	4313      	orrs	r3, r2
         );
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3724      	adds	r7, #36	; 0x24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f84:	d301      	bcc.n	8004f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f86:	2301      	movs	r3, #1
 8004f88:	e00f      	b.n	8004faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <SysTick_Config+0x40>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f92:	210f      	movs	r1, #15
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f98:	f7ff ff8e 	bl	8004eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <SysTick_Config+0x40>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fa2:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <SysTick_Config+0x40>)
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	e000e010 	.word	0xe000e010

08004fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff ff29 	bl	8004e18 <__NVIC_SetPriorityGrouping>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fdc:	f7ff ff40 	bl	8004e60 <__NVIC_GetPriorityGrouping>
 8004fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	6978      	ldr	r0, [r7, #20]
 8004fe8:	f7ff ff90 	bl	8004f0c <NVIC_EncodePriority>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ff5f 	bl	8004eb8 <__NVIC_SetPriority>
}
 8004ffa:	bf00      	nop
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	4603      	mov	r3, r0
 800500a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800500c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff ff33 	bl	8004e7c <__NVIC_EnableIRQ>
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ffa4 	bl	8004f74 <SysTick_Config>
 800502c:	4603      	mov	r3, r0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005040:	f7ff fede 	bl	8004e00 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e314      	b.n	800567a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a66      	ldr	r2, [pc, #408]	; (80051f0 <HAL_DMA_Init+0x1b8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d04a      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a65      	ldr	r2, [pc, #404]	; (80051f4 <HAL_DMA_Init+0x1bc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d045      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a63      	ldr	r2, [pc, #396]	; (80051f8 <HAL_DMA_Init+0x1c0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d040      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a62      	ldr	r2, [pc, #392]	; (80051fc <HAL_DMA_Init+0x1c4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d03b      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a60      	ldr	r2, [pc, #384]	; (8005200 <HAL_DMA_Init+0x1c8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d036      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5f      	ldr	r2, [pc, #380]	; (8005204 <HAL_DMA_Init+0x1cc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d031      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a5d      	ldr	r2, [pc, #372]	; (8005208 <HAL_DMA_Init+0x1d0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d02c      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a5c      	ldr	r2, [pc, #368]	; (800520c <HAL_DMA_Init+0x1d4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d027      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a5a      	ldr	r2, [pc, #360]	; (8005210 <HAL_DMA_Init+0x1d8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a59      	ldr	r2, [pc, #356]	; (8005214 <HAL_DMA_Init+0x1dc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d01d      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a57      	ldr	r2, [pc, #348]	; (8005218 <HAL_DMA_Init+0x1e0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a56      	ldr	r2, [pc, #344]	; (800521c <HAL_DMA_Init+0x1e4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a54      	ldr	r2, [pc, #336]	; (8005220 <HAL_DMA_Init+0x1e8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a53      	ldr	r2, [pc, #332]	; (8005224 <HAL_DMA_Init+0x1ec>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a51      	ldr	r2, [pc, #324]	; (8005228 <HAL_DMA_Init+0x1f0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_DMA_Init+0xb8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a50      	ldr	r2, [pc, #320]	; (800522c <HAL_DMA_Init+0x1f4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_DMA_Init+0xbc>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <HAL_DMA_Init+0xbe>
 80050f4:	2300      	movs	r3, #0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 813c 	beq.w	8005374 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <HAL_DMA_Init+0x1b8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a36      	ldr	r2, [pc, #216]	; (80051f4 <HAL_DMA_Init+0x1bc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a34      	ldr	r2, [pc, #208]	; (80051f8 <HAL_DMA_Init+0x1c0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_Init+0x174>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a33      	ldr	r2, [pc, #204]	; (80051fc <HAL_DMA_Init+0x1c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a31      	ldr	r2, [pc, #196]	; (8005200 <HAL_DMA_Init+0x1c8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_Init+0x174>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a30      	ldr	r2, [pc, #192]	; (8005204 <HAL_DMA_Init+0x1cc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2e      	ldr	r2, [pc, #184]	; (8005208 <HAL_DMA_Init+0x1d0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <HAL_DMA_Init+0x1d4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_Init+0x174>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_DMA_Init+0x1d8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <HAL_DMA_Init+0x1dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a28      	ldr	r2, [pc, #160]	; (8005218 <HAL_DMA_Init+0x1e0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_Init+0x174>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a27      	ldr	r2, [pc, #156]	; (800521c <HAL_DMA_Init+0x1e4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a25      	ldr	r2, [pc, #148]	; (8005220 <HAL_DMA_Init+0x1e8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Init+0x174>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_DMA_Init+0x1ec>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_Init+0x174>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <HAL_DMA_Init+0x1f0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_Init+0x174>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a21      	ldr	r2, [pc, #132]	; (800522c <HAL_DMA_Init+0x1f4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <HAL_DMA_Init+0x186>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e007      	b.n	80051ce <HAL_DMA_Init+0x196>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051ce:	e02f      	b.n	8005230 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d0:	f7ff fe16 	bl	8004e00 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d928      	bls.n	8005230 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2203      	movs	r2, #3
 80051e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e244      	b.n	800567a <HAL_DMA_Init+0x642>
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1c8      	bne.n	80051d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4b84      	ldr	r3, [pc, #528]	; (800545c <HAL_DMA_Init+0x424>)
 800524a:	4013      	ands	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005256:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005262:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b04      	cmp	r3, #4
 8005282:	d107      	bne.n	8005294 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	4313      	orrs	r3, r2
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b28      	cmp	r3, #40	; 0x28
 800529a:	d903      	bls.n	80052a4 <HAL_DMA_Init+0x26c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b2e      	cmp	r3, #46	; 0x2e
 80052a2:	d91f      	bls.n	80052e4 <HAL_DMA_Init+0x2ac>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b3e      	cmp	r3, #62	; 0x3e
 80052aa:	d903      	bls.n	80052b4 <HAL_DMA_Init+0x27c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b42      	cmp	r3, #66	; 0x42
 80052b2:	d917      	bls.n	80052e4 <HAL_DMA_Init+0x2ac>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b46      	cmp	r3, #70	; 0x46
 80052ba:	d903      	bls.n	80052c4 <HAL_DMA_Init+0x28c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b48      	cmp	r3, #72	; 0x48
 80052c2:	d90f      	bls.n	80052e4 <HAL_DMA_Init+0x2ac>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b4e      	cmp	r3, #78	; 0x4e
 80052ca:	d903      	bls.n	80052d4 <HAL_DMA_Init+0x29c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b52      	cmp	r3, #82	; 0x52
 80052d2:	d907      	bls.n	80052e4 <HAL_DMA_Init+0x2ac>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b73      	cmp	r3, #115	; 0x73
 80052da:	d905      	bls.n	80052e8 <HAL_DMA_Init+0x2b0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b77      	cmp	r3, #119	; 0x77
 80052e2:	d801      	bhi.n	80052e8 <HAL_DMA_Init+0x2b0>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_DMA_Init+0x2b2>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 0307 	bic.w	r3, r3, #7
 800530c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b04      	cmp	r3, #4
 800531e:	d117      	bne.n	8005350 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f002 fb30 	bl	8007998 <DMA_CheckFifoParam>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e194      	b.n	800567a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f002 fa6b 	bl	8007834 <DMA_CalcBaseAndBitshift>
 800535e:	4603      	mov	r3, r0
 8005360:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	223f      	movs	r2, #63	; 0x3f
 800536c:	409a      	lsls	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	609a      	str	r2, [r3, #8]
 8005372:	e0ca      	b.n	800550a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a39      	ldr	r2, [pc, #228]	; (8005460 <HAL_DMA_Init+0x428>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d022      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a38      	ldr	r2, [pc, #224]	; (8005464 <HAL_DMA_Init+0x42c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01d      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a36      	ldr	r2, [pc, #216]	; (8005468 <HAL_DMA_Init+0x430>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d018      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a35      	ldr	r2, [pc, #212]	; (800546c <HAL_DMA_Init+0x434>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a33      	ldr	r2, [pc, #204]	; (8005470 <HAL_DMA_Init+0x438>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00e      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a32      	ldr	r2, [pc, #200]	; (8005474 <HAL_DMA_Init+0x43c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a30      	ldr	r2, [pc, #192]	; (8005478 <HAL_DMA_Init+0x440>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_DMA_Init+0x38c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2f      	ldr	r2, [pc, #188]	; (800547c <HAL_DMA_Init+0x444>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_DMA_Init+0x390>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_DMA_Init+0x392>
 80053c8:	2300      	movs	r3, #0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8094 	beq.w	80054f8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_DMA_Init+0x428>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d021      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a21      	ldr	r2, [pc, #132]	; (8005464 <HAL_DMA_Init+0x42c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01c      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <HAL_DMA_Init+0x430>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d017      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <HAL_DMA_Init+0x434>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d012      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <HAL_DMA_Init+0x438>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00d      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_DMA_Init+0x43c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d008      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a19      	ldr	r2, [pc, #100]	; (8005478 <HAL_DMA_Init+0x440>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <HAL_DMA_Init+0x3e6>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_DMA_Init+0x444>)
 800541c:	4293      	cmp	r3, r2
 800541e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_DMA_Init+0x448>)
 800543c:	4013      	ands	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d01d      	beq.n	8005484 <HAL_DMA_Init+0x44c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b80      	cmp	r3, #128	; 0x80
 800544e:	d102      	bne.n	8005456 <HAL_DMA_Init+0x41e>
 8005450:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005454:	e017      	b.n	8005486 <HAL_DMA_Init+0x44e>
 8005456:	2300      	movs	r3, #0
 8005458:	e015      	b.n	8005486 <HAL_DMA_Init+0x44e>
 800545a:	bf00      	nop
 800545c:	fe10803f 	.word	0xfe10803f
 8005460:	58025408 	.word	0x58025408
 8005464:	5802541c 	.word	0x5802541c
 8005468:	58025430 	.word	0x58025430
 800546c:	58025444 	.word	0x58025444
 8005470:	58025458 	.word	0x58025458
 8005474:	5802546c 	.word	0x5802546c
 8005478:	58025480 	.word	0x58025480
 800547c:	58025494 	.word	0x58025494
 8005480:	fffe000f 	.word	0xfffe000f
 8005484:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68d2      	ldr	r2, [r2, #12]
 800548a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800548c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005494:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800549c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <HAL_DMA_Init+0x64c>)
 80054cc:	4413      	add	r3, r2
 80054ce:	4a6e      	ldr	r2, [pc, #440]	; (8005688 <HAL_DMA_Init+0x650>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	009a      	lsls	r2, r3, #2
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f002 f9a9 	bl	8007834 <DMA_CalcBaseAndBitshift>
 80054e2:	4603      	mov	r3, r0
 80054e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2201      	movs	r2, #1
 80054f0:	409a      	lsls	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	e008      	b.n	800550a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2203      	movs	r2, #3
 8005502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e0b7      	b.n	800567a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a5f      	ldr	r2, [pc, #380]	; (800568c <HAL_DMA_Init+0x654>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d072      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a5d      	ldr	r2, [pc, #372]	; (8005690 <HAL_DMA_Init+0x658>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d06d      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a5c      	ldr	r2, [pc, #368]	; (8005694 <HAL_DMA_Init+0x65c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d068      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5a      	ldr	r2, [pc, #360]	; (8005698 <HAL_DMA_Init+0x660>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d063      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a59      	ldr	r2, [pc, #356]	; (800569c <HAL_DMA_Init+0x664>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d05e      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a57      	ldr	r2, [pc, #348]	; (80056a0 <HAL_DMA_Init+0x668>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d059      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a56      	ldr	r2, [pc, #344]	; (80056a4 <HAL_DMA_Init+0x66c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d054      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a54      	ldr	r2, [pc, #336]	; (80056a8 <HAL_DMA_Init+0x670>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d04f      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a53      	ldr	r2, [pc, #332]	; (80056ac <HAL_DMA_Init+0x674>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d04a      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a51      	ldr	r2, [pc, #324]	; (80056b0 <HAL_DMA_Init+0x678>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d045      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a50      	ldr	r2, [pc, #320]	; (80056b4 <HAL_DMA_Init+0x67c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d040      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a4e      	ldr	r2, [pc, #312]	; (80056b8 <HAL_DMA_Init+0x680>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d03b      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a4d      	ldr	r2, [pc, #308]	; (80056bc <HAL_DMA_Init+0x684>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d036      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a4b      	ldr	r2, [pc, #300]	; (80056c0 <HAL_DMA_Init+0x688>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d031      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a4a      	ldr	r2, [pc, #296]	; (80056c4 <HAL_DMA_Init+0x68c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d02c      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a48      	ldr	r2, [pc, #288]	; (80056c8 <HAL_DMA_Init+0x690>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d027      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a47      	ldr	r2, [pc, #284]	; (80056cc <HAL_DMA_Init+0x694>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a45      	ldr	r2, [pc, #276]	; (80056d0 <HAL_DMA_Init+0x698>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01d      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a44      	ldr	r2, [pc, #272]	; (80056d4 <HAL_DMA_Init+0x69c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a42      	ldr	r2, [pc, #264]	; (80056d8 <HAL_DMA_Init+0x6a0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a41      	ldr	r2, [pc, #260]	; (80056dc <HAL_DMA_Init+0x6a4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3f      	ldr	r2, [pc, #252]	; (80056e0 <HAL_DMA_Init+0x6a8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3e      	ldr	r2, [pc, #248]	; (80056e4 <HAL_DMA_Init+0x6ac>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_DMA_Init+0x5c2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3c      	ldr	r2, [pc, #240]	; (80056e8 <HAL_DMA_Init+0x6b0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_DMA_Init+0x5c6>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_DMA_Init+0x5c8>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d032      	beq.n	800566a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f002 fa43 	bl	8007a90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b80      	cmp	r3, #128	; 0x80
 8005610:	d102      	bne.n	8005618 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800562c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d010      	beq.n	8005658 <HAL_DMA_Init+0x620>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d80c      	bhi.n	8005658 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f002 fac0 	bl	8007bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	e008      	b.n	800566a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	a7fdabf8 	.word	0xa7fdabf8
 8005688:	cccccccd 	.word	0xcccccccd
 800568c:	40020010 	.word	0x40020010
 8005690:	40020028 	.word	0x40020028
 8005694:	40020040 	.word	0x40020040
 8005698:	40020058 	.word	0x40020058
 800569c:	40020070 	.word	0x40020070
 80056a0:	40020088 	.word	0x40020088
 80056a4:	400200a0 	.word	0x400200a0
 80056a8:	400200b8 	.word	0x400200b8
 80056ac:	40020410 	.word	0x40020410
 80056b0:	40020428 	.word	0x40020428
 80056b4:	40020440 	.word	0x40020440
 80056b8:	40020458 	.word	0x40020458
 80056bc:	40020470 	.word	0x40020470
 80056c0:	40020488 	.word	0x40020488
 80056c4:	400204a0 	.word	0x400204a0
 80056c8:	400204b8 	.word	0x400204b8
 80056cc:	58025408 	.word	0x58025408
 80056d0:	5802541c 	.word	0x5802541c
 80056d4:	58025430 	.word	0x58025430
 80056d8:	58025444 	.word	0x58025444
 80056dc:	58025458 	.word	0x58025458
 80056e0:	5802546c 	.word	0x5802546c
 80056e4:	58025480 	.word	0x58025480
 80056e8:	58025494 	.word	0x58025494

080056ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e226      	b.n	8005b56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_DMA_Start_IT+0x2a>
 8005712:	2302      	movs	r3, #2
 8005714:	e21f      	b.n	8005b56 <HAL_DMA_Start_IT+0x46a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b01      	cmp	r3, #1
 8005728:	f040 820a 	bne.w	8005b40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a68      	ldr	r2, [pc, #416]	; (80058e0 <HAL_DMA_Start_IT+0x1f4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a66      	ldr	r2, [pc, #408]	; (80058e4 <HAL_DMA_Start_IT+0x1f8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_DMA_Start_IT+0x1fc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_DMA_Start_IT+0x200>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a62      	ldr	r2, [pc, #392]	; (80058f0 <HAL_DMA_Start_IT+0x204>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a60      	ldr	r2, [pc, #384]	; (80058f4 <HAL_DMA_Start_IT+0x208>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a5f      	ldr	r2, [pc, #380]	; (80058f8 <HAL_DMA_Start_IT+0x20c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a5d      	ldr	r2, [pc, #372]	; (80058fc <HAL_DMA_Start_IT+0x210>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a5c      	ldr	r2, [pc, #368]	; (8005900 <HAL_DMA_Start_IT+0x214>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5a      	ldr	r2, [pc, #360]	; (8005904 <HAL_DMA_Start_IT+0x218>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a59      	ldr	r2, [pc, #356]	; (8005908 <HAL_DMA_Start_IT+0x21c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a57      	ldr	r2, [pc, #348]	; (800590c <HAL_DMA_Start_IT+0x220>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a56      	ldr	r2, [pc, #344]	; (8005910 <HAL_DMA_Start_IT+0x224>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a54      	ldr	r2, [pc, #336]	; (8005914 <HAL_DMA_Start_IT+0x228>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a53      	ldr	r2, [pc, #332]	; (8005918 <HAL_DMA_Start_IT+0x22c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Start_IT+0xee>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a51      	ldr	r2, [pc, #324]	; (800591c <HAL_DMA_Start_IT+0x230>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <HAL_DMA_Start_IT+0x100>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e007      	b.n	80057fc <HAL_DMA_Start_IT+0x110>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 fe6a 	bl	80074dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a34      	ldr	r2, [pc, #208]	; (80058e0 <HAL_DMA_Start_IT+0x1f4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d04a      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a33      	ldr	r2, [pc, #204]	; (80058e4 <HAL_DMA_Start_IT+0x1f8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d045      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a31      	ldr	r2, [pc, #196]	; (80058e8 <HAL_DMA_Start_IT+0x1fc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d040      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a30      	ldr	r2, [pc, #192]	; (80058ec <HAL_DMA_Start_IT+0x200>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d03b      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2e      	ldr	r2, [pc, #184]	; (80058f0 <HAL_DMA_Start_IT+0x204>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d036      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2d      	ldr	r2, [pc, #180]	; (80058f4 <HAL_DMA_Start_IT+0x208>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d031      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2b      	ldr	r2, [pc, #172]	; (80058f8 <HAL_DMA_Start_IT+0x20c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d02c      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <HAL_DMA_Start_IT+0x210>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d027      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a28      	ldr	r2, [pc, #160]	; (8005900 <HAL_DMA_Start_IT+0x214>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d022      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a27      	ldr	r2, [pc, #156]	; (8005904 <HAL_DMA_Start_IT+0x218>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d01d      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a25      	ldr	r2, [pc, #148]	; (8005908 <HAL_DMA_Start_IT+0x21c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a24      	ldr	r2, [pc, #144]	; (800590c <HAL_DMA_Start_IT+0x220>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_DMA_Start_IT+0x224>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a21      	ldr	r2, [pc, #132]	; (8005914 <HAL_DMA_Start_IT+0x228>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <HAL_DMA_Start_IT+0x22c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_DMA_Start_IT+0x1bc>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	; (800591c <HAL_DMA_Start_IT+0x230>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <HAL_DMA_Start_IT+0x1c0>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <HAL_DMA_Start_IT+0x1c2>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d036      	beq.n	8005920 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 021e 	bic.w	r2, r3, #30
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0216 	orr.w	r2, r2, #22
 80058c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d03e      	beq.n	800594c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0208 	orr.w	r2, r2, #8
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e035      	b.n	800594c <HAL_DMA_Start_IT+0x260>
 80058e0:	40020010 	.word	0x40020010
 80058e4:	40020028 	.word	0x40020028
 80058e8:	40020040 	.word	0x40020040
 80058ec:	40020058 	.word	0x40020058
 80058f0:	40020070 	.word	0x40020070
 80058f4:	40020088 	.word	0x40020088
 80058f8:	400200a0 	.word	0x400200a0
 80058fc:	400200b8 	.word	0x400200b8
 8005900:	40020410 	.word	0x40020410
 8005904:	40020428 	.word	0x40020428
 8005908:	40020440 	.word	0x40020440
 800590c:	40020458 	.word	0x40020458
 8005910:	40020470 	.word	0x40020470
 8005914:	40020488 	.word	0x40020488
 8005918:	400204a0 	.word	0x400204a0
 800591c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f023 020e 	bic.w	r2, r3, #14
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 020a 	orr.w	r2, r2, #10
 8005932:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0204 	orr.w	r2, r2, #4
 800594a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a83      	ldr	r2, [pc, #524]	; (8005b60 <HAL_DMA_Start_IT+0x474>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d072      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a82      	ldr	r2, [pc, #520]	; (8005b64 <HAL_DMA_Start_IT+0x478>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d06d      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a80      	ldr	r2, [pc, #512]	; (8005b68 <HAL_DMA_Start_IT+0x47c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d068      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a7f      	ldr	r2, [pc, #508]	; (8005b6c <HAL_DMA_Start_IT+0x480>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d063      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a7d      	ldr	r2, [pc, #500]	; (8005b70 <HAL_DMA_Start_IT+0x484>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d05e      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a7c      	ldr	r2, [pc, #496]	; (8005b74 <HAL_DMA_Start_IT+0x488>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d059      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a7a      	ldr	r2, [pc, #488]	; (8005b78 <HAL_DMA_Start_IT+0x48c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d054      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a79      	ldr	r2, [pc, #484]	; (8005b7c <HAL_DMA_Start_IT+0x490>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d04f      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a77      	ldr	r2, [pc, #476]	; (8005b80 <HAL_DMA_Start_IT+0x494>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d04a      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a76      	ldr	r2, [pc, #472]	; (8005b84 <HAL_DMA_Start_IT+0x498>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d045      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a74      	ldr	r2, [pc, #464]	; (8005b88 <HAL_DMA_Start_IT+0x49c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d040      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a73      	ldr	r2, [pc, #460]	; (8005b8c <HAL_DMA_Start_IT+0x4a0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d03b      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a71      	ldr	r2, [pc, #452]	; (8005b90 <HAL_DMA_Start_IT+0x4a4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d036      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a70      	ldr	r2, [pc, #448]	; (8005b94 <HAL_DMA_Start_IT+0x4a8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d031      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6e      	ldr	r2, [pc, #440]	; (8005b98 <HAL_DMA_Start_IT+0x4ac>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d02c      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6d      	ldr	r2, [pc, #436]	; (8005b9c <HAL_DMA_Start_IT+0x4b0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d027      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6b      	ldr	r2, [pc, #428]	; (8005ba0 <HAL_DMA_Start_IT+0x4b4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d022      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6a      	ldr	r2, [pc, #424]	; (8005ba4 <HAL_DMA_Start_IT+0x4b8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d01d      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a68      	ldr	r2, [pc, #416]	; (8005ba8 <HAL_DMA_Start_IT+0x4bc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a67      	ldr	r2, [pc, #412]	; (8005bac <HAL_DMA_Start_IT+0x4c0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a65      	ldr	r2, [pc, #404]	; (8005bb0 <HAL_DMA_Start_IT+0x4c4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a64      	ldr	r2, [pc, #400]	; (8005bb4 <HAL_DMA_Start_IT+0x4c8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a62      	ldr	r2, [pc, #392]	; (8005bb8 <HAL_DMA_Start_IT+0x4cc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_DMA_Start_IT+0x350>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a61      	ldr	r2, [pc, #388]	; (8005bbc <HAL_DMA_Start_IT+0x4d0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <HAL_DMA_Start_IT+0x354>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <HAL_DMA_Start_IT+0x356>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01a      	beq.n	8005a7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a37      	ldr	r2, [pc, #220]	; (8005b60 <HAL_DMA_Start_IT+0x474>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d04a      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a36      	ldr	r2, [pc, #216]	; (8005b64 <HAL_DMA_Start_IT+0x478>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d045      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a34      	ldr	r2, [pc, #208]	; (8005b68 <HAL_DMA_Start_IT+0x47c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d040      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a33      	ldr	r2, [pc, #204]	; (8005b6c <HAL_DMA_Start_IT+0x480>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d03b      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a31      	ldr	r2, [pc, #196]	; (8005b70 <HAL_DMA_Start_IT+0x484>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d036      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a30      	ldr	r2, [pc, #192]	; (8005b74 <HAL_DMA_Start_IT+0x488>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d031      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2e      	ldr	r2, [pc, #184]	; (8005b78 <HAL_DMA_Start_IT+0x48c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02c      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a2d      	ldr	r2, [pc, #180]	; (8005b7c <HAL_DMA_Start_IT+0x490>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d027      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <HAL_DMA_Start_IT+0x494>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <HAL_DMA_Start_IT+0x498>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d01d      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <HAL_DMA_Start_IT+0x49c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <HAL_DMA_Start_IT+0x4a0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a25      	ldr	r2, [pc, #148]	; (8005b90 <HAL_DMA_Start_IT+0x4a4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <HAL_DMA_Start_IT+0x4a8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <HAL_DMA_Start_IT+0x4ac>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_DMA_Start_IT+0x430>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a21      	ldr	r2, [pc, #132]	; (8005b9c <HAL_DMA_Start_IT+0x4b0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <HAL_DMA_Start_IT+0x442>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e012      	b.n	8005b54 <HAL_DMA_Start_IT+0x468>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e009      	b.n	8005b54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40020010 	.word	0x40020010
 8005b64:	40020028 	.word	0x40020028
 8005b68:	40020040 	.word	0x40020040
 8005b6c:	40020058 	.word	0x40020058
 8005b70:	40020070 	.word	0x40020070
 8005b74:	40020088 	.word	0x40020088
 8005b78:	400200a0 	.word	0x400200a0
 8005b7c:	400200b8 	.word	0x400200b8
 8005b80:	40020410 	.word	0x40020410
 8005b84:	40020428 	.word	0x40020428
 8005b88:	40020440 	.word	0x40020440
 8005b8c:	40020458 	.word	0x40020458
 8005b90:	40020470 	.word	0x40020470
 8005b94:	40020488 	.word	0x40020488
 8005b98:	400204a0 	.word	0x400204a0
 8005b9c:	400204b8 	.word	0x400204b8
 8005ba0:	58025408 	.word	0x58025408
 8005ba4:	5802541c 	.word	0x5802541c
 8005ba8:	58025430 	.word	0x58025430
 8005bac:	58025444 	.word	0x58025444
 8005bb0:	58025458 	.word	0x58025458
 8005bb4:	5802546c 	.word	0x5802546c
 8005bb8:	58025480 	.word	0x58025480
 8005bbc:	58025494 	.word	0x58025494

08005bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005bc8:	f7ff f91a 	bl	8004e00 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e2dc      	b.n	8006192 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d008      	beq.n	8005bf6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e2cd      	b.n	8006192 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a76      	ldr	r2, [pc, #472]	; (8005dd4 <HAL_DMA_Abort+0x214>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a74      	ldr	r2, [pc, #464]	; (8005dd8 <HAL_DMA_Abort+0x218>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a73      	ldr	r2, [pc, #460]	; (8005ddc <HAL_DMA_Abort+0x21c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a71      	ldr	r2, [pc, #452]	; (8005de0 <HAL_DMA_Abort+0x220>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a70      	ldr	r2, [pc, #448]	; (8005de4 <HAL_DMA_Abort+0x224>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6e      	ldr	r2, [pc, #440]	; (8005de8 <HAL_DMA_Abort+0x228>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <HAL_DMA_Abort+0x22c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <HAL_DMA_Abort+0x230>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6a      	ldr	r2, [pc, #424]	; (8005df4 <HAL_DMA_Abort+0x234>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a68      	ldr	r2, [pc, #416]	; (8005df8 <HAL_DMA_Abort+0x238>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a67      	ldr	r2, [pc, #412]	; (8005dfc <HAL_DMA_Abort+0x23c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <HAL_DMA_Abort+0x240>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a64      	ldr	r2, [pc, #400]	; (8005e04 <HAL_DMA_Abort+0x244>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a62      	ldr	r2, [pc, #392]	; (8005e08 <HAL_DMA_Abort+0x248>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a61      	ldr	r2, [pc, #388]	; (8005e0c <HAL_DMA_Abort+0x24c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Abort+0xd6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a5f      	ldr	r2, [pc, #380]	; (8005e10 <HAL_DMA_Abort+0x250>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_DMA_Abort+0xda>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_DMA_Abort+0xdc>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 021e 	bic.w	r2, r2, #30
 8005cae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cbe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	e00a      	b.n	8005cde <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 020e 	bic.w	r2, r2, #14
 8005cd6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <HAL_DMA_Abort+0x214>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d072      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3a      	ldr	r2, [pc, #232]	; (8005dd8 <HAL_DMA_Abort+0x218>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d06d      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a39      	ldr	r2, [pc, #228]	; (8005ddc <HAL_DMA_Abort+0x21c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d068      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a37      	ldr	r2, [pc, #220]	; (8005de0 <HAL_DMA_Abort+0x220>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d063      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a36      	ldr	r2, [pc, #216]	; (8005de4 <HAL_DMA_Abort+0x224>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d05e      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a34      	ldr	r2, [pc, #208]	; (8005de8 <HAL_DMA_Abort+0x228>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d059      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a33      	ldr	r2, [pc, #204]	; (8005dec <HAL_DMA_Abort+0x22c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d054      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a31      	ldr	r2, [pc, #196]	; (8005df0 <HAL_DMA_Abort+0x230>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d04f      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a30      	ldr	r2, [pc, #192]	; (8005df4 <HAL_DMA_Abort+0x234>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d04a      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2e      	ldr	r2, [pc, #184]	; (8005df8 <HAL_DMA_Abort+0x238>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d045      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2d      	ldr	r2, [pc, #180]	; (8005dfc <HAL_DMA_Abort+0x23c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d040      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2b      	ldr	r2, [pc, #172]	; (8005e00 <HAL_DMA_Abort+0x240>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d03b      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2a      	ldr	r2, [pc, #168]	; (8005e04 <HAL_DMA_Abort+0x244>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d036      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <HAL_DMA_Abort+0x248>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d031      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <HAL_DMA_Abort+0x24c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d02c      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a25      	ldr	r2, [pc, #148]	; (8005e10 <HAL_DMA_Abort+0x250>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d027      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_DMA_Abort+0x254>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <HAL_DMA_Abort+0x258>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01d      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <HAL_DMA_Abort+0x25c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <HAL_DMA_Abort+0x260>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <HAL_DMA_Abort+0x264>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <HAL_DMA_Abort+0x268>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	; (8005e2c <HAL_DMA_Abort+0x26c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_DMA_Abort+0x20e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <HAL_DMA_Abort+0x270>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d132      	bne.n	8005e34 <HAL_DMA_Abort+0x274>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e031      	b.n	8005e36 <HAL_DMA_Abort+0x276>
 8005dd2:	bf00      	nop
 8005dd4:	40020010 	.word	0x40020010
 8005dd8:	40020028 	.word	0x40020028
 8005ddc:	40020040 	.word	0x40020040
 8005de0:	40020058 	.word	0x40020058
 8005de4:	40020070 	.word	0x40020070
 8005de8:	40020088 	.word	0x40020088
 8005dec:	400200a0 	.word	0x400200a0
 8005df0:	400200b8 	.word	0x400200b8
 8005df4:	40020410 	.word	0x40020410
 8005df8:	40020428 	.word	0x40020428
 8005dfc:	40020440 	.word	0x40020440
 8005e00:	40020458 	.word	0x40020458
 8005e04:	40020470 	.word	0x40020470
 8005e08:	40020488 	.word	0x40020488
 8005e0c:	400204a0 	.word	0x400204a0
 8005e10:	400204b8 	.word	0x400204b8
 8005e14:	58025408 	.word	0x58025408
 8005e18:	5802541c 	.word	0x5802541c
 8005e1c:	58025430 	.word	0x58025430
 8005e20:	58025444 	.word	0x58025444
 8005e24:	58025458 	.word	0x58025458
 8005e28:	5802546c 	.word	0x5802546c
 8005e2c:	58025480 	.word	0x58025480
 8005e30:	58025494 	.word	0x58025494
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a6d      	ldr	r2, [pc, #436]	; (8006004 <HAL_DMA_Abort+0x444>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d04a      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a6b      	ldr	r2, [pc, #428]	; (8006008 <HAL_DMA_Abort+0x448>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d045      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6a      	ldr	r2, [pc, #424]	; (800600c <HAL_DMA_Abort+0x44c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d040      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a68      	ldr	r2, [pc, #416]	; (8006010 <HAL_DMA_Abort+0x450>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d03b      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a67      	ldr	r2, [pc, #412]	; (8006014 <HAL_DMA_Abort+0x454>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d036      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a65      	ldr	r2, [pc, #404]	; (8006018 <HAL_DMA_Abort+0x458>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d031      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a64      	ldr	r2, [pc, #400]	; (800601c <HAL_DMA_Abort+0x45c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d02c      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a62      	ldr	r2, [pc, #392]	; (8006020 <HAL_DMA_Abort+0x460>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d027      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a61      	ldr	r2, [pc, #388]	; (8006024 <HAL_DMA_Abort+0x464>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a5f      	ldr	r2, [pc, #380]	; (8006028 <HAL_DMA_Abort+0x468>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01d      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a5e      	ldr	r2, [pc, #376]	; (800602c <HAL_DMA_Abort+0x46c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a5c      	ldr	r2, [pc, #368]	; (8006030 <HAL_DMA_Abort+0x470>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a5b      	ldr	r2, [pc, #364]	; (8006034 <HAL_DMA_Abort+0x474>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a59      	ldr	r2, [pc, #356]	; (8006038 <HAL_DMA_Abort+0x478>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a58      	ldr	r2, [pc, #352]	; (800603c <HAL_DMA_Abort+0x47c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <HAL_DMA_Abort+0x32a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a56      	ldr	r2, [pc, #344]	; (8006040 <HAL_DMA_Abort+0x480>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <HAL_DMA_Abort+0x33c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e007      	b.n	8005f0c <HAL_DMA_Abort+0x34c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f0c:	e013      	b.n	8005f36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f0e:	f7fe ff77 	bl	8004e00 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d90c      	bls.n	8005f36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2203      	movs	r2, #3
 8005f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e12d      	b.n	8006192 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2f      	ldr	r2, [pc, #188]	; (8006004 <HAL_DMA_Abort+0x444>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04a      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2d      	ldr	r2, [pc, #180]	; (8006008 <HAL_DMA_Abort+0x448>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d045      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2c      	ldr	r2, [pc, #176]	; (800600c <HAL_DMA_Abort+0x44c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d040      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <HAL_DMA_Abort+0x450>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d03b      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	; (8006014 <HAL_DMA_Abort+0x454>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d036      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a27      	ldr	r2, [pc, #156]	; (8006018 <HAL_DMA_Abort+0x458>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d031      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a26      	ldr	r2, [pc, #152]	; (800601c <HAL_DMA_Abort+0x45c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02c      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a24      	ldr	r2, [pc, #144]	; (8006020 <HAL_DMA_Abort+0x460>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d027      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a23      	ldr	r2, [pc, #140]	; (8006024 <HAL_DMA_Abort+0x464>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a21      	ldr	r2, [pc, #132]	; (8006028 <HAL_DMA_Abort+0x468>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a20      	ldr	r2, [pc, #128]	; (800602c <HAL_DMA_Abort+0x46c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <HAL_DMA_Abort+0x470>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <HAL_DMA_Abort+0x474>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <HAL_DMA_Abort+0x478>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	; (800603c <HAL_DMA_Abort+0x47c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_DMA_Abort+0x422>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a18      	ldr	r2, [pc, #96]	; (8006040 <HAL_DMA_Abort+0x480>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <HAL_DMA_Abort+0x426>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <HAL_DMA_Abort+0x428>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02b      	beq.n	8006044 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	223f      	movs	r2, #63	; 0x3f
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	609a      	str	r2, [r3, #8]
 8006002:	e02a      	b.n	800605a <HAL_DMA_Abort+0x49a>
 8006004:	40020010 	.word	0x40020010
 8006008:	40020028 	.word	0x40020028
 800600c:	40020040 	.word	0x40020040
 8006010:	40020058 	.word	0x40020058
 8006014:	40020070 	.word	0x40020070
 8006018:	40020088 	.word	0x40020088
 800601c:	400200a0 	.word	0x400200a0
 8006020:	400200b8 	.word	0x400200b8
 8006024:	40020410 	.word	0x40020410
 8006028:	40020428 	.word	0x40020428
 800602c:	40020440 	.word	0x40020440
 8006030:	40020458 	.word	0x40020458
 8006034:	40020470 	.word	0x40020470
 8006038:	40020488 	.word	0x40020488
 800603c:	400204a0 	.word	0x400204a0
 8006040:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006048:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4f      	ldr	r2, [pc, #316]	; (800619c <HAL_DMA_Abort+0x5dc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d072      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a4d      	ldr	r2, [pc, #308]	; (80061a0 <HAL_DMA_Abort+0x5e0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d06d      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a4c      	ldr	r2, [pc, #304]	; (80061a4 <HAL_DMA_Abort+0x5e4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d068      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a4a      	ldr	r2, [pc, #296]	; (80061a8 <HAL_DMA_Abort+0x5e8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d063      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a49      	ldr	r2, [pc, #292]	; (80061ac <HAL_DMA_Abort+0x5ec>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d05e      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a47      	ldr	r2, [pc, #284]	; (80061b0 <HAL_DMA_Abort+0x5f0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d059      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a46      	ldr	r2, [pc, #280]	; (80061b4 <HAL_DMA_Abort+0x5f4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d054      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a44      	ldr	r2, [pc, #272]	; (80061b8 <HAL_DMA_Abort+0x5f8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d04f      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a43      	ldr	r2, [pc, #268]	; (80061bc <HAL_DMA_Abort+0x5fc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d04a      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a41      	ldr	r2, [pc, #260]	; (80061c0 <HAL_DMA_Abort+0x600>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d045      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a40      	ldr	r2, [pc, #256]	; (80061c4 <HAL_DMA_Abort+0x604>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d040      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a3e      	ldr	r2, [pc, #248]	; (80061c8 <HAL_DMA_Abort+0x608>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d03b      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a3d      	ldr	r2, [pc, #244]	; (80061cc <HAL_DMA_Abort+0x60c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d036      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3b      	ldr	r2, [pc, #236]	; (80061d0 <HAL_DMA_Abort+0x610>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d031      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3a      	ldr	r2, [pc, #232]	; (80061d4 <HAL_DMA_Abort+0x614>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d02c      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a38      	ldr	r2, [pc, #224]	; (80061d8 <HAL_DMA_Abort+0x618>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d027      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a37      	ldr	r2, [pc, #220]	; (80061dc <HAL_DMA_Abort+0x61c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d022      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a35      	ldr	r2, [pc, #212]	; (80061e0 <HAL_DMA_Abort+0x620>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01d      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a34      	ldr	r2, [pc, #208]	; (80061e4 <HAL_DMA_Abort+0x624>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d018      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a32      	ldr	r2, [pc, #200]	; (80061e8 <HAL_DMA_Abort+0x628>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d013      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a31      	ldr	r2, [pc, #196]	; (80061ec <HAL_DMA_Abort+0x62c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00e      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2f      	ldr	r2, [pc, #188]	; (80061f0 <HAL_DMA_Abort+0x630>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d009      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2e      	ldr	r2, [pc, #184]	; (80061f4 <HAL_DMA_Abort+0x634>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_DMA_Abort+0x58a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a2c      	ldr	r2, [pc, #176]	; (80061f8 <HAL_DMA_Abort+0x638>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_DMA_Abort+0x58e>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_DMA_Abort+0x590>
 800614e:	2300      	movs	r3, #0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800615c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00c      	beq.n	8006180 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006174:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800617e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40020010 	.word	0x40020010
 80061a0:	40020028 	.word	0x40020028
 80061a4:	40020040 	.word	0x40020040
 80061a8:	40020058 	.word	0x40020058
 80061ac:	40020070 	.word	0x40020070
 80061b0:	40020088 	.word	0x40020088
 80061b4:	400200a0 	.word	0x400200a0
 80061b8:	400200b8 	.word	0x400200b8
 80061bc:	40020410 	.word	0x40020410
 80061c0:	40020428 	.word	0x40020428
 80061c4:	40020440 	.word	0x40020440
 80061c8:	40020458 	.word	0x40020458
 80061cc:	40020470 	.word	0x40020470
 80061d0:	40020488 	.word	0x40020488
 80061d4:	400204a0 	.word	0x400204a0
 80061d8:	400204b8 	.word	0x400204b8
 80061dc:	58025408 	.word	0x58025408
 80061e0:	5802541c 	.word	0x5802541c
 80061e4:	58025430 	.word	0x58025430
 80061e8:	58025444 	.word	0x58025444
 80061ec:	58025458 	.word	0x58025458
 80061f0:	5802546c 	.word	0x5802546c
 80061f4:	58025480 	.word	0x58025480
 80061f8:	58025494 	.word	0x58025494

080061fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e237      	b.n	800667e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d004      	beq.n	8006224 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2280      	movs	r2, #128	; 0x80
 800621e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e22c      	b.n	800667e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5c      	ldr	r2, [pc, #368]	; (800639c <HAL_DMA_Abort_IT+0x1a0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d04a      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a5b      	ldr	r2, [pc, #364]	; (80063a0 <HAL_DMA_Abort_IT+0x1a4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d045      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a59      	ldr	r2, [pc, #356]	; (80063a4 <HAL_DMA_Abort_IT+0x1a8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d040      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a58      	ldr	r2, [pc, #352]	; (80063a8 <HAL_DMA_Abort_IT+0x1ac>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d03b      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a56      	ldr	r2, [pc, #344]	; (80063ac <HAL_DMA_Abort_IT+0x1b0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d036      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a55      	ldr	r2, [pc, #340]	; (80063b0 <HAL_DMA_Abort_IT+0x1b4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d031      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a53      	ldr	r2, [pc, #332]	; (80063b4 <HAL_DMA_Abort_IT+0x1b8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d02c      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a52      	ldr	r2, [pc, #328]	; (80063b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d027      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a50      	ldr	r2, [pc, #320]	; (80063bc <HAL_DMA_Abort_IT+0x1c0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d022      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a4f      	ldr	r2, [pc, #316]	; (80063c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d01d      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a4d      	ldr	r2, [pc, #308]	; (80063c4 <HAL_DMA_Abort_IT+0x1c8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4c      	ldr	r2, [pc, #304]	; (80063c8 <HAL_DMA_Abort_IT+0x1cc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a4a      	ldr	r2, [pc, #296]	; (80063cc <HAL_DMA_Abort_IT+0x1d0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a49      	ldr	r2, [pc, #292]	; (80063d0 <HAL_DMA_Abort_IT+0x1d4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a47      	ldr	r2, [pc, #284]	; (80063d4 <HAL_DMA_Abort_IT+0x1d8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a46      	ldr	r2, [pc, #280]	; (80063d8 <HAL_DMA_Abort_IT+0x1dc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d101      	bne.n	80062c8 <HAL_DMA_Abort_IT+0xcc>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_DMA_Abort_IT+0xce>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8086 	beq.w	80063dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a2f      	ldr	r2, [pc, #188]	; (800639c <HAL_DMA_Abort_IT+0x1a0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d04a      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_DMA_Abort_IT+0x1a4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d045      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_DMA_Abort_IT+0x1a8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d040      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_DMA_Abort_IT+0x1ac>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d03b      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a29      	ldr	r2, [pc, #164]	; (80063ac <HAL_DMA_Abort_IT+0x1b0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d036      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_Abort_IT+0x1b4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d031      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_DMA_Abort_IT+0x1b8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02c      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_Abort_IT+0x1bc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d027      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_DMA_Abort_IT+0x1c0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d022      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_Abort_IT+0x1c4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d01d      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_DMA_Abort_IT+0x1c8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d018      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_DMA_Abort_IT+0x1cc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_DMA_Abort_IT+0x1d0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_DMA_Abort_IT+0x1d4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_DMA_Abort_IT+0x1d8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_DMA_Abort_IT+0x17c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d108      	bne.n	800638a <HAL_DMA_Abort_IT+0x18e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e178      	b.n	800667c <HAL_DMA_Abort_IT+0x480>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e16f      	b.n	800667c <HAL_DMA_Abort_IT+0x480>
 800639c:	40020010 	.word	0x40020010
 80063a0:	40020028 	.word	0x40020028
 80063a4:	40020040 	.word	0x40020040
 80063a8:	40020058 	.word	0x40020058
 80063ac:	40020070 	.word	0x40020070
 80063b0:	40020088 	.word	0x40020088
 80063b4:	400200a0 	.word	0x400200a0
 80063b8:	400200b8 	.word	0x400200b8
 80063bc:	40020410 	.word	0x40020410
 80063c0:	40020428 	.word	0x40020428
 80063c4:	40020440 	.word	0x40020440
 80063c8:	40020458 	.word	0x40020458
 80063cc:	40020470 	.word	0x40020470
 80063d0:	40020488 	.word	0x40020488
 80063d4:	400204a0 	.word	0x400204a0
 80063d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 020e 	bic.w	r2, r2, #14
 80063ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6c      	ldr	r2, [pc, #432]	; (80065a4 <HAL_DMA_Abort_IT+0x3a8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6b      	ldr	r2, [pc, #428]	; (80065a8 <HAL_DMA_Abort_IT+0x3ac>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a69      	ldr	r2, [pc, #420]	; (80065ac <HAL_DMA_Abort_IT+0x3b0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a68      	ldr	r2, [pc, #416]	; (80065b0 <HAL_DMA_Abort_IT+0x3b4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a66      	ldr	r2, [pc, #408]	; (80065b4 <HAL_DMA_Abort_IT+0x3b8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a65      	ldr	r2, [pc, #404]	; (80065b8 <HAL_DMA_Abort_IT+0x3bc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a63      	ldr	r2, [pc, #396]	; (80065bc <HAL_DMA_Abort_IT+0x3c0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a62      	ldr	r2, [pc, #392]	; (80065c0 <HAL_DMA_Abort_IT+0x3c4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a60      	ldr	r2, [pc, #384]	; (80065c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5f      	ldr	r2, [pc, #380]	; (80065c8 <HAL_DMA_Abort_IT+0x3cc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a5d      	ldr	r2, [pc, #372]	; (80065cc <HAL_DMA_Abort_IT+0x3d0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5c      	ldr	r2, [pc, #368]	; (80065d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5a      	ldr	r2, [pc, #360]	; (80065d4 <HAL_DMA_Abort_IT+0x3d8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a59      	ldr	r2, [pc, #356]	; (80065d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a57      	ldr	r2, [pc, #348]	; (80065dc <HAL_DMA_Abort_IT+0x3e0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_DMA_Abort_IT+0x290>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a56      	ldr	r2, [pc, #344]	; (80065e0 <HAL_DMA_Abort_IT+0x3e4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <HAL_DMA_Abort_IT+0x2a2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e007      	b.n	80064ae <HAL_DMA_Abort_IT+0x2b2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a3c      	ldr	r2, [pc, #240]	; (80065a4 <HAL_DMA_Abort_IT+0x3a8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d072      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a3a      	ldr	r2, [pc, #232]	; (80065a8 <HAL_DMA_Abort_IT+0x3ac>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d06d      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a39      	ldr	r2, [pc, #228]	; (80065ac <HAL_DMA_Abort_IT+0x3b0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d068      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a37      	ldr	r2, [pc, #220]	; (80065b0 <HAL_DMA_Abort_IT+0x3b4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d063      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a36      	ldr	r2, [pc, #216]	; (80065b4 <HAL_DMA_Abort_IT+0x3b8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d05e      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a34      	ldr	r2, [pc, #208]	; (80065b8 <HAL_DMA_Abort_IT+0x3bc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d059      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a33      	ldr	r2, [pc, #204]	; (80065bc <HAL_DMA_Abort_IT+0x3c0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d054      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a31      	ldr	r2, [pc, #196]	; (80065c0 <HAL_DMA_Abort_IT+0x3c4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d04f      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a30      	ldr	r2, [pc, #192]	; (80065c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d04a      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2e      	ldr	r2, [pc, #184]	; (80065c8 <HAL_DMA_Abort_IT+0x3cc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d045      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2d      	ldr	r2, [pc, #180]	; (80065cc <HAL_DMA_Abort_IT+0x3d0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d040      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d03b      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2a      	ldr	r2, [pc, #168]	; (80065d4 <HAL_DMA_Abort_IT+0x3d8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d036      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a28      	ldr	r2, [pc, #160]	; (80065d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d031      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a27      	ldr	r2, [pc, #156]	; (80065dc <HAL_DMA_Abort_IT+0x3e0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d02c      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a25      	ldr	r2, [pc, #148]	; (80065e0 <HAL_DMA_Abort_IT+0x3e4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d027      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a24      	ldr	r2, [pc, #144]	; (80065e4 <HAL_DMA_Abort_IT+0x3e8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d022      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <HAL_DMA_Abort_IT+0x3ec>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01d      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <HAL_DMA_Abort_IT+0x3f0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d018      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <HAL_DMA_Abort_IT+0x3f4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_DMA_Abort_IT+0x3f8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <HAL_DMA_Abort_IT+0x3fc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <HAL_DMA_Abort_IT+0x400>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_DMA_Abort_IT+0x3a2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a19      	ldr	r2, [pc, #100]	; (8006600 <HAL_DMA_Abort_IT+0x404>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d132      	bne.n	8006604 <HAL_DMA_Abort_IT+0x408>
 800659e:	2301      	movs	r3, #1
 80065a0:	e031      	b.n	8006606 <HAL_DMA_Abort_IT+0x40a>
 80065a2:	bf00      	nop
 80065a4:	40020010 	.word	0x40020010
 80065a8:	40020028 	.word	0x40020028
 80065ac:	40020040 	.word	0x40020040
 80065b0:	40020058 	.word	0x40020058
 80065b4:	40020070 	.word	0x40020070
 80065b8:	40020088 	.word	0x40020088
 80065bc:	400200a0 	.word	0x400200a0
 80065c0:	400200b8 	.word	0x400200b8
 80065c4:	40020410 	.word	0x40020410
 80065c8:	40020428 	.word	0x40020428
 80065cc:	40020440 	.word	0x40020440
 80065d0:	40020458 	.word	0x40020458
 80065d4:	40020470 	.word	0x40020470
 80065d8:	40020488 	.word	0x40020488
 80065dc:	400204a0 	.word	0x400204a0
 80065e0:	400204b8 	.word	0x400204b8
 80065e4:	58025408 	.word	0x58025408
 80065e8:	5802541c 	.word	0x5802541c
 80065ec:	58025430 	.word	0x58025430
 80065f0:	58025444 	.word	0x58025444
 80065f4:	58025458 	.word	0x58025458
 80065f8:	5802546c 	.word	0x5802546c
 80065fc:	58025480 	.word	0x58025480
 8006600:	58025494 	.word	0x58025494
 8006604:	2300      	movs	r3, #0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d028      	beq.n	800665c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006618:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006638:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006650:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800665a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop

08006688 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006694:	4b67      	ldr	r3, [pc, #412]	; (8006834 <HAL_DMA_IRQHandler+0x1ac>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a67      	ldr	r2, [pc, #412]	; (8006838 <HAL_DMA_IRQHandler+0x1b0>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a9b      	lsrs	r3, r3, #10
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a5f      	ldr	r2, [pc, #380]	; (800683c <HAL_DMA_IRQHandler+0x1b4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d04a      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5d      	ldr	r2, [pc, #372]	; (8006840 <HAL_DMA_IRQHandler+0x1b8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d045      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a5c      	ldr	r2, [pc, #368]	; (8006844 <HAL_DMA_IRQHandler+0x1bc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d040      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5a      	ldr	r2, [pc, #360]	; (8006848 <HAL_DMA_IRQHandler+0x1c0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d03b      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a59      	ldr	r2, [pc, #356]	; (800684c <HAL_DMA_IRQHandler+0x1c4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d036      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a57      	ldr	r2, [pc, #348]	; (8006850 <HAL_DMA_IRQHandler+0x1c8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d031      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a56      	ldr	r2, [pc, #344]	; (8006854 <HAL_DMA_IRQHandler+0x1cc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d02c      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a54      	ldr	r2, [pc, #336]	; (8006858 <HAL_DMA_IRQHandler+0x1d0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d027      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a53      	ldr	r2, [pc, #332]	; (800685c <HAL_DMA_IRQHandler+0x1d4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d022      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a51      	ldr	r2, [pc, #324]	; (8006860 <HAL_DMA_IRQHandler+0x1d8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01d      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a50      	ldr	r2, [pc, #320]	; (8006864 <HAL_DMA_IRQHandler+0x1dc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d018      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a4e      	ldr	r2, [pc, #312]	; (8006868 <HAL_DMA_IRQHandler+0x1e0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a4d      	ldr	r2, [pc, #308]	; (800686c <HAL_DMA_IRQHandler+0x1e4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00e      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a4b      	ldr	r2, [pc, #300]	; (8006870 <HAL_DMA_IRQHandler+0x1e8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d009      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <HAL_DMA_IRQHandler+0x1ec>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_DMA_IRQHandler+0xd2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a48      	ldr	r2, [pc, #288]	; (8006878 <HAL_DMA_IRQHandler+0x1f0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <HAL_DMA_IRQHandler+0xd6>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_DMA_IRQHandler+0xd8>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 842b 	beq.w	8006fbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2208      	movs	r2, #8
 8006770:	409a      	lsls	r2, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80a2 	beq.w	80068c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a2e      	ldr	r2, [pc, #184]	; (800683c <HAL_DMA_IRQHandler+0x1b4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d04a      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2d      	ldr	r2, [pc, #180]	; (8006840 <HAL_DMA_IRQHandler+0x1b8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d045      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <HAL_DMA_IRQHandler+0x1bc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d040      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <HAL_DMA_IRQHandler+0x1c0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d03b      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a28      	ldr	r2, [pc, #160]	; (800684c <HAL_DMA_IRQHandler+0x1c4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d036      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a27      	ldr	r2, [pc, #156]	; (8006850 <HAL_DMA_IRQHandler+0x1c8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d031      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a25      	ldr	r2, [pc, #148]	; (8006854 <HAL_DMA_IRQHandler+0x1cc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d02c      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a24      	ldr	r2, [pc, #144]	; (8006858 <HAL_DMA_IRQHandler+0x1d0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d027      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a22      	ldr	r2, [pc, #136]	; (800685c <HAL_DMA_IRQHandler+0x1d4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d022      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a21      	ldr	r2, [pc, #132]	; (8006860 <HAL_DMA_IRQHandler+0x1d8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d01d      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <HAL_DMA_IRQHandler+0x1dc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <HAL_DMA_IRQHandler+0x1e0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1c      	ldr	r2, [pc, #112]	; (800686c <HAL_DMA_IRQHandler+0x1e4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <HAL_DMA_IRQHandler+0x1e8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_DMA_IRQHandler+0x1ec>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_DMA_IRQHandler+0x194>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <HAL_DMA_IRQHandler+0x1f0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d12f      	bne.n	800687c <HAL_DMA_IRQHandler+0x1f4>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf14      	ite	ne
 800682a:	2301      	movne	r3, #1
 800682c:	2300      	moveq	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	e02e      	b.n	8006890 <HAL_DMA_IRQHandler+0x208>
 8006832:	bf00      	nop
 8006834:	24000000 	.word	0x24000000
 8006838:	1b4e81b5 	.word	0x1b4e81b5
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	bf14      	ite	ne
 800688a:	2301      	movne	r3, #1
 800688c:	2300      	moveq	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0204 	bic.w	r2, r2, #4
 80068a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2208      	movs	r2, #8
 80068ae:	409a      	lsls	r2, r3
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	f043 0201 	orr.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	fa22 f303 	lsr.w	r3, r2, r3
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d06e      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a69      	ldr	r2, [pc, #420]	; (8006a80 <HAL_DMA_IRQHandler+0x3f8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d04a      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a67      	ldr	r2, [pc, #412]	; (8006a84 <HAL_DMA_IRQHandler+0x3fc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d045      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a66      	ldr	r2, [pc, #408]	; (8006a88 <HAL_DMA_IRQHandler+0x400>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d040      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a64      	ldr	r2, [pc, #400]	; (8006a8c <HAL_DMA_IRQHandler+0x404>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d03b      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a63      	ldr	r2, [pc, #396]	; (8006a90 <HAL_DMA_IRQHandler+0x408>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d036      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a61      	ldr	r2, [pc, #388]	; (8006a94 <HAL_DMA_IRQHandler+0x40c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d031      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a60      	ldr	r2, [pc, #384]	; (8006a98 <HAL_DMA_IRQHandler+0x410>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d02c      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a5e      	ldr	r2, [pc, #376]	; (8006a9c <HAL_DMA_IRQHandler+0x414>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d027      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a5d      	ldr	r2, [pc, #372]	; (8006aa0 <HAL_DMA_IRQHandler+0x418>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a5b      	ldr	r2, [pc, #364]	; (8006aa4 <HAL_DMA_IRQHandler+0x41c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a5a      	ldr	r2, [pc, #360]	; (8006aa8 <HAL_DMA_IRQHandler+0x420>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a58      	ldr	r2, [pc, #352]	; (8006aac <HAL_DMA_IRQHandler+0x424>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a57      	ldr	r2, [pc, #348]	; (8006ab0 <HAL_DMA_IRQHandler+0x428>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a55      	ldr	r2, [pc, #340]	; (8006ab4 <HAL_DMA_IRQHandler+0x42c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a54      	ldr	r2, [pc, #336]	; (8006ab8 <HAL_DMA_IRQHandler+0x430>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_DMA_IRQHandler+0x2ee>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a52      	ldr	r2, [pc, #328]	; (8006abc <HAL_DMA_IRQHandler+0x434>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10a      	bne.n	800698c <HAL_DMA_IRQHandler+0x304>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e003      	b.n	8006994 <HAL_DMA_IRQHandler+0x30c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00d      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2201      	movs	r2, #1
 80069a2:	409a      	lsls	r2, r3
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	f043 0202 	orr.w	r2, r3, #2
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	2204      	movs	r2, #4
 80069be:	409a      	lsls	r2, r3
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 808f 	beq.w	8006ae8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <HAL_DMA_IRQHandler+0x3f8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d04a      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <HAL_DMA_IRQHandler+0x3fc>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d045      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <HAL_DMA_IRQHandler+0x400>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d040      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <HAL_DMA_IRQHandler+0x404>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d03b      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a26      	ldr	r2, [pc, #152]	; (8006a90 <HAL_DMA_IRQHandler+0x408>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d036      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a24      	ldr	r2, [pc, #144]	; (8006a94 <HAL_DMA_IRQHandler+0x40c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d031      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a23      	ldr	r2, [pc, #140]	; (8006a98 <HAL_DMA_IRQHandler+0x410>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d02c      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <HAL_DMA_IRQHandler+0x414>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d027      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a20      	ldr	r2, [pc, #128]	; (8006aa0 <HAL_DMA_IRQHandler+0x418>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <HAL_DMA_IRQHandler+0x41c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01d      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1d      	ldr	r2, [pc, #116]	; (8006aa8 <HAL_DMA_IRQHandler+0x420>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <HAL_DMA_IRQHandler+0x424>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1a      	ldr	r2, [pc, #104]	; (8006ab0 <HAL_DMA_IRQHandler+0x428>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a18      	ldr	r2, [pc, #96]	; (8006ab4 <HAL_DMA_IRQHandler+0x42c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <HAL_DMA_IRQHandler+0x430>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x3e2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a15      	ldr	r2, [pc, #84]	; (8006abc <HAL_DMA_IRQHandler+0x434>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d12a      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0x438>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	e023      	b.n	8006ac8 <HAL_DMA_IRQHandler+0x440>
 8006a80:	40020010 	.word	0x40020010
 8006a84:	40020028 	.word	0x40020028
 8006a88:	40020040 	.word	0x40020040
 8006a8c:	40020058 	.word	0x40020058
 8006a90:	40020070 	.word	0x40020070
 8006a94:	40020088 	.word	0x40020088
 8006a98:	400200a0 	.word	0x400200a0
 8006a9c:	400200b8 	.word	0x400200b8
 8006aa0:	40020410 	.word	0x40020410
 8006aa4:	40020428 	.word	0x40020428
 8006aa8:	40020440 	.word	0x40020440
 8006aac:	40020458 	.word	0x40020458
 8006ab0:	40020470 	.word	0x40020470
 8006ab4:	40020488 	.word	0x40020488
 8006ab8:	400204a0 	.word	0x400204a0
 8006abc:	400204b8 	.word	0x400204b8
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00d      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	f043 0204 	orr.w	r2, r3, #4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2210      	movs	r2, #16
 8006af2:	409a      	lsls	r2, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80a6 	beq.w	8006c4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a85      	ldr	r2, [pc, #532]	; (8006d18 <HAL_DMA_IRQHandler+0x690>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d04a      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a83      	ldr	r2, [pc, #524]	; (8006d1c <HAL_DMA_IRQHandler+0x694>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d045      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a82      	ldr	r2, [pc, #520]	; (8006d20 <HAL_DMA_IRQHandler+0x698>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d040      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a80      	ldr	r2, [pc, #512]	; (8006d24 <HAL_DMA_IRQHandler+0x69c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d03b      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a7f      	ldr	r2, [pc, #508]	; (8006d28 <HAL_DMA_IRQHandler+0x6a0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d036      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a7d      	ldr	r2, [pc, #500]	; (8006d2c <HAL_DMA_IRQHandler+0x6a4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d031      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a7c      	ldr	r2, [pc, #496]	; (8006d30 <HAL_DMA_IRQHandler+0x6a8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d02c      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a7a      	ldr	r2, [pc, #488]	; (8006d34 <HAL_DMA_IRQHandler+0x6ac>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d027      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a79      	ldr	r2, [pc, #484]	; (8006d38 <HAL_DMA_IRQHandler+0x6b0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a77      	ldr	r2, [pc, #476]	; (8006d3c <HAL_DMA_IRQHandler+0x6b4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01d      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a76      	ldr	r2, [pc, #472]	; (8006d40 <HAL_DMA_IRQHandler+0x6b8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a74      	ldr	r2, [pc, #464]	; (8006d44 <HAL_DMA_IRQHandler+0x6bc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a73      	ldr	r2, [pc, #460]	; (8006d48 <HAL_DMA_IRQHandler+0x6c0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a71      	ldr	r2, [pc, #452]	; (8006d4c <HAL_DMA_IRQHandler+0x6c4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a70      	ldr	r2, [pc, #448]	; (8006d50 <HAL_DMA_IRQHandler+0x6c8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x516>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6e      	ldr	r2, [pc, #440]	; (8006d54 <HAL_DMA_IRQHandler+0x6cc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x52c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	e009      	b.n	8006bc8 <HAL_DMA_IRQHandler+0x540>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d03e      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	409a      	lsls	r2, r3
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d108      	bne.n	8006c0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d024      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
 8006c08:	e01f      	b.n	8006c4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
 8006c1a:	e016      	b.n	8006c4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0208 	bic.w	r2, r2, #8
 8006c38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2220      	movs	r2, #32
 8006c54:	409a      	lsls	r2, r3
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 8110 	beq.w	8006e80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_DMA_IRQHandler+0x690>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d04a      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <HAL_DMA_IRQHandler+0x694>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d045      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <HAL_DMA_IRQHandler+0x698>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d040      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <HAL_DMA_IRQHandler+0x69c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d03b      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_DMA_IRQHandler+0x6a0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d036      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a25      	ldr	r2, [pc, #148]	; (8006d2c <HAL_DMA_IRQHandler+0x6a4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d031      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a23      	ldr	r2, [pc, #140]	; (8006d30 <HAL_DMA_IRQHandler+0x6a8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d02c      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a22      	ldr	r2, [pc, #136]	; (8006d34 <HAL_DMA_IRQHandler+0x6ac>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d027      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <HAL_DMA_IRQHandler+0x6b0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <HAL_DMA_IRQHandler+0x6b4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d01d      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_DMA_IRQHandler+0x6b8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_DMA_IRQHandler+0x6bc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_DMA_IRQHandler+0x6c0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_DMA_IRQHandler+0x6c4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_DMA_IRQHandler+0x6c8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x678>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <HAL_DMA_IRQHandler+0x6cc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d12b      	bne.n	8006d58 <HAL_DMA_IRQHandler+0x6d0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	e02a      	b.n	8006d6c <HAL_DMA_IRQHandler+0x6e4>
 8006d16:	bf00      	nop
 8006d18:	40020010 	.word	0x40020010
 8006d1c:	40020028 	.word	0x40020028
 8006d20:	40020040 	.word	0x40020040
 8006d24:	40020058 	.word	0x40020058
 8006d28:	40020070 	.word	0x40020070
 8006d2c:	40020088 	.word	0x40020088
 8006d30:	400200a0 	.word	0x400200a0
 8006d34:	400200b8 	.word	0x400200b8
 8006d38:	40020410 	.word	0x40020410
 8006d3c:	40020428 	.word	0x40020428
 8006d40:	40020440 	.word	0x40020440
 8006d44:	40020458 	.word	0x40020458
 8006d48:	40020470 	.word	0x40020470
 8006d4c:	40020488 	.word	0x40020488
 8006d50:	400204a0 	.word	0x400204a0
 8006d54:	400204b8 	.word	0x400204b8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8087 	beq.w	8006e80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	409a      	lsls	r2, r3
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d139      	bne.n	8006e02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0216 	bic.w	r2, r2, #22
 8006d9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <HAL_DMA_IRQHandler+0x736>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0208 	bic.w	r2, r2, #8
 8006dcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	223f      	movs	r2, #63	; 0x3f
 8006dd8:	409a      	lsls	r2, r3
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 834a 	beq.w	800748c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
          }
          return;
 8006e00:	e344      	b.n	800748c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d018      	beq.n	8006e42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d02c      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
 8006e2e:	e027      	b.n	8006e80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d023      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
 8006e40:	e01e      	b.n	8006e80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10f      	bne.n	8006e70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0210 	bic.w	r2, r2, #16
 8006e5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8306 	beq.w	8007496 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8088 	beq.w	8006fa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a7a      	ldr	r2, [pc, #488]	; (8007090 <HAL_DMA_IRQHandler+0xa08>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d04a      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a79      	ldr	r2, [pc, #484]	; (8007094 <HAL_DMA_IRQHandler+0xa0c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d045      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a77      	ldr	r2, [pc, #476]	; (8007098 <HAL_DMA_IRQHandler+0xa10>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d040      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a76      	ldr	r2, [pc, #472]	; (800709c <HAL_DMA_IRQHandler+0xa14>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d03b      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a74      	ldr	r2, [pc, #464]	; (80070a0 <HAL_DMA_IRQHandler+0xa18>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d036      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a73      	ldr	r2, [pc, #460]	; (80070a4 <HAL_DMA_IRQHandler+0xa1c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d031      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a71      	ldr	r2, [pc, #452]	; (80070a8 <HAL_DMA_IRQHandler+0xa20>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d02c      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a70      	ldr	r2, [pc, #448]	; (80070ac <HAL_DMA_IRQHandler+0xa24>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d027      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a6e      	ldr	r2, [pc, #440]	; (80070b0 <HAL_DMA_IRQHandler+0xa28>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d022      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a6d      	ldr	r2, [pc, #436]	; (80070b4 <HAL_DMA_IRQHandler+0xa2c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d01d      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6b      	ldr	r2, [pc, #428]	; (80070b8 <HAL_DMA_IRQHandler+0xa30>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d018      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6a      	ldr	r2, [pc, #424]	; (80070bc <HAL_DMA_IRQHandler+0xa34>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d013      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a68      	ldr	r2, [pc, #416]	; (80070c0 <HAL_DMA_IRQHandler+0xa38>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00e      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a67      	ldr	r2, [pc, #412]	; (80070c4 <HAL_DMA_IRQHandler+0xa3c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d009      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a65      	ldr	r2, [pc, #404]	; (80070c8 <HAL_DMA_IRQHandler+0xa40>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d004      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x8b8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a64      	ldr	r2, [pc, #400]	; (80070cc <HAL_DMA_IRQHandler+0xa44>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d108      	bne.n	8006f52 <HAL_DMA_IRQHandler+0x8ca>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	e007      	b.n	8006f62 <HAL_DMA_IRQHandler+0x8da>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0201 	bic.w	r2, r2, #1
 8006f60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d307      	bcc.n	8006f7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f2      	bne.n	8006f62 <HAL_DMA_IRQHandler+0x8da>
 8006f7c:	e000      	b.n	8006f80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2203      	movs	r2, #3
 8006f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006f96:	e003      	b.n	8006fa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8272 	beq.w	8007496 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
 8006fba:	e26c      	b.n	8007496 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a43      	ldr	r2, [pc, #268]	; (80070d0 <HAL_DMA_IRQHandler+0xa48>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d022      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a42      	ldr	r2, [pc, #264]	; (80070d4 <HAL_DMA_IRQHandler+0xa4c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d01d      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a40      	ldr	r2, [pc, #256]	; (80070d8 <HAL_DMA_IRQHandler+0xa50>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d018      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a3f      	ldr	r2, [pc, #252]	; (80070dc <HAL_DMA_IRQHandler+0xa54>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a3d      	ldr	r2, [pc, #244]	; (80070e0 <HAL_DMA_IRQHandler+0xa58>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00e      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a3c      	ldr	r2, [pc, #240]	; (80070e4 <HAL_DMA_IRQHandler+0xa5c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a3a      	ldr	r2, [pc, #232]	; (80070e8 <HAL_DMA_IRQHandler+0xa60>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <HAL_DMA_IRQHandler+0x984>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a39      	ldr	r2, [pc, #228]	; (80070ec <HAL_DMA_IRQHandler+0xa64>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d101      	bne.n	8007010 <HAL_DMA_IRQHandler+0x988>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_DMA_IRQHandler+0x98a>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 823f 	beq.w	8007496 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2204      	movs	r2, #4
 800702a:	409a      	lsls	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 80cd 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xb48>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80c7 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	2204      	movs	r2, #4
 800704c:	409a      	lsls	r2, r3
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d049      	beq.n	80070f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8210 	beq.w	8007490 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007078:	e20a      	b.n	8007490 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8206 	beq.w	8007490 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800708c:	e200      	b.n	8007490 <HAL_DMA_IRQHandler+0xe08>
 800708e:	bf00      	nop
 8007090:	40020010 	.word	0x40020010
 8007094:	40020028 	.word	0x40020028
 8007098:	40020040 	.word	0x40020040
 800709c:	40020058 	.word	0x40020058
 80070a0:	40020070 	.word	0x40020070
 80070a4:	40020088 	.word	0x40020088
 80070a8:	400200a0 	.word	0x400200a0
 80070ac:	400200b8 	.word	0x400200b8
 80070b0:	40020410 	.word	0x40020410
 80070b4:	40020428 	.word	0x40020428
 80070b8:	40020440 	.word	0x40020440
 80070bc:	40020458 	.word	0x40020458
 80070c0:	40020470 	.word	0x40020470
 80070c4:	40020488 	.word	0x40020488
 80070c8:	400204a0 	.word	0x400204a0
 80070cc:	400204b8 	.word	0x400204b8
 80070d0:	58025408 	.word	0x58025408
 80070d4:	5802541c 	.word	0x5802541c
 80070d8:	58025430 	.word	0x58025430
 80070dc:	58025444 	.word	0x58025444
 80070e0:	58025458 	.word	0x58025458
 80070e4:	5802546c 	.word	0x5802546c
 80070e8:	58025480 	.word	0x58025480
 80070ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d160      	bne.n	80071bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a7f      	ldr	r2, [pc, #508]	; (80072fc <HAL_DMA_IRQHandler+0xc74>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d04a      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a7d      	ldr	r2, [pc, #500]	; (8007300 <HAL_DMA_IRQHandler+0xc78>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d045      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a7c      	ldr	r2, [pc, #496]	; (8007304 <HAL_DMA_IRQHandler+0xc7c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d040      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a7a      	ldr	r2, [pc, #488]	; (8007308 <HAL_DMA_IRQHandler+0xc80>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d03b      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a79      	ldr	r2, [pc, #484]	; (800730c <HAL_DMA_IRQHandler+0xc84>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d036      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a77      	ldr	r2, [pc, #476]	; (8007310 <HAL_DMA_IRQHandler+0xc88>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d031      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a76      	ldr	r2, [pc, #472]	; (8007314 <HAL_DMA_IRQHandler+0xc8c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d02c      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a74      	ldr	r2, [pc, #464]	; (8007318 <HAL_DMA_IRQHandler+0xc90>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d027      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a73      	ldr	r2, [pc, #460]	; (800731c <HAL_DMA_IRQHandler+0xc94>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d022      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a71      	ldr	r2, [pc, #452]	; (8007320 <HAL_DMA_IRQHandler+0xc98>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01d      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a70      	ldr	r2, [pc, #448]	; (8007324 <HAL_DMA_IRQHandler+0xc9c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d018      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a6e      	ldr	r2, [pc, #440]	; (8007328 <HAL_DMA_IRQHandler+0xca0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d013      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a6d      	ldr	r2, [pc, #436]	; (800732c <HAL_DMA_IRQHandler+0xca4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00e      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a6b      	ldr	r2, [pc, #428]	; (8007330 <HAL_DMA_IRQHandler+0xca8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d009      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a6a      	ldr	r2, [pc, #424]	; (8007334 <HAL_DMA_IRQHandler+0xcac>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <HAL_DMA_IRQHandler+0xb12>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a68      	ldr	r2, [pc, #416]	; (8007338 <HAL_DMA_IRQHandler+0xcb0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d108      	bne.n	80071ac <HAL_DMA_IRQHandler+0xb24>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0208 	bic.w	r2, r2, #8
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e007      	b.n	80071bc <HAL_DMA_IRQHandler+0xb34>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0204 	bic.w	r2, r2, #4
 80071ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8165 	beq.w	8007490 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ce:	e15f      	b.n	8007490 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	2202      	movs	r2, #2
 80071da:	409a      	lsls	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80c5 	beq.w	8007370 <HAL_DMA_IRQHandler+0xce8>
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80bf 	beq.w	8007370 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2202      	movs	r2, #2
 80071fc:	409a      	lsls	r2, r3
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d018      	beq.n	800723e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 813a 	beq.w	8007494 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007228:	e134      	b.n	8007494 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 8130 	beq.w	8007494 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800723c:	e12a      	b.n	8007494 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 8089 	bne.w	800735c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <HAL_DMA_IRQHandler+0xc74>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d04a      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <HAL_DMA_IRQHandler+0xc78>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d045      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a28      	ldr	r2, [pc, #160]	; (8007304 <HAL_DMA_IRQHandler+0xc7c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d040      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a26      	ldr	r2, [pc, #152]	; (8007308 <HAL_DMA_IRQHandler+0xc80>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d03b      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a25      	ldr	r2, [pc, #148]	; (800730c <HAL_DMA_IRQHandler+0xc84>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d036      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a23      	ldr	r2, [pc, #140]	; (8007310 <HAL_DMA_IRQHandler+0xc88>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d031      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a22      	ldr	r2, [pc, #136]	; (8007314 <HAL_DMA_IRQHandler+0xc8c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d02c      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a20      	ldr	r2, [pc, #128]	; (8007318 <HAL_DMA_IRQHandler+0xc90>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d027      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1f      	ldr	r2, [pc, #124]	; (800731c <HAL_DMA_IRQHandler+0xc94>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d022      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <HAL_DMA_IRQHandler+0xc98>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01d      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <HAL_DMA_IRQHandler+0xc9c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <HAL_DMA_IRQHandler+0xca0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a19      	ldr	r2, [pc, #100]	; (800732c <HAL_DMA_IRQHandler+0xca4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a17      	ldr	r2, [pc, #92]	; (8007330 <HAL_DMA_IRQHandler+0xca8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a16      	ldr	r2, [pc, #88]	; (8007334 <HAL_DMA_IRQHandler+0xcac>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_DMA_IRQHandler+0xc62>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a14      	ldr	r2, [pc, #80]	; (8007338 <HAL_DMA_IRQHandler+0xcb0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d128      	bne.n	800733c <HAL_DMA_IRQHandler+0xcb4>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0214 	bic.w	r2, r2, #20
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e027      	b.n	800734c <HAL_DMA_IRQHandler+0xcc4>
 80072fc:	40020010 	.word	0x40020010
 8007300:	40020028 	.word	0x40020028
 8007304:	40020040 	.word	0x40020040
 8007308:	40020058 	.word	0x40020058
 800730c:	40020070 	.word	0x40020070
 8007310:	40020088 	.word	0x40020088
 8007314:	400200a0 	.word	0x400200a0
 8007318:	400200b8 	.word	0x400200b8
 800731c:	40020410 	.word	0x40020410
 8007320:	40020428 	.word	0x40020428
 8007324:	40020440 	.word	0x40020440
 8007328:	40020458 	.word	0x40020458
 800732c:	40020470 	.word	0x40020470
 8007330:	40020488 	.word	0x40020488
 8007334:	400204a0 	.word	0x400204a0
 8007338:	400204b8 	.word	0x400204b8
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 020a 	bic.w	r2, r2, #10
 800734a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 8097 	beq.w	8007494 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800736e:	e091      	b.n	8007494 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	2208      	movs	r2, #8
 800737a:	409a      	lsls	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8088 	beq.w	8007496 <HAL_DMA_IRQHandler+0xe0e>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8082 	beq.w	8007496 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a41      	ldr	r2, [pc, #260]	; (800749c <HAL_DMA_IRQHandler+0xe14>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d04a      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a3f      	ldr	r2, [pc, #252]	; (80074a0 <HAL_DMA_IRQHandler+0xe18>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d045      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3e      	ldr	r2, [pc, #248]	; (80074a4 <HAL_DMA_IRQHandler+0xe1c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d040      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a3c      	ldr	r2, [pc, #240]	; (80074a8 <HAL_DMA_IRQHandler+0xe20>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d03b      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a3b      	ldr	r2, [pc, #236]	; (80074ac <HAL_DMA_IRQHandler+0xe24>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d036      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a39      	ldr	r2, [pc, #228]	; (80074b0 <HAL_DMA_IRQHandler+0xe28>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d031      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a38      	ldr	r2, [pc, #224]	; (80074b4 <HAL_DMA_IRQHandler+0xe2c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02c      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a36      	ldr	r2, [pc, #216]	; (80074b8 <HAL_DMA_IRQHandler+0xe30>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d027      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a35      	ldr	r2, [pc, #212]	; (80074bc <HAL_DMA_IRQHandler+0xe34>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a33      	ldr	r2, [pc, #204]	; (80074c0 <HAL_DMA_IRQHandler+0xe38>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a32      	ldr	r2, [pc, #200]	; (80074c4 <HAL_DMA_IRQHandler+0xe3c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a30      	ldr	r2, [pc, #192]	; (80074c8 <HAL_DMA_IRQHandler+0xe40>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2f      	ldr	r2, [pc, #188]	; (80074cc <HAL_DMA_IRQHandler+0xe44>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2d      	ldr	r2, [pc, #180]	; (80074d0 <HAL_DMA_IRQHandler+0xe48>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a2c      	ldr	r2, [pc, #176]	; (80074d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_DMA_IRQHandler+0xdaa>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <HAL_DMA_IRQHandler+0xe50>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <HAL_DMA_IRQHandler+0xdbc>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 021c 	bic.w	r2, r2, #28
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e007      	b.n	8007454 <HAL_DMA_IRQHandler+0xdcc>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 020e 	bic.w	r2, r2, #14
 8007452:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2201      	movs	r2, #1
 800745e:	409a      	lsls	r2, r3
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d009      	beq.n	8007496 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
 800748a:	e004      	b.n	8007496 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800748c:	bf00      	nop
 800748e:	e002      	b.n	8007496 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007490:	bf00      	nop
 8007492:	e000      	b.n	8007496 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007494:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007496:	3728      	adds	r7, #40	; 0x28
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40020010 	.word	0x40020010
 80074a0:	40020028 	.word	0x40020028
 80074a4:	40020040 	.word	0x40020040
 80074a8:	40020058 	.word	0x40020058
 80074ac:	40020070 	.word	0x40020070
 80074b0:	40020088 	.word	0x40020088
 80074b4:	400200a0 	.word	0x400200a0
 80074b8:	400200b8 	.word	0x400200b8
 80074bc:	40020410 	.word	0x40020410
 80074c0:	40020428 	.word	0x40020428
 80074c4:	40020440 	.word	0x40020440
 80074c8:	40020458 	.word	0x40020458
 80074cc:	40020470 	.word	0x40020470
 80074d0:	40020488 	.word	0x40020488
 80074d4:	400204a0 	.word	0x400204a0
 80074d8:	400204b8 	.word	0x400204b8

080074dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a7f      	ldr	r2, [pc, #508]	; (80076f8 <DMA_SetConfig+0x21c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d072      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a7d      	ldr	r2, [pc, #500]	; (80076fc <DMA_SetConfig+0x220>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d06d      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a7c      	ldr	r2, [pc, #496]	; (8007700 <DMA_SetConfig+0x224>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d068      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a7a      	ldr	r2, [pc, #488]	; (8007704 <DMA_SetConfig+0x228>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d063      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a79      	ldr	r2, [pc, #484]	; (8007708 <DMA_SetConfig+0x22c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d05e      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a77      	ldr	r2, [pc, #476]	; (800770c <DMA_SetConfig+0x230>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d059      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a76      	ldr	r2, [pc, #472]	; (8007710 <DMA_SetConfig+0x234>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d054      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a74      	ldr	r2, [pc, #464]	; (8007714 <DMA_SetConfig+0x238>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d04f      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a73      	ldr	r2, [pc, #460]	; (8007718 <DMA_SetConfig+0x23c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d04a      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a71      	ldr	r2, [pc, #452]	; (800771c <DMA_SetConfig+0x240>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d045      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a70      	ldr	r2, [pc, #448]	; (8007720 <DMA_SetConfig+0x244>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d040      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a6e      	ldr	r2, [pc, #440]	; (8007724 <DMA_SetConfig+0x248>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d03b      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a6d      	ldr	r2, [pc, #436]	; (8007728 <DMA_SetConfig+0x24c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d036      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a6b      	ldr	r2, [pc, #428]	; (800772c <DMA_SetConfig+0x250>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d031      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a6a      	ldr	r2, [pc, #424]	; (8007730 <DMA_SetConfig+0x254>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d02c      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a68      	ldr	r2, [pc, #416]	; (8007734 <DMA_SetConfig+0x258>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d027      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a67      	ldr	r2, [pc, #412]	; (8007738 <DMA_SetConfig+0x25c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d022      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a65      	ldr	r2, [pc, #404]	; (800773c <DMA_SetConfig+0x260>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01d      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a64      	ldr	r2, [pc, #400]	; (8007740 <DMA_SetConfig+0x264>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d018      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a62      	ldr	r2, [pc, #392]	; (8007744 <DMA_SetConfig+0x268>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a61      	ldr	r2, [pc, #388]	; (8007748 <DMA_SetConfig+0x26c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00e      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a5f      	ldr	r2, [pc, #380]	; (800774c <DMA_SetConfig+0x270>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d009      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a5e      	ldr	r2, [pc, #376]	; (8007750 <DMA_SetConfig+0x274>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <DMA_SetConfig+0x10a>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a5c      	ldr	r2, [pc, #368]	; (8007754 <DMA_SetConfig+0x278>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <DMA_SetConfig+0x10e>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <DMA_SetConfig+0x110>
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800760a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a39      	ldr	r2, [pc, #228]	; (80076f8 <DMA_SetConfig+0x21c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d04a      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a38      	ldr	r2, [pc, #224]	; (80076fc <DMA_SetConfig+0x220>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d045      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a36      	ldr	r2, [pc, #216]	; (8007700 <DMA_SetConfig+0x224>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d040      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a35      	ldr	r2, [pc, #212]	; (8007704 <DMA_SetConfig+0x228>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d03b      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a33      	ldr	r2, [pc, #204]	; (8007708 <DMA_SetConfig+0x22c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d036      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a32      	ldr	r2, [pc, #200]	; (800770c <DMA_SetConfig+0x230>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d031      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a30      	ldr	r2, [pc, #192]	; (8007710 <DMA_SetConfig+0x234>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d02c      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a2f      	ldr	r2, [pc, #188]	; (8007714 <DMA_SetConfig+0x238>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d027      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <DMA_SetConfig+0x23c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d022      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2c      	ldr	r2, [pc, #176]	; (800771c <DMA_SetConfig+0x240>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d01d      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2a      	ldr	r2, [pc, #168]	; (8007720 <DMA_SetConfig+0x244>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d018      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a29      	ldr	r2, [pc, #164]	; (8007724 <DMA_SetConfig+0x248>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d013      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a27      	ldr	r2, [pc, #156]	; (8007728 <DMA_SetConfig+0x24c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00e      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a26      	ldr	r2, [pc, #152]	; (800772c <DMA_SetConfig+0x250>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d009      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a24      	ldr	r2, [pc, #144]	; (8007730 <DMA_SetConfig+0x254>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <DMA_SetConfig+0x1d0>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a23      	ldr	r2, [pc, #140]	; (8007734 <DMA_SetConfig+0x258>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d101      	bne.n	80076b0 <DMA_SetConfig+0x1d4>
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <DMA_SetConfig+0x1d6>
 80076b0:	2300      	movs	r3, #0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d059      	beq.n	800776a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	223f      	movs	r2, #63	; 0x3f
 80076c0:	409a      	lsls	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d138      	bne.n	8007758 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80076f6:	e086      	b.n	8007806 <DMA_SetConfig+0x32a>
 80076f8:	40020010 	.word	0x40020010
 80076fc:	40020028 	.word	0x40020028
 8007700:	40020040 	.word	0x40020040
 8007704:	40020058 	.word	0x40020058
 8007708:	40020070 	.word	0x40020070
 800770c:	40020088 	.word	0x40020088
 8007710:	400200a0 	.word	0x400200a0
 8007714:	400200b8 	.word	0x400200b8
 8007718:	40020410 	.word	0x40020410
 800771c:	40020428 	.word	0x40020428
 8007720:	40020440 	.word	0x40020440
 8007724:	40020458 	.word	0x40020458
 8007728:	40020470 	.word	0x40020470
 800772c:	40020488 	.word	0x40020488
 8007730:	400204a0 	.word	0x400204a0
 8007734:	400204b8 	.word	0x400204b8
 8007738:	58025408 	.word	0x58025408
 800773c:	5802541c 	.word	0x5802541c
 8007740:	58025430 	.word	0x58025430
 8007744:	58025444 	.word	0x58025444
 8007748:	58025458 	.word	0x58025458
 800774c:	5802546c 	.word	0x5802546c
 8007750:	58025480 	.word	0x58025480
 8007754:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]
}
 8007768:	e04d      	b.n	8007806 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a29      	ldr	r2, [pc, #164]	; (8007814 <DMA_SetConfig+0x338>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d022      	beq.n	80077ba <DMA_SetConfig+0x2de>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a27      	ldr	r2, [pc, #156]	; (8007818 <DMA_SetConfig+0x33c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01d      	beq.n	80077ba <DMA_SetConfig+0x2de>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a26      	ldr	r2, [pc, #152]	; (800781c <DMA_SetConfig+0x340>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d018      	beq.n	80077ba <DMA_SetConfig+0x2de>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a24      	ldr	r2, [pc, #144]	; (8007820 <DMA_SetConfig+0x344>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <DMA_SetConfig+0x2de>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a23      	ldr	r2, [pc, #140]	; (8007824 <DMA_SetConfig+0x348>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00e      	beq.n	80077ba <DMA_SetConfig+0x2de>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a21      	ldr	r2, [pc, #132]	; (8007828 <DMA_SetConfig+0x34c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d009      	beq.n	80077ba <DMA_SetConfig+0x2de>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a20      	ldr	r2, [pc, #128]	; (800782c <DMA_SetConfig+0x350>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d004      	beq.n	80077ba <DMA_SetConfig+0x2de>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <DMA_SetConfig+0x354>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d101      	bne.n	80077be <DMA_SetConfig+0x2e2>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <DMA_SetConfig+0x2e4>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2201      	movs	r2, #1
 80077ce:	409a      	lsls	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d108      	bne.n	80077f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	60da      	str	r2, [r3, #12]
}
 80077f4:	e007      	b.n	8007806 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	60da      	str	r2, [r3, #12]
}
 8007806:	bf00      	nop
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	58025408 	.word	0x58025408
 8007818:	5802541c 	.word	0x5802541c
 800781c:	58025430 	.word	0x58025430
 8007820:	58025444 	.word	0x58025444
 8007824:	58025458 	.word	0x58025458
 8007828:	5802546c 	.word	0x5802546c
 800782c:	58025480 	.word	0x58025480
 8007830:	58025494 	.word	0x58025494

08007834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a42      	ldr	r2, [pc, #264]	; (800794c <DMA_CalcBaseAndBitshift+0x118>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d04a      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a41      	ldr	r2, [pc, #260]	; (8007950 <DMA_CalcBaseAndBitshift+0x11c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d045      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a3f      	ldr	r2, [pc, #252]	; (8007954 <DMA_CalcBaseAndBitshift+0x120>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d040      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a3e      	ldr	r2, [pc, #248]	; (8007958 <DMA_CalcBaseAndBitshift+0x124>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d03b      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a3c      	ldr	r2, [pc, #240]	; (800795c <DMA_CalcBaseAndBitshift+0x128>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d036      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a3b      	ldr	r2, [pc, #236]	; (8007960 <DMA_CalcBaseAndBitshift+0x12c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d031      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a39      	ldr	r2, [pc, #228]	; (8007964 <DMA_CalcBaseAndBitshift+0x130>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02c      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a38      	ldr	r2, [pc, #224]	; (8007968 <DMA_CalcBaseAndBitshift+0x134>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d027      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a36      	ldr	r2, [pc, #216]	; (800796c <DMA_CalcBaseAndBitshift+0x138>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d022      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a35      	ldr	r2, [pc, #212]	; (8007970 <DMA_CalcBaseAndBitshift+0x13c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d01d      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a33      	ldr	r2, [pc, #204]	; (8007974 <DMA_CalcBaseAndBitshift+0x140>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a32      	ldr	r2, [pc, #200]	; (8007978 <DMA_CalcBaseAndBitshift+0x144>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a30      	ldr	r2, [pc, #192]	; (800797c <DMA_CalcBaseAndBitshift+0x148>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a2f      	ldr	r2, [pc, #188]	; (8007980 <DMA_CalcBaseAndBitshift+0x14c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a2d      	ldr	r2, [pc, #180]	; (8007984 <DMA_CalcBaseAndBitshift+0x150>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <DMA_CalcBaseAndBitshift+0xa8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <DMA_CalcBaseAndBitshift+0x154>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d101      	bne.n	80078e0 <DMA_CalcBaseAndBitshift+0xac>
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <DMA_CalcBaseAndBitshift+0xae>
 80078e0:	2300      	movs	r3, #0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d024      	beq.n	8007930 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	3b10      	subs	r3, #16
 80078ee:	4a27      	ldr	r2, [pc, #156]	; (800798c <DMA_CalcBaseAndBitshift+0x158>)
 80078f0:	fba2 2303 	umull	r2, r3, r2, r3
 80078f4:	091b      	lsrs	r3, r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	4a24      	ldr	r2, [pc, #144]	; (8007990 <DMA_CalcBaseAndBitshift+0x15c>)
 8007900:	5cd3      	ldrb	r3, [r2, r3]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b03      	cmp	r3, #3
 800790c:	d908      	bls.n	8007920 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <DMA_CalcBaseAndBitshift+0x160>)
 8007916:	4013      	ands	r3, r2
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	659a      	str	r2, [r3, #88]	; 0x58
 800791e:	e00d      	b.n	800793c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <DMA_CalcBaseAndBitshift+0x160>)
 8007928:	4013      	ands	r3, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6593      	str	r3, [r2, #88]	; 0x58
 800792e:	e005      	b.n	800793c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	40020010 	.word	0x40020010
 8007950:	40020028 	.word	0x40020028
 8007954:	40020040 	.word	0x40020040
 8007958:	40020058 	.word	0x40020058
 800795c:	40020070 	.word	0x40020070
 8007960:	40020088 	.word	0x40020088
 8007964:	400200a0 	.word	0x400200a0
 8007968:	400200b8 	.word	0x400200b8
 800796c:	40020410 	.word	0x40020410
 8007970:	40020428 	.word	0x40020428
 8007974:	40020440 	.word	0x40020440
 8007978:	40020458 	.word	0x40020458
 800797c:	40020470 	.word	0x40020470
 8007980:	40020488 	.word	0x40020488
 8007984:	400204a0 	.word	0x400204a0
 8007988:	400204b8 	.word	0x400204b8
 800798c:	aaaaaaab 	.word	0xaaaaaaab
 8007990:	0800e3fc 	.word	0x0800e3fc
 8007994:	fffffc00 	.word	0xfffffc00

08007998 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d120      	bne.n	80079ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d858      	bhi.n	8007a66 <DMA_CheckFifoParam+0xce>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <DMA_CheckFifoParam+0x24>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a67 	.word	0x08007a67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d048      	beq.n	8007a6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079dc:	e045      	b.n	8007a6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079e6:	d142      	bne.n	8007a6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079ec:	e03f      	b.n	8007a6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f6:	d123      	bne.n	8007a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d838      	bhi.n	8007a72 <DMA_CheckFifoParam+0xda>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <DMA_CheckFifoParam+0x70>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a1f 	.word	0x08007a1f
 8007a10:	08007a19 	.word	0x08007a19
 8007a14:	08007a31 	.word	0x08007a31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
        break;
 8007a1c:	e030      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d025      	beq.n	8007a76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a2e:	e022      	b.n	8007a76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a38:	d11f      	bne.n	8007a7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a3e:	e01c      	b.n	8007a7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d902      	bls.n	8007a4e <DMA_CheckFifoParam+0xb6>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d003      	beq.n	8007a54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a4c:	e018      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]
        break;
 8007a52:	e015      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00e      	beq.n	8007a7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
    break;
 8007a64:	e00b      	b.n	8007a7e <DMA_CheckFifoParam+0xe6>
        break;
 8007a66:	bf00      	nop
 8007a68:	e00a      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        break;
 8007a6a:	bf00      	nop
 8007a6c:	e008      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        break;
 8007a6e:	bf00      	nop
 8007a70:	e006      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        break;
 8007a72:	bf00      	nop
 8007a74:	e004      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        break;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <DMA_CheckFifoParam+0xe8>
    break;
 8007a7e:	bf00      	nop
    }
  }

  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a38      	ldr	r2, [pc, #224]	; (8007b84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d022      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a36      	ldr	r2, [pc, #216]	; (8007b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d01d      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a35      	ldr	r2, [pc, #212]	; (8007b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d018      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a33      	ldr	r2, [pc, #204]	; (8007b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d013      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a32      	ldr	r2, [pc, #200]	; (8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00e      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a30      	ldr	r2, [pc, #192]	; (8007b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d009      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a2f      	ldr	r2, [pc, #188]	; (8007b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d004      	beq.n	8007aee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d101      	bne.n	8007af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007af2:	2300      	movs	r3, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01a      	beq.n	8007b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	3b08      	subs	r3, #8
 8007b00:	4a28      	ldr	r2, [pc, #160]	; (8007ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	091b      	lsrs	r3, r3, #4
 8007b08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4b26      	ldr	r3, [pc, #152]	; (8007ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a24      	ldr	r2, [pc, #144]	; (8007bac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	2201      	movs	r2, #1
 8007b26:	409a      	lsls	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b2c:	e024      	b.n	8007b78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	3b10      	subs	r3, #16
 8007b36:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b38:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3c:	091b      	lsrs	r3, r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d806      	bhi.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4a1b      	ldr	r2, [pc, #108]	; (8007bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d902      	bls.n	8007b56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3308      	adds	r3, #8
 8007b54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4b18      	ldr	r3, [pc, #96]	; (8007bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a16      	ldr	r2, [pc, #88]	; (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2201      	movs	r2, #1
 8007b72:	409a      	lsls	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	58025408 	.word	0x58025408
 8007b88:	5802541c 	.word	0x5802541c
 8007b8c:	58025430 	.word	0x58025430
 8007b90:	58025444 	.word	0x58025444
 8007b94:	58025458 	.word	0x58025458
 8007b98:	5802546c 	.word	0x5802546c
 8007b9c:	58025480 	.word	0x58025480
 8007ba0:	58025494 	.word	0x58025494
 8007ba4:	cccccccd 	.word	0xcccccccd
 8007ba8:	16009600 	.word	0x16009600
 8007bac:	58025880 	.word	0x58025880
 8007bb0:	aaaaaaab 	.word	0xaaaaaaab
 8007bb4:	400204b8 	.word	0x400204b8
 8007bb8:	4002040f 	.word	0x4002040f
 8007bbc:	10008200 	.word	0x10008200
 8007bc0:	40020880 	.word	0x40020880

08007bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d04a      	beq.n	8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d847      	bhi.n	8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d022      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d01d      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a22      	ldr	r2, [pc, #136]	; (8007c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d018      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d013      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	; (8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00e      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1e      	ldr	r2, [pc, #120]	; (8007c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d009      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1c      	ldr	r2, [pc, #112]	; (8007c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d004      	beq.n	8007c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1b      	ldr	r2, [pc, #108]	; (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d101      	bne.n	8007c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c34:	2300      	movs	r3, #0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4b17      	ldr	r3, [pc, #92]	; (8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c4c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c4e:	e009      	b.n	8007c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	461a      	mov	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a11      	ldr	r2, [pc, #68]	; (8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2201      	movs	r2, #1
 8007c6a:	409a      	lsls	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	58025408 	.word	0x58025408
 8007c80:	5802541c 	.word	0x5802541c
 8007c84:	58025430 	.word	0x58025430
 8007c88:	58025444 	.word	0x58025444
 8007c8c:	58025458 	.word	0x58025458
 8007c90:	5802546c 	.word	0x5802546c
 8007c94:	58025480 	.word	0x58025480
 8007c98:	58025494 	.word	0x58025494
 8007c9c:	1600963f 	.word	0x1600963f
 8007ca0:	58025940 	.word	0x58025940
 8007ca4:	1000823f 	.word	0x1000823f
 8007ca8:	40020940 	.word	0x40020940

08007cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b089      	sub	sp, #36	; 0x24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cba:	4b86      	ldr	r3, [pc, #536]	; (8007ed4 <HAL_GPIO_Init+0x228>)
 8007cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cbe:	e18c      	b.n	8007fda <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	4013      	ands	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 817e 	beq.w	8007fd4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d005      	beq.n	8007cf0 <HAL_GPIO_Init+0x44>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d130      	bne.n	8007d52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	43db      	mvns	r3, r3
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	4013      	ands	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d26:	2201      	movs	r2, #1
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	091b      	lsrs	r3, r3, #4
 8007d3c:	f003 0201 	and.w	r2, r3, #1
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d017      	beq.n	8007d8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	2203      	movs	r2, #3
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4013      	ands	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d123      	bne.n	8007de2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	08da      	lsrs	r2, r3, #3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3208      	adds	r2, #8
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	220f      	movs	r2, #15
 8007db2:	fa02 f303 	lsl.w	r3, r2, r3
 8007db6:	43db      	mvns	r3, r3
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	08da      	lsrs	r2, r3, #3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3208      	adds	r2, #8
 8007ddc:	69b9      	ldr	r1, [r7, #24]
 8007dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	2203      	movs	r2, #3
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	43db      	mvns	r3, r3
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	4013      	ands	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f003 0203 	and.w	r2, r3, #3
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80d8 	beq.w	8007fd4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e24:	4b2c      	ldr	r3, [pc, #176]	; (8007ed8 <HAL_GPIO_Init+0x22c>)
 8007e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e2a:	4a2b      	ldr	r2, [pc, #172]	; (8007ed8 <HAL_GPIO_Init+0x22c>)
 8007e2c:	f043 0302 	orr.w	r3, r3, #2
 8007e30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e34:	4b28      	ldr	r3, [pc, #160]	; (8007ed8 <HAL_GPIO_Init+0x22c>)
 8007e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e42:	4a26      	ldr	r2, [pc, #152]	; (8007edc <HAL_GPIO_Init+0x230>)
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	089b      	lsrs	r3, r3, #2
 8007e48:	3302      	adds	r3, #2
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	220f      	movs	r2, #15
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	43db      	mvns	r3, r3
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	4013      	ands	r3, r2
 8007e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <HAL_GPIO_Init+0x234>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d04a      	beq.n	8007f04 <HAL_GPIO_Init+0x258>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_GPIO_Init+0x238>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d02b      	beq.n	8007ece <HAL_GPIO_Init+0x222>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_GPIO_Init+0x23c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d025      	beq.n	8007eca <HAL_GPIO_Init+0x21e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <HAL_GPIO_Init+0x240>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d01f      	beq.n	8007ec6 <HAL_GPIO_Init+0x21a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <HAL_GPIO_Init+0x244>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d019      	beq.n	8007ec2 <HAL_GPIO_Init+0x216>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a18      	ldr	r2, [pc, #96]	; (8007ef4 <HAL_GPIO_Init+0x248>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <HAL_GPIO_Init+0x212>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <HAL_GPIO_Init+0x24c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00d      	beq.n	8007eba <HAL_GPIO_Init+0x20e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a16      	ldr	r2, [pc, #88]	; (8007efc <HAL_GPIO_Init+0x250>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <HAL_GPIO_Init+0x20a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a15      	ldr	r2, [pc, #84]	; (8007f00 <HAL_GPIO_Init+0x254>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d101      	bne.n	8007eb2 <HAL_GPIO_Init+0x206>
 8007eae:	2309      	movs	r3, #9
 8007eb0:	e029      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	e027      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007eb6:	2307      	movs	r3, #7
 8007eb8:	e025      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007eba:	2306      	movs	r3, #6
 8007ebc:	e023      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007ebe:	2305      	movs	r3, #5
 8007ec0:	e021      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007ec2:	2304      	movs	r3, #4
 8007ec4:	e01f      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e01d      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e01b      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e019      	b.n	8007f06 <HAL_GPIO_Init+0x25a>
 8007ed2:	bf00      	nop
 8007ed4:	58000080 	.word	0x58000080
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	58000400 	.word	0x58000400
 8007ee0:	58020000 	.word	0x58020000
 8007ee4:	58020400 	.word	0x58020400
 8007ee8:	58020800 	.word	0x58020800
 8007eec:	58020c00 	.word	0x58020c00
 8007ef0:	58021000 	.word	0x58021000
 8007ef4:	58021400 	.word	0x58021400
 8007ef8:	58021800 	.word	0x58021800
 8007efc:	58021c00 	.word	0x58021c00
 8007f00:	58022400 	.word	0x58022400
 8007f04:	2300      	movs	r3, #0
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	f002 0203 	and.w	r2, r2, #3
 8007f0c:	0092      	lsls	r2, r2, #2
 8007f0e:	4093      	lsls	r3, r2
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f16:	4938      	ldr	r1, [pc, #224]	; (8007ff8 <HAL_GPIO_Init+0x34c>)
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	3302      	adds	r3, #2
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	4013      	ands	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f47f ae6b 	bne.w	8007cc0 <HAL_GPIO_Init+0x14>
  }
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	3724      	adds	r7, #36	; 0x24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	58000400 	.word	0x58000400

08007ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	807b      	strh	r3, [r7, #2]
 8008008:	4613      	mov	r3, r2
 800800a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800800c:	787b      	ldrb	r3, [r7, #1]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008012:	887a      	ldrh	r2, [r7, #2]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008018:	e003      	b.n	8008022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	041a      	lsls	r2, r3, #16
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	619a      	str	r2, [r3, #24]
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008038:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <HAL_PWREx_ConfigSupply+0x70>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b04      	cmp	r3, #4
 8008042:	d00a      	beq.n	800805a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008044:	4b16      	ldr	r3, [pc, #88]	; (80080a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	429a      	cmp	r2, r3
 8008050:	d001      	beq.n	8008056 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e01f      	b.n	8008096 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	e01d      	b.n	8008096 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800805a:	4b11      	ldr	r3, [pc, #68]	; (80080a0 <HAL_PWREx_ConfigSupply+0x70>)
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f023 0207 	bic.w	r2, r3, #7
 8008062:	490f      	ldr	r1, [pc, #60]	; (80080a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4313      	orrs	r3, r2
 8008068:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800806a:	f7fc fec9 	bl	8004e00 <HAL_GetTick>
 800806e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008070:	e009      	b.n	8008086 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008072:	f7fc fec5 	bl	8004e00 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008080:	d901      	bls.n	8008086 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e007      	b.n	8008096 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <HAL_PWREx_ConfigSupply+0x70>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008092:	d1ee      	bne.n	8008072 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	58024800 	.word	0x58024800

080080a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08c      	sub	sp, #48	; 0x30
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e39d      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8087 	beq.w	80081d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080c4:	4b88      	ldr	r3, [pc, #544]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080ce:	4b86      	ldr	r3, [pc, #536]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d007      	beq.n	80080ea <HAL_RCC_OscConfig+0x46>
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b18      	cmp	r3, #24
 80080de:	d110      	bne.n	8008102 <HAL_RCC_OscConfig+0x5e>
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	f003 0303 	and.w	r3, r3, #3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d10b      	bne.n	8008102 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ea:	4b7f      	ldr	r3, [pc, #508]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d06c      	beq.n	80081d0 <HAL_RCC_OscConfig+0x12c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d168      	bne.n	80081d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e377      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810a:	d106      	bne.n	800811a <HAL_RCC_OscConfig+0x76>
 800810c:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a75      	ldr	r2, [pc, #468]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e02e      	b.n	8008178 <HAL_RCC_OscConfig+0xd4>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10c      	bne.n	800813c <HAL_RCC_OscConfig+0x98>
 8008122:	4b71      	ldr	r3, [pc, #452]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a70      	ldr	r2, [pc, #448]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b6e      	ldr	r3, [pc, #440]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a6d      	ldr	r2, [pc, #436]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e01d      	b.n	8008178 <HAL_RCC_OscConfig+0xd4>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008144:	d10c      	bne.n	8008160 <HAL_RCC_OscConfig+0xbc>
 8008146:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a67      	ldr	r2, [pc, #412]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 800814c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	4b65      	ldr	r3, [pc, #404]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a64      	ldr	r2, [pc, #400]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	e00b      	b.n	8008178 <HAL_RCC_OscConfig+0xd4>
 8008160:	4b61      	ldr	r3, [pc, #388]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a60      	ldr	r2, [pc, #384]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	4b5e      	ldr	r3, [pc, #376]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a5d      	ldr	r2, [pc, #372]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d013      	beq.n	80081a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008180:	f7fc fe3e 	bl	8004e00 <HAL_GetTick>
 8008184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008188:	f7fc fe3a 	bl	8004e00 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b64      	cmp	r3, #100	; 0x64
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e32b      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800819a:	4b53      	ldr	r3, [pc, #332]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f0      	beq.n	8008188 <HAL_RCC_OscConfig+0xe4>
 80081a6:	e014      	b.n	80081d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a8:	f7fc fe2a 	bl	8004e00 <HAL_GetTick>
 80081ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081b0:	f7fc fe26 	bl	8004e00 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b64      	cmp	r3, #100	; 0x64
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e317      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081c2:	4b49      	ldr	r3, [pc, #292]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x10c>
 80081ce:	e000      	b.n	80081d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 808c 	beq.w	80082f8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081e0:	4b41      	ldr	r3, [pc, #260]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081ea:	4b3f      	ldr	r3, [pc, #252]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80081ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_RCC_OscConfig+0x162>
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	2b18      	cmp	r3, #24
 80081fa:	d137      	bne.n	800826c <HAL_RCC_OscConfig+0x1c8>
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d132      	bne.n	800826c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008206:	4b38      	ldr	r3, [pc, #224]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_RCC_OscConfig+0x17a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e2e9      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800821e:	4b32      	ldr	r3, [pc, #200]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f023 0219 	bic.w	r2, r3, #25
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	492f      	ldr	r1, [pc, #188]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 800822c:	4313      	orrs	r3, r2
 800822e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008230:	f7fc fde6 	bl	8004e00 <HAL_GetTick>
 8008234:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008238:	f7fc fde2 	bl	8004e00 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e2d3      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800824a:	4b27      	ldr	r3, [pc, #156]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008256:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	061b      	lsls	r3, r3, #24
 8008264:	4920      	ldr	r1, [pc, #128]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008266:	4313      	orrs	r3, r2
 8008268:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800826a:	e045      	b.n	80082f8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d026      	beq.n	80082c2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008274:	4b1c      	ldr	r3, [pc, #112]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f023 0219 	bic.w	r2, r3, #25
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4919      	ldr	r1, [pc, #100]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 8008282:	4313      	orrs	r3, r2
 8008284:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008286:	f7fc fdbb 	bl	8004e00 <HAL_GetTick>
 800828a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800828e:	f7fc fdb7 	bl	8004e00 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e2a8      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082a0:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0f0      	beq.n	800828e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	061b      	lsls	r3, r3, #24
 80082ba:	490b      	ldr	r1, [pc, #44]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	604b      	str	r3, [r1, #4]
 80082c0:	e01a      	b.n	80082f8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082c2:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <HAL_RCC_OscConfig+0x244>)
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ce:	f7fc fd97 	bl	8004e00 <HAL_GetTick>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082d4:	e00a      	b.n	80082ec <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082d6:	f7fc fd93 	bl	8004e00 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d903      	bls.n	80082ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e284      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
 80082e8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082ec:	4b96      	ldr	r3, [pc, #600]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1ee      	bne.n	80082d6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d06a      	beq.n	80083da <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008304:	4b90      	ldr	r3, [pc, #576]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800830c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800830e:	4b8e      	ldr	r3, [pc, #568]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	2b08      	cmp	r3, #8
 8008318:	d007      	beq.n	800832a <HAL_RCC_OscConfig+0x286>
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b18      	cmp	r3, #24
 800831e:	d11b      	bne.n	8008358 <HAL_RCC_OscConfig+0x2b4>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b01      	cmp	r3, #1
 8008328:	d116      	bne.n	8008358 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800832a:	4b87      	ldr	r3, [pc, #540]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_RCC_OscConfig+0x29e>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	2b80      	cmp	r3, #128	; 0x80
 800833c:	d001      	beq.n	8008342 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e257      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008342:	4b81      	ldr	r3, [pc, #516]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	497d      	ldr	r1, [pc, #500]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008352:	4313      	orrs	r3, r2
 8008354:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008356:	e040      	b.n	80083da <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d023      	beq.n	80083a8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008360:	4b79      	ldr	r3, [pc, #484]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a78      	ldr	r2, [pc, #480]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fc fd48 	bl	8004e00 <HAL_GetTick>
 8008370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008374:	f7fc fd44 	bl	8004e00 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e235      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008386:	4b70      	ldr	r3, [pc, #448]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008392:	4b6d      	ldr	r3, [pc, #436]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	061b      	lsls	r3, r3, #24
 80083a0:	4969      	ldr	r1, [pc, #420]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60cb      	str	r3, [r1, #12]
 80083a6:	e018      	b.n	80083da <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083a8:	4b67      	ldr	r3, [pc, #412]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a66      	ldr	r2, [pc, #408]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80083ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b4:	f7fc fd24 	bl	8004e00 <HAL_GetTick>
 80083b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083bc:	f7fc fd20 	bl	8004e00 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e211      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ce:	4b5e      	ldr	r3, [pc, #376]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d036      	beq.n	8008454 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d019      	beq.n	8008422 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ee:	4b56      	ldr	r3, [pc, #344]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80083f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f2:	4a55      	ldr	r2, [pc, #340]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fa:	f7fc fd01 	bl	8004e00 <HAL_GetTick>
 80083fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008400:	e008      	b.n	8008414 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008402:	f7fc fcfd 	bl	8004e00 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d901      	bls.n	8008414 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e1ee      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008414:	4b4c      	ldr	r3, [pc, #304]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f0      	beq.n	8008402 <HAL_RCC_OscConfig+0x35e>
 8008420:	e018      	b.n	8008454 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008422:	4b49      	ldr	r3, [pc, #292]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008426:	4a48      	ldr	r2, [pc, #288]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842e:	f7fc fce7 	bl	8004e00 <HAL_GetTick>
 8008432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008436:	f7fc fce3 	bl	8004e00 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e1d4      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008448:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800844a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f0      	bne.n	8008436 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0320 	and.w	r3, r3, #32
 800845c:	2b00      	cmp	r3, #0
 800845e:	d036      	beq.n	80084ce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d019      	beq.n	800849c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008468:	4b37      	ldr	r3, [pc, #220]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a36      	ldr	r2, [pc, #216]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800846e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008472:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008474:	f7fc fcc4 	bl	8004e00 <HAL_GetTick>
 8008478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800847c:	f7fc fcc0 	bl	8004e00 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e1b1      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800848e:	4b2e      	ldr	r3, [pc, #184]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0f0      	beq.n	800847c <HAL_RCC_OscConfig+0x3d8>
 800849a:	e018      	b.n	80084ce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800849c:	4b2a      	ldr	r3, [pc, #168]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a29      	ldr	r2, [pc, #164]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80084a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084a8:	f7fc fcaa 	bl	8004e00 <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084b0:	f7fc fca6 	bl	8004e00 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e197      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084c2:	4b21      	ldr	r3, [pc, #132]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1f0      	bne.n	80084b0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8086 	beq.w	80085e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084dc:	4b1b      	ldr	r3, [pc, #108]	; (800854c <HAL_RCC_OscConfig+0x4a8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1a      	ldr	r2, [pc, #104]	; (800854c <HAL_RCC_OscConfig+0x4a8>)
 80084e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084e8:	f7fc fc8a 	bl	8004e00 <HAL_GetTick>
 80084ec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084f0:	f7fc fc86 	bl	8004e00 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b64      	cmp	r3, #100	; 0x64
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e177      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008502:	4b12      	ldr	r3, [pc, #72]	; (800854c <HAL_RCC_OscConfig+0x4a8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f0      	beq.n	80084f0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d106      	bne.n	8008524 <HAL_RCC_OscConfig+0x480>
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	6713      	str	r3, [r2, #112]	; 0x70
 8008522:	e032      	b.n	800858a <HAL_RCC_OscConfig+0x4e6>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d111      	bne.n	8008550 <HAL_RCC_OscConfig+0x4ac>
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	4a05      	ldr	r2, [pc, #20]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	6713      	str	r3, [r2, #112]	; 0x70
 8008538:	4b03      	ldr	r3, [pc, #12]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800853a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853c:	4a02      	ldr	r2, [pc, #8]	; (8008548 <HAL_RCC_OscConfig+0x4a4>)
 800853e:	f023 0304 	bic.w	r3, r3, #4
 8008542:	6713      	str	r3, [r2, #112]	; 0x70
 8008544:	e021      	b.n	800858a <HAL_RCC_OscConfig+0x4e6>
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
 800854c:	58024800 	.word	0x58024800
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b05      	cmp	r3, #5
 8008556:	d10c      	bne.n	8008572 <HAL_RCC_OscConfig+0x4ce>
 8008558:	4b83      	ldr	r3, [pc, #524]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	4a82      	ldr	r2, [pc, #520]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800855e:	f043 0304 	orr.w	r3, r3, #4
 8008562:	6713      	str	r3, [r2, #112]	; 0x70
 8008564:	4b80      	ldr	r3, [pc, #512]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	4a7f      	ldr	r2, [pc, #508]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6713      	str	r3, [r2, #112]	; 0x70
 8008570:	e00b      	b.n	800858a <HAL_RCC_OscConfig+0x4e6>
 8008572:	4b7d      	ldr	r3, [pc, #500]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	4a7c      	ldr	r2, [pc, #496]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	6713      	str	r3, [r2, #112]	; 0x70
 800857e:	4b7a      	ldr	r3, [pc, #488]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008582:	4a79      	ldr	r2, [pc, #484]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008584:	f023 0304 	bic.w	r3, r3, #4
 8008588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d015      	beq.n	80085be <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008592:	f7fc fc35 	bl	8004e00 <HAL_GetTick>
 8008596:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008598:	e00a      	b.n	80085b0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800859a:	f7fc fc31 	bl	8004e00 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e120      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085b0:	4b6d      	ldr	r3, [pc, #436]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ee      	beq.n	800859a <HAL_RCC_OscConfig+0x4f6>
 80085bc:	e014      	b.n	80085e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085be:	f7fc fc1f 	bl	8004e00 <HAL_GetTick>
 80085c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085c4:	e00a      	b.n	80085dc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c6:	f7fc fc1b 	bl	8004e00 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e10a      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085dc:	4b62      	ldr	r3, [pc, #392]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1ee      	bne.n	80085c6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80ff 	beq.w	80087f0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085f2:	4b5d      	ldr	r3, [pc, #372]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085fa:	2b18      	cmp	r3, #24
 80085fc:	f000 80ba 	beq.w	8008774 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b02      	cmp	r3, #2
 8008606:	f040 8095 	bne.w	8008734 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800860a:	4b57      	ldr	r3, [pc, #348]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a56      	ldr	r2, [pc, #344]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008616:	f7fc fbf3 	bl	8004e00 <HAL_GetTick>
 800861a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800861e:	f7fc fbef 	bl	8004e00 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0e0      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008630:	4b4d      	ldr	r3, [pc, #308]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800863c:	4b4a      	ldr	r3, [pc, #296]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800863e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008640:	4b4a      	ldr	r3, [pc, #296]	; (800876c <HAL_RCC_OscConfig+0x6c8>)
 8008642:	4013      	ands	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800864c:	0112      	lsls	r2, r2, #4
 800864e:	430a      	orrs	r2, r1
 8008650:	4945      	ldr	r1, [pc, #276]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008652:	4313      	orrs	r3, r2
 8008654:	628b      	str	r3, [r1, #40]	; 0x28
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	3b01      	subs	r3, #1
 800865c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008664:	3b01      	subs	r3, #1
 8008666:	025b      	lsls	r3, r3, #9
 8008668:	b29b      	uxth	r3, r3
 800866a:	431a      	orrs	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	3b01      	subs	r3, #1
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867e:	3b01      	subs	r3, #1
 8008680:	061b      	lsls	r3, r3, #24
 8008682:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008686:	4938      	ldr	r1, [pc, #224]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008688:	4313      	orrs	r3, r2
 800868a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800868c:	4b36      	ldr	r3, [pc, #216]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4a35      	ldr	r2, [pc, #212]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008692:	f023 0301 	bic.w	r3, r3, #1
 8008696:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008698:	4b33      	ldr	r3, [pc, #204]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800869a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800869c:	4b34      	ldr	r3, [pc, #208]	; (8008770 <HAL_RCC_OscConfig+0x6cc>)
 800869e:	4013      	ands	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086a4:	00d2      	lsls	r2, r2, #3
 80086a6:	4930      	ldr	r1, [pc, #192]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086ac:	4b2e      	ldr	r3, [pc, #184]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	f023 020c 	bic.w	r2, r3, #12
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	492b      	ldr	r1, [pc, #172]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086be:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	f023 0202 	bic.w	r2, r3, #2
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	4927      	ldr	r1, [pc, #156]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	4a24      	ldr	r2, [pc, #144]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086dc:	4b22      	ldr	r3, [pc, #136]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	4a21      	ldr	r2, [pc, #132]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086e8:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a1e      	ldr	r2, [pc, #120]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	4a1b      	ldr	r2, [pc, #108]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 80086fa:	f043 0301 	orr.w	r3, r3, #1
 80086fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a18      	ldr	r2, [pc, #96]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800870a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870c:	f7fc fb78 	bl	8004e00 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008714:	f7fc fb74 	bl	8004e00 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e065      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0f0      	beq.n	8008714 <HAL_RCC_OscConfig+0x670>
 8008732:	e05d      	b.n	80087f0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a0b      	ldr	r2, [pc, #44]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800873a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800873e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008740:	f7fc fb5e 	bl	8004e00 <HAL_GetTick>
 8008744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008746:	e008      	b.n	800875a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008748:	f7fc fb5a 	bl	8004e00 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e04b      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <HAL_RCC_OscConfig+0x6c4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f0      	bne.n	8008748 <HAL_RCC_OscConfig+0x6a4>
 8008766:	e043      	b.n	80087f0 <HAL_RCC_OscConfig+0x74c>
 8008768:	58024400 	.word	0x58024400
 800876c:	fffffc0c 	.word	0xfffffc0c
 8008770:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008774:	4b21      	ldr	r3, [pc, #132]	; (80087fc <HAL_RCC_OscConfig+0x758>)
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800877a:	4b20      	ldr	r3, [pc, #128]	; (80087fc <HAL_RCC_OscConfig+0x758>)
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b01      	cmp	r3, #1
 8008786:	d031      	beq.n	80087ec <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f003 0203 	and.w	r2, r3, #3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008792:	429a      	cmp	r2, r3
 8008794:	d12a      	bne.n	80087ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d122      	bne.n	80087ec <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d11a      	bne.n	80087ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	0a5b      	lsrs	r3, r3, #9
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d111      	bne.n	80087ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d108      	bne.n	80087ec <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	0e1b      	lsrs	r3, r3, #24
 80087de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d001      	beq.n	80087f0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3730      	adds	r7, #48	; 0x30
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	58024400 	.word	0x58024400

08008800 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e19c      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008814:	4b8a      	ldr	r3, [pc, #552]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d910      	bls.n	8008844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008822:	4b87      	ldr	r3, [pc, #540]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f023 020f 	bic.w	r2, r3, #15
 800882a:	4985      	ldr	r1, [pc, #532]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	4313      	orrs	r3, r2
 8008830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008832:	4b83      	ldr	r3, [pc, #524]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d001      	beq.n	8008844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e184      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d010      	beq.n	8008872 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	4b7b      	ldr	r3, [pc, #492]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800885c:	429a      	cmp	r2, r3
 800885e:	d908      	bls.n	8008872 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008860:	4b78      	ldr	r3, [pc, #480]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	4975      	ldr	r1, [pc, #468]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 800886e:	4313      	orrs	r3, r2
 8008870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695a      	ldr	r2, [r3, #20]
 8008882:	4b70      	ldr	r3, [pc, #448]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800888a:	429a      	cmp	r2, r3
 800888c:	d908      	bls.n	80088a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800888e:	4b6d      	ldr	r3, [pc, #436]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	496a      	ldr	r1, [pc, #424]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 800889c:	4313      	orrs	r3, r2
 800889e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0310 	and.w	r3, r3, #16
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d010      	beq.n	80088ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	4b64      	ldr	r3, [pc, #400]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d908      	bls.n	80088ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088bc:	4b61      	ldr	r3, [pc, #388]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	495e      	ldr	r1, [pc, #376]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d010      	beq.n	80088fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69da      	ldr	r2, [r3, #28]
 80088de:	4b59      	ldr	r3, [pc, #356]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d908      	bls.n	80088fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088ea:	4b56      	ldr	r3, [pc, #344]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	4953      	ldr	r1, [pc, #332]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d010      	beq.n	800892a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	4b4d      	ldr	r3, [pc, #308]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	429a      	cmp	r2, r3
 8008916:	d908      	bls.n	800892a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008918:	4b4a      	ldr	r3, [pc, #296]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	f023 020f 	bic.w	r2, r3, #15
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	4947      	ldr	r1, [pc, #284]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008926:	4313      	orrs	r3, r2
 8008928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d055      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008936:	4b43      	ldr	r3, [pc, #268]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	4940      	ldr	r1, [pc, #256]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008944:	4313      	orrs	r3, r2
 8008946:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d107      	bne.n	8008960 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008950:	4b3c      	ldr	r3, [pc, #240]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d121      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e0f6      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d107      	bne.n	8008978 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008968:	4b36      	ldr	r3, [pc, #216]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d115      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e0ea      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d107      	bne.n	8008990 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008980:	4b30      	ldr	r3, [pc, #192]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d109      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0de      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008990:	4b2c      	ldr	r3, [pc, #176]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e0d6      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089a0:	4b28      	ldr	r3, [pc, #160]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	f023 0207 	bic.w	r2, r3, #7
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4925      	ldr	r1, [pc, #148]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b2:	f7fc fa25 	bl	8004e00 <HAL_GetTick>
 80089b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b8:	e00a      	b.n	80089d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ba:	f7fc fa21 	bl	8004e00 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e0be      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d0:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	429a      	cmp	r2, r3
 80089e0:	d1eb      	bne.n	80089ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d010      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d208      	bcs.n	8008a10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089fe:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f023 020f 	bic.w	r2, r3, #15
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	490e      	ldr	r1, [pc, #56]	; (8008a44 <HAL_RCC_ClockConfig+0x244>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d214      	bcs.n	8008a48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a1e:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f023 020f 	bic.w	r2, r3, #15
 8008a26:	4906      	ldr	r1, [pc, #24]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <HAL_RCC_ClockConfig+0x240>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d005      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e086      	b.n	8008b4e <HAL_RCC_ClockConfig+0x34e>
 8008a40:	52002000 	.word	0x52002000
 8008a44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d010      	beq.n	8008a76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	4b3f      	ldr	r3, [pc, #252]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d208      	bcs.n	8008a76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a64:	4b3c      	ldr	r3, [pc, #240]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	4939      	ldr	r1, [pc, #228]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0308 	and.w	r3, r3, #8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	4b34      	ldr	r3, [pc, #208]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d208      	bcs.n	8008aa4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a92:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	492e      	ldr	r1, [pc, #184]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d010      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	4b28      	ldr	r3, [pc, #160]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d208      	bcs.n	8008ad2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ac0:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	4922      	ldr	r1, [pc, #136]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d010      	beq.n	8008b00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69da      	ldr	r2, [r3, #28]
 8008ae2:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d208      	bcs.n	8008b00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008aee:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	4917      	ldr	r1, [pc, #92]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b00:	f000 f834 	bl	8008b6c <HAL_RCC_GetSysClockFreq>
 8008b04:	4602      	mov	r2, r0
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	4912      	ldr	r1, [pc, #72]	; (8008b5c <HAL_RCC_ClockConfig+0x35c>)
 8008b12:	5ccb      	ldrb	r3, [r1, r3]
 8008b14:	f003 031f 	and.w	r3, r3, #31
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <HAL_RCC_ClockConfig+0x358>)
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <HAL_RCC_ClockConfig+0x35c>)
 8008b28:	5cd3      	ldrb	r3, [r2, r3]
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	fa22 f303 	lsr.w	r3, r2, r3
 8008b34:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <HAL_RCC_ClockConfig+0x360>)
 8008b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b38:	4a0a      	ldr	r2, [pc, #40]	; (8008b64 <HAL_RCC_ClockConfig+0x364>)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <HAL_RCC_ClockConfig+0x368>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fc f912 	bl	8004d6c <HAL_InitTick>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	58024400 	.word	0x58024400
 8008b5c:	0800e3ec 	.word	0x0800e3ec
 8008b60:	24000004 	.word	0x24000004
 8008b64:	24000000 	.word	0x24000000
 8008b68:	24000008 	.word	0x24000008

08008b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b089      	sub	sp, #36	; 0x24
 8008b70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b72:	4bb3      	ldr	r3, [pc, #716]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b7a:	2b18      	cmp	r3, #24
 8008b7c:	f200 8155 	bhi.w	8008e2a <HAL_RCC_GetSysClockFreq+0x2be>
 8008b80:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008e2b 	.word	0x08008e2b
 8008b90:	08008e2b 	.word	0x08008e2b
 8008b94:	08008e2b 	.word	0x08008e2b
 8008b98:	08008e2b 	.word	0x08008e2b
 8008b9c:	08008e2b 	.word	0x08008e2b
 8008ba0:	08008e2b 	.word	0x08008e2b
 8008ba4:	08008e2b 	.word	0x08008e2b
 8008ba8:	08008c13 	.word	0x08008c13
 8008bac:	08008e2b 	.word	0x08008e2b
 8008bb0:	08008e2b 	.word	0x08008e2b
 8008bb4:	08008e2b 	.word	0x08008e2b
 8008bb8:	08008e2b 	.word	0x08008e2b
 8008bbc:	08008e2b 	.word	0x08008e2b
 8008bc0:	08008e2b 	.word	0x08008e2b
 8008bc4:	08008e2b 	.word	0x08008e2b
 8008bc8:	08008c19 	.word	0x08008c19
 8008bcc:	08008e2b 	.word	0x08008e2b
 8008bd0:	08008e2b 	.word	0x08008e2b
 8008bd4:	08008e2b 	.word	0x08008e2b
 8008bd8:	08008e2b 	.word	0x08008e2b
 8008bdc:	08008e2b 	.word	0x08008e2b
 8008be0:	08008e2b 	.word	0x08008e2b
 8008be4:	08008e2b 	.word	0x08008e2b
 8008be8:	08008c1f 	.word	0x08008c1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bec:	4b94      	ldr	r3, [pc, #592]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bf8:	4b91      	ldr	r3, [pc, #580]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	08db      	lsrs	r3, r3, #3
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	4a90      	ldr	r2, [pc, #576]	; (8008e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c04:	fa22 f303 	lsr.w	r3, r2, r3
 8008c08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008c0a:	e111      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c0c:	4b8d      	ldr	r3, [pc, #564]	; (8008e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c0e:	61bb      	str	r3, [r7, #24]
    break;
 8008c10:	e10e      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008c12:	4b8d      	ldr	r3, [pc, #564]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c14:	61bb      	str	r3, [r7, #24]
    break;
 8008c16:	e10b      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008c18:	4b8c      	ldr	r3, [pc, #560]	; (8008e4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c1a:	61bb      	str	r3, [r7, #24]
    break;
 8008c1c:	e108      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c1e:	4b88      	ldr	r3, [pc, #544]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c28:	4b85      	ldr	r3, [pc, #532]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	091b      	lsrs	r3, r3, #4
 8008c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c34:	4b82      	ldr	r3, [pc, #520]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c3e:	4b80      	ldr	r3, [pc, #512]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	08db      	lsrs	r3, r3, #3
 8008c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	fb02 f303 	mul.w	r3, r2, r3
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80e1 	beq.w	8008e24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	f000 8083 	beq.w	8008d70 <HAL_RCC_GetSysClockFreq+0x204>
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	f200 80a1 	bhi.w	8008db4 <HAL_RCC_GetSysClockFreq+0x248>
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d003      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0x114>
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d056      	beq.n	8008d2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c7e:	e099      	b.n	8008db4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c80:	4b6f      	ldr	r3, [pc, #444]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d02d      	beq.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c8c:	4b6c      	ldr	r3, [pc, #432]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	08db      	lsrs	r3, r3, #3
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	4a6b      	ldr	r2, [pc, #428]	; (8008e44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c98:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	ee07 3a90 	vmov	s15, r3
 8008ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b62      	ldr	r3, [pc, #392]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008ce6:	e087      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b51      	ldr	r3, [pc, #324]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d2a:	e065      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3e:	4b40      	ldr	r3, [pc, #256]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6e:	e043      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d82:	4b2f      	ldr	r3, [pc, #188]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008db2:	e021      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc6:	4b1e      	ldr	r3, [pc, #120]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008df6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008df8:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	0a5b      	lsrs	r3, r3, #9
 8008dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e02:	3301      	adds	r3, #1
 8008e04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1c:	ee17 3a90 	vmov	r3, s15
 8008e20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e22:	e005      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61bb      	str	r3, [r7, #24]
    break;
 8008e28:	e002      	b.n	8008e30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008e2a:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e2c:	61bb      	str	r3, [r7, #24]
    break;
 8008e2e:	bf00      	nop
  }

  return sysclockfreq;
 8008e30:	69bb      	ldr	r3, [r7, #24]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3724      	adds	r7, #36	; 0x24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	58024400 	.word	0x58024400
 8008e44:	03d09000 	.word	0x03d09000
 8008e48:	003d0900 	.word	0x003d0900
 8008e4c:	007a1200 	.word	0x007a1200
 8008e50:	46000000 	.word	0x46000000
 8008e54:	4c742400 	.word	0x4c742400
 8008e58:	4a742400 	.word	0x4a742400
 8008e5c:	4af42400 	.word	0x4af42400

08008e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e66:	f7ff fe81 	bl	8008b6c <HAL_RCC_GetSysClockFreq>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	0a1b      	lsrs	r3, r3, #8
 8008e72:	f003 030f 	and.w	r3, r3, #15
 8008e76:	490f      	ldr	r1, [pc, #60]	; (8008eb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e78:	5ccb      	ldrb	r3, [r1, r3]
 8008e7a:	f003 031f 	and.w	r3, r3, #31
 8008e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f003 030f 	and.w	r3, r3, #15
 8008e8c:	4a09      	ldr	r2, [pc, #36]	; (8008eb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e8e:	5cd3      	ldrb	r3, [r2, r3]
 8008e90:	f003 031f 	and.w	r3, r3, #31
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9a:	4a07      	ldr	r2, [pc, #28]	; (8008eb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e9e:	4a07      	ldr	r2, [pc, #28]	; (8008ebc <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ea4:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	58024400 	.word	0x58024400
 8008eb4:	0800e3ec 	.word	0x0800e3ec
 8008eb8:	24000004 	.word	0x24000004
 8008ebc:	24000000 	.word	0x24000000

08008ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ec4:	f7ff ffcc 	bl	8008e60 <HAL_RCC_GetHCLKFreq>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	091b      	lsrs	r3, r3, #4
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	4904      	ldr	r1, [pc, #16]	; (8008ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ed6:	5ccb      	ldrb	r3, [r1, r3]
 8008ed8:	f003 031f 	and.w	r3, r3, #31
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	0800e3ec 	.word	0x0800e3ec

08008eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008ef0:	f7ff ffb6 	bl	8008e60 <HAL_RCC_GetHCLKFreq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	4904      	ldr	r1, [pc, #16]	; (8008f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f02:	5ccb      	ldrb	r3, [r1, r3]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	58024400 	.word	0x58024400
 8008f14:	0800e3ec 	.word	0x0800e3ec

08008f18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f20:	2300      	movs	r3, #0
 8008f22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f24:	2300      	movs	r3, #0
 8008f26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d03f      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f3c:	d02a      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f42:	d824      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f48:	d018      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f4e:	d81e      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f58:	d007      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f5a:	e018      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5c:	4ba4      	ldr	r3, [pc, #656]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	4aa3      	ldr	r2, [pc, #652]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f68:	e015      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	2102      	movs	r1, #2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 f989 	bl	800a288 <RCCEx_PLL2_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f7a:	e00c      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3324      	adds	r3, #36	; 0x24
 8008f80:	2102      	movs	r1, #2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fa32 	bl	800a3ec <RCCEx_PLL3_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f8c:	e003      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]
      break;
 8008f92:	e000      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f9c:	4b94      	ldr	r3, [pc, #592]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa8:	4991      	ldr	r1, [pc, #580]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	650b      	str	r3, [r1, #80]	; 0x50
 8008fae:	e001      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d03d      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d826      	bhi.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008fe5 	.word	0x08008fe5
 8008fd4:	08008ff3 	.word	0x08008ff3
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	0800901d 	.word	0x0800901d
 8008fe0:	0800901d 	.word	0x0800901d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe4:	4b82      	ldr	r3, [pc, #520]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	4a81      	ldr	r2, [pc, #516]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ff0:	e015      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 f945 	bl	800a288 <RCCEx_PLL2_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009002:	e00c      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3324      	adds	r3, #36	; 0x24
 8009008:	2100      	movs	r1, #0
 800900a:	4618      	mov	r0, r3
 800900c:	f001 f9ee 	bl	800a3ec <RCCEx_PLL3_Config>
 8009010:	4603      	mov	r3, r0
 8009012:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009014:	e003      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	75fb      	strb	r3, [r7, #23]
      break;
 800901a:	e000      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800901c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d109      	bne.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009024:	4b72      	ldr	r3, [pc, #456]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009028:	f023 0207 	bic.w	r2, r3, #7
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009030:	496f      	ldr	r1, [pc, #444]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009032:	4313      	orrs	r3, r2
 8009034:	650b      	str	r3, [r1, #80]	; 0x50
 8009036:	e001      	b.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009044:	2b00      	cmp	r3, #0
 8009046:	d051      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800904e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009052:	d036      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009054:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009058:	d830      	bhi.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800905a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800905e:	d032      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009064:	d82a      	bhi.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009066:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800906a:	d02e      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800906c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009070:	d824      	bhi.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009076:	d018      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800907c:	d81e      	bhi.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009086:	d007      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009088:	e018      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908a:	4b59      	ldr	r3, [pc, #356]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	4a58      	ldr	r2, [pc, #352]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009096:	e019      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3304      	adds	r3, #4
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 f8f2 	bl	800a288 <RCCEx_PLL2_Config>
 80090a4:	4603      	mov	r3, r0
 80090a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80090a8:	e010      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3324      	adds	r3, #36	; 0x24
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 f99b 	bl	800a3ec <RCCEx_PLL3_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090ba:	e007      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
      break;
 80090c0:	e004      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090c2:	bf00      	nop
 80090c4:	e002      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090c6:	bf00      	nop
 80090c8:	e000      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090d2:	4b47      	ldr	r3, [pc, #284]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090e0:	4943      	ldr	r1, [pc, #268]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	658b      	str	r3, [r1, #88]	; 0x58
 80090e6:	e001      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d051      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009102:	d036      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009104:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009108:	d830      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800910a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800910e:	d032      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009114:	d82a      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009116:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800911a:	d02e      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800911c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009120:	d824      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009126:	d018      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800912c:	d81e      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009136:	d007      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009138:	e018      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800913a:	4b2d      	ldr	r3, [pc, #180]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	4a2c      	ldr	r2, [pc, #176]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009146:	e019      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f001 f89a 	bl	800a288 <RCCEx_PLL2_Config>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009158:	e010      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3324      	adds	r3, #36	; 0x24
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f001 f943 	bl	800a3ec <RCCEx_PLL3_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800916a:	e007      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
      break;
 8009170:	e004      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009172:	bf00      	nop
 8009174:	e002      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009176:	bf00      	nop
 8009178:	e000      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800917a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009182:	4b1b      	ldr	r3, [pc, #108]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009190:	4917      	ldr	r1, [pc, #92]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009192:	4313      	orrs	r3, r2
 8009194:	658b      	str	r3, [r1, #88]	; 0x58
 8009196:	e001      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d035      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ac:	2b30      	cmp	r3, #48	; 0x30
 80091ae:	d01c      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091b0:	2b30      	cmp	r3, #48	; 0x30
 80091b2:	d817      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d00c      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d813      	bhi.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d019      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80091c0:	2b10      	cmp	r3, #16
 80091c2:	d10f      	bne.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c4:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80091d0:	e011      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3304      	adds	r3, #4
 80091d6:	2102      	movs	r1, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 f855 	bl	800a288 <RCCEx_PLL2_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80091e2:	e008      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
      break;
 80091e8:	e005      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80091ea:	bf00      	nop
 80091ec:	e003      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
      break;
 80091f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80091fc:	4ba3      	ldr	r3, [pc, #652]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009208:	49a0      	ldr	r1, [pc, #640]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800920a:	4313      	orrs	r3, r2
 800920c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800920e:	e001      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d047      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009228:	d030      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800922a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800922e:	d82a      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009230:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009234:	d02c      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800923a:	d824      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009240:	d018      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009246:	d81e      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800924c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009250:	d007      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009252:	e018      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009254:	4b8d      	ldr	r3, [pc, #564]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	4a8c      	ldr	r2, [pc, #560]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800925a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800925e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009260:	e017      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3304      	adds	r3, #4
 8009266:	2100      	movs	r1, #0
 8009268:	4618      	mov	r0, r3
 800926a:	f001 f80d 	bl	800a288 <RCCEx_PLL2_Config>
 800926e:	4603      	mov	r3, r0
 8009270:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009272:	e00e      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3324      	adds	r3, #36	; 0x24
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f001 f8b6 	bl	800a3ec <RCCEx_PLL3_Config>
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009284:	e005      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	75fb      	strb	r3, [r7, #23]
      break;
 800928a:	e002      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800928c:	bf00      	nop
 800928e:	e000      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d109      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009298:	4b7c      	ldr	r3, [pc, #496]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800929a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a4:	4979      	ldr	r1, [pc, #484]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	650b      	str	r3, [r1, #80]	; 0x50
 80092aa:	e001      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d049      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092c4:	d02e      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80092c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092ca:	d828      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092d0:	d02a      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80092d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092d6:	d822      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092dc:	d026      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80092de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092e2:	d81c      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092e8:	d010      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80092ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ee:	d816      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01d      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80092f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f8:	d111      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3304      	adds	r3, #4
 80092fe:	2101      	movs	r1, #1
 8009300:	4618      	mov	r0, r3
 8009302:	f000 ffc1 	bl	800a288 <RCCEx_PLL2_Config>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800930a:	e012      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3324      	adds	r3, #36	; 0x24
 8009310:	2101      	movs	r1, #1
 8009312:	4618      	mov	r0, r3
 8009314:	f001 f86a 	bl	800a3ec <RCCEx_PLL3_Config>
 8009318:	4603      	mov	r3, r0
 800931a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800931c:	e009      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	75fb      	strb	r3, [r7, #23]
      break;
 8009322:	e006      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009324:	bf00      	nop
 8009326:	e004      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009328:	bf00      	nop
 800932a:	e002      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800932c:	bf00      	nop
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d109      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009338:	4b54      	ldr	r3, [pc, #336]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800933a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009344:	4951      	ldr	r1, [pc, #324]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009346:	4313      	orrs	r3, r2
 8009348:	650b      	str	r3, [r1, #80]	; 0x50
 800934a:	e001      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d04b      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009366:	d02e      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800936c:	d828      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009372:	d02a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009378:	d822      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800937a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800937e:	d026      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009384:	d81c      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800938a:	d010      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x496>
 800938c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009390:	d816      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01d      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800939a:	d111      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3304      	adds	r3, #4
 80093a0:	2101      	movs	r1, #1
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 ff70 	bl	800a288 <RCCEx_PLL2_Config>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093ac:	e012      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3324      	adds	r3, #36	; 0x24
 80093b2:	2101      	movs	r1, #1
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f819 	bl	800a3ec <RCCEx_PLL3_Config>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093be:	e009      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	75fb      	strb	r3, [r7, #23]
      break;
 80093c4:	e006      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093c6:	bf00      	nop
 80093c8:	e004      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093ca:	bf00      	nop
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093ce:	bf00      	nop
 80093d0:	e000      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093da:	4b2c      	ldr	r3, [pc, #176]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093e8:	4928      	ldr	r1, [pc, #160]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	658b      	str	r3, [r1, #88]	; 0x58
 80093ee:	e001      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d02f      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009408:	d00e      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800940a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800940e:	d814      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d015      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009418:	d10f      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941a:	4b1c      	ldr	r3, [pc, #112]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800941c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941e:	4a1b      	ldr	r2, [pc, #108]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009426:	e00c      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3304      	adds	r3, #4
 800942c:	2101      	movs	r1, #1
 800942e:	4618      	mov	r0, r3
 8009430:	f000 ff2a 	bl	800a288 <RCCEx_PLL2_Config>
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009438:	e003      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	75fb      	strb	r3, [r7, #23]
      break;
 800943e:	e000      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d109      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009448:	4b10      	ldr	r3, [pc, #64]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800944a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800944c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009454:	490d      	ldr	r1, [pc, #52]	; (800948c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009456:	4313      	orrs	r3, r2
 8009458:	650b      	str	r3, [r1, #80]	; 0x50
 800945a:	e001      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d034      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009470:	2b03      	cmp	r3, #3
 8009472:	d81d      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094b7 	.word	0x080094b7
 8009480:	08009491 	.word	0x08009491
 8009484:	0800949f 	.word	0x0800949f
 8009488:	080094b7 	.word	0x080094b7
 800948c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009490:	4bb1      	ldr	r3, [pc, #708]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009494:	4ab0      	ldr	r2, [pc, #704]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800949a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800949c:	e00c      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3304      	adds	r3, #4
 80094a2:	2102      	movs	r1, #2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 feef 	bl	800a288 <RCCEx_PLL2_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094ae:	e003      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	75fb      	strb	r3, [r7, #23]
      break;
 80094b4:	e000      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80094b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d109      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094be:	4ba6      	ldr	r3, [pc, #664]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094c2:	f023 0203 	bic.w	r2, r3, #3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	49a3      	ldr	r1, [pc, #652]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094d0:	e001      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 8086 	beq.w	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094e4:	4b9d      	ldr	r3, [pc, #628]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a9c      	ldr	r2, [pc, #624]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80094ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094f0:	f7fb fc86 	bl	8004e00 <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094f6:	e009      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f8:	f7fb fc82 	bl	8004e00 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b64      	cmp	r3, #100	; 0x64
 8009504:	d902      	bls.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	75fb      	strb	r3, [r7, #23]
        break;
 800950a:	e005      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800950c:	4b93      	ldr	r3, [pc, #588]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0ef      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d166      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800951e:	4b8e      	ldr	r3, [pc, #568]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009528:	4053      	eors	r3, r2
 800952a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952e:	2b00      	cmp	r3, #0
 8009530:	d013      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009532:	4b89      	ldr	r3, [pc, #548]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800953a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800953c:	4b86      	ldr	r3, [pc, #536]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800953e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009540:	4a85      	ldr	r2, [pc, #532]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009546:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009548:	4b83      	ldr	r3, [pc, #524]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800954a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954c:	4a82      	ldr	r2, [pc, #520]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800954e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009552:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009554:	4a80      	ldr	r2, [pc, #512]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009564:	d115      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009566:	f7fb fc4b 	bl	8004e00 <HAL_GetTick>
 800956a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800956c:	e00b      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800956e:	f7fb fc47 	bl	8004e00 <HAL_GetTick>
 8009572:	4602      	mov	r2, r0
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	f241 3288 	movw	r2, #5000	; 0x1388
 800957c:	4293      	cmp	r3, r2
 800957e:	d902      	bls.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	75fb      	strb	r3, [r7, #23]
            break;
 8009584:	e005      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009586:	4b74      	ldr	r3, [pc, #464]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0ed      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d126      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800959e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a6:	d10d      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80095a8:	4b6b      	ldr	r3, [pc, #428]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095b6:	0919      	lsrs	r1, r3, #4
 80095b8:	4b69      	ldr	r3, [pc, #420]	; (8009760 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80095ba:	400b      	ands	r3, r1
 80095bc:	4966      	ldr	r1, [pc, #408]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	610b      	str	r3, [r1, #16]
 80095c2:	e005      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80095c4:	4b64      	ldr	r3, [pc, #400]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	4a63      	ldr	r2, [pc, #396]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095ce:	6113      	str	r3, [r2, #16]
 80095d0:	4b61      	ldr	r3, [pc, #388]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095de:	495e      	ldr	r1, [pc, #376]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	670b      	str	r3, [r1, #112]	; 0x70
 80095e4:	e004      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	75bb      	strb	r3, [r7, #22]
 80095ea:	e001      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d07e      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009600:	2b28      	cmp	r3, #40	; 0x28
 8009602:	d867      	bhi.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009604:	a201      	add	r2, pc, #4	; (adr r2, 800960c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	080096db 	.word	0x080096db
 8009610:	080096d5 	.word	0x080096d5
 8009614:	080096d5 	.word	0x080096d5
 8009618:	080096d5 	.word	0x080096d5
 800961c:	080096d5 	.word	0x080096d5
 8009620:	080096d5 	.word	0x080096d5
 8009624:	080096d5 	.word	0x080096d5
 8009628:	080096d5 	.word	0x080096d5
 800962c:	080096b1 	.word	0x080096b1
 8009630:	080096d5 	.word	0x080096d5
 8009634:	080096d5 	.word	0x080096d5
 8009638:	080096d5 	.word	0x080096d5
 800963c:	080096d5 	.word	0x080096d5
 8009640:	080096d5 	.word	0x080096d5
 8009644:	080096d5 	.word	0x080096d5
 8009648:	080096d5 	.word	0x080096d5
 800964c:	080096c3 	.word	0x080096c3
 8009650:	080096d5 	.word	0x080096d5
 8009654:	080096d5 	.word	0x080096d5
 8009658:	080096d5 	.word	0x080096d5
 800965c:	080096d5 	.word	0x080096d5
 8009660:	080096d5 	.word	0x080096d5
 8009664:	080096d5 	.word	0x080096d5
 8009668:	080096d5 	.word	0x080096d5
 800966c:	080096db 	.word	0x080096db
 8009670:	080096d5 	.word	0x080096d5
 8009674:	080096d5 	.word	0x080096d5
 8009678:	080096d5 	.word	0x080096d5
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096d5 	.word	0x080096d5
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096d5 	.word	0x080096d5
 800968c:	080096db 	.word	0x080096db
 8009690:	080096d5 	.word	0x080096d5
 8009694:	080096d5 	.word	0x080096d5
 8009698:	080096d5 	.word	0x080096d5
 800969c:	080096d5 	.word	0x080096d5
 80096a0:	080096d5 	.word	0x080096d5
 80096a4:	080096d5 	.word	0x080096d5
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096db 	.word	0x080096db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3304      	adds	r3, #4
 80096b4:	2101      	movs	r1, #1
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fde6 	bl	800a288 <RCCEx_PLL2_Config>
 80096bc:	4603      	mov	r3, r0
 80096be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096c0:	e00c      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3324      	adds	r3, #36	; 0x24
 80096c6:	2101      	movs	r1, #1
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 fe8f 	bl	800a3ec <RCCEx_PLL3_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096d2:	e003      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	75fb      	strb	r3, [r7, #23]
      break;
 80096d8:	e000      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80096da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096e2:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ee:	491a      	ldr	r1, [pc, #104]	; (8009758 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	654b      	str	r3, [r1, #84]	; 0x54
 80096f4:	e001      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d03e      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970a:	2b05      	cmp	r3, #5
 800970c:	d820      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009765 	.word	0x08009765
 8009718:	0800972d 	.word	0x0800972d
 800971c:	0800973f 	.word	0x0800973f
 8009720:	08009765 	.word	0x08009765
 8009724:	08009765 	.word	0x08009765
 8009728:	08009765 	.word	0x08009765
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3304      	adds	r3, #4
 8009730:	2101      	movs	r1, #1
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fda8 	bl	800a288 <RCCEx_PLL2_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800973c:	e013      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3324      	adds	r3, #36	; 0x24
 8009742:	2101      	movs	r1, #1
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fe51 	bl	800a3ec <RCCEx_PLL3_Config>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800974e:	e00a      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	75fb      	strb	r3, [r7, #23]
      break;
 8009754:	e007      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009756:	bf00      	nop
 8009758:	58024400 	.word	0x58024400
 800975c:	58024800 	.word	0x58024800
 8009760:	00ffffcf 	.word	0x00ffffcf
      break;
 8009764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800976c:	4b9f      	ldr	r3, [pc, #636]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800976e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009770:	f023 0207 	bic.w	r2, r3, #7
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009778:	499c      	ldr	r1, [pc, #624]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800977a:	4313      	orrs	r3, r2
 800977c:	654b      	str	r3, [r1, #84]	; 0x54
 800977e:	e001      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d039      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009796:	2b05      	cmp	r3, #5
 8009798:	d820      	bhi.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800979a:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097e3 	.word	0x080097e3
 80097a4:	080097b9 	.word	0x080097b9
 80097a8:	080097cb 	.word	0x080097cb
 80097ac:	080097e3 	.word	0x080097e3
 80097b0:	080097e3 	.word	0x080097e3
 80097b4:	080097e3 	.word	0x080097e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3304      	adds	r3, #4
 80097bc:	2101      	movs	r1, #1
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fd62 	bl	800a288 <RCCEx_PLL2_Config>
 80097c4:	4603      	mov	r3, r0
 80097c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097c8:	e00c      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3324      	adds	r3, #36	; 0x24
 80097ce:	2101      	movs	r1, #1
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 fe0b 	bl	800a3ec <RCCEx_PLL3_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097da:	e003      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	75fb      	strb	r3, [r7, #23]
      break;
 80097e0:	e000      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80097e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097ea:	4b80      	ldr	r3, [pc, #512]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ee:	f023 0207 	bic.w	r2, r3, #7
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f8:	497c      	ldr	r1, [pc, #496]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	658b      	str	r3, [r1, #88]	; 0x58
 80097fe:	e001      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b00      	cmp	r3, #0
 800980e:	d04b      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800981a:	d02e      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800981c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009820:	d828      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009826:	d02a      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800982c:	d822      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800982e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009832:	d026      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009834:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009838:	d81c      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800983a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983e:	d010      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009844:	d816      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d01d      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800984a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800984e:	d111      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3304      	adds	r3, #4
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fd16 	bl	800a288 <RCCEx_PLL2_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009860:	e012      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3324      	adds	r3, #36	; 0x24
 8009866:	2102      	movs	r1, #2
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fdbf 	bl	800a3ec <RCCEx_PLL3_Config>
 800986e:	4603      	mov	r3, r0
 8009870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009872:	e009      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	75fb      	strb	r3, [r7, #23]
      break;
 8009878:	e006      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800987a:	bf00      	nop
 800987c:	e004      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800987e:	bf00      	nop
 8009880:	e002      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800988e:	4b57      	ldr	r3, [pc, #348]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989c:	4953      	ldr	r1, [pc, #332]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	654b      	str	r3, [r1, #84]	; 0x54
 80098a2:	e001      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d04b      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098be:	d02e      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80098c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098c4:	d828      	bhi.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ca:	d02a      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80098cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d0:	d822      	bhi.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098d6:	d026      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80098d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098dc:	d81c      	bhi.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e2:	d010      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80098e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e8:	d816      	bhi.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01d      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80098ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f2:	d111      	bne.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3304      	adds	r3, #4
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fcc4 	bl	800a288 <RCCEx_PLL2_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009904:	e012      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3324      	adds	r3, #36	; 0x24
 800990a:	2102      	movs	r1, #2
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fd6d 	bl	800a3ec <RCCEx_PLL3_Config>
 8009912:	4603      	mov	r3, r0
 8009914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009916:	e009      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	75fb      	strb	r3, [r7, #23]
      break;
 800991c:	e006      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800991e:	bf00      	nop
 8009920:	e004      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009922:	bf00      	nop
 8009924:	e002      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009926:	bf00      	nop
 8009928:	e000      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800992a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009936:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009940:	492a      	ldr	r1, [pc, #168]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009942:	4313      	orrs	r3, r2
 8009944:	658b      	str	r3, [r1, #88]	; 0x58
 8009946:	e001      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009954:	2b00      	cmp	r3, #0
 8009956:	d04d      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800995e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009962:	d02e      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009964:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009968:	d828      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800996a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800996e:	d02a      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009974:	d822      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009976:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800997a:	d026      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800997c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009980:	d81c      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009986:	d010      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800998c:	d816      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01d      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009996:	d111      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fc72 	bl	800a288 <RCCEx_PLL2_Config>
 80099a4:	4603      	mov	r3, r0
 80099a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099a8:	e012      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3324      	adds	r3, #36	; 0x24
 80099ae:	2102      	movs	r1, #2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 fd1b 	bl	800a3ec <RCCEx_PLL3_Config>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099ba:	e009      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	75fb      	strb	r3, [r7, #23]
      break;
 80099c0:	e006      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099c2:	bf00      	nop
 80099c4:	e004      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099c6:	bf00      	nop
 80099c8:	e002      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10c      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099e4:	4901      	ldr	r1, [pc, #4]	; (80099ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	658b      	str	r3, [r1, #88]	; 0x58
 80099ea:	e003      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80099ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d018      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a08:	d10a      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3324      	adds	r3, #36	; 0x24
 8009a0e:	2102      	movs	r1, #2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 fceb 	bl	800a3ec <RCCEx_PLL3_Config>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a20:	4b8a      	ldr	r3, [pc, #552]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a2c:	4987      	ldr	r1, [pc, #540]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 0310 	and.w	r3, r3, #16
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d01a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a48:	d10a      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3324      	adds	r3, #36	; 0x24
 8009a4e:	2102      	movs	r1, #2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fccb 	bl	800a3ec <RCCEx_PLL3_Config>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a60:	4b7a      	ldr	r3, [pc, #488]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6e:	4977      	ldr	r1, [pc, #476]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d034      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a8a:	d01d      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a90:	d817      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a9a:	d009      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a9c:	e011      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fbef 	bl	800a288 <RCCEx_PLL2_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009aae:	e00c      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3324      	adds	r3, #36	; 0x24
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fc98 	bl	800a3ec <RCCEx_PLL3_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ac0:	e003      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac6:	e000      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ad0:	4b5e      	ldr	r3, [pc, #376]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ade:	495b      	ldr	r1, [pc, #364]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	658b      	str	r3, [r1, #88]	; 0x58
 8009ae4:	e001      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d033      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b00:	d01c      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b06:	d816      	bhi.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0c:	d003      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b12:	d007      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009b14:	e00f      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b16:	4b4d      	ldr	r3, [pc, #308]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	4a4c      	ldr	r2, [pc, #304]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b22:	e00c      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3324      	adds	r3, #36	; 0x24
 8009b28:	2101      	movs	r1, #1
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fc5e 	bl	800a3ec <RCCEx_PLL3_Config>
 8009b30:	4603      	mov	r3, r0
 8009b32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b34:	e003      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3a:	e000      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10a      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b44:	4b41      	ldr	r3, [pc, #260]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b52:	493e      	ldr	r1, [pc, #248]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b54:	4313      	orrs	r3, r2
 8009b56:	654b      	str	r3, [r1, #84]	; 0x54
 8009b58:	e001      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d029      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b76:	d007      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009b78:	e00f      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b7a:	4b34      	ldr	r3, [pc, #208]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	4a33      	ldr	r2, [pc, #204]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b86:	e00b      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	2102      	movs	r1, #2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fb7a 	bl	800a288 <RCCEx_PLL2_Config>
 8009b94:	4603      	mov	r3, r0
 8009b96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b98:	e002      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ba6:	4b29      	ldr	r3, [pc, #164]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009baa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb2:	4926      	ldr	r1, [pc, #152]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009bb8:	e001      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3324      	adds	r3, #36	; 0x24
 8009bce:	2102      	movs	r1, #2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fc0b 	bl	800a3ec <RCCEx_PLL3_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d033      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bf4:	d017      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bfa:	d811      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c00:	d013      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c06:	d80b      	bhi.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d010      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c10:	d106      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c12:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	4a0d      	ldr	r2, [pc, #52]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c1e:	e007      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	e004      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c26:	bf00      	nop
 8009c28:	e002      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c2a:	bf00      	nop
 8009c2c:	e000      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10c      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c36:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c42:	4902      	ldr	r1, [pc, #8]	; (8009c4c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	654b      	str	r3, [r1, #84]	; 0x54
 8009c48:	e004      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009c4a:	bf00      	nop
 8009c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
 8009c52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c60:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6c:	4926      	ldr	r1, [pc, #152]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d008      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c7e:	4b22      	ldr	r3, [pc, #136]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c8a:	491f      	ldr	r1, [pc, #124]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00d      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	4a19      	ldr	r2, [pc, #100]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ca2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ca6:	6113      	str	r3, [r2, #16]
 8009ca8:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cb2:	4915      	ldr	r1, [pc, #84]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da08      	bge.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cc0:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ccc:	490e      	ldr	r1, [pc, #56]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009cde:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cec:	4906      	ldr	r1, [pc, #24]	; (8009d08 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009cf2:	7dbb      	ldrb	r3, [r7, #22]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e000      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	58024400 	.word	0x58024400

08009d0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d10:	f7ff f8a6 	bl	8008e60 <HAL_RCC_GetHCLKFreq>
 8009d14:	4602      	mov	r2, r0
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	091b      	lsrs	r3, r3, #4
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	4904      	ldr	r1, [pc, #16]	; (8009d34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d22:	5ccb      	ldrb	r3, [r1, r3]
 8009d24:	f003 031f 	and.w	r3, r3, #31
 8009d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	58024400 	.word	0x58024400
 8009d34:	0800e3ec 	.word	0x0800e3ec

08009d38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b089      	sub	sp, #36	; 0x24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d40:	4ba1      	ldr	r3, [pc, #644]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d44:	f003 0303 	and.w	r3, r3, #3
 8009d48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d4a:	4b9f      	ldr	r3, [pc, #636]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4e:	0b1b      	lsrs	r3, r3, #12
 8009d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d56:	4b9c      	ldr	r3, [pc, #624]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5a:	091b      	lsrs	r3, r3, #4
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d62:	4b99      	ldr	r3, [pc, #612]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d66:	08db      	lsrs	r3, r3, #3
 8009d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	fb02 f303 	mul.w	r3, r2, r3
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 8111 	beq.w	8009fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	f000 8083 	beq.w	8009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	f200 80a1 	bhi.w	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d056      	beq.n	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009da2:	e099      	b.n	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da4:	4b88      	ldr	r3, [pc, #544]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0320 	and.w	r3, r3, #32
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d02d      	beq.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009db0:	4b85      	ldr	r3, [pc, #532]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	08db      	lsrs	r3, r3, #3
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	4a84      	ldr	r2, [pc, #528]	; (8009fcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b7b      	ldr	r3, [pc, #492]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e0a:	e087      	b.n	8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b6a      	ldr	r3, [pc, #424]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e4e:	e065      	b.n	8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b59      	ldr	r3, [pc, #356]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e92:	e043      	b.n	8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b48      	ldr	r3, [pc, #288]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ed6:	e021      	b.n	8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b37      	ldr	r3, [pc, #220]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f1c:	4b2a      	ldr	r3, [pc, #168]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f42:	ee17 2a90 	vmov	r2, s15
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f4a:	4b1f      	ldr	r3, [pc, #124]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	0c1b      	lsrs	r3, r3, #16
 8009f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f70:	ee17 2a90 	vmov	r2, s15
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009f78:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	0e1b      	lsrs	r3, r3, #24
 8009f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f9e:	ee17 2a90 	vmov	r2, s15
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009fa6:	e008      	b.n	8009fba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	609a      	str	r2, [r3, #8]
}
 8009fba:	bf00      	nop
 8009fbc:	3724      	adds	r7, #36	; 0x24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	03d09000 	.word	0x03d09000
 8009fd0:	46000000 	.word	0x46000000
 8009fd4:	4c742400 	.word	0x4c742400
 8009fd8:	4a742400 	.word	0x4a742400
 8009fdc:	4af42400 	.word	0x4af42400

08009fe0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b089      	sub	sp, #36	; 0x24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fe8:	4ba1      	ldr	r3, [pc, #644]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009ff2:	4b9f      	ldr	r3, [pc, #636]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	0d1b      	lsrs	r3, r3, #20
 8009ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ffc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ffe:	4b9c      	ldr	r3, [pc, #624]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	0a1b      	lsrs	r3, r3, #8
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a00a:	4b99      	ldr	r3, [pc, #612]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00e:	08db      	lsrs	r3, r3, #3
 800a010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	fb02 f303 	mul.w	r3, r2, r3
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 8111 	beq.w	800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2b02      	cmp	r3, #2
 800a032:	f000 8083 	beq.w	800a13c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	f200 80a1 	bhi.w	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d003      	beq.n	800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d056      	beq.n	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a04a:	e099      	b.n	800a180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a04c:	4b88      	ldr	r3, [pc, #544]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d02d      	beq.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a058:	4b85      	ldr	r3, [pc, #532]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	08db      	lsrs	r3, r3, #3
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	4a84      	ldr	r2, [pc, #528]	; (800a274 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a064:	fa22 f303 	lsr.w	r3, r2, r3
 800a068:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a082:	4b7b      	ldr	r3, [pc, #492]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	ed97 6a03 	vldr	s12, [r7, #12]
 800a096:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0b2:	e087      	b.n	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a27c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c6:	4b6a      	ldr	r3, [pc, #424]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0f6:	e065      	b.n	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10a:	4b59      	ldr	r3, [pc, #356]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a13a:	e043      	b.n	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14e:	4b48      	ldr	r3, [pc, #288]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a162:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a17e:	e021      	b.n	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a192:	4b37      	ldr	r3, [pc, #220]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1c4:	4b2a      	ldr	r3, [pc, #168]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	0a5b      	lsrs	r3, r3, #9
 800a1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ea:	ee17 2a90 	vmov	r2, s15
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a1f2:	4b1f      	ldr	r3, [pc, #124]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	0c1b      	lsrs	r3, r3, #16
 800a1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fc:	ee07 3a90 	vmov	s15, r3
 800a200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a20c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a218:	ee17 2a90 	vmov	r2, s15
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a220:	4b13      	ldr	r3, [pc, #76]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	0e1b      	lsrs	r3, r3, #24
 800a226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a23a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a23e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a246:	ee17 2a90 	vmov	r2, s15
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a24e:	e008      	b.n	800a262 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	609a      	str	r2, [r3, #8]
}
 800a262:	bf00      	nop
 800a264:	3724      	adds	r7, #36	; 0x24
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400
 800a274:	03d09000 	.word	0x03d09000
 800a278:	46000000 	.word	0x46000000
 800a27c:	4c742400 	.word	0x4c742400
 800a280:	4a742400 	.word	0x4a742400
 800a284:	4af42400 	.word	0x4af42400

0800a288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a296:	4b53      	ldr	r3, [pc, #332]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d101      	bne.n	800a2a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e099      	b.n	800a3da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2a6:	4b4f      	ldr	r3, [pc, #316]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a4e      	ldr	r2, [pc, #312]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b2:	f7fa fda5 	bl	8004e00 <HAL_GetTick>
 800a2b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2b8:	e008      	b.n	800a2cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2ba:	f7fa fda1 	bl	8004e00 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e086      	b.n	800a3da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2cc:	4b45      	ldr	r3, [pc, #276]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f0      	bne.n	800a2ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2d8:	4b42      	ldr	r3, [pc, #264]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	031b      	lsls	r3, r3, #12
 800a2e6:	493f      	ldr	r1, [pc, #252]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	628b      	str	r3, [r1, #40]	; 0x28
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	025b      	lsls	r3, r3, #9
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	3b01      	subs	r3, #1
 800a308:	041b      	lsls	r3, r3, #16
 800a30a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	3b01      	subs	r3, #1
 800a316:	061b      	lsls	r3, r3, #24
 800a318:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a31c:	4931      	ldr	r1, [pc, #196]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a322:	4b30      	ldr	r3, [pc, #192]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	492d      	ldr	r1, [pc, #180]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a330:	4313      	orrs	r3, r2
 800a332:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a334:	4b2b      	ldr	r3, [pc, #172]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	f023 0220 	bic.w	r2, r3, #32
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	4928      	ldr	r1, [pc, #160]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a342:	4313      	orrs	r3, r2
 800a344:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a346:	4b27      	ldr	r3, [pc, #156]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	4a26      	ldr	r2, [pc, #152]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a34c:	f023 0310 	bic.w	r3, r3, #16
 800a350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a352:	4b24      	ldr	r3, [pc, #144]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a356:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <RCCEx_PLL2_Config+0x160>)
 800a358:	4013      	ands	r3, r2
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	69d2      	ldr	r2, [r2, #28]
 800a35e:	00d2      	lsls	r2, r2, #3
 800a360:	4920      	ldr	r1, [pc, #128]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a362:	4313      	orrs	r3, r2
 800a364:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a366:	4b1f      	ldr	r3, [pc, #124]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36a:	4a1e      	ldr	r2, [pc, #120]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	f043 0310 	orr.w	r3, r3, #16
 800a370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d106      	bne.n	800a386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a378:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	4a19      	ldr	r2, [pc, #100]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a37e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a382:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a384:	e00f      	b.n	800a3a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d106      	bne.n	800a39a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a38c:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	4a14      	ldr	r2, [pc, #80]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a396:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a398:	e005      	b.n	800a3a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	4a11      	ldr	r2, [pc, #68]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a0e      	ldr	r2, [pc, #56]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3b2:	f7fa fd25 	bl	8004e00 <HAL_GetTick>
 800a3b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3b8:	e008      	b.n	800a3cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3ba:	f7fa fd21 	bl	8004e00 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d901      	bls.n	800a3cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e006      	b.n	800a3da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3cc:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0f0      	beq.n	800a3ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	58024400 	.word	0x58024400
 800a3e8:	ffff0007 	.word	0xffff0007

0800a3ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3fa:	4b53      	ldr	r3, [pc, #332]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b03      	cmp	r3, #3
 800a404:	d101      	bne.n	800a40a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e099      	b.n	800a53e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a40a:	4b4f      	ldr	r3, [pc, #316]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a4e      	ldr	r2, [pc, #312]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a416:	f7fa fcf3 	bl	8004e00 <HAL_GetTick>
 800a41a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a41c:	e008      	b.n	800a430 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a41e:	f7fa fcef 	bl	8004e00 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d901      	bls.n	800a430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e086      	b.n	800a53e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a430:	4b45      	ldr	r3, [pc, #276]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f0      	bne.n	800a41e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a43c:	4b42      	ldr	r3, [pc, #264]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a440:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	051b      	lsls	r3, r3, #20
 800a44a:	493f      	ldr	r1, [pc, #252]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	628b      	str	r3, [r1, #40]	; 0x28
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	3b01      	subs	r3, #1
 800a456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	3b01      	subs	r3, #1
 800a460:	025b      	lsls	r3, r3, #9
 800a462:	b29b      	uxth	r3, r3
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	041b      	lsls	r3, r3, #16
 800a46e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	3b01      	subs	r3, #1
 800a47a:	061b      	lsls	r3, r3, #24
 800a47c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a480:	4931      	ldr	r1, [pc, #196]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a482:	4313      	orrs	r3, r2
 800a484:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a486:	4b30      	ldr	r3, [pc, #192]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	492d      	ldr	r1, [pc, #180]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a494:	4313      	orrs	r3, r2
 800a496:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a498:	4b2b      	ldr	r3, [pc, #172]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	4928      	ldr	r1, [pc, #160]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4aa:	4b27      	ldr	r3, [pc, #156]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	4a26      	ldr	r2, [pc, #152]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <RCCEx_PLL3_Config+0x160>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	69d2      	ldr	r2, [r2, #28]
 800a4c2:	00d2      	lsls	r2, r2, #3
 800a4c4:	4920      	ldr	r1, [pc, #128]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4ca:	4b1f      	ldr	r3, [pc, #124]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	4a1e      	ldr	r2, [pc, #120]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	4a19      	ldr	r2, [pc, #100]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4e8:	e00f      	b.n	800a50a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d106      	bne.n	800a4fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4f0:	4b15      	ldr	r3, [pc, #84]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	4a14      	ldr	r2, [pc, #80]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a4f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4fc:	e005      	b.n	800a50a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4fe:	4b12      	ldr	r3, [pc, #72]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	4a11      	ldr	r2, [pc, #68]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a508:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a0e      	ldr	r2, [pc, #56]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a516:	f7fa fc73 	bl	8004e00 <HAL_GetTick>
 800a51a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a51c:	e008      	b.n	800a530 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a51e:	f7fa fc6f 	bl	8004e00 <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d901      	bls.n	800a530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e006      	b.n	800a53e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a530:	4b05      	ldr	r3, [pc, #20]	; (800a548 <RCCEx_PLL3_Config+0x15c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0f0      	beq.n	800a51e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	58024400 	.word	0x58024400
 800a54c:	ffff0007 	.word	0xffff0007

0800a550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e049      	b.n	800a5f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d106      	bne.n	800a57c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7fa f864 	bl	8004644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4619      	mov	r1, r3
 800a58e:	4610      	mov	r0, r2
 800a590:	f000 fdc0 	bl	800b114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b01      	cmp	r3, #1
 800a612:	d001      	beq.n	800a618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e05e      	b.n	800a6d6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 0201 	orr.w	r2, r2, #1
 800a62e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a2b      	ldr	r2, [pc, #172]	; (800a6e4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d02c      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a642:	d027      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a27      	ldr	r2, [pc, #156]	; (800a6e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d022      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a26      	ldr	r2, [pc, #152]	; (800a6ec <HAL_TIM_Base_Start_IT+0xec>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d01d      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a24      	ldr	r2, [pc, #144]	; (800a6f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d018      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a23      	ldr	r2, [pc, #140]	; (800a6f4 <HAL_TIM_Base_Start_IT+0xf4>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d013      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a21      	ldr	r2, [pc, #132]	; (800a6f8 <HAL_TIM_Base_Start_IT+0xf8>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00e      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a20      	ldr	r2, [pc, #128]	; (800a6fc <HAL_TIM_Base_Start_IT+0xfc>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d009      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a1e      	ldr	r2, [pc, #120]	; (800a700 <HAL_TIM_Base_Start_IT+0x100>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_TIM_Base_Start_IT+0x94>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <HAL_TIM_Base_Start_IT+0x104>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d115      	bne.n	800a6c0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	4b1b      	ldr	r3, [pc, #108]	; (800a708 <HAL_TIM_Base_Start_IT+0x108>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b06      	cmp	r3, #6
 800a6a4:	d015      	beq.n	800a6d2 <HAL_TIM_Base_Start_IT+0xd2>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ac:	d011      	beq.n	800a6d2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0201 	orr.w	r2, r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6be:	e008      	b.n	800a6d2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0201 	orr.w	r2, r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	e000      	b.n	800a6d4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40000400 	.word	0x40000400
 800a6ec:	40000800 	.word	0x40000800
 800a6f0:	40000c00 	.word	0x40000c00
 800a6f4:	40010400 	.word	0x40010400
 800a6f8:	40001800 	.word	0x40001800
 800a6fc:	40014000 	.word	0x40014000
 800a700:	4000e000 	.word	0x4000e000
 800a704:	4000e400 	.word	0x4000e400
 800a708:	00010007 	.word	0x00010007

0800a70c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e049      	b.n	800a7b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f9 ffce 	bl	80046d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	4619      	mov	r1, r3
 800a74a:	4610      	mov	r0, r2
 800a74c:	f000 fce2 	bl	800b114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <HAL_TIM_PWM_Start+0x24>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	bf14      	ite	ne
 800a7d8:	2301      	movne	r3, #1
 800a7da:	2300      	moveq	r3, #0
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	e03c      	b.n	800a85a <HAL_TIM_PWM_Start+0x9e>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d109      	bne.n	800a7fa <HAL_TIM_PWM_Start+0x3e>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	bf14      	ite	ne
 800a7f2:	2301      	movne	r3, #1
 800a7f4:	2300      	moveq	r3, #0
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	e02f      	b.n	800a85a <HAL_TIM_PWM_Start+0x9e>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d109      	bne.n	800a814 <HAL_TIM_PWM_Start+0x58>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b01      	cmp	r3, #1
 800a80a:	bf14      	ite	ne
 800a80c:	2301      	movne	r3, #1
 800a80e:	2300      	moveq	r3, #0
 800a810:	b2db      	uxtb	r3, r3
 800a812:	e022      	b.n	800a85a <HAL_TIM_PWM_Start+0x9e>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	2b0c      	cmp	r3, #12
 800a818:	d109      	bne.n	800a82e <HAL_TIM_PWM_Start+0x72>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b01      	cmp	r3, #1
 800a824:	bf14      	ite	ne
 800a826:	2301      	movne	r3, #1
 800a828:	2300      	moveq	r3, #0
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	e015      	b.n	800a85a <HAL_TIM_PWM_Start+0x9e>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b10      	cmp	r3, #16
 800a832:	d109      	bne.n	800a848 <HAL_TIM_PWM_Start+0x8c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	bf14      	ite	ne
 800a840:	2301      	movne	r3, #1
 800a842:	2300      	moveq	r3, #0
 800a844:	b2db      	uxtb	r3, r3
 800a846:	e008      	b.n	800a85a <HAL_TIM_PWM_Start+0x9e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	bf14      	ite	ne
 800a854:	2301      	movne	r3, #1
 800a856:	2300      	moveq	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e0ab      	b.n	800a9ba <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d104      	bne.n	800a872 <HAL_TIM_PWM_Start+0xb6>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2202      	movs	r2, #2
 800a86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a870:	e023      	b.n	800a8ba <HAL_TIM_PWM_Start+0xfe>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b04      	cmp	r3, #4
 800a876:	d104      	bne.n	800a882 <HAL_TIM_PWM_Start+0xc6>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a880:	e01b      	b.n	800a8ba <HAL_TIM_PWM_Start+0xfe>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b08      	cmp	r3, #8
 800a886:	d104      	bne.n	800a892 <HAL_TIM_PWM_Start+0xd6>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2202      	movs	r2, #2
 800a88c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a890:	e013      	b.n	800a8ba <HAL_TIM_PWM_Start+0xfe>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b0c      	cmp	r3, #12
 800a896:	d104      	bne.n	800a8a2 <HAL_TIM_PWM_Start+0xe6>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8a0:	e00b      	b.n	800a8ba <HAL_TIM_PWM_Start+0xfe>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b10      	cmp	r3, #16
 800a8a6:	d104      	bne.n	800a8b2 <HAL_TIM_PWM_Start+0xf6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8b0:	e003      	b.n	800a8ba <HAL_TIM_PWM_Start+0xfe>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 ffa2 	bl	800b80c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a3d      	ldr	r2, [pc, #244]	; (800a9c4 <HAL_TIM_PWM_Start+0x208>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d013      	beq.n	800a8fa <HAL_TIM_PWM_Start+0x13e>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a3c      	ldr	r2, [pc, #240]	; (800a9c8 <HAL_TIM_PWM_Start+0x20c>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d00e      	beq.n	800a8fa <HAL_TIM_PWM_Start+0x13e>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a3a      	ldr	r2, [pc, #232]	; (800a9cc <HAL_TIM_PWM_Start+0x210>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d009      	beq.n	800a8fa <HAL_TIM_PWM_Start+0x13e>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a39      	ldr	r2, [pc, #228]	; (800a9d0 <HAL_TIM_PWM_Start+0x214>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d004      	beq.n	800a8fa <HAL_TIM_PWM_Start+0x13e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a37      	ldr	r2, [pc, #220]	; (800a9d4 <HAL_TIM_PWM_Start+0x218>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d101      	bne.n	800a8fe <HAL_TIM_PWM_Start+0x142>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e000      	b.n	800a900 <HAL_TIM_PWM_Start+0x144>
 800a8fe:	2300      	movs	r3, #0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d007      	beq.n	800a914 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a912:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a2a      	ldr	r2, [pc, #168]	; (800a9c4 <HAL_TIM_PWM_Start+0x208>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d02c      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a926:	d027      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a2a      	ldr	r2, [pc, #168]	; (800a9d8 <HAL_TIM_PWM_Start+0x21c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d022      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a29      	ldr	r2, [pc, #164]	; (800a9dc <HAL_TIM_PWM_Start+0x220>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d01d      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a27      	ldr	r2, [pc, #156]	; (800a9e0 <HAL_TIM_PWM_Start+0x224>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d018      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a1f      	ldr	r2, [pc, #124]	; (800a9c8 <HAL_TIM_PWM_Start+0x20c>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d013      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a23      	ldr	r2, [pc, #140]	; (800a9e4 <HAL_TIM_PWM_Start+0x228>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00e      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a1b      	ldr	r2, [pc, #108]	; (800a9cc <HAL_TIM_PWM_Start+0x210>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d009      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a1f      	ldr	r2, [pc, #124]	; (800a9e8 <HAL_TIM_PWM_Start+0x22c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d004      	beq.n	800a978 <HAL_TIM_PWM_Start+0x1bc>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a1e      	ldr	r2, [pc, #120]	; (800a9ec <HAL_TIM_PWM_Start+0x230>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d115      	bne.n	800a9a4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	4b1c      	ldr	r3, [pc, #112]	; (800a9f0 <HAL_TIM_PWM_Start+0x234>)
 800a980:	4013      	ands	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b06      	cmp	r3, #6
 800a988:	d015      	beq.n	800a9b6 <HAL_TIM_PWM_Start+0x1fa>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a990:	d011      	beq.n	800a9b6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 0201 	orr.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a2:	e008      	b.n	800a9b6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f042 0201 	orr.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	e000      	b.n	800a9b8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40010400 	.word	0x40010400
 800a9cc:	40014000 	.word	0x40014000
 800a9d0:	40014400 	.word	0x40014400
 800a9d4:	40014800 	.word	0x40014800
 800a9d8:	40000400 	.word	0x40000400
 800a9dc:	40000800 	.word	0x40000800
 800a9e0:	40000c00 	.word	0x40000c00
 800a9e4:	40001800 	.word	0x40001800
 800a9e8:	4000e000 	.word	0x4000e000
 800a9ec:	4000e400 	.word	0x4000e400
 800a9f0:	00010007 	.word	0x00010007

0800a9f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e08f      	b.n	800ab28 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7f9 fd03 	bl	8004428 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2202      	movs	r2, #2
 800aa26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6899      	ldr	r1, [r3, #8]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	4b3e      	ldr	r3, [pc, #248]	; (800ab30 <HAL_TIM_Encoder_Init+0x13c>)
 800aa36:	400b      	ands	r3, r1
 800aa38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3304      	adds	r3, #4
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f000 fb65 	bl	800b114 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <HAL_TIM_Encoder_Init+0x140>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4b2b      	ldr	r3, [pc, #172]	; (800ab38 <HAL_TIM_Encoder_Init+0x144>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	4b2a      	ldr	r3, [pc, #168]	; (800ab3c <HAL_TIM_Encoder_Init+0x148>)
 800aa92:	4013      	ands	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	011a      	lsls	r2, r3, #4
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	031b      	lsls	r3, r3, #12
 800aab4:	4313      	orrs	r3, r2
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aac2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aaca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	011b      	lsls	r3, r3, #4
 800aad6:	4313      	orrs	r3, r2
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	4313      	orrs	r3, r2
 800aadc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	fffebff8 	.word	0xfffebff8
 800ab34:	fffffcfc 	.word	0xfffffcfc
 800ab38:	fffff3f3 	.word	0xfffff3f3
 800ab3c:	ffff0f0f 	.word	0xffff0f0f

0800ab40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d110      	bne.n	800ab92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d102      	bne.n	800ab7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab76:	7b7b      	ldrb	r3, [r7, #13]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d001      	beq.n	800ab80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e069      	b.n	800ac54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab90:	e031      	b.n	800abf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d110      	bne.n	800abba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d102      	bne.n	800aba4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab9e:	7b3b      	ldrb	r3, [r7, #12]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d001      	beq.n	800aba8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e055      	b.n	800ac54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abb8:	e01d      	b.n	800abf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d108      	bne.n	800abd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d105      	bne.n	800abd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abc6:	7b7b      	ldrb	r3, [r7, #13]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d102      	bne.n	800abd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800abcc:	7b3b      	ldrb	r3, [r7, #12]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d001      	beq.n	800abd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e03e      	b.n	800ac54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2202      	movs	r2, #2
 800abda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2202      	movs	r2, #2
 800abe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2202      	movs	r2, #2
 800abea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <HAL_TIM_Encoder_Start+0xc4>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d008      	beq.n	800ac14 <HAL_TIM_Encoder_Start+0xd4>
 800ac02:	e00f      	b.n	800ac24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fdfd 	bl	800b80c <TIM_CCxChannelCmd>
      break;
 800ac12:	e016      	b.n	800ac42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	2104      	movs	r1, #4
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fdf5 	bl	800b80c <TIM_CCxChannelCmd>
      break;
 800ac22:	e00e      	b.n	800ac42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fded 	bl	800b80c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2201      	movs	r2, #1
 800ac38:	2104      	movs	r1, #4
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fde6 	bl	800b80c <TIM_CCxChannelCmd>
      break;
 800ac40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f042 0201 	orr.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d122      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d11b      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f06f 0202 	mvn.w	r2, #2
 800ac88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fa1a 	bl	800b0d8 <HAL_TIM_IC_CaptureCallback>
 800aca4:	e005      	b.n	800acb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa0c 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa1d 	bl	800b0ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	f003 0304 	and.w	r3, r3, #4
 800acc2:	2b04      	cmp	r3, #4
 800acc4:	d122      	bne.n	800ad0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d11b      	bne.n	800ad0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f06f 0204 	mvn.w	r2, #4
 800acdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2202      	movs	r2, #2
 800ace2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9f0 	bl	800b0d8 <HAL_TIM_IC_CaptureCallback>
 800acf8:	e005      	b.n	800ad06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9e2 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f9f3 	bl	800b0ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	f003 0308 	and.w	r3, r3, #8
 800ad16:	2b08      	cmp	r3, #8
 800ad18:	d122      	bne.n	800ad60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f003 0308 	and.w	r3, r3, #8
 800ad24:	2b08      	cmp	r3, #8
 800ad26:	d11b      	bne.n	800ad60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f06f 0208 	mvn.w	r2, #8
 800ad30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2204      	movs	r2, #4
 800ad36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f003 0303 	and.w	r3, r3, #3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f9c6 	bl	800b0d8 <HAL_TIM_IC_CaptureCallback>
 800ad4c:	e005      	b.n	800ad5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f9b8 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f9c9 	bl	800b0ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f003 0310 	and.w	r3, r3, #16
 800ad6a:	2b10      	cmp	r3, #16
 800ad6c:	d122      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	2b10      	cmp	r3, #16
 800ad7a:	d11b      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f06f 0210 	mvn.w	r2, #16
 800ad84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2208      	movs	r2, #8
 800ad8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f99c 	bl	800b0d8 <HAL_TIM_IC_CaptureCallback>
 800ada0:	e005      	b.n	800adae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f98e 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f99f 	bl	800b0ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d10e      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d107      	bne.n	800ade0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f06f 0201 	mvn.w	r2, #1
 800add8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7f8 fdbc 	bl	8003958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adea:	2b80      	cmp	r3, #128	; 0x80
 800adec:	d10e      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adf8:	2b80      	cmp	r3, #128	; 0x80
 800adfa:	d107      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fe6c 	bl	800bae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1a:	d10e      	bne.n	800ae3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae26:	2b80      	cmp	r3, #128	; 0x80
 800ae28:	d107      	bne.n	800ae3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fe5f 	bl	800baf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae44:	2b40      	cmp	r3, #64	; 0x40
 800ae46:	d10e      	bne.n	800ae66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	2b40      	cmp	r3, #64	; 0x40
 800ae54:	d107      	bne.n	800ae66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f94d 	bl	800b100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	f003 0320 	and.w	r3, r3, #32
 800ae70:	2b20      	cmp	r3, #32
 800ae72:	d10e      	bne.n	800ae92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	d107      	bne.n	800ae92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f06f 0220 	mvn.w	r2, #32
 800ae8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fe1f 	bl	800bad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e0ff      	b.n	800b0ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b14      	cmp	r3, #20
 800aec6:	f200 80f0 	bhi.w	800b0aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800af25 	.word	0x0800af25
 800aed4:	0800b0ab 	.word	0x0800b0ab
 800aed8:	0800b0ab 	.word	0x0800b0ab
 800aedc:	0800b0ab 	.word	0x0800b0ab
 800aee0:	0800af65 	.word	0x0800af65
 800aee4:	0800b0ab 	.word	0x0800b0ab
 800aee8:	0800b0ab 	.word	0x0800b0ab
 800aeec:	0800b0ab 	.word	0x0800b0ab
 800aef0:	0800afa7 	.word	0x0800afa7
 800aef4:	0800b0ab 	.word	0x0800b0ab
 800aef8:	0800b0ab 	.word	0x0800b0ab
 800aefc:	0800b0ab 	.word	0x0800b0ab
 800af00:	0800afe7 	.word	0x0800afe7
 800af04:	0800b0ab 	.word	0x0800b0ab
 800af08:	0800b0ab 	.word	0x0800b0ab
 800af0c:	0800b0ab 	.word	0x0800b0ab
 800af10:	0800b029 	.word	0x0800b029
 800af14:	0800b0ab 	.word	0x0800b0ab
 800af18:	0800b0ab 	.word	0x0800b0ab
 800af1c:	0800b0ab 	.word	0x0800b0ab
 800af20:	0800b069 	.word	0x0800b069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 f998 	bl	800b260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0208 	orr.w	r2, r2, #8
 800af3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 0204 	bic.w	r2, r2, #4
 800af4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6999      	ldr	r1, [r3, #24]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691a      	ldr	r2, [r3, #16]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	619a      	str	r2, [r3, #24]
      break;
 800af62:	e0a5      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fa08 	bl	800b380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6999      	ldr	r1, [r3, #24]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	021a      	lsls	r2, r3, #8
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	619a      	str	r2, [r3, #24]
      break;
 800afa4:	e084      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fa71 	bl	800b494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f042 0208 	orr.w	r2, r2, #8
 800afc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f022 0204 	bic.w	r2, r2, #4
 800afd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69d9      	ldr	r1, [r3, #28]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	691a      	ldr	r2, [r3, #16]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	61da      	str	r2, [r3, #28]
      break;
 800afe4:	e064      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fad9 	bl	800b5a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69da      	ldr	r2, [r3, #28]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69d9      	ldr	r1, [r3, #28]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	021a      	lsls	r2, r3, #8
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	61da      	str	r2, [r3, #28]
      break;
 800b026:	e043      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fb22 	bl	800b678 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f042 0208 	orr.w	r2, r2, #8
 800b042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 0204 	bic.w	r2, r2, #4
 800b052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	691a      	ldr	r2, [r3, #16]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b066:	e023      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fb66 	bl	800b740 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	021a      	lsls	r2, r3, #8
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0a8:	e002      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop

0800b0c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a44      	ldr	r2, [pc, #272]	; (800b238 <TIM_Base_SetConfig+0x124>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d013      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b132:	d00f      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a41      	ldr	r2, [pc, #260]	; (800b23c <TIM_Base_SetConfig+0x128>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00b      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a40      	ldr	r2, [pc, #256]	; (800b240 <TIM_Base_SetConfig+0x12c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d007      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a3f      	ldr	r2, [pc, #252]	; (800b244 <TIM_Base_SetConfig+0x130>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d003      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a3e      	ldr	r2, [pc, #248]	; (800b248 <TIM_Base_SetConfig+0x134>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d108      	bne.n	800b166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b15a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a33      	ldr	r2, [pc, #204]	; (800b238 <TIM_Base_SetConfig+0x124>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d027      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b174:	d023      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a30      	ldr	r2, [pc, #192]	; (800b23c <TIM_Base_SetConfig+0x128>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d01f      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a2f      	ldr	r2, [pc, #188]	; (800b240 <TIM_Base_SetConfig+0x12c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d01b      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a2e      	ldr	r2, [pc, #184]	; (800b244 <TIM_Base_SetConfig+0x130>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d017      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a2d      	ldr	r2, [pc, #180]	; (800b248 <TIM_Base_SetConfig+0x134>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d013      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a2c      	ldr	r2, [pc, #176]	; (800b24c <TIM_Base_SetConfig+0x138>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d00f      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a2b      	ldr	r2, [pc, #172]	; (800b250 <TIM_Base_SetConfig+0x13c>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00b      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a2a      	ldr	r2, [pc, #168]	; (800b254 <TIM_Base_SetConfig+0x140>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d007      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a29      	ldr	r2, [pc, #164]	; (800b258 <TIM_Base_SetConfig+0x144>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d003      	beq.n	800b1be <TIM_Base_SetConfig+0xaa>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a28      	ldr	r2, [pc, #160]	; (800b25c <TIM_Base_SetConfig+0x148>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d108      	bne.n	800b1d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a10      	ldr	r2, [pc, #64]	; (800b238 <TIM_Base_SetConfig+0x124>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d00f      	beq.n	800b21c <TIM_Base_SetConfig+0x108>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a12      	ldr	r2, [pc, #72]	; (800b248 <TIM_Base_SetConfig+0x134>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d00b      	beq.n	800b21c <TIM_Base_SetConfig+0x108>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a11      	ldr	r2, [pc, #68]	; (800b24c <TIM_Base_SetConfig+0x138>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d007      	beq.n	800b21c <TIM_Base_SetConfig+0x108>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a10      	ldr	r2, [pc, #64]	; (800b250 <TIM_Base_SetConfig+0x13c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_Base_SetConfig+0x108>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a0f      	ldr	r2, [pc, #60]	; (800b254 <TIM_Base_SetConfig+0x140>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d103      	bne.n	800b224 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	691a      	ldr	r2, [r3, #16]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	615a      	str	r2, [r3, #20]
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	40010000 	.word	0x40010000
 800b23c:	40000400 	.word	0x40000400
 800b240:	40000800 	.word	0x40000800
 800b244:	40000c00 	.word	0x40000c00
 800b248:	40010400 	.word	0x40010400
 800b24c:	40014000 	.word	0x40014000
 800b250:	40014400 	.word	0x40014400
 800b254:	40014800 	.word	0x40014800
 800b258:	4000e000 	.word	0x4000e000
 800b25c:	4000e400 	.word	0x4000e400

0800b260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b260:	b480      	push	{r7}
 800b262:	b087      	sub	sp, #28
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	f023 0201 	bic.w	r2, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4b37      	ldr	r3, [pc, #220]	; (800b368 <TIM_OC1_SetConfig+0x108>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0303 	bic.w	r3, r3, #3
 800b296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f023 0302 	bic.w	r3, r3, #2
 800b2a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a2d      	ldr	r2, [pc, #180]	; (800b36c <TIM_OC1_SetConfig+0x10c>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d00f      	beq.n	800b2dc <TIM_OC1_SetConfig+0x7c>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a2c      	ldr	r2, [pc, #176]	; (800b370 <TIM_OC1_SetConfig+0x110>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d00b      	beq.n	800b2dc <TIM_OC1_SetConfig+0x7c>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a2b      	ldr	r2, [pc, #172]	; (800b374 <TIM_OC1_SetConfig+0x114>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d007      	beq.n	800b2dc <TIM_OC1_SetConfig+0x7c>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a2a      	ldr	r2, [pc, #168]	; (800b378 <TIM_OC1_SetConfig+0x118>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d003      	beq.n	800b2dc <TIM_OC1_SetConfig+0x7c>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a29      	ldr	r2, [pc, #164]	; (800b37c <TIM_OC1_SetConfig+0x11c>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d10c      	bne.n	800b2f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f023 0308 	bic.w	r3, r3, #8
 800b2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f023 0304 	bic.w	r3, r3, #4
 800b2f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	; (800b36c <TIM_OC1_SetConfig+0x10c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d00f      	beq.n	800b31e <TIM_OC1_SetConfig+0xbe>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a1b      	ldr	r2, [pc, #108]	; (800b370 <TIM_OC1_SetConfig+0x110>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d00b      	beq.n	800b31e <TIM_OC1_SetConfig+0xbe>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a1a      	ldr	r2, [pc, #104]	; (800b374 <TIM_OC1_SetConfig+0x114>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d007      	beq.n	800b31e <TIM_OC1_SetConfig+0xbe>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a19      	ldr	r2, [pc, #100]	; (800b378 <TIM_OC1_SetConfig+0x118>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d003      	beq.n	800b31e <TIM_OC1_SetConfig+0xbe>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a18      	ldr	r2, [pc, #96]	; (800b37c <TIM_OC1_SetConfig+0x11c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d111      	bne.n	800b342 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b32c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	4313      	orrs	r3, r2
 800b336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	621a      	str	r2, [r3, #32]
}
 800b35c:	bf00      	nop
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	fffeff8f 	.word	0xfffeff8f
 800b36c:	40010000 	.word	0x40010000
 800b370:	40010400 	.word	0x40010400
 800b374:	40014000 	.word	0x40014000
 800b378:	40014400 	.word	0x40014400
 800b37c:	40014800 	.word	0x40014800

0800b380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	f023 0210 	bic.w	r2, r3, #16
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4b34      	ldr	r3, [pc, #208]	; (800b47c <TIM_OC2_SetConfig+0xfc>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f023 0320 	bic.w	r3, r3, #32
 800b3ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	011b      	lsls	r3, r3, #4
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a29      	ldr	r2, [pc, #164]	; (800b480 <TIM_OC2_SetConfig+0x100>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d003      	beq.n	800b3e8 <TIM_OC2_SetConfig+0x68>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a28      	ldr	r2, [pc, #160]	; (800b484 <TIM_OC2_SetConfig+0x104>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d10d      	bne.n	800b404 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	011b      	lsls	r3, r3, #4
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a1e      	ldr	r2, [pc, #120]	; (800b480 <TIM_OC2_SetConfig+0x100>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d00f      	beq.n	800b42c <TIM_OC2_SetConfig+0xac>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a1d      	ldr	r2, [pc, #116]	; (800b484 <TIM_OC2_SetConfig+0x104>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00b      	beq.n	800b42c <TIM_OC2_SetConfig+0xac>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a1c      	ldr	r2, [pc, #112]	; (800b488 <TIM_OC2_SetConfig+0x108>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d007      	beq.n	800b42c <TIM_OC2_SetConfig+0xac>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a1b      	ldr	r2, [pc, #108]	; (800b48c <TIM_OC2_SetConfig+0x10c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d003      	beq.n	800b42c <TIM_OC2_SetConfig+0xac>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a1a      	ldr	r2, [pc, #104]	; (800b490 <TIM_OC2_SetConfig+0x110>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d113      	bne.n	800b454 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b43a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	621a      	str	r2, [r3, #32]
}
 800b46e:	bf00      	nop
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	feff8fff 	.word	0xfeff8fff
 800b480:	40010000 	.word	0x40010000
 800b484:	40010400 	.word	0x40010400
 800b488:	40014000 	.word	0x40014000
 800b48c:	40014400 	.word	0x40014400
 800b490:	40014800 	.word	0x40014800

0800b494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4b33      	ldr	r3, [pc, #204]	; (800b58c <TIM_OC3_SetConfig+0xf8>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 0303 	bic.w	r3, r3, #3
 800b4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a28      	ldr	r2, [pc, #160]	; (800b590 <TIM_OC3_SetConfig+0xfc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d003      	beq.n	800b4fa <TIM_OC3_SetConfig+0x66>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a27      	ldr	r2, [pc, #156]	; (800b594 <TIM_OC3_SetConfig+0x100>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d10d      	bne.n	800b516 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	021b      	lsls	r3, r3, #8
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a1d      	ldr	r2, [pc, #116]	; (800b590 <TIM_OC3_SetConfig+0xfc>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d00f      	beq.n	800b53e <TIM_OC3_SetConfig+0xaa>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1c      	ldr	r2, [pc, #112]	; (800b594 <TIM_OC3_SetConfig+0x100>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d00b      	beq.n	800b53e <TIM_OC3_SetConfig+0xaa>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a1b      	ldr	r2, [pc, #108]	; (800b598 <TIM_OC3_SetConfig+0x104>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d007      	beq.n	800b53e <TIM_OC3_SetConfig+0xaa>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a1a      	ldr	r2, [pc, #104]	; (800b59c <TIM_OC3_SetConfig+0x108>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d003      	beq.n	800b53e <TIM_OC3_SetConfig+0xaa>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a19      	ldr	r2, [pc, #100]	; (800b5a0 <TIM_OC3_SetConfig+0x10c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d113      	bne.n	800b566 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b54c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	011b      	lsls	r3, r3, #4
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	621a      	str	r2, [r3, #32]
}
 800b580:	bf00      	nop
 800b582:	371c      	adds	r7, #28
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	fffeff8f 	.word	0xfffeff8f
 800b590:	40010000 	.word	0x40010000
 800b594:	40010400 	.word	0x40010400
 800b598:	40014000 	.word	0x40014000
 800b59c:	40014400 	.word	0x40014400
 800b5a0:	40014800 	.word	0x40014800

0800b5a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4b24      	ldr	r3, [pc, #144]	; (800b660 <TIM_OC4_SetConfig+0xbc>)
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	021b      	lsls	r3, r3, #8
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	031b      	lsls	r3, r3, #12
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a19      	ldr	r2, [pc, #100]	; (800b664 <TIM_OC4_SetConfig+0xc0>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d00f      	beq.n	800b624 <TIM_OC4_SetConfig+0x80>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a18      	ldr	r2, [pc, #96]	; (800b668 <TIM_OC4_SetConfig+0xc4>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00b      	beq.n	800b624 <TIM_OC4_SetConfig+0x80>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a17      	ldr	r2, [pc, #92]	; (800b66c <TIM_OC4_SetConfig+0xc8>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d007      	beq.n	800b624 <TIM_OC4_SetConfig+0x80>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a16      	ldr	r2, [pc, #88]	; (800b670 <TIM_OC4_SetConfig+0xcc>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d003      	beq.n	800b624 <TIM_OC4_SetConfig+0x80>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a15      	ldr	r2, [pc, #84]	; (800b674 <TIM_OC4_SetConfig+0xd0>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d109      	bne.n	800b638 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b62a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	695b      	ldr	r3, [r3, #20]
 800b630:	019b      	lsls	r3, r3, #6
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	4313      	orrs	r3, r2
 800b636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	621a      	str	r2, [r3, #32]
}
 800b652:	bf00      	nop
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	feff8fff 	.word	0xfeff8fff
 800b664:	40010000 	.word	0x40010000
 800b668:	40010400 	.word	0x40010400
 800b66c:	40014000 	.word	0x40014000
 800b670:	40014400 	.word	0x40014400
 800b674:	40014800 	.word	0x40014800

0800b678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b678:	b480      	push	{r7}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4b21      	ldr	r3, [pc, #132]	; (800b728 <TIM_OC5_SetConfig+0xb0>)
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a18      	ldr	r2, [pc, #96]	; (800b72c <TIM_OC5_SetConfig+0xb4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d00f      	beq.n	800b6ee <TIM_OC5_SetConfig+0x76>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a17      	ldr	r2, [pc, #92]	; (800b730 <TIM_OC5_SetConfig+0xb8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00b      	beq.n	800b6ee <TIM_OC5_SetConfig+0x76>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a16      	ldr	r2, [pc, #88]	; (800b734 <TIM_OC5_SetConfig+0xbc>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d007      	beq.n	800b6ee <TIM_OC5_SetConfig+0x76>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a15      	ldr	r2, [pc, #84]	; (800b738 <TIM_OC5_SetConfig+0xc0>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d003      	beq.n	800b6ee <TIM_OC5_SetConfig+0x76>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a14      	ldr	r2, [pc, #80]	; (800b73c <TIM_OC5_SetConfig+0xc4>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d109      	bne.n	800b702 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	621a      	str	r2, [r3, #32]
}
 800b71c:	bf00      	nop
 800b71e:	371c      	adds	r7, #28
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	fffeff8f 	.word	0xfffeff8f
 800b72c:	40010000 	.word	0x40010000
 800b730:	40010400 	.word	0x40010400
 800b734:	40014000 	.word	0x40014000
 800b738:	40014400 	.word	0x40014400
 800b73c:	40014800 	.word	0x40014800

0800b740 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	4b22      	ldr	r3, [pc, #136]	; (800b7f4 <TIM_OC6_SetConfig+0xb4>)
 800b76c:	4013      	ands	r3, r2
 800b76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	021b      	lsls	r3, r3, #8
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	051b      	lsls	r3, r3, #20
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a19      	ldr	r2, [pc, #100]	; (800b7f8 <TIM_OC6_SetConfig+0xb8>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00f      	beq.n	800b7b8 <TIM_OC6_SetConfig+0x78>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a18      	ldr	r2, [pc, #96]	; (800b7fc <TIM_OC6_SetConfig+0xbc>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d00b      	beq.n	800b7b8 <TIM_OC6_SetConfig+0x78>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a17      	ldr	r2, [pc, #92]	; (800b800 <TIM_OC6_SetConfig+0xc0>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d007      	beq.n	800b7b8 <TIM_OC6_SetConfig+0x78>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a16      	ldr	r2, [pc, #88]	; (800b804 <TIM_OC6_SetConfig+0xc4>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d003      	beq.n	800b7b8 <TIM_OC6_SetConfig+0x78>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a15      	ldr	r2, [pc, #84]	; (800b808 <TIM_OC6_SetConfig+0xc8>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d109      	bne.n	800b7cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	029b      	lsls	r3, r3, #10
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	621a      	str	r2, [r3, #32]
}
 800b7e6:	bf00      	nop
 800b7e8:	371c      	adds	r7, #28
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	feff8fff 	.word	0xfeff8fff
 800b7f8:	40010000 	.word	0x40010000
 800b7fc:	40010400 	.word	0x40010400
 800b800:	40014000 	.word	0x40014000
 800b804:	40014400 	.word	0x40014400
 800b808:	40014800 	.word	0x40014800

0800b80c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f003 031f 	and.w	r3, r3, #31
 800b81e:	2201      	movs	r2, #1
 800b820:	fa02 f303 	lsl.w	r3, r2, r3
 800b824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6a1a      	ldr	r2, [r3, #32]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	43db      	mvns	r3, r3
 800b82e:	401a      	ands	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a1a      	ldr	r2, [r3, #32]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f003 031f 	and.w	r3, r3, #31
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	fa01 f303 	lsl.w	r3, r1, r3
 800b844:	431a      	orrs	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	621a      	str	r2, [r3, #32]
}
 800b84a:	bf00      	nop
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
	...

0800b858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d101      	bne.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b86c:	2302      	movs	r3, #2
 800b86e:	e077      	b.n	800b960 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2202      	movs	r2, #2
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a35      	ldr	r2, [pc, #212]	; (800b96c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d004      	beq.n	800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a34      	ldr	r2, [pc, #208]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d108      	bne.n	800b8b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a25      	ldr	r2, [pc, #148]	; (800b96c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d02c      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e2:	d027      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a22      	ldr	r2, [pc, #136]	; (800b974 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d022      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a21      	ldr	r2, [pc, #132]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d01d      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a1f      	ldr	r2, [pc, #124]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d018      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a1a      	ldr	r2, [pc, #104]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d013      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00e      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1a      	ldr	r2, [pc, #104]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d009      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d004      	beq.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a17      	ldr	r2, [pc, #92]	; (800b98c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d10c      	bne.n	800b94e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b93a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	4313      	orrs	r3, r2
 800b944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	40010000 	.word	0x40010000
 800b970:	40010400 	.word	0x40010400
 800b974:	40000400 	.word	0x40000400
 800b978:	40000800 	.word	0x40000800
 800b97c:	40000c00 	.word	0x40000c00
 800b980:	40001800 	.word	0x40001800
 800b984:	40014000 	.word	0x40014000
 800b988:	4000e000 	.word	0x4000e000
 800b98c:	4000e400 	.word	0x4000e400

0800b990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d101      	bne.n	800b9ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e087      	b.n	800babc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	041b      	lsls	r3, r3, #16
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a27      	ldr	r2, [pc, #156]	; (800bac8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d004      	beq.n	800ba3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a25      	ldr	r2, [pc, #148]	; (800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d106      	bne.n	800ba48 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a1e      	ldr	r2, [pc, #120]	; (800bac8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d004      	beq.n	800ba5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a1d      	ldr	r2, [pc, #116]	; (800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d126      	bne.n	800baaa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	051b      	lsls	r3, r3, #20
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	6a1b      	ldr	r3, [r3, #32]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	4313      	orrs	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a0e      	ldr	r2, [pc, #56]	; (800bac8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d004      	beq.n	800ba9c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a0d      	ldr	r2, [pc, #52]	; (800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d106      	bne.n	800baaa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	4313      	orrs	r3, r2
 800baa8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	40010000 	.word	0x40010000
 800bacc:	40010400 	.word	0x40010400

0800bad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e042      	b.n	800bba4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7f8 feb3 	bl	800489c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2224      	movs	r2, #36	; 0x24
 800bb3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 0201 	bic.w	r2, r2, #1
 800bb4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fcdc 	bl	800c50c <UART_SetConfig>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e022      	b.n	800bba4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f001 fb3c 	bl	800d1e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689a      	ldr	r2, [r3, #8]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0201 	orr.w	r2, r2, #1
 800bb9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 fbc3 	bl	800d328 <UART_CheckIdleState>
 800bba2:	4603      	mov	r3, r0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbc0:	2b20      	cmp	r3, #32
 800bbc2:	d17a      	bne.n	800bcba <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d002      	beq.n	800bbd0 <HAL_UART_Transmit_DMA+0x24>
 800bbca:	88fb      	ldrh	r3, [r7, #6]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e073      	b.n	800bcbc <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d101      	bne.n	800bbe2 <HAL_UART_Transmit_DMA+0x36>
 800bbde:	2302      	movs	r3, #2
 800bbe0:	e06c      	b.n	800bcbc <HAL_UART_Transmit_DMA+0x110>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	88fa      	ldrh	r2, [r7, #6]
 800bbf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	88fa      	ldrh	r2, [r7, #6]
 800bbfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2221      	movs	r2, #33	; 0x21
 800bc0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d02c      	beq.n	800bc72 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc1c:	4a29      	ldr	r2, [pc, #164]	; (800bcc4 <HAL_UART_Transmit_DMA+0x118>)
 800bc1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc24:	4a28      	ldr	r2, [pc, #160]	; (800bcc8 <HAL_UART_Transmit_DMA+0x11c>)
 800bc26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc2c:	4a27      	ldr	r2, [pc, #156]	; (800bccc <HAL_UART_Transmit_DMA+0x120>)
 800bc2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc34:	2200      	movs	r2, #0
 800bc36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc40:	4619      	mov	r1, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3328      	adds	r3, #40	; 0x28
 800bc48:	461a      	mov	r2, r3
 800bc4a:	88fb      	ldrh	r3, [r7, #6]
 800bc4c:	f7f9 fd4e 	bl	80056ec <HAL_DMA_Start_IT>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00d      	beq.n	800bc72 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2210      	movs	r2, #16
 800bc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e024      	b.n	800bcbc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2240      	movs	r2, #64	; 0x40
 800bc78:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3308      	adds	r3, #8
 800bc88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	613b      	str	r3, [r7, #16]
   return(result);
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc98:	627b      	str	r3, [r7, #36]	; 0x24
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3308      	adds	r3, #8
 800bca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bca2:	623a      	str	r2, [r7, #32]
 800bca4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca6:	69f9      	ldr	r1, [r7, #28]
 800bca8:	6a3a      	ldr	r2, [r7, #32]
 800bcaa:	e841 2300 	strex	r3, r2, [r1]
 800bcae:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1e5      	bne.n	800bc82 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e000      	b.n	800bcbc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bcba:	2302      	movs	r3, #2
  }
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3728      	adds	r7, #40	; 0x28
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	0800d7f1 	.word	0x0800d7f1
 800bcc8:	0800d887 	.word	0x0800d887
 800bccc:	0800d9fd 	.word	0x0800d9fd

0800bcd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08a      	sub	sp, #40	; 0x28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d142      	bne.n	800bd6e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <HAL_UART_Receive_DMA+0x24>
 800bcee:	88fb      	ldrh	r3, [r7, #6]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e03b      	b.n	800bd70 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d101      	bne.n	800bd06 <HAL_UART_Receive_DMA+0x36>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e034      	b.n	800bd70 <HAL_UART_Receive_DMA+0xa0>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <HAL_UART_Receive_DMA+0xa8>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d01f      	beq.n	800bd5e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d018      	beq.n	800bd5e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	e853 3f00 	ldrex	r3, [r3]
 800bd38:	613b      	str	r3, [r7, #16]
   return(result);
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	623b      	str	r3, [r7, #32]
 800bd4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4e:	69f9      	ldr	r1, [r7, #28]
 800bd50:	6a3a      	ldr	r2, [r7, #32]
 800bd52:	e841 2300 	strex	r3, r2, [r1]
 800bd56:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1e6      	bne.n	800bd2c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd5e:	88fb      	ldrh	r3, [r7, #6]
 800bd60:	461a      	mov	r2, r3
 800bd62:	68b9      	ldr	r1, [r7, #8]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f001 fbf3 	bl	800d550 <UART_Start_Receive_DMA>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	e000      	b.n	800bd70 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bd6e:	2302      	movs	r3, #2
  }
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3728      	adds	r7, #40	; 0x28
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	58000c00 	.word	0x58000c00

0800bd7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b0ba      	sub	sp, #232	; 0xe8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bda2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bda6:	f640 030f 	movw	r3, #2063	; 0x80f
 800bdaa:	4013      	ands	r3, r2
 800bdac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bdb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d11b      	bne.n	800bdf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bdb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdbc:	f003 0320 	and.w	r3, r3, #32
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d015      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bdc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdc8:	f003 0320 	and.w	r3, r3, #32
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d105      	bne.n	800bddc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d009      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f000 835a 	beq.w	800c49a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	4798      	blx	r3
      }
      return;
 800bdee:	e354      	b.n	800c49a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bdf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 811f 	beq.w	800c038 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bdfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bdfe:	4b8b      	ldr	r3, [pc, #556]	; (800c02c <HAL_UART_IRQHandler+0x2b0>)
 800be00:	4013      	ands	r3, r2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d106      	bne.n	800be14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be0a:	4b89      	ldr	r3, [pc, #548]	; (800c030 <HAL_UART_IRQHandler+0x2b4>)
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 8112 	beq.w	800c038 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d011      	beq.n	800be44 <HAL_UART_IRQHandler+0xc8>
 800be20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2201      	movs	r2, #1
 800be32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be3a:	f043 0201 	orr.w	r2, r3, #1
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d011      	beq.n	800be74 <HAL_UART_IRQHandler+0xf8>
 800be50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00b      	beq.n	800be74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2202      	movs	r2, #2
 800be62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be6a:	f043 0204 	orr.w	r2, r3, #4
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d011      	beq.n	800bea4 <HAL_UART_IRQHandler+0x128>
 800be80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2204      	movs	r2, #4
 800be92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be9a:	f043 0202 	orr.w	r2, r3, #2
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	d017      	beq.n	800bee0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beb4:	f003 0320 	and.w	r3, r3, #32
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d105      	bne.n	800bec8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bebc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bec0:	4b5a      	ldr	r3, [pc, #360]	; (800c02c <HAL_UART_IRQHandler+0x2b0>)
 800bec2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2208      	movs	r2, #8
 800bece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bed6:	f043 0208 	orr.w	r2, r3, #8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d012      	beq.n	800bf12 <HAL_UART_IRQHandler+0x196>
 800beec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00c      	beq.n	800bf12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf08:	f043 0220 	orr.w	r2, r3, #32
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 82c0 	beq.w	800c49e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d013      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d105      	bne.n	800bf42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf66:	2b40      	cmp	r3, #64	; 0x40
 800bf68:	d005      	beq.n	800bf76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d04f      	beq.n	800c016 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 fbd4 	bl	800d724 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d141      	bne.n	800c00e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3308      	adds	r3, #8
 800bf90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bfba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bfce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1d9      	bne.n	800bf8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d013      	beq.n	800c006 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfe2:	4a14      	ldr	r2, [pc, #80]	; (800c034 <HAL_UART_IRQHandler+0x2b8>)
 800bfe4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fa f906 	bl	80061fc <HAL_DMA_Abort_IT>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d017      	beq.n	800c026 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c004:	e00f      	b.n	800c026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fa6a 	bl	800c4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c00c:	e00b      	b.n	800c026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fa66 	bl	800c4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c014:	e007      	b.n	800c026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa62 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c024:	e23b      	b.n	800c49e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c026:	bf00      	nop
    return;
 800c028:	e239      	b.n	800c49e <HAL_UART_IRQHandler+0x722>
 800c02a:	bf00      	nop
 800c02c:	10000001 	.word	0x10000001
 800c030:	04000120 	.word	0x04000120
 800c034:	0800da7d 	.word	0x0800da7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	f040 81ce 	bne.w	800c3de <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c046:	f003 0310 	and.w	r3, r3, #16
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 81c7 	beq.w	800c3de <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c054:	f003 0310 	and.w	r3, r3, #16
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 81c0 	beq.w	800c3de <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2210      	movs	r2, #16
 800c064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c070:	2b40      	cmp	r3, #64	; 0x40
 800c072:	f040 813b 	bne.w	800c2ec <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a8b      	ldr	r2, [pc, #556]	; (800c2ac <HAL_UART_IRQHandler+0x530>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d059      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a89      	ldr	r2, [pc, #548]	; (800c2b0 <HAL_UART_IRQHandler+0x534>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d053      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a87      	ldr	r2, [pc, #540]	; (800c2b4 <HAL_UART_IRQHandler+0x538>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d04d      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a85      	ldr	r2, [pc, #532]	; (800c2b8 <HAL_UART_IRQHandler+0x53c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d047      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a83      	ldr	r2, [pc, #524]	; (800c2bc <HAL_UART_IRQHandler+0x540>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d041      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a81      	ldr	r2, [pc, #516]	; (800c2c0 <HAL_UART_IRQHandler+0x544>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d03b      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a7f      	ldr	r2, [pc, #508]	; (800c2c4 <HAL_UART_IRQHandler+0x548>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d035      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a7d      	ldr	r2, [pc, #500]	; (800c2c8 <HAL_UART_IRQHandler+0x54c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d02f      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a7b      	ldr	r2, [pc, #492]	; (800c2cc <HAL_UART_IRQHandler+0x550>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d029      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a79      	ldr	r2, [pc, #484]	; (800c2d0 <HAL_UART_IRQHandler+0x554>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d023      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a77      	ldr	r2, [pc, #476]	; (800c2d4 <HAL_UART_IRQHandler+0x558>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d01d      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a75      	ldr	r2, [pc, #468]	; (800c2d8 <HAL_UART_IRQHandler+0x55c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d017      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a73      	ldr	r2, [pc, #460]	; (800c2dc <HAL_UART_IRQHandler+0x560>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d011      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a71      	ldr	r2, [pc, #452]	; (800c2e0 <HAL_UART_IRQHandler+0x564>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d00b      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a6f      	ldr	r2, [pc, #444]	; (800c2e4 <HAL_UART_IRQHandler+0x568>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d005      	beq.n	800c136 <HAL_UART_IRQHandler+0x3ba>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a6d      	ldr	r2, [pc, #436]	; (800c2e8 <HAL_UART_IRQHandler+0x56c>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d105      	bne.n	800c142 <HAL_UART_IRQHandler+0x3c6>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	e004      	b.n	800c14c <HAL_UART_IRQHandler+0x3d0>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c154:	2b00      	cmp	r3, #0
 800c156:	f000 81a4 	beq.w	800c4a2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c164:	429a      	cmp	r2, r3
 800c166:	f080 819c 	bcs.w	800c4a2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c170:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c17e:	f000 8086 	beq.w	800c28e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c18e:	e853 3f00 	ldrex	r3, [r3]
 800c192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c19a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c19e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1bc:	e841 2300 	strex	r3, r2, [r1]
 800c1c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1da      	bne.n	800c182 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1d6:	e853 3f00 	ldrex	r3, [r3]
 800c1da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c1dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1de:	f023 0301 	bic.w	r3, r3, #1
 800c1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3308      	adds	r3, #8
 800c1ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c1f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c1f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1fc:	e841 2300 	strex	r3, r2, [r1]
 800c200:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1e1      	bne.n	800c1cc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3308      	adds	r3, #8
 800c20e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c212:	e853 3f00 	ldrex	r3, [r3]
 800c216:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c21e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3308      	adds	r3, #8
 800c228:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c22c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c22e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e3      	bne.n	800c208 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2220      	movs	r2, #32
 800c244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c256:	e853 3f00 	ldrex	r3, [r3]
 800c25a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c25e:	f023 0310 	bic.w	r3, r3, #16
 800c262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c270:	65bb      	str	r3, [r7, #88]	; 0x58
 800c272:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e4      	bne.n	800c24e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c288:	4618      	mov	r0, r3
 800c28a:	f7f9 fc99 	bl	8005bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f926 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2a8:	e0fb      	b.n	800c4a2 <HAL_UART_IRQHandler+0x726>
 800c2aa:	bf00      	nop
 800c2ac:	40020010 	.word	0x40020010
 800c2b0:	40020028 	.word	0x40020028
 800c2b4:	40020040 	.word	0x40020040
 800c2b8:	40020058 	.word	0x40020058
 800c2bc:	40020070 	.word	0x40020070
 800c2c0:	40020088 	.word	0x40020088
 800c2c4:	400200a0 	.word	0x400200a0
 800c2c8:	400200b8 	.word	0x400200b8
 800c2cc:	40020410 	.word	0x40020410
 800c2d0:	40020428 	.word	0x40020428
 800c2d4:	40020440 	.word	0x40020440
 800c2d8:	40020458 	.word	0x40020458
 800c2dc:	40020470 	.word	0x40020470
 800c2e0:	40020488 	.word	0x40020488
 800c2e4:	400204a0 	.word	0x400204a0
 800c2e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c306:	b29b      	uxth	r3, r3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 80cc 	beq.w	800c4a6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c30e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 80c7 	beq.w	800c4a6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	e853 3f00 	ldrex	r3, [r3]
 800c324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c32c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c33a:	647b      	str	r3, [r7, #68]	; 0x44
 800c33c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c342:	e841 2300 	strex	r3, r2, [r1]
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1e4      	bne.n	800c318 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	e853 3f00 	ldrex	r3, [r3]
 800c35c:	623b      	str	r3, [r7, #32]
   return(result);
 800c35e:	6a3a      	ldr	r2, [r7, #32]
 800c360:	4b54      	ldr	r3, [pc, #336]	; (800c4b4 <HAL_UART_IRQHandler+0x738>)
 800c362:	4013      	ands	r3, r2
 800c364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	3308      	adds	r3, #8
 800c36e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c372:	633a      	str	r2, [r7, #48]	; 0x30
 800c374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37a:	e841 2300 	strex	r3, r2, [r1]
 800c37e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1e3      	bne.n	800c34e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2220      	movs	r2, #32
 800c38a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	e853 3f00 	ldrex	r3, [r3]
 800c3a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0310 	bic.w	r3, r3, #16
 800c3ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c3bc:	61fb      	str	r3, [r7, #28]
 800c3be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	69b9      	ldr	r1, [r7, #24]
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e4      	bne.n	800c39a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f88c 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3dc:	e063      	b.n	800c4a6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00e      	beq.n	800c408 <HAL_UART_IRQHandler+0x68c>
 800c3ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d008      	beq.n	800c408 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c3fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 fb7c 	bl	800dafe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c406:	e051      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c410:	2b00      	cmp	r3, #0
 800c412:	d014      	beq.n	800c43e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d105      	bne.n	800c42c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d008      	beq.n	800c43e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c430:	2b00      	cmp	r3, #0
 800c432:	d03a      	beq.n	800c4aa <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	4798      	blx	r3
    }
    return;
 800c43c:	e035      	b.n	800c4aa <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d009      	beq.n	800c45e <HAL_UART_IRQHandler+0x6e2>
 800c44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f001 fb26 	bl	800daa8 <UART_EndTransmit_IT>
    return;
 800c45c:	e026      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d009      	beq.n	800c47e <HAL_UART_IRQHandler+0x702>
 800c46a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f001 fb55 	bl	800db26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c47c:	e016      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d010      	beq.n	800c4ac <HAL_UART_IRQHandler+0x730>
 800c48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	da0c      	bge.n	800c4ac <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f001 fb3d 	bl	800db12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c498:	e008      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
      return;
 800c49a:	bf00      	nop
 800c49c:	e006      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
    return;
 800c49e:	bf00      	nop
 800c4a0:	e004      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
      return;
 800c4a2:	bf00      	nop
 800c4a4:	e002      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
      return;
 800c4a6:	bf00      	nop
 800c4a8:	e000      	b.n	800c4ac <HAL_UART_IRQHandler+0x730>
    return;
 800c4aa:	bf00      	nop
  }
}
 800c4ac:	37e8      	adds	r7, #232	; 0xe8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	effffffe 	.word	0xeffffffe

0800c4b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c50c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c510:	b092      	sub	sp, #72	; 0x48
 800c512:	af00      	add	r7, sp, #0
 800c514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	431a      	orrs	r2, r3
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	431a      	orrs	r2, r3
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	4313      	orrs	r3, r2
 800c532:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4bbe      	ldr	r3, [pc, #760]	; (800c834 <UART_SetConfig+0x328>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	6812      	ldr	r2, [r2, #0]
 800c542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c544:	430b      	orrs	r3, r1
 800c546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4ab3      	ldr	r2, [pc, #716]	; (800c838 <UART_SetConfig+0x32c>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d004      	beq.n	800c578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c574:	4313      	orrs	r3, r2
 800c576:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	689a      	ldr	r2, [r3, #8]
 800c57e:	4baf      	ldr	r3, [pc, #700]	; (800c83c <UART_SetConfig+0x330>)
 800c580:	4013      	ands	r3, r2
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c588:	430b      	orrs	r3, r1
 800c58a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	f023 010f 	bic.w	r1, r3, #15
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4aa6      	ldr	r2, [pc, #664]	; (800c840 <UART_SetConfig+0x334>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d177      	bne.n	800c69c <UART_SetConfig+0x190>
 800c5ac:	4ba5      	ldr	r3, [pc, #660]	; (800c844 <UART_SetConfig+0x338>)
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5b4:	2b28      	cmp	r3, #40	; 0x28
 800c5b6:	d86d      	bhi.n	800c694 <UART_SetConfig+0x188>
 800c5b8:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <UART_SetConfig+0xb4>)
 800c5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5be:	bf00      	nop
 800c5c0:	0800c665 	.word	0x0800c665
 800c5c4:	0800c695 	.word	0x0800c695
 800c5c8:	0800c695 	.word	0x0800c695
 800c5cc:	0800c695 	.word	0x0800c695
 800c5d0:	0800c695 	.word	0x0800c695
 800c5d4:	0800c695 	.word	0x0800c695
 800c5d8:	0800c695 	.word	0x0800c695
 800c5dc:	0800c695 	.word	0x0800c695
 800c5e0:	0800c66d 	.word	0x0800c66d
 800c5e4:	0800c695 	.word	0x0800c695
 800c5e8:	0800c695 	.word	0x0800c695
 800c5ec:	0800c695 	.word	0x0800c695
 800c5f0:	0800c695 	.word	0x0800c695
 800c5f4:	0800c695 	.word	0x0800c695
 800c5f8:	0800c695 	.word	0x0800c695
 800c5fc:	0800c695 	.word	0x0800c695
 800c600:	0800c675 	.word	0x0800c675
 800c604:	0800c695 	.word	0x0800c695
 800c608:	0800c695 	.word	0x0800c695
 800c60c:	0800c695 	.word	0x0800c695
 800c610:	0800c695 	.word	0x0800c695
 800c614:	0800c695 	.word	0x0800c695
 800c618:	0800c695 	.word	0x0800c695
 800c61c:	0800c695 	.word	0x0800c695
 800c620:	0800c67d 	.word	0x0800c67d
 800c624:	0800c695 	.word	0x0800c695
 800c628:	0800c695 	.word	0x0800c695
 800c62c:	0800c695 	.word	0x0800c695
 800c630:	0800c695 	.word	0x0800c695
 800c634:	0800c695 	.word	0x0800c695
 800c638:	0800c695 	.word	0x0800c695
 800c63c:	0800c695 	.word	0x0800c695
 800c640:	0800c685 	.word	0x0800c685
 800c644:	0800c695 	.word	0x0800c695
 800c648:	0800c695 	.word	0x0800c695
 800c64c:	0800c695 	.word	0x0800c695
 800c650:	0800c695 	.word	0x0800c695
 800c654:	0800c695 	.word	0x0800c695
 800c658:	0800c695 	.word	0x0800c695
 800c65c:	0800c695 	.word	0x0800c695
 800c660:	0800c68d 	.word	0x0800c68d
 800c664:	2301      	movs	r3, #1
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66a:	e326      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c66c:	2304      	movs	r3, #4
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c672:	e322      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c674:	2308      	movs	r3, #8
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67a:	e31e      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c67c:	2310      	movs	r3, #16
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c682:	e31a      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c684:	2320      	movs	r3, #32
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68a:	e316      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c68c:	2340      	movs	r3, #64	; 0x40
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e312      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c694:	2380      	movs	r3, #128	; 0x80
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e30e      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a69      	ldr	r2, [pc, #420]	; (800c848 <UART_SetConfig+0x33c>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d130      	bne.n	800c708 <UART_SetConfig+0x1fc>
 800c6a6:	4b67      	ldr	r3, [pc, #412]	; (800c844 <UART_SetConfig+0x338>)
 800c6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6aa:	f003 0307 	and.w	r3, r3, #7
 800c6ae:	2b05      	cmp	r3, #5
 800c6b0:	d826      	bhi.n	800c700 <UART_SetConfig+0x1f4>
 800c6b2:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <UART_SetConfig+0x1ac>)
 800c6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b8:	0800c6d1 	.word	0x0800c6d1
 800c6bc:	0800c6d9 	.word	0x0800c6d9
 800c6c0:	0800c6e1 	.word	0x0800c6e1
 800c6c4:	0800c6e9 	.word	0x0800c6e9
 800c6c8:	0800c6f1 	.word	0x0800c6f1
 800c6cc:	0800c6f9 	.word	0x0800c6f9
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d6:	e2f0      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c6d8:	2304      	movs	r3, #4
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e2ec      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e2e8      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c6e8:	2310      	movs	r3, #16
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ee:	e2e4      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c6f0:	2320      	movs	r3, #32
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e2e0      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c6f8:	2340      	movs	r3, #64	; 0x40
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e2dc      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c700:	2380      	movs	r3, #128	; 0x80
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e2d8      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a4f      	ldr	r2, [pc, #316]	; (800c84c <UART_SetConfig+0x340>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d130      	bne.n	800c774 <UART_SetConfig+0x268>
 800c712:	4b4c      	ldr	r3, [pc, #304]	; (800c844 <UART_SetConfig+0x338>)
 800c714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	2b05      	cmp	r3, #5
 800c71c:	d826      	bhi.n	800c76c <UART_SetConfig+0x260>
 800c71e:	a201      	add	r2, pc, #4	; (adr r2, 800c724 <UART_SetConfig+0x218>)
 800c720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c724:	0800c73d 	.word	0x0800c73d
 800c728:	0800c745 	.word	0x0800c745
 800c72c:	0800c74d 	.word	0x0800c74d
 800c730:	0800c755 	.word	0x0800c755
 800c734:	0800c75d 	.word	0x0800c75d
 800c738:	0800c765 	.word	0x0800c765
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e2ba      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c744:	2304      	movs	r3, #4
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e2b6      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c74c:	2308      	movs	r3, #8
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e2b2      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c754:	2310      	movs	r3, #16
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e2ae      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c75c:	2320      	movs	r3, #32
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e2aa      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c764:	2340      	movs	r3, #64	; 0x40
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e2a6      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c76c:	2380      	movs	r3, #128	; 0x80
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e2a2      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a35      	ldr	r2, [pc, #212]	; (800c850 <UART_SetConfig+0x344>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d130      	bne.n	800c7e0 <UART_SetConfig+0x2d4>
 800c77e:	4b31      	ldr	r3, [pc, #196]	; (800c844 <UART_SetConfig+0x338>)
 800c780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c782:	f003 0307 	and.w	r3, r3, #7
 800c786:	2b05      	cmp	r3, #5
 800c788:	d826      	bhi.n	800c7d8 <UART_SetConfig+0x2cc>
 800c78a:	a201      	add	r2, pc, #4	; (adr r2, 800c790 <UART_SetConfig+0x284>)
 800c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c790:	0800c7a9 	.word	0x0800c7a9
 800c794:	0800c7b1 	.word	0x0800c7b1
 800c798:	0800c7b9 	.word	0x0800c7b9
 800c79c:	0800c7c1 	.word	0x0800c7c1
 800c7a0:	0800c7c9 	.word	0x0800c7c9
 800c7a4:	0800c7d1 	.word	0x0800c7d1
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ae:	e284      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7b0:	2304      	movs	r3, #4
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b6:	e280      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7b8:	2308      	movs	r3, #8
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7be:	e27c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7c0:	2310      	movs	r3, #16
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c6:	e278      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7c8:	2320      	movs	r3, #32
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e274      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7d0:	2340      	movs	r3, #64	; 0x40
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e270      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7d8:	2380      	movs	r3, #128	; 0x80
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e26c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a1b      	ldr	r2, [pc, #108]	; (800c854 <UART_SetConfig+0x348>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d142      	bne.n	800c870 <UART_SetConfig+0x364>
 800c7ea:	4b16      	ldr	r3, [pc, #88]	; (800c844 <UART_SetConfig+0x338>)
 800c7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ee:	f003 0307 	and.w	r3, r3, #7
 800c7f2:	2b05      	cmp	r3, #5
 800c7f4:	d838      	bhi.n	800c868 <UART_SetConfig+0x35c>
 800c7f6:	a201      	add	r2, pc, #4	; (adr r2, 800c7fc <UART_SetConfig+0x2f0>)
 800c7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fc:	0800c815 	.word	0x0800c815
 800c800:	0800c81d 	.word	0x0800c81d
 800c804:	0800c825 	.word	0x0800c825
 800c808:	0800c82d 	.word	0x0800c82d
 800c80c:	0800c859 	.word	0x0800c859
 800c810:	0800c861 	.word	0x0800c861
 800c814:	2300      	movs	r3, #0
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81a:	e24e      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c81c:	2304      	movs	r3, #4
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e24a      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c824:	2308      	movs	r3, #8
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e246      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c82c:	2310      	movs	r3, #16
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e242      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c834:	cfff69f3 	.word	0xcfff69f3
 800c838:	58000c00 	.word	0x58000c00
 800c83c:	11fff4ff 	.word	0x11fff4ff
 800c840:	40011000 	.word	0x40011000
 800c844:	58024400 	.word	0x58024400
 800c848:	40004400 	.word	0x40004400
 800c84c:	40004800 	.word	0x40004800
 800c850:	40004c00 	.word	0x40004c00
 800c854:	40005000 	.word	0x40005000
 800c858:	2320      	movs	r3, #32
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85e:	e22c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c860:	2340      	movs	r3, #64	; 0x40
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c866:	e228      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c868:	2380      	movs	r3, #128	; 0x80
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86e:	e224      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4ab1      	ldr	r2, [pc, #708]	; (800cb3c <UART_SetConfig+0x630>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d176      	bne.n	800c968 <UART_SetConfig+0x45c>
 800c87a:	4bb1      	ldr	r3, [pc, #708]	; (800cb40 <UART_SetConfig+0x634>)
 800c87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c87e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c882:	2b28      	cmp	r3, #40	; 0x28
 800c884:	d86c      	bhi.n	800c960 <UART_SetConfig+0x454>
 800c886:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <UART_SetConfig+0x380>)
 800c888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88c:	0800c931 	.word	0x0800c931
 800c890:	0800c961 	.word	0x0800c961
 800c894:	0800c961 	.word	0x0800c961
 800c898:	0800c961 	.word	0x0800c961
 800c89c:	0800c961 	.word	0x0800c961
 800c8a0:	0800c961 	.word	0x0800c961
 800c8a4:	0800c961 	.word	0x0800c961
 800c8a8:	0800c961 	.word	0x0800c961
 800c8ac:	0800c939 	.word	0x0800c939
 800c8b0:	0800c961 	.word	0x0800c961
 800c8b4:	0800c961 	.word	0x0800c961
 800c8b8:	0800c961 	.word	0x0800c961
 800c8bc:	0800c961 	.word	0x0800c961
 800c8c0:	0800c961 	.word	0x0800c961
 800c8c4:	0800c961 	.word	0x0800c961
 800c8c8:	0800c961 	.word	0x0800c961
 800c8cc:	0800c941 	.word	0x0800c941
 800c8d0:	0800c961 	.word	0x0800c961
 800c8d4:	0800c961 	.word	0x0800c961
 800c8d8:	0800c961 	.word	0x0800c961
 800c8dc:	0800c961 	.word	0x0800c961
 800c8e0:	0800c961 	.word	0x0800c961
 800c8e4:	0800c961 	.word	0x0800c961
 800c8e8:	0800c961 	.word	0x0800c961
 800c8ec:	0800c949 	.word	0x0800c949
 800c8f0:	0800c961 	.word	0x0800c961
 800c8f4:	0800c961 	.word	0x0800c961
 800c8f8:	0800c961 	.word	0x0800c961
 800c8fc:	0800c961 	.word	0x0800c961
 800c900:	0800c961 	.word	0x0800c961
 800c904:	0800c961 	.word	0x0800c961
 800c908:	0800c961 	.word	0x0800c961
 800c90c:	0800c951 	.word	0x0800c951
 800c910:	0800c961 	.word	0x0800c961
 800c914:	0800c961 	.word	0x0800c961
 800c918:	0800c961 	.word	0x0800c961
 800c91c:	0800c961 	.word	0x0800c961
 800c920:	0800c961 	.word	0x0800c961
 800c924:	0800c961 	.word	0x0800c961
 800c928:	0800c961 	.word	0x0800c961
 800c92c:	0800c959 	.word	0x0800c959
 800c930:	2301      	movs	r3, #1
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c936:	e1c0      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c938:	2304      	movs	r3, #4
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e1bc      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c940:	2308      	movs	r3, #8
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e1b8      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c948:	2310      	movs	r3, #16
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94e:	e1b4      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c950:	2320      	movs	r3, #32
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c956:	e1b0      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c958:	2340      	movs	r3, #64	; 0x40
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95e:	e1ac      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c960:	2380      	movs	r3, #128	; 0x80
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e1a8      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a75      	ldr	r2, [pc, #468]	; (800cb44 <UART_SetConfig+0x638>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d130      	bne.n	800c9d4 <UART_SetConfig+0x4c8>
 800c972:	4b73      	ldr	r3, [pc, #460]	; (800cb40 <UART_SetConfig+0x634>)
 800c974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c976:	f003 0307 	and.w	r3, r3, #7
 800c97a:	2b05      	cmp	r3, #5
 800c97c:	d826      	bhi.n	800c9cc <UART_SetConfig+0x4c0>
 800c97e:	a201      	add	r2, pc, #4	; (adr r2, 800c984 <UART_SetConfig+0x478>)
 800c980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c984:	0800c99d 	.word	0x0800c99d
 800c988:	0800c9a5 	.word	0x0800c9a5
 800c98c:	0800c9ad 	.word	0x0800c9ad
 800c990:	0800c9b5 	.word	0x0800c9b5
 800c994:	0800c9bd 	.word	0x0800c9bd
 800c998:	0800c9c5 	.word	0x0800c9c5
 800c99c:	2300      	movs	r3, #0
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e18a      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9a4:	2304      	movs	r3, #4
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e186      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9ac:	2308      	movs	r3, #8
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e182      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9b4:	2310      	movs	r3, #16
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e17e      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9bc:	2320      	movs	r3, #32
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c2:	e17a      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9c4:	2340      	movs	r3, #64	; 0x40
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ca:	e176      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9cc:	2380      	movs	r3, #128	; 0x80
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e172      	b.n	800ccba <UART_SetConfig+0x7ae>
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a5b      	ldr	r2, [pc, #364]	; (800cb48 <UART_SetConfig+0x63c>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d130      	bne.n	800ca40 <UART_SetConfig+0x534>
 800c9de:	4b58      	ldr	r3, [pc, #352]	; (800cb40 <UART_SetConfig+0x634>)
 800c9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9e2:	f003 0307 	and.w	r3, r3, #7
 800c9e6:	2b05      	cmp	r3, #5
 800c9e8:	d826      	bhi.n	800ca38 <UART_SetConfig+0x52c>
 800c9ea:	a201      	add	r2, pc, #4	; (adr r2, 800c9f0 <UART_SetConfig+0x4e4>)
 800c9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f0:	0800ca09 	.word	0x0800ca09
 800c9f4:	0800ca11 	.word	0x0800ca11
 800c9f8:	0800ca19 	.word	0x0800ca19
 800c9fc:	0800ca21 	.word	0x0800ca21
 800ca00:	0800ca29 	.word	0x0800ca29
 800ca04:	0800ca31 	.word	0x0800ca31
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e154      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca10:	2304      	movs	r3, #4
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e150      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca18:	2308      	movs	r3, #8
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e14c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca20:	2310      	movs	r3, #16
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e148      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca28:	2320      	movs	r3, #32
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2e:	e144      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca30:	2340      	movs	r3, #64	; 0x40
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca36:	e140      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca38:	2380      	movs	r3, #128	; 0x80
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e13c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a41      	ldr	r2, [pc, #260]	; (800cb4c <UART_SetConfig+0x640>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	f040 8082 	bne.w	800cb50 <UART_SetConfig+0x644>
 800ca4c:	4b3c      	ldr	r3, [pc, #240]	; (800cb40 <UART_SetConfig+0x634>)
 800ca4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca54:	2b28      	cmp	r3, #40	; 0x28
 800ca56:	d86d      	bhi.n	800cb34 <UART_SetConfig+0x628>
 800ca58:	a201      	add	r2, pc, #4	; (adr r2, 800ca60 <UART_SetConfig+0x554>)
 800ca5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5e:	bf00      	nop
 800ca60:	0800cb05 	.word	0x0800cb05
 800ca64:	0800cb35 	.word	0x0800cb35
 800ca68:	0800cb35 	.word	0x0800cb35
 800ca6c:	0800cb35 	.word	0x0800cb35
 800ca70:	0800cb35 	.word	0x0800cb35
 800ca74:	0800cb35 	.word	0x0800cb35
 800ca78:	0800cb35 	.word	0x0800cb35
 800ca7c:	0800cb35 	.word	0x0800cb35
 800ca80:	0800cb0d 	.word	0x0800cb0d
 800ca84:	0800cb35 	.word	0x0800cb35
 800ca88:	0800cb35 	.word	0x0800cb35
 800ca8c:	0800cb35 	.word	0x0800cb35
 800ca90:	0800cb35 	.word	0x0800cb35
 800ca94:	0800cb35 	.word	0x0800cb35
 800ca98:	0800cb35 	.word	0x0800cb35
 800ca9c:	0800cb35 	.word	0x0800cb35
 800caa0:	0800cb15 	.word	0x0800cb15
 800caa4:	0800cb35 	.word	0x0800cb35
 800caa8:	0800cb35 	.word	0x0800cb35
 800caac:	0800cb35 	.word	0x0800cb35
 800cab0:	0800cb35 	.word	0x0800cb35
 800cab4:	0800cb35 	.word	0x0800cb35
 800cab8:	0800cb35 	.word	0x0800cb35
 800cabc:	0800cb35 	.word	0x0800cb35
 800cac0:	0800cb1d 	.word	0x0800cb1d
 800cac4:	0800cb35 	.word	0x0800cb35
 800cac8:	0800cb35 	.word	0x0800cb35
 800cacc:	0800cb35 	.word	0x0800cb35
 800cad0:	0800cb35 	.word	0x0800cb35
 800cad4:	0800cb35 	.word	0x0800cb35
 800cad8:	0800cb35 	.word	0x0800cb35
 800cadc:	0800cb35 	.word	0x0800cb35
 800cae0:	0800cb25 	.word	0x0800cb25
 800cae4:	0800cb35 	.word	0x0800cb35
 800cae8:	0800cb35 	.word	0x0800cb35
 800caec:	0800cb35 	.word	0x0800cb35
 800caf0:	0800cb35 	.word	0x0800cb35
 800caf4:	0800cb35 	.word	0x0800cb35
 800caf8:	0800cb35 	.word	0x0800cb35
 800cafc:	0800cb35 	.word	0x0800cb35
 800cb00:	0800cb2d 	.word	0x0800cb2d
 800cb04:	2301      	movs	r3, #1
 800cb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0a:	e0d6      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb12:	e0d2      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb14:	2308      	movs	r3, #8
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1a:	e0ce      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb22:	e0ca      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb24:	2320      	movs	r3, #32
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2a:	e0c6      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb2c:	2340      	movs	r3, #64	; 0x40
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e0c2      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb34:	2380      	movs	r3, #128	; 0x80
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e0be      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cb3c:	40011400 	.word	0x40011400
 800cb40:	58024400 	.word	0x58024400
 800cb44:	40007800 	.word	0x40007800
 800cb48:	40007c00 	.word	0x40007c00
 800cb4c:	40011800 	.word	0x40011800
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4aad      	ldr	r2, [pc, #692]	; (800ce0c <UART_SetConfig+0x900>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d176      	bne.n	800cc48 <UART_SetConfig+0x73c>
 800cb5a:	4bad      	ldr	r3, [pc, #692]	; (800ce10 <UART_SetConfig+0x904>)
 800cb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb62:	2b28      	cmp	r3, #40	; 0x28
 800cb64:	d86c      	bhi.n	800cc40 <UART_SetConfig+0x734>
 800cb66:	a201      	add	r2, pc, #4	; (adr r2, 800cb6c <UART_SetConfig+0x660>)
 800cb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6c:	0800cc11 	.word	0x0800cc11
 800cb70:	0800cc41 	.word	0x0800cc41
 800cb74:	0800cc41 	.word	0x0800cc41
 800cb78:	0800cc41 	.word	0x0800cc41
 800cb7c:	0800cc41 	.word	0x0800cc41
 800cb80:	0800cc41 	.word	0x0800cc41
 800cb84:	0800cc41 	.word	0x0800cc41
 800cb88:	0800cc41 	.word	0x0800cc41
 800cb8c:	0800cc19 	.word	0x0800cc19
 800cb90:	0800cc41 	.word	0x0800cc41
 800cb94:	0800cc41 	.word	0x0800cc41
 800cb98:	0800cc41 	.word	0x0800cc41
 800cb9c:	0800cc41 	.word	0x0800cc41
 800cba0:	0800cc41 	.word	0x0800cc41
 800cba4:	0800cc41 	.word	0x0800cc41
 800cba8:	0800cc41 	.word	0x0800cc41
 800cbac:	0800cc21 	.word	0x0800cc21
 800cbb0:	0800cc41 	.word	0x0800cc41
 800cbb4:	0800cc41 	.word	0x0800cc41
 800cbb8:	0800cc41 	.word	0x0800cc41
 800cbbc:	0800cc41 	.word	0x0800cc41
 800cbc0:	0800cc41 	.word	0x0800cc41
 800cbc4:	0800cc41 	.word	0x0800cc41
 800cbc8:	0800cc41 	.word	0x0800cc41
 800cbcc:	0800cc29 	.word	0x0800cc29
 800cbd0:	0800cc41 	.word	0x0800cc41
 800cbd4:	0800cc41 	.word	0x0800cc41
 800cbd8:	0800cc41 	.word	0x0800cc41
 800cbdc:	0800cc41 	.word	0x0800cc41
 800cbe0:	0800cc41 	.word	0x0800cc41
 800cbe4:	0800cc41 	.word	0x0800cc41
 800cbe8:	0800cc41 	.word	0x0800cc41
 800cbec:	0800cc31 	.word	0x0800cc31
 800cbf0:	0800cc41 	.word	0x0800cc41
 800cbf4:	0800cc41 	.word	0x0800cc41
 800cbf8:	0800cc41 	.word	0x0800cc41
 800cbfc:	0800cc41 	.word	0x0800cc41
 800cc00:	0800cc41 	.word	0x0800cc41
 800cc04:	0800cc41 	.word	0x0800cc41
 800cc08:	0800cc41 	.word	0x0800cc41
 800cc0c:	0800cc39 	.word	0x0800cc39
 800cc10:	2301      	movs	r3, #1
 800cc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc16:	e050      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc18:	2304      	movs	r3, #4
 800cc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc1e:	e04c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc20:	2308      	movs	r3, #8
 800cc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc26:	e048      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc28:	2310      	movs	r3, #16
 800cc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2e:	e044      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc30:	2320      	movs	r3, #32
 800cc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc36:	e040      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc38:	2340      	movs	r3, #64	; 0x40
 800cc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3e:	e03c      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc40:	2380      	movs	r3, #128	; 0x80
 800cc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc46:	e038      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a71      	ldr	r2, [pc, #452]	; (800ce14 <UART_SetConfig+0x908>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d130      	bne.n	800ccb4 <UART_SetConfig+0x7a8>
 800cc52:	4b6f      	ldr	r3, [pc, #444]	; (800ce10 <UART_SetConfig+0x904>)
 800cc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b05      	cmp	r3, #5
 800cc5c:	d826      	bhi.n	800ccac <UART_SetConfig+0x7a0>
 800cc5e:	a201      	add	r2, pc, #4	; (adr r2, 800cc64 <UART_SetConfig+0x758>)
 800cc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc64:	0800cc7d 	.word	0x0800cc7d
 800cc68:	0800cc85 	.word	0x0800cc85
 800cc6c:	0800cc8d 	.word	0x0800cc8d
 800cc70:	0800cc95 	.word	0x0800cc95
 800cc74:	0800cc9d 	.word	0x0800cc9d
 800cc78:	0800cca5 	.word	0x0800cca5
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc82:	e01a      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc84:	2304      	movs	r3, #4
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e016      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc8c:	2308      	movs	r3, #8
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e012      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc94:	2310      	movs	r3, #16
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e00e      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cc9c:	2320      	movs	r3, #32
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e00a      	b.n	800ccba <UART_SetConfig+0x7ae>
 800cca4:	2340      	movs	r3, #64	; 0x40
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e006      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ccac:	2380      	movs	r3, #128	; 0x80
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e002      	b.n	800ccba <UART_SetConfig+0x7ae>
 800ccb4:	2380      	movs	r3, #128	; 0x80
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a55      	ldr	r2, [pc, #340]	; (800ce14 <UART_SetConfig+0x908>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	f040 80f8 	bne.w	800ceb6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccca:	2b20      	cmp	r3, #32
 800cccc:	dc46      	bgt.n	800cd5c <UART_SetConfig+0x850>
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	db75      	blt.n	800cdbe <UART_SetConfig+0x8b2>
 800ccd2:	3b02      	subs	r3, #2
 800ccd4:	2b1e      	cmp	r3, #30
 800ccd6:	d872      	bhi.n	800cdbe <UART_SetConfig+0x8b2>
 800ccd8:	a201      	add	r2, pc, #4	; (adr r2, 800cce0 <UART_SetConfig+0x7d4>)
 800ccda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccde:	bf00      	nop
 800cce0:	0800cd63 	.word	0x0800cd63
 800cce4:	0800cdbf 	.word	0x0800cdbf
 800cce8:	0800cd6b 	.word	0x0800cd6b
 800ccec:	0800cdbf 	.word	0x0800cdbf
 800ccf0:	0800cdbf 	.word	0x0800cdbf
 800ccf4:	0800cdbf 	.word	0x0800cdbf
 800ccf8:	0800cd7b 	.word	0x0800cd7b
 800ccfc:	0800cdbf 	.word	0x0800cdbf
 800cd00:	0800cdbf 	.word	0x0800cdbf
 800cd04:	0800cdbf 	.word	0x0800cdbf
 800cd08:	0800cdbf 	.word	0x0800cdbf
 800cd0c:	0800cdbf 	.word	0x0800cdbf
 800cd10:	0800cdbf 	.word	0x0800cdbf
 800cd14:	0800cdbf 	.word	0x0800cdbf
 800cd18:	0800cd8b 	.word	0x0800cd8b
 800cd1c:	0800cdbf 	.word	0x0800cdbf
 800cd20:	0800cdbf 	.word	0x0800cdbf
 800cd24:	0800cdbf 	.word	0x0800cdbf
 800cd28:	0800cdbf 	.word	0x0800cdbf
 800cd2c:	0800cdbf 	.word	0x0800cdbf
 800cd30:	0800cdbf 	.word	0x0800cdbf
 800cd34:	0800cdbf 	.word	0x0800cdbf
 800cd38:	0800cdbf 	.word	0x0800cdbf
 800cd3c:	0800cdbf 	.word	0x0800cdbf
 800cd40:	0800cdbf 	.word	0x0800cdbf
 800cd44:	0800cdbf 	.word	0x0800cdbf
 800cd48:	0800cdbf 	.word	0x0800cdbf
 800cd4c:	0800cdbf 	.word	0x0800cdbf
 800cd50:	0800cdbf 	.word	0x0800cdbf
 800cd54:	0800cdbf 	.word	0x0800cdbf
 800cd58:	0800cdb1 	.word	0x0800cdb1
 800cd5c:	2b40      	cmp	r3, #64	; 0x40
 800cd5e:	d02a      	beq.n	800cdb6 <UART_SetConfig+0x8aa>
 800cd60:	e02d      	b.n	800cdbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd62:	f7fc ffd3 	bl	8009d0c <HAL_RCCEx_GetD3PCLK1Freq>
 800cd66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd68:	e02f      	b.n	800cdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fc ffe2 	bl	8009d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd78:	e027      	b.n	800cdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd7a:	f107 0318 	add.w	r3, r7, #24
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fd f92e 	bl	8009fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd88:	e01f      	b.n	800cdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd8a:	4b21      	ldr	r3, [pc, #132]	; (800ce10 <UART_SetConfig+0x904>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 0320 	and.w	r3, r3, #32
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d009      	beq.n	800cdaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd96:	4b1e      	ldr	r3, [pc, #120]	; (800ce10 <UART_SetConfig+0x904>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	08db      	lsrs	r3, r3, #3
 800cd9c:	f003 0303 	and.w	r3, r3, #3
 800cda0:	4a1d      	ldr	r2, [pc, #116]	; (800ce18 <UART_SetConfig+0x90c>)
 800cda2:	fa22 f303 	lsr.w	r3, r2, r3
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cda8:	e00f      	b.n	800cdca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cdaa:	4b1b      	ldr	r3, [pc, #108]	; (800ce18 <UART_SetConfig+0x90c>)
 800cdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdae:	e00c      	b.n	800cdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdb0:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <UART_SetConfig+0x910>)
 800cdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb4:	e009      	b.n	800cdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdbc:	e005      	b.n	800cdca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 81ee 	beq.w	800d1ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd6:	4a12      	ldr	r2, [pc, #72]	; (800ce20 <UART_SetConfig+0x914>)
 800cdd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cddc:	461a      	mov	r2, r3
 800cdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cde4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	4613      	mov	r3, r2
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	4413      	add	r3, r2
 800cdf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d305      	bcc.n	800ce02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d910      	bls.n	800ce24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce08:	e1d1      	b.n	800d1ae <UART_SetConfig+0xca2>
 800ce0a:	bf00      	nop
 800ce0c:	40011c00 	.word	0x40011c00
 800ce10:	58024400 	.word	0x58024400
 800ce14:	58000c00 	.word	0x58000c00
 800ce18:	03d09000 	.word	0x03d09000
 800ce1c:	003d0900 	.word	0x003d0900
 800ce20:	0800e404 	.word	0x0800e404
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce26:	2200      	movs	r2, #0
 800ce28:	60bb      	str	r3, [r7, #8]
 800ce2a:	60fa      	str	r2, [r7, #12]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	4ac0      	ldr	r2, [pc, #768]	; (800d134 <UART_SetConfig+0xc28>)
 800ce32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2200      	movs	r2, #0
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	607a      	str	r2, [r7, #4]
 800ce3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce46:	f7f3 fa6b 	bl	8000320 <__aeabi_uldivmod>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4610      	mov	r0, r2
 800ce50:	4619      	mov	r1, r3
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	f04f 0300 	mov.w	r3, #0
 800ce5a:	020b      	lsls	r3, r1, #8
 800ce5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce60:	0202      	lsls	r2, r0, #8
 800ce62:	6979      	ldr	r1, [r7, #20]
 800ce64:	6849      	ldr	r1, [r1, #4]
 800ce66:	0849      	lsrs	r1, r1, #1
 800ce68:	2000      	movs	r0, #0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	eb12 0804 	adds.w	r8, r2, r4
 800ce72:	eb43 0905 	adc.w	r9, r3, r5
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	469a      	mov	sl, r3
 800ce7e:	4693      	mov	fp, r2
 800ce80:	4652      	mov	r2, sl
 800ce82:	465b      	mov	r3, fp
 800ce84:	4640      	mov	r0, r8
 800ce86:	4649      	mov	r1, r9
 800ce88:	f7f3 fa4a 	bl	8000320 <__aeabi_uldivmod>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4613      	mov	r3, r2
 800ce92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce9a:	d308      	bcc.n	800ceae <UART_SetConfig+0x9a2>
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cea2:	d204      	bcs.n	800ceae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceaa:	60da      	str	r2, [r3, #12]
 800ceac:	e17f      	b.n	800d1ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ceb4:	e17b      	b.n	800d1ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cebe:	f040 80bd 	bne.w	800d03c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cec2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cec6:	2b20      	cmp	r3, #32
 800cec8:	dc48      	bgt.n	800cf5c <UART_SetConfig+0xa50>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	db7b      	blt.n	800cfc6 <UART_SetConfig+0xaba>
 800cece:	2b20      	cmp	r3, #32
 800ced0:	d879      	bhi.n	800cfc6 <UART_SetConfig+0xaba>
 800ced2:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <UART_SetConfig+0x9cc>)
 800ced4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced8:	0800cf63 	.word	0x0800cf63
 800cedc:	0800cf6b 	.word	0x0800cf6b
 800cee0:	0800cfc7 	.word	0x0800cfc7
 800cee4:	0800cfc7 	.word	0x0800cfc7
 800cee8:	0800cf73 	.word	0x0800cf73
 800ceec:	0800cfc7 	.word	0x0800cfc7
 800cef0:	0800cfc7 	.word	0x0800cfc7
 800cef4:	0800cfc7 	.word	0x0800cfc7
 800cef8:	0800cf83 	.word	0x0800cf83
 800cefc:	0800cfc7 	.word	0x0800cfc7
 800cf00:	0800cfc7 	.word	0x0800cfc7
 800cf04:	0800cfc7 	.word	0x0800cfc7
 800cf08:	0800cfc7 	.word	0x0800cfc7
 800cf0c:	0800cfc7 	.word	0x0800cfc7
 800cf10:	0800cfc7 	.word	0x0800cfc7
 800cf14:	0800cfc7 	.word	0x0800cfc7
 800cf18:	0800cf93 	.word	0x0800cf93
 800cf1c:	0800cfc7 	.word	0x0800cfc7
 800cf20:	0800cfc7 	.word	0x0800cfc7
 800cf24:	0800cfc7 	.word	0x0800cfc7
 800cf28:	0800cfc7 	.word	0x0800cfc7
 800cf2c:	0800cfc7 	.word	0x0800cfc7
 800cf30:	0800cfc7 	.word	0x0800cfc7
 800cf34:	0800cfc7 	.word	0x0800cfc7
 800cf38:	0800cfc7 	.word	0x0800cfc7
 800cf3c:	0800cfc7 	.word	0x0800cfc7
 800cf40:	0800cfc7 	.word	0x0800cfc7
 800cf44:	0800cfc7 	.word	0x0800cfc7
 800cf48:	0800cfc7 	.word	0x0800cfc7
 800cf4c:	0800cfc7 	.word	0x0800cfc7
 800cf50:	0800cfc7 	.word	0x0800cfc7
 800cf54:	0800cfc7 	.word	0x0800cfc7
 800cf58:	0800cfb9 	.word	0x0800cfb9
 800cf5c:	2b40      	cmp	r3, #64	; 0x40
 800cf5e:	d02e      	beq.n	800cfbe <UART_SetConfig+0xab2>
 800cf60:	e031      	b.n	800cfc6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf62:	f7fb ffad 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 800cf66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf68:	e033      	b.n	800cfd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf6a:	f7fb ffbf 	bl	8008eec <HAL_RCC_GetPCLK2Freq>
 800cf6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf70:	e02f      	b.n	800cfd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fc fede 	bl	8009d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf80:	e027      	b.n	800cfd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf82:	f107 0318 	add.w	r3, r7, #24
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd f82a 	bl	8009fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf90:	e01f      	b.n	800cfd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf92:	4b69      	ldr	r3, [pc, #420]	; (800d138 <UART_SetConfig+0xc2c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0320 	and.w	r3, r3, #32
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d009      	beq.n	800cfb2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf9e:	4b66      	ldr	r3, [pc, #408]	; (800d138 <UART_SetConfig+0xc2c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	08db      	lsrs	r3, r3, #3
 800cfa4:	f003 0303 	and.w	r3, r3, #3
 800cfa8:	4a64      	ldr	r2, [pc, #400]	; (800d13c <UART_SetConfig+0xc30>)
 800cfaa:	fa22 f303 	lsr.w	r3, r2, r3
 800cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfb0:	e00f      	b.n	800cfd2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cfb2:	4b62      	ldr	r3, [pc, #392]	; (800d13c <UART_SetConfig+0xc30>)
 800cfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb6:	e00c      	b.n	800cfd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfb8:	4b61      	ldr	r3, [pc, #388]	; (800d140 <UART_SetConfig+0xc34>)
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfbc:	e009      	b.n	800cfd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc4:	e005      	b.n	800cfd2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cfd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 80ea 	beq.w	800d1ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfde:	4a55      	ldr	r2, [pc, #340]	; (800d134 <UART_SetConfig+0xc28>)
 800cfe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfec:	005a      	lsls	r2, r3, #1
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	085b      	lsrs	r3, r3, #1
 800cff4:	441a      	add	r2, r3
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cffe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	2b0f      	cmp	r3, #15
 800d004:	d916      	bls.n	800d034 <UART_SetConfig+0xb28>
 800d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d00c:	d212      	bcs.n	800d034 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	b29b      	uxth	r3, r3
 800d012:	f023 030f 	bic.w	r3, r3, #15
 800d016:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	085b      	lsrs	r3, r3, #1
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	b29a      	uxth	r2, r3
 800d024:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d026:	4313      	orrs	r3, r2
 800d028:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	e0bc      	b.n	800d1ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d03a:	e0b8      	b.n	800d1ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d03c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d040:	2b20      	cmp	r3, #32
 800d042:	dc4b      	bgt.n	800d0dc <UART_SetConfig+0xbd0>
 800d044:	2b00      	cmp	r3, #0
 800d046:	f2c0 8087 	blt.w	800d158 <UART_SetConfig+0xc4c>
 800d04a:	2b20      	cmp	r3, #32
 800d04c:	f200 8084 	bhi.w	800d158 <UART_SetConfig+0xc4c>
 800d050:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <UART_SetConfig+0xb4c>)
 800d052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d056:	bf00      	nop
 800d058:	0800d0e3 	.word	0x0800d0e3
 800d05c:	0800d0eb 	.word	0x0800d0eb
 800d060:	0800d159 	.word	0x0800d159
 800d064:	0800d159 	.word	0x0800d159
 800d068:	0800d0f3 	.word	0x0800d0f3
 800d06c:	0800d159 	.word	0x0800d159
 800d070:	0800d159 	.word	0x0800d159
 800d074:	0800d159 	.word	0x0800d159
 800d078:	0800d103 	.word	0x0800d103
 800d07c:	0800d159 	.word	0x0800d159
 800d080:	0800d159 	.word	0x0800d159
 800d084:	0800d159 	.word	0x0800d159
 800d088:	0800d159 	.word	0x0800d159
 800d08c:	0800d159 	.word	0x0800d159
 800d090:	0800d159 	.word	0x0800d159
 800d094:	0800d159 	.word	0x0800d159
 800d098:	0800d113 	.word	0x0800d113
 800d09c:	0800d159 	.word	0x0800d159
 800d0a0:	0800d159 	.word	0x0800d159
 800d0a4:	0800d159 	.word	0x0800d159
 800d0a8:	0800d159 	.word	0x0800d159
 800d0ac:	0800d159 	.word	0x0800d159
 800d0b0:	0800d159 	.word	0x0800d159
 800d0b4:	0800d159 	.word	0x0800d159
 800d0b8:	0800d159 	.word	0x0800d159
 800d0bc:	0800d159 	.word	0x0800d159
 800d0c0:	0800d159 	.word	0x0800d159
 800d0c4:	0800d159 	.word	0x0800d159
 800d0c8:	0800d159 	.word	0x0800d159
 800d0cc:	0800d159 	.word	0x0800d159
 800d0d0:	0800d159 	.word	0x0800d159
 800d0d4:	0800d159 	.word	0x0800d159
 800d0d8:	0800d14b 	.word	0x0800d14b
 800d0dc:	2b40      	cmp	r3, #64	; 0x40
 800d0de:	d037      	beq.n	800d150 <UART_SetConfig+0xc44>
 800d0e0:	e03a      	b.n	800d158 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0e2:	f7fb feed 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 800d0e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0e8:	e03c      	b.n	800d164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0ea:	f7fb feff 	bl	8008eec <HAL_RCC_GetPCLK2Freq>
 800d0ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0f0:	e038      	b.n	800d164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fc fe1e 	bl	8009d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d100:	e030      	b.n	800d164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d102:	f107 0318 	add.w	r3, r7, #24
 800d106:	4618      	mov	r0, r3
 800d108:	f7fc ff6a 	bl	8009fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d110:	e028      	b.n	800d164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d112:	4b09      	ldr	r3, [pc, #36]	; (800d138 <UART_SetConfig+0xc2c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f003 0320 	and.w	r3, r3, #32
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d012      	beq.n	800d144 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d11e:	4b06      	ldr	r3, [pc, #24]	; (800d138 <UART_SetConfig+0xc2c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	08db      	lsrs	r3, r3, #3
 800d124:	f003 0303 	and.w	r3, r3, #3
 800d128:	4a04      	ldr	r2, [pc, #16]	; (800d13c <UART_SetConfig+0xc30>)
 800d12a:	fa22 f303 	lsr.w	r3, r2, r3
 800d12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d130:	e018      	b.n	800d164 <UART_SetConfig+0xc58>
 800d132:	bf00      	nop
 800d134:	0800e404 	.word	0x0800e404
 800d138:	58024400 	.word	0x58024400
 800d13c:	03d09000 	.word	0x03d09000
 800d140:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <UART_SetConfig+0xccc>)
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d148:	e00c      	b.n	800d164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d14a:	4b24      	ldr	r3, [pc, #144]	; (800d1dc <UART_SetConfig+0xcd0>)
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d14e:	e009      	b.n	800d164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d156:	e005      	b.n	800d164 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d158:	2300      	movs	r3, #0
 800d15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d162:	bf00      	nop
    }

    if (pclk != 0U)
 800d164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d166:	2b00      	cmp	r3, #0
 800d168:	d021      	beq.n	800d1ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d16e:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <UART_SetConfig+0xcd4>)
 800d170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d174:	461a      	mov	r2, r3
 800d176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d178:	fbb3 f2f2 	udiv	r2, r3, r2
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	085b      	lsrs	r3, r3, #1
 800d182:	441a      	add	r2, r3
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	fbb2 f3f3 	udiv	r3, r2, r3
 800d18c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	2b0f      	cmp	r3, #15
 800d192:	d909      	bls.n	800d1a8 <UART_SetConfig+0xc9c>
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d19a:	d205      	bcs.n	800d1a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	60da      	str	r2, [r3, #12]
 800d1a6:	e002      	b.n	800d1ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d1ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3748      	adds	r7, #72	; 0x48
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1d8:	03d09000 	.word	0x03d09000
 800d1dc:	003d0900 	.word	0x003d0900
 800d1e0:	0800e404 	.word	0x0800e404

0800d1e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00a      	beq.n	800d20e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	430a      	orrs	r2, r1
 800d20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	430a      	orrs	r2, r1
 800d22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00a      	beq.n	800d252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	430a      	orrs	r2, r1
 800d250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d256:	f003 0308 	and.w	r3, r3, #8
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00a      	beq.n	800d274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	430a      	orrs	r2, r1
 800d272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d278:	f003 0310 	and.w	r3, r3, #16
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00a      	beq.n	800d296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	430a      	orrs	r2, r1
 800d294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29a:	f003 0320 	and.w	r3, r3, #32
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01a      	beq.n	800d2fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2e2:	d10a      	bne.n	800d2fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	430a      	orrs	r2, r1
 800d31a:	605a      	str	r2, [r3, #4]
  }
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d338:	f7f7 fd62 	bl	8004e00 <HAL_GetTick>
 800d33c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 0308 	and.w	r3, r3, #8
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d10e      	bne.n	800d36a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d34c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f82f 	bl	800d3be <UART_WaitOnFlagUntilTimeout>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d366:	2303      	movs	r3, #3
 800d368:	e025      	b.n	800d3b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f003 0304 	and.w	r3, r3, #4
 800d374:	2b04      	cmp	r3, #4
 800d376:	d10e      	bne.n	800d396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2200      	movs	r2, #0
 800d382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f819 	bl	800d3be <UART_WaitOnFlagUntilTimeout>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d001      	beq.n	800d396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d392:	2303      	movs	r3, #3
 800d394:	e00f      	b.n	800d3b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2220      	movs	r2, #32
 800d39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2220      	movs	r2, #32
 800d3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b09c      	sub	sp, #112	; 0x70
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	60f8      	str	r0, [r7, #12]
 800d3c6:	60b9      	str	r1, [r7, #8]
 800d3c8:	603b      	str	r3, [r7, #0]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3ce:	e0a9      	b.n	800d524 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3d6:	f000 80a5 	beq.w	800d524 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3da:	f7f7 fd11 	bl	8004e00 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d302      	bcc.n	800d3f0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d140      	bne.n	800d472 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f8:	e853 3f00 	ldrex	r3, [r3]
 800d3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d404:	667b      	str	r3, [r7, #100]	; 0x64
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d40e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d410:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d416:	e841 2300 	strex	r3, r2, [r1]
 800d41a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1e6      	bne.n	800d3f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	3308      	adds	r3, #8
 800d428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42c:	e853 3f00 	ldrex	r3, [r3]
 800d430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	f023 0301 	bic.w	r3, r3, #1
 800d438:	663b      	str	r3, [r7, #96]	; 0x60
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3308      	adds	r3, #8
 800d440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d442:	64ba      	str	r2, [r7, #72]	; 0x48
 800d444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d44a:	e841 2300 	strex	r3, r2, [r1]
 800d44e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1e5      	bne.n	800d422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2220      	movs	r2, #32
 800d45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2220      	movs	r2, #32
 800d462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d46e:	2303      	movs	r3, #3
 800d470:	e069      	b.n	800d546 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0304 	and.w	r3, r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d051      	beq.n	800d524 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d48e:	d149      	bne.n	800d524 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d498:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	e853 3f00 	ldrex	r3, [r3]
 800d4a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c0:	e841 2300 	strex	r3, r2, [r1]
 800d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e6      	bne.n	800d49a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	e853 3f00 	ldrex	r3, [r3]
 800d4da:	613b      	str	r3, [r7, #16]
   return(result);
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f023 0301 	bic.w	r3, r3, #1
 800d4e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d4ec:	623a      	str	r2, [r7, #32]
 800d4ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	69f9      	ldr	r1, [r7, #28]
 800d4f2:	6a3a      	ldr	r2, [r7, #32]
 800d4f4:	e841 2300 	strex	r3, r2, [r1]
 800d4f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e5      	bne.n	800d4cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2220      	movs	r2, #32
 800d504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2220      	movs	r2, #32
 800d50c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2220      	movs	r2, #32
 800d514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e010      	b.n	800d546 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	69da      	ldr	r2, [r3, #28]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	4013      	ands	r3, r2
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	429a      	cmp	r2, r3
 800d532:	bf0c      	ite	eq
 800d534:	2301      	moveq	r3, #1
 800d536:	2300      	movne	r3, #0
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	461a      	mov	r2, r3
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	429a      	cmp	r2, r3
 800d540:	f43f af46 	beq.w	800d3d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	3770      	adds	r7, #112	; 0x70
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b096      	sub	sp, #88	; 0x58
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	88fa      	ldrh	r2, [r7, #6]
 800d568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2222      	movs	r2, #34	; 0x22
 800d578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d02c      	beq.n	800d5de <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d588:	4a42      	ldr	r2, [pc, #264]	; (800d694 <UART_Start_Receive_DMA+0x144>)
 800d58a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d590:	4a41      	ldr	r2, [pc, #260]	; (800d698 <UART_Start_Receive_DMA+0x148>)
 800d592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d598:	4a40      	ldr	r2, [pc, #256]	; (800d69c <UART_Start_Receive_DMA+0x14c>)
 800d59a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3324      	adds	r3, #36	; 0x24
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	88fb      	ldrh	r3, [r7, #6]
 800d5b8:	f7f8 f898 	bl	80056ec <HAL_DMA_Start_IT>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00d      	beq.n	800d5de <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2210      	movs	r2, #16
 800d5c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e055      	b.n	800d68a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d018      	beq.n	800d620 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f6:	e853 3f00 	ldrex	r3, [r3]
 800d5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d602:	657b      	str	r3, [r7, #84]	; 0x54
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d60c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d60e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d610:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d614:	e841 2300 	strex	r3, r2, [r1]
 800d618:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e6      	bne.n	800d5ee <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3308      	adds	r3, #8
 800d626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	f043 0301 	orr.w	r3, r3, #1
 800d636:	653b      	str	r3, [r7, #80]	; 0x50
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3308      	adds	r3, #8
 800d63e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d640:	637a      	str	r2, [r7, #52]	; 0x34
 800d642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e5      	bne.n	800d620 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3308      	adds	r3, #8
 800d65a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	e853 3f00 	ldrex	r3, [r3]
 800d662:	613b      	str	r3, [r7, #16]
   return(result);
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	3308      	adds	r3, #8
 800d672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d674:	623a      	str	r2, [r7, #32]
 800d676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d678:	69f9      	ldr	r1, [r7, #28]
 800d67a:	6a3a      	ldr	r2, [r7, #32]
 800d67c:	e841 2300 	strex	r3, r2, [r1]
 800d680:	61bb      	str	r3, [r7, #24]
   return(result);
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e5      	bne.n	800d654 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3758      	adds	r7, #88	; 0x58
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	0800d8a3 	.word	0x0800d8a3
 800d698:	0800d9c5 	.word	0x0800d9c5
 800d69c:	0800d9fd 	.word	0x0800d9fd

0800d6a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b08f      	sub	sp, #60	; 0x3c
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	e853 3f00 	ldrex	r3, [r3]
 800d6b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6c8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6ce:	e841 2300 	strex	r3, r2, [r1]
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1e6      	bne.n	800d6a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3308      	adds	r3, #8
 800d6e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	e853 3f00 	ldrex	r3, [r3]
 800d6e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d6f0:	633b      	str	r3, [r7, #48]	; 0x30
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	3308      	adds	r3, #8
 800d6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6fa:	61ba      	str	r2, [r7, #24]
 800d6fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fe:	6979      	ldr	r1, [r7, #20]
 800d700:	69ba      	ldr	r2, [r7, #24]
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	613b      	str	r3, [r7, #16]
   return(result);
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e5      	bne.n	800d6da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2220      	movs	r2, #32
 800d712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d716:	bf00      	nop
 800d718:	373c      	adds	r7, #60	; 0x3c
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
	...

0800d724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d724:	b480      	push	{r7}
 800d726:	b095      	sub	sp, #84	; 0x54
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d734:	e853 3f00 	ldrex	r3, [r3]
 800d738:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d740:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d74a:	643b      	str	r3, [r7, #64]	; 0x40
 800d74c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d752:	e841 2300 	strex	r3, r2, [r1]
 800d756:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1e6      	bne.n	800d72c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3308      	adds	r3, #8
 800d764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	e853 3f00 	ldrex	r3, [r3]
 800d76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	4b1e      	ldr	r3, [pc, #120]	; (800d7ec <UART_EndRxTransfer+0xc8>)
 800d772:	4013      	ands	r3, r2
 800d774:	64bb      	str	r3, [r7, #72]	; 0x48
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	3308      	adds	r3, #8
 800d77c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d77e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d786:	e841 2300 	strex	r3, r2, [r1]
 800d78a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1e5      	bne.n	800d75e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d796:	2b01      	cmp	r3, #1
 800d798:	d118      	bne.n	800d7cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	e853 3f00 	ldrex	r3, [r3]
 800d7a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	f023 0310 	bic.w	r3, r3, #16
 800d7ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7b8:	61bb      	str	r3, [r7, #24]
 800d7ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7bc:	6979      	ldr	r1, [r7, #20]
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	e841 2300 	strex	r3, r2, [r1]
 800d7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e6      	bne.n	800d79a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2220      	movs	r2, #32
 800d7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d7e0:	bf00      	nop
 800d7e2:	3754      	adds	r7, #84	; 0x54
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	effffffe 	.word	0xeffffffe

0800d7f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b090      	sub	sp, #64	; 0x40
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d806:	d037      	beq.n	800d878 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80a:	2200      	movs	r2, #0
 800d80c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3308      	adds	r3, #8
 800d816:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81a:	e853 3f00 	ldrex	r3, [r3]
 800d81e:	623b      	str	r3, [r7, #32]
   return(result);
 800d820:	6a3b      	ldr	r3, [r7, #32]
 800d822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d826:	63bb      	str	r3, [r7, #56]	; 0x38
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	3308      	adds	r3, #8
 800d82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d830:	633a      	str	r2, [r7, #48]	; 0x30
 800d832:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d838:	e841 2300 	strex	r3, r2, [r1]
 800d83c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1e5      	bne.n	800d810 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	e853 3f00 	ldrex	r3, [r3]
 800d850:	60fb      	str	r3, [r7, #12]
   return(result);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d858:	637b      	str	r3, [r7, #52]	; 0x34
 800d85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	461a      	mov	r2, r3
 800d860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d862:	61fb      	str	r3, [r7, #28]
 800d864:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d866:	69b9      	ldr	r1, [r7, #24]
 800d868:	69fa      	ldr	r2, [r7, #28]
 800d86a:	e841 2300 	strex	r3, r2, [r1]
 800d86e:	617b      	str	r3, [r7, #20]
   return(result);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1e6      	bne.n	800d844 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d876:	e002      	b.n	800d87e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d87a:	f7f5 fa19 	bl	8002cb0 <HAL_UART_TxCpltCallback>
}
 800d87e:	bf00      	nop
 800d880:	3740      	adds	r7, #64	; 0x40
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b084      	sub	sp, #16
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d892:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7fe fe0f 	bl	800c4b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b09c      	sub	sp, #112	; 0x70
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8b8:	d071      	beq.n	800d99e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ca:	e853 3f00 	ldrex	r3, [r3]
 800d8ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8e8:	e841 2300 	strex	r3, r2, [r1]
 800d8ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e6      	bne.n	800d8c2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	e853 3f00 	ldrex	r3, [r3]
 800d902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d906:	f023 0301 	bic.w	r3, r3, #1
 800d90a:	667b      	str	r3, [r7, #100]	; 0x64
 800d90c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3308      	adds	r3, #8
 800d912:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d914:	647a      	str	r2, [r7, #68]	; 0x44
 800d916:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d91a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d91c:	e841 2300 	strex	r3, r2, [r1]
 800d920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e5      	bne.n	800d8f4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3308      	adds	r3, #8
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	e853 3f00 	ldrex	r3, [r3]
 800d936:	623b      	str	r3, [r7, #32]
   return(result);
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d93e:	663b      	str	r3, [r7, #96]	; 0x60
 800d940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3308      	adds	r3, #8
 800d946:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d948:	633a      	str	r2, [r7, #48]	; 0x30
 800d94a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d94e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d950:	e841 2300 	strex	r3, r2, [r1]
 800d954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1e5      	bne.n	800d928 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d95c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d95e:	2220      	movs	r2, #32
 800d960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d118      	bne.n	800d99e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	e853 3f00 	ldrex	r3, [r3]
 800d978:	60fb      	str	r3, [r7, #12]
   return(result);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f023 0310 	bic.w	r3, r3, #16
 800d980:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	461a      	mov	r2, r3
 800d988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d98a:	61fb      	str	r3, [r7, #28]
 800d98c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98e:	69b9      	ldr	r1, [r7, #24]
 800d990:	69fa      	ldr	r2, [r7, #28]
 800d992:	e841 2300 	strex	r3, r2, [r1]
 800d996:	617b      	str	r3, [r7, #20]
   return(result);
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1e6      	bne.n	800d96c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d107      	bne.n	800d9b6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9b0:	f7fe fda0 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9b4:	e002      	b.n	800d9bc <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d9b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9b8:	f7f5 f98c 	bl	8002cd4 <HAL_UART_RxCpltCallback>
}
 800d9bc:	bf00      	nop
 800d9be:	3770      	adds	r7, #112	; 0x70
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d109      	bne.n	800d9ee <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9e0:	085b      	lsrs	r3, r3, #1
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7fe fd84 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9ec:	e002      	b.n	800d9f4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f7fe fd6c 	bl	800c4cc <HAL_UART_RxHalfCpltCallback>
}
 800d9f4:	bf00      	nop
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da24:	2b80      	cmp	r3, #128	; 0x80
 800da26:	d109      	bne.n	800da3c <UART_DMAError+0x40>
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2b21      	cmp	r3, #33	; 0x21
 800da2c:	d106      	bne.n	800da3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2200      	movs	r2, #0
 800da32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da36:	6978      	ldr	r0, [r7, #20]
 800da38:	f7ff fe32 	bl	800d6a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da46:	2b40      	cmp	r3, #64	; 0x40
 800da48:	d109      	bne.n	800da5e <UART_DMAError+0x62>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b22      	cmp	r3, #34	; 0x22
 800da4e:	d106      	bne.n	800da5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2200      	movs	r2, #0
 800da54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800da58:	6978      	ldr	r0, [r7, #20]
 800da5a:	f7ff fe63 	bl	800d724 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da64:	f043 0210 	orr.w	r2, r3, #16
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da6e:	6978      	ldr	r0, [r7, #20]
 800da70:	f7fe fd36 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da74:	bf00      	nop
 800da76:	3718      	adds	r7, #24
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2200      	movs	r2, #0
 800da96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f7fe fd20 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daa0:	bf00      	nop
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	e853 3f00 	ldrex	r3, [r3]
 800dabc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dac4:	61fb      	str	r3, [r7, #28]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	461a      	mov	r2, r3
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	61bb      	str	r3, [r7, #24]
 800dad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad2:	6979      	ldr	r1, [r7, #20]
 800dad4:	69ba      	ldr	r2, [r7, #24]
 800dad6:	e841 2300 	strex	r3, r2, [r1]
 800dada:	613b      	str	r3, [r7, #16]
   return(result);
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1e6      	bne.n	800dab0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7f5 f8dd 	bl	8002cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daf6:	bf00      	nop
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dafe:	b480      	push	{r7}
 800db00:	b083      	sub	sp, #12
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db06:	bf00      	nop
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db12:	b480      	push	{r7}
 800db14:	b083      	sub	sp, #12
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db26:	b480      	push	{r7}
 800db28:	b083      	sub	sp, #12
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db2e:	bf00      	nop
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b085      	sub	sp, #20
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d101      	bne.n	800db50 <HAL_UARTEx_DisableFifoMode+0x16>
 800db4c:	2302      	movs	r3, #2
 800db4e:	e027      	b.n	800dba0 <HAL_UARTEx_DisableFifoMode+0x66>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2224      	movs	r2, #36	; 0x24
 800db5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f022 0201 	bic.w	r2, r2, #1
 800db76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2220      	movs	r2, #32
 800db92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d101      	bne.n	800dbc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	e02d      	b.n	800dc20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2224      	movs	r2, #36	; 0x24
 800dbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f022 0201 	bic.w	r2, r2, #1
 800dbea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	430a      	orrs	r2, r1
 800dbfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f84f 	bl	800dca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2220      	movs	r2, #32
 800dc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc1e:	2300      	movs	r3, #0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d101      	bne.n	800dc40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc3c:	2302      	movs	r3, #2
 800dc3e:	e02d      	b.n	800dc9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2224      	movs	r2, #36	; 0x24
 800dc4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f022 0201 	bic.w	r2, r2, #1
 800dc66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f811 	bl	800dca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d108      	bne.n	800dcc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcc4:	e031      	b.n	800dd2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcc6:	2310      	movs	r3, #16
 800dcc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcca:	2310      	movs	r3, #16
 800dccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	0e5b      	lsrs	r3, r3, #25
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f003 0307 	and.w	r3, r3, #7
 800dcdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	0f5b      	lsrs	r3, r3, #29
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 0307 	and.w	r3, r3, #7
 800dcec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcee:	7bbb      	ldrb	r3, [r7, #14]
 800dcf0:	7b3a      	ldrb	r2, [r7, #12]
 800dcf2:	4911      	ldr	r1, [pc, #68]	; (800dd38 <UARTEx_SetNbDataToProcess+0x94>)
 800dcf4:	5c8a      	ldrb	r2, [r1, r2]
 800dcf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dcfa:	7b3a      	ldrb	r2, [r7, #12]
 800dcfc:	490f      	ldr	r1, [pc, #60]	; (800dd3c <UARTEx_SetNbDataToProcess+0x98>)
 800dcfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd00:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd0c:	7bfb      	ldrb	r3, [r7, #15]
 800dd0e:	7b7a      	ldrb	r2, [r7, #13]
 800dd10:	4909      	ldr	r1, [pc, #36]	; (800dd38 <UARTEx_SetNbDataToProcess+0x94>)
 800dd12:	5c8a      	ldrb	r2, [r1, r2]
 800dd14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd18:	7b7a      	ldrb	r2, [r7, #13]
 800dd1a:	4908      	ldr	r1, [pc, #32]	; (800dd3c <UARTEx_SetNbDataToProcess+0x98>)
 800dd1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd2a:	bf00      	nop
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	0800e41c 	.word	0x0800e41c
 800dd3c:	0800e424 	.word	0x0800e424

0800dd40 <__cxa_pure_virtual>:
 800dd40:	b508      	push	{r3, lr}
 800dd42:	f000 f80d 	bl	800dd60 <_ZSt9terminatev>

0800dd46 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dd46:	b508      	push	{r3, lr}
 800dd48:	4780      	blx	r0
 800dd4a:	f000 f80e 	bl	800dd6a <abort>
	...

0800dd50 <_ZSt13get_terminatev>:
 800dd50:	4b02      	ldr	r3, [pc, #8]	; (800dd5c <_ZSt13get_terminatev+0xc>)
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	f3bf 8f5b 	dmb	ish
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	24000010 	.word	0x24000010

0800dd60 <_ZSt9terminatev>:
 800dd60:	b508      	push	{r3, lr}
 800dd62:	f7ff fff5 	bl	800dd50 <_ZSt13get_terminatev>
 800dd66:	f7ff ffee 	bl	800dd46 <_ZN10__cxxabiv111__terminateEPFvvE>

0800dd6a <abort>:
 800dd6a:	b508      	push	{r3, lr}
 800dd6c:	2006      	movs	r0, #6
 800dd6e:	f000 f873 	bl	800de58 <raise>
 800dd72:	2001      	movs	r0, #1
 800dd74:	f7f6 fedc 	bl	8004b30 <_exit>

0800dd78 <__errno>:
 800dd78:	4b01      	ldr	r3, [pc, #4]	; (800dd80 <__errno+0x8>)
 800dd7a:	6818      	ldr	r0, [r3, #0]
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	24000014 	.word	0x24000014

0800dd84 <__libc_init_array>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	4d0d      	ldr	r5, [pc, #52]	; (800ddbc <__libc_init_array+0x38>)
 800dd88:	4c0d      	ldr	r4, [pc, #52]	; (800ddc0 <__libc_init_array+0x3c>)
 800dd8a:	1b64      	subs	r4, r4, r5
 800dd8c:	10a4      	asrs	r4, r4, #2
 800dd8e:	2600      	movs	r6, #0
 800dd90:	42a6      	cmp	r6, r4
 800dd92:	d109      	bne.n	800dda8 <__libc_init_array+0x24>
 800dd94:	4d0b      	ldr	r5, [pc, #44]	; (800ddc4 <__libc_init_array+0x40>)
 800dd96:	4c0c      	ldr	r4, [pc, #48]	; (800ddc8 <__libc_init_array+0x44>)
 800dd98:	f000 f9b0 	bl	800e0fc <_init>
 800dd9c:	1b64      	subs	r4, r4, r5
 800dd9e:	10a4      	asrs	r4, r4, #2
 800dda0:	2600      	movs	r6, #0
 800dda2:	42a6      	cmp	r6, r4
 800dda4:	d105      	bne.n	800ddb2 <__libc_init_array+0x2e>
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddac:	4798      	blx	r3
 800ddae:	3601      	adds	r6, #1
 800ddb0:	e7ee      	b.n	800dd90 <__libc_init_array+0xc>
 800ddb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddb6:	4798      	blx	r3
 800ddb8:	3601      	adds	r6, #1
 800ddba:	e7f2      	b.n	800dda2 <__libc_init_array+0x1e>
 800ddbc:	0800e434 	.word	0x0800e434
 800ddc0:	0800e434 	.word	0x0800e434
 800ddc4:	0800e434 	.word	0x0800e434
 800ddc8:	0800e440 	.word	0x0800e440

0800ddcc <memcpy>:
 800ddcc:	440a      	add	r2, r1
 800ddce:	4291      	cmp	r1, r2
 800ddd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ddd4:	d100      	bne.n	800ddd8 <memcpy+0xc>
 800ddd6:	4770      	bx	lr
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dde2:	4291      	cmp	r1, r2
 800dde4:	d1f9      	bne.n	800ddda <memcpy+0xe>
 800dde6:	bd10      	pop	{r4, pc}

0800dde8 <memset>:
 800dde8:	4402      	add	r2, r0
 800ddea:	4603      	mov	r3, r0
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d100      	bne.n	800ddf2 <memset+0xa>
 800ddf0:	4770      	bx	lr
 800ddf2:	f803 1b01 	strb.w	r1, [r3], #1
 800ddf6:	e7f9      	b.n	800ddec <memset+0x4>

0800ddf8 <realloc>:
 800ddf8:	4b02      	ldr	r3, [pc, #8]	; (800de04 <realloc+0xc>)
 800ddfa:	460a      	mov	r2, r1
 800ddfc:	4601      	mov	r1, r0
 800ddfe:	6818      	ldr	r0, [r3, #0]
 800de00:	f000 b8da 	b.w	800dfb8 <_realloc_r>
 800de04:	24000014 	.word	0x24000014

0800de08 <_raise_r>:
 800de08:	291f      	cmp	r1, #31
 800de0a:	b538      	push	{r3, r4, r5, lr}
 800de0c:	4604      	mov	r4, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	d904      	bls.n	800de1c <_raise_r+0x14>
 800de12:	2316      	movs	r3, #22
 800de14:	6003      	str	r3, [r0, #0]
 800de16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de1a:	bd38      	pop	{r3, r4, r5, pc}
 800de1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de1e:	b112      	cbz	r2, 800de26 <_raise_r+0x1e>
 800de20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de24:	b94b      	cbnz	r3, 800de3a <_raise_r+0x32>
 800de26:	4620      	mov	r0, r4
 800de28:	f000 f830 	bl	800de8c <_getpid_r>
 800de2c:	462a      	mov	r2, r5
 800de2e:	4601      	mov	r1, r0
 800de30:	4620      	mov	r0, r4
 800de32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de36:	f000 b817 	b.w	800de68 <_kill_r>
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d00a      	beq.n	800de54 <_raise_r+0x4c>
 800de3e:	1c59      	adds	r1, r3, #1
 800de40:	d103      	bne.n	800de4a <_raise_r+0x42>
 800de42:	2316      	movs	r3, #22
 800de44:	6003      	str	r3, [r0, #0]
 800de46:	2001      	movs	r0, #1
 800de48:	e7e7      	b.n	800de1a <_raise_r+0x12>
 800de4a:	2400      	movs	r4, #0
 800de4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de50:	4628      	mov	r0, r5
 800de52:	4798      	blx	r3
 800de54:	2000      	movs	r0, #0
 800de56:	e7e0      	b.n	800de1a <_raise_r+0x12>

0800de58 <raise>:
 800de58:	4b02      	ldr	r3, [pc, #8]	; (800de64 <raise+0xc>)
 800de5a:	4601      	mov	r1, r0
 800de5c:	6818      	ldr	r0, [r3, #0]
 800de5e:	f7ff bfd3 	b.w	800de08 <_raise_r>
 800de62:	bf00      	nop
 800de64:	24000014 	.word	0x24000014

0800de68 <_kill_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	4d07      	ldr	r5, [pc, #28]	; (800de88 <_kill_r+0x20>)
 800de6c:	2300      	movs	r3, #0
 800de6e:	4604      	mov	r4, r0
 800de70:	4608      	mov	r0, r1
 800de72:	4611      	mov	r1, r2
 800de74:	602b      	str	r3, [r5, #0]
 800de76:	f7f6 fe4b 	bl	8004b10 <_kill>
 800de7a:	1c43      	adds	r3, r0, #1
 800de7c:	d102      	bne.n	800de84 <_kill_r+0x1c>
 800de7e:	682b      	ldr	r3, [r5, #0]
 800de80:	b103      	cbz	r3, 800de84 <_kill_r+0x1c>
 800de82:	6023      	str	r3, [r4, #0]
 800de84:	bd38      	pop	{r3, r4, r5, pc}
 800de86:	bf00      	nop
 800de88:	24010b1c 	.word	0x24010b1c

0800de8c <_getpid_r>:
 800de8c:	f7f6 be38 	b.w	8004b00 <_getpid>

0800de90 <sbrk_aligned>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	4e0e      	ldr	r6, [pc, #56]	; (800decc <sbrk_aligned+0x3c>)
 800de94:	460c      	mov	r4, r1
 800de96:	6831      	ldr	r1, [r6, #0]
 800de98:	4605      	mov	r5, r0
 800de9a:	b911      	cbnz	r1, 800dea2 <sbrk_aligned+0x12>
 800de9c:	f000 f8bc 	bl	800e018 <_sbrk_r>
 800dea0:	6030      	str	r0, [r6, #0]
 800dea2:	4621      	mov	r1, r4
 800dea4:	4628      	mov	r0, r5
 800dea6:	f000 f8b7 	bl	800e018 <_sbrk_r>
 800deaa:	1c43      	adds	r3, r0, #1
 800deac:	d00a      	beq.n	800dec4 <sbrk_aligned+0x34>
 800deae:	1cc4      	adds	r4, r0, #3
 800deb0:	f024 0403 	bic.w	r4, r4, #3
 800deb4:	42a0      	cmp	r0, r4
 800deb6:	d007      	beq.n	800dec8 <sbrk_aligned+0x38>
 800deb8:	1a21      	subs	r1, r4, r0
 800deba:	4628      	mov	r0, r5
 800debc:	f000 f8ac 	bl	800e018 <_sbrk_r>
 800dec0:	3001      	adds	r0, #1
 800dec2:	d101      	bne.n	800dec8 <sbrk_aligned+0x38>
 800dec4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dec8:	4620      	mov	r0, r4
 800deca:	bd70      	pop	{r4, r5, r6, pc}
 800decc:	24010b18 	.word	0x24010b18

0800ded0 <_malloc_r>:
 800ded0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded4:	1ccd      	adds	r5, r1, #3
 800ded6:	f025 0503 	bic.w	r5, r5, #3
 800deda:	3508      	adds	r5, #8
 800dedc:	2d0c      	cmp	r5, #12
 800dede:	bf38      	it	cc
 800dee0:	250c      	movcc	r5, #12
 800dee2:	2d00      	cmp	r5, #0
 800dee4:	4607      	mov	r7, r0
 800dee6:	db01      	blt.n	800deec <_malloc_r+0x1c>
 800dee8:	42a9      	cmp	r1, r5
 800deea:	d905      	bls.n	800def8 <_malloc_r+0x28>
 800deec:	230c      	movs	r3, #12
 800deee:	603b      	str	r3, [r7, #0]
 800def0:	2600      	movs	r6, #0
 800def2:	4630      	mov	r0, r6
 800def4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def8:	4e2e      	ldr	r6, [pc, #184]	; (800dfb4 <_malloc_r+0xe4>)
 800defa:	f000 f89d 	bl	800e038 <__malloc_lock>
 800defe:	6833      	ldr	r3, [r6, #0]
 800df00:	461c      	mov	r4, r3
 800df02:	bb34      	cbnz	r4, 800df52 <_malloc_r+0x82>
 800df04:	4629      	mov	r1, r5
 800df06:	4638      	mov	r0, r7
 800df08:	f7ff ffc2 	bl	800de90 <sbrk_aligned>
 800df0c:	1c43      	adds	r3, r0, #1
 800df0e:	4604      	mov	r4, r0
 800df10:	d14d      	bne.n	800dfae <_malloc_r+0xde>
 800df12:	6834      	ldr	r4, [r6, #0]
 800df14:	4626      	mov	r6, r4
 800df16:	2e00      	cmp	r6, #0
 800df18:	d140      	bne.n	800df9c <_malloc_r+0xcc>
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	4631      	mov	r1, r6
 800df1e:	4638      	mov	r0, r7
 800df20:	eb04 0803 	add.w	r8, r4, r3
 800df24:	f000 f878 	bl	800e018 <_sbrk_r>
 800df28:	4580      	cmp	r8, r0
 800df2a:	d13a      	bne.n	800dfa2 <_malloc_r+0xd2>
 800df2c:	6821      	ldr	r1, [r4, #0]
 800df2e:	3503      	adds	r5, #3
 800df30:	1a6d      	subs	r5, r5, r1
 800df32:	f025 0503 	bic.w	r5, r5, #3
 800df36:	3508      	adds	r5, #8
 800df38:	2d0c      	cmp	r5, #12
 800df3a:	bf38      	it	cc
 800df3c:	250c      	movcc	r5, #12
 800df3e:	4629      	mov	r1, r5
 800df40:	4638      	mov	r0, r7
 800df42:	f7ff ffa5 	bl	800de90 <sbrk_aligned>
 800df46:	3001      	adds	r0, #1
 800df48:	d02b      	beq.n	800dfa2 <_malloc_r+0xd2>
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	442b      	add	r3, r5
 800df4e:	6023      	str	r3, [r4, #0]
 800df50:	e00e      	b.n	800df70 <_malloc_r+0xa0>
 800df52:	6822      	ldr	r2, [r4, #0]
 800df54:	1b52      	subs	r2, r2, r5
 800df56:	d41e      	bmi.n	800df96 <_malloc_r+0xc6>
 800df58:	2a0b      	cmp	r2, #11
 800df5a:	d916      	bls.n	800df8a <_malloc_r+0xba>
 800df5c:	1961      	adds	r1, r4, r5
 800df5e:	42a3      	cmp	r3, r4
 800df60:	6025      	str	r5, [r4, #0]
 800df62:	bf18      	it	ne
 800df64:	6059      	strne	r1, [r3, #4]
 800df66:	6863      	ldr	r3, [r4, #4]
 800df68:	bf08      	it	eq
 800df6a:	6031      	streq	r1, [r6, #0]
 800df6c:	5162      	str	r2, [r4, r5]
 800df6e:	604b      	str	r3, [r1, #4]
 800df70:	4638      	mov	r0, r7
 800df72:	f104 060b 	add.w	r6, r4, #11
 800df76:	f000 f865 	bl	800e044 <__malloc_unlock>
 800df7a:	f026 0607 	bic.w	r6, r6, #7
 800df7e:	1d23      	adds	r3, r4, #4
 800df80:	1af2      	subs	r2, r6, r3
 800df82:	d0b6      	beq.n	800def2 <_malloc_r+0x22>
 800df84:	1b9b      	subs	r3, r3, r6
 800df86:	50a3      	str	r3, [r4, r2]
 800df88:	e7b3      	b.n	800def2 <_malloc_r+0x22>
 800df8a:	6862      	ldr	r2, [r4, #4]
 800df8c:	42a3      	cmp	r3, r4
 800df8e:	bf0c      	ite	eq
 800df90:	6032      	streq	r2, [r6, #0]
 800df92:	605a      	strne	r2, [r3, #4]
 800df94:	e7ec      	b.n	800df70 <_malloc_r+0xa0>
 800df96:	4623      	mov	r3, r4
 800df98:	6864      	ldr	r4, [r4, #4]
 800df9a:	e7b2      	b.n	800df02 <_malloc_r+0x32>
 800df9c:	4634      	mov	r4, r6
 800df9e:	6876      	ldr	r6, [r6, #4]
 800dfa0:	e7b9      	b.n	800df16 <_malloc_r+0x46>
 800dfa2:	230c      	movs	r3, #12
 800dfa4:	603b      	str	r3, [r7, #0]
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	f000 f84c 	bl	800e044 <__malloc_unlock>
 800dfac:	e7a1      	b.n	800def2 <_malloc_r+0x22>
 800dfae:	6025      	str	r5, [r4, #0]
 800dfb0:	e7de      	b.n	800df70 <_malloc_r+0xa0>
 800dfb2:	bf00      	nop
 800dfb4:	24010b14 	.word	0x24010b14

0800dfb8 <_realloc_r>:
 800dfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	4614      	mov	r4, r2
 800dfc0:	460e      	mov	r6, r1
 800dfc2:	b921      	cbnz	r1, 800dfce <_realloc_r+0x16>
 800dfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	4611      	mov	r1, r2
 800dfca:	f7ff bf81 	b.w	800ded0 <_malloc_r>
 800dfce:	b92a      	cbnz	r2, 800dfdc <_realloc_r+0x24>
 800dfd0:	f000 f83e 	bl	800e050 <_free_r>
 800dfd4:	4625      	mov	r5, r4
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfdc:	f000 f884 	bl	800e0e8 <_malloc_usable_size_r>
 800dfe0:	4284      	cmp	r4, r0
 800dfe2:	4607      	mov	r7, r0
 800dfe4:	d802      	bhi.n	800dfec <_realloc_r+0x34>
 800dfe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfea:	d812      	bhi.n	800e012 <_realloc_r+0x5a>
 800dfec:	4621      	mov	r1, r4
 800dfee:	4640      	mov	r0, r8
 800dff0:	f7ff ff6e 	bl	800ded0 <_malloc_r>
 800dff4:	4605      	mov	r5, r0
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d0ed      	beq.n	800dfd6 <_realloc_r+0x1e>
 800dffa:	42bc      	cmp	r4, r7
 800dffc:	4622      	mov	r2, r4
 800dffe:	4631      	mov	r1, r6
 800e000:	bf28      	it	cs
 800e002:	463a      	movcs	r2, r7
 800e004:	f7ff fee2 	bl	800ddcc <memcpy>
 800e008:	4631      	mov	r1, r6
 800e00a:	4640      	mov	r0, r8
 800e00c:	f000 f820 	bl	800e050 <_free_r>
 800e010:	e7e1      	b.n	800dfd6 <_realloc_r+0x1e>
 800e012:	4635      	mov	r5, r6
 800e014:	e7df      	b.n	800dfd6 <_realloc_r+0x1e>
	...

0800e018 <_sbrk_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d06      	ldr	r5, [pc, #24]	; (800e034 <_sbrk_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	4608      	mov	r0, r1
 800e022:	602b      	str	r3, [r5, #0]
 800e024:	f7f6 fd8e 	bl	8004b44 <_sbrk>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_sbrk_r+0x1a>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_sbrk_r+0x1a>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	24010b1c 	.word	0x24010b1c

0800e038 <__malloc_lock>:
 800e038:	4801      	ldr	r0, [pc, #4]	; (800e040 <__malloc_lock+0x8>)
 800e03a:	f000 b85d 	b.w	800e0f8 <__retarget_lock_acquire_recursive>
 800e03e:	bf00      	nop
 800e040:	24010b20 	.word	0x24010b20

0800e044 <__malloc_unlock>:
 800e044:	4801      	ldr	r0, [pc, #4]	; (800e04c <__malloc_unlock+0x8>)
 800e046:	f000 b858 	b.w	800e0fa <__retarget_lock_release_recursive>
 800e04a:	bf00      	nop
 800e04c:	24010b20 	.word	0x24010b20

0800e050 <_free_r>:
 800e050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e052:	2900      	cmp	r1, #0
 800e054:	d044      	beq.n	800e0e0 <_free_r+0x90>
 800e056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05a:	9001      	str	r0, [sp, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f1a1 0404 	sub.w	r4, r1, #4
 800e062:	bfb8      	it	lt
 800e064:	18e4      	addlt	r4, r4, r3
 800e066:	f7ff ffe7 	bl	800e038 <__malloc_lock>
 800e06a:	4a1e      	ldr	r2, [pc, #120]	; (800e0e4 <_free_r+0x94>)
 800e06c:	9801      	ldr	r0, [sp, #4]
 800e06e:	6813      	ldr	r3, [r2, #0]
 800e070:	b933      	cbnz	r3, 800e080 <_free_r+0x30>
 800e072:	6063      	str	r3, [r4, #4]
 800e074:	6014      	str	r4, [r2, #0]
 800e076:	b003      	add	sp, #12
 800e078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e07c:	f7ff bfe2 	b.w	800e044 <__malloc_unlock>
 800e080:	42a3      	cmp	r3, r4
 800e082:	d908      	bls.n	800e096 <_free_r+0x46>
 800e084:	6825      	ldr	r5, [r4, #0]
 800e086:	1961      	adds	r1, r4, r5
 800e088:	428b      	cmp	r3, r1
 800e08a:	bf01      	itttt	eq
 800e08c:	6819      	ldreq	r1, [r3, #0]
 800e08e:	685b      	ldreq	r3, [r3, #4]
 800e090:	1949      	addeq	r1, r1, r5
 800e092:	6021      	streq	r1, [r4, #0]
 800e094:	e7ed      	b.n	800e072 <_free_r+0x22>
 800e096:	461a      	mov	r2, r3
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	b10b      	cbz	r3, 800e0a0 <_free_r+0x50>
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	d9fa      	bls.n	800e096 <_free_r+0x46>
 800e0a0:	6811      	ldr	r1, [r2, #0]
 800e0a2:	1855      	adds	r5, r2, r1
 800e0a4:	42a5      	cmp	r5, r4
 800e0a6:	d10b      	bne.n	800e0c0 <_free_r+0x70>
 800e0a8:	6824      	ldr	r4, [r4, #0]
 800e0aa:	4421      	add	r1, r4
 800e0ac:	1854      	adds	r4, r2, r1
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	d1e0      	bne.n	800e076 <_free_r+0x26>
 800e0b4:	681c      	ldr	r4, [r3, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	6053      	str	r3, [r2, #4]
 800e0ba:	4421      	add	r1, r4
 800e0bc:	6011      	str	r1, [r2, #0]
 800e0be:	e7da      	b.n	800e076 <_free_r+0x26>
 800e0c0:	d902      	bls.n	800e0c8 <_free_r+0x78>
 800e0c2:	230c      	movs	r3, #12
 800e0c4:	6003      	str	r3, [r0, #0]
 800e0c6:	e7d6      	b.n	800e076 <_free_r+0x26>
 800e0c8:	6825      	ldr	r5, [r4, #0]
 800e0ca:	1961      	adds	r1, r4, r5
 800e0cc:	428b      	cmp	r3, r1
 800e0ce:	bf04      	itt	eq
 800e0d0:	6819      	ldreq	r1, [r3, #0]
 800e0d2:	685b      	ldreq	r3, [r3, #4]
 800e0d4:	6063      	str	r3, [r4, #4]
 800e0d6:	bf04      	itt	eq
 800e0d8:	1949      	addeq	r1, r1, r5
 800e0da:	6021      	streq	r1, [r4, #0]
 800e0dc:	6054      	str	r4, [r2, #4]
 800e0de:	e7ca      	b.n	800e076 <_free_r+0x26>
 800e0e0:	b003      	add	sp, #12
 800e0e2:	bd30      	pop	{r4, r5, pc}
 800e0e4:	24010b14 	.word	0x24010b14

0800e0e8 <_malloc_usable_size_r>:
 800e0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ec:	1f18      	subs	r0, r3, #4
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	bfbc      	itt	lt
 800e0f2:	580b      	ldrlt	r3, [r1, r0]
 800e0f4:	18c0      	addlt	r0, r0, r3
 800e0f6:	4770      	bx	lr

0800e0f8 <__retarget_lock_acquire_recursive>:
 800e0f8:	4770      	bx	lr

0800e0fa <__retarget_lock_release_recursive>:
 800e0fa:	4770      	bx	lr

0800e0fc <_init>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	bf00      	nop
 800e100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e102:	bc08      	pop	{r3}
 800e104:	469e      	mov	lr, r3
 800e106:	4770      	bx	lr

0800e108 <_fini>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr
