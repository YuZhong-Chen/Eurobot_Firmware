
Eurobot_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de74  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800e148  0800e148  0001e148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e464  0800e464  0001e464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800e46c  0800e46c  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e478  0800e478  0001e478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e47c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000106c  24000078  0800e4f4  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240010e4  0800e4f4  000210e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029fdf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000436e  00000000  00000000  0004a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001570  00000000  00000000  0004e3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  0004f968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c70  00000000  00000000  00050da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d7f8  00000000  00000000  00086a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156720  00000000  00000000  000a4210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fa930  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f30  00000000  00000000  001fa980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e12c 	.word	0x0800e12c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800e12c 	.word	0x0800e12c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_ZN8DC_Motor4InitEv>:
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;

namespace DC_Motor {

void Init() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	// Init interrupt for reading encoder's CNT
	HAL_TIM_Base_Start_IT(&htim13);
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <_ZN8DC_Motor4InitEv+0x50>)
 8000682:	f009 ffd5 	bl	800a630 <HAL_TIM_Base_Start_IT>

	// Init Encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Motor[0]
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <_ZN8DC_Motor4InitEv+0x54>)
 800068a:	f00a fa71 	bl	800ab70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Motor[1]
 800068e:	213c      	movs	r1, #60	; 0x3c
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <_ZN8DC_Motor4InitEv+0x58>)
 8000692:	f00a fa6d 	bl	800ab70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Motor[2]
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <_ZN8DC_Motor4InitEv+0x5c>)
 800069a:	f00a fa69 	bl	800ab70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Motor[3]
 800069e:	213c      	movs	r1, #60	; 0x3c
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <_ZN8DC_Motor4InitEv+0x60>)
 80006a2:	f00a fa65 	bl	800ab70 <HAL_TIM_Encoder_Start>

	// Init Motor PWM
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Motor[0]
 80006a6:	2104      	movs	r1, #4
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006aa:	f00a f89f 	bl	800a7ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // Motor[1]
 80006ae:	2100      	movs	r1, #0
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZN8DC_Motor4InitEv+0x64>)
 80006b2:	f00a f89b 	bl	800a7ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // Motor[2]
 80006b6:	2100      	movs	r1, #0
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006ba:	f00a f897 	bl	800a7ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Motor[3]
 80006be:	2104      	movs	r1, #4
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <_ZN8DC_Motor4InitEv+0x68>)
 80006c2:	f00a f893 	bl	800a7ec <HAL_TIM_PWM_Start>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000eb4 	.word	0x24000eb4
 80006d0:	24000ca0 	.word	0x24000ca0
 80006d4:	24000d84 	.word	0x24000d84
 80006d8:	24000cec 	.word	0x24000cec
 80006dc:	24000d38 	.word	0x24000d38
 80006e0:	24000e68 	.word	0x24000e68
 80006e4:	24000f00 	.word	0x24000f00

080006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>:

void Motor::Init(short num, TIM_HandleTypeDef *TIM, double P, double I, double D) {
 80006e8:	b480      	push	{r7}
 80006ea:	b08b      	sub	sp, #44	; 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6278      	str	r0, [r7, #36]	; 0x24
 80006f0:	460b      	mov	r3, r1
 80006f2:	61fa      	str	r2, [r7, #28]
 80006f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80006f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80006fc:	ed87 2b00 	vstr	d2, [r7]
 8000700:	847b      	strh	r3, [r7, #34]	; 0x22
	this->num = num;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000706:	811a      	strh	r2, [r3, #8]
	this->TIM = TIM;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	60da      	str	r2, [r3, #12]
	this->P = P;
 800070e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000714:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->I = I;
 8000718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800071a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800071e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	this->D = D;
 8000722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000728:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800072c:	bf00      	nop
 800072e:	372c      	adds	r7, #44	; 0x2c
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>:

void Motor::UpdatePID() {
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	double p = 0, d = 0;
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Record Prev error
	this->error_before = this->error;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	// Count current error
	this->error = this->Vgoal - this->Vnow;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	ed93 6b08 	vldr	d6, [r3, #32]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	ed93 7b06 	vldr	d7, [r3, #24]
 8000770:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58

	// Count P
	p = this->P * this->error;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000786:	ee26 7b07 	vmul.f64	d7, d6, d7
 800078a:	ed87 7b04 	vstr	d7, [r7, #16]

	// Count I
	this->i += this->I * this->error * COUNT_TIME;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007a4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80008e8 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1b0>
 80007a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	// Limit I in range
	if (this->i > this->I_lim)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ca:	dd06      	ble.n	80007da <_ZN8DC_Motor5Motor9UpdatePIDEv+0xa2>
		this->i = this->I_lim;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80007d8:	e018      	b.n	800080c <_ZN8DC_Motor5Motor9UpdatePIDEv+0xd4>
	else if (this->i < 0 - this->I_lim)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007e6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 80008f0 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1b8>
 80007ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f6:	d509      	bpl.n	800080c <_ZN8DC_Motor5Motor9UpdatePIDEv+0xd4>
		this->i = 0 - this->I_lim;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80007fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80008f0 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1b8>
 8000802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

	// Count D
	d = this->D * (this->error - this->error_before) / COUNT_TIME;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800081e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000822:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000826:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80008e8 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1b0>
 800082a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800082e:	ed87 7b02 	vstr	d7, [r7, #8]

	// Output = P + I + D
	this->u = (double) p / 100 + this->i / 100 + d / 10000;
 8000832:	ed97 7b04 	vldr	d7, [r7, #16]
 8000836:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80008f8 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1c0>
 800083a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8000844:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80008f8 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1c0>
 8000848:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800084c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000850:	ed97 5b02 	vldr	d5, [r7, #8]
 8000854:	ed9f 4b2a 	vldr	d4, [pc, #168]	; 8000900 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1c8>
 8000858:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800085c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	ed83 7b00 	vstr	d7, [r3]

	// Filter ( Optional )
	this->u = this->prev_u * 0.98 + this->u * 0.02;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800086c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000908 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1d0>
 8000870:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	ed93 7b00 	vldr	d7, [r3]
 800087a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000910 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1d8>
 800087e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000882:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	ed83 7b00 	vstr	d7, [r3]

	// Limit output in range
	if (this->u < -0.6) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	ed93 7b00 	vldr	d7, [r3]
 8000892:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000918 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1e0>
 8000896:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d506      	bpl.n	80008ae <_ZN8DC_Motor5Motor9UpdatePIDEv+0x176>
		this->u = -0.6;
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	a31d      	add	r3, pc, #116	; (adr r3, 8000918 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1e0>)
 80008a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a8:	e9c1 2300 	strd	r2, r3, [r1]
 80008ac:	e00f      	b.n	80008ce <_ZN8DC_Motor5Motor9UpdatePIDEv+0x196>
	}
	else if (this->u > 0.6) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	ed93 7b00 	vldr	d7, [r3]
 80008b4:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000920 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1e8>
 80008b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c0:	dd05      	ble.n	80008ce <_ZN8DC_Motor5Motor9UpdatePIDEv+0x196>
		this->u = 0.6;
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	a316      	add	r3, pc, #88	; (adr r3, 8000920 <_ZN8DC_Motor5Motor9UpdatePIDEv+0x1e8>)
 80008c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ca:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// Record Prev output
	this->prev_u = this->u;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	return;
 80008da:	bf00      	nop
}
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008ec:	3f50624d 	.word	0x3f50624d
	...
 80008fc:	40590000 	.word	0x40590000
 8000900:	00000000 	.word	0x00000000
 8000904:	40c38800 	.word	0x40c38800
 8000908:	f5c28f5c 	.word	0xf5c28f5c
 800090c:	3fef5c28 	.word	0x3fef5c28
 8000910:	47ae147b 	.word	0x47ae147b
 8000914:	3f947ae1 	.word	0x3f947ae1
 8000918:	33333333 	.word	0x33333333
 800091c:	bfe33333 	.word	0xbfe33333
 8000920:	33333333 	.word	0x33333333
 8000924:	3fe33333 	.word	0x3fe33333

08000928 <_ZN8DC_Motor5Motor10UpdateVnowEv>:

void Motor::UpdateVnow() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	// First, get CNT for this loop
	CNT = __HAL_TIM_GET_COUNTER(TIM);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000938:	b21a      	sxth	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	829a      	strh	r2, [r3, #20]

	Record_CNT();
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f831 	bl	80009a6 <_ZN8DC_Motor5Motor10Record_CNTEv>
	Vnow = CNT * CONST_FOR_MOTOR[num];  // Unit : m / s
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <_ZN8DC_Motor5Motor10UpdateVnowEv+0x58>)
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	4413      	add	r3, r2
 800095e:	ed93 7b00 	vldr	d7, [r3]
 8000962:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	ed83 7b06 	vstr	d7, [r3, #24]

	// Finally, reset the counter CNT
	__HAL_TIM_SET_COUNTER(TIM, 0);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800e2e8 	.word	0x0800e2e8

08000984 <_ZN8DC_Motor5Motor8SetVgoalEd>:

void Motor::SetVgoal(double Vgoal) {
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	ed87 0b00 	vstr	d0, [r7]
	this->Vgoal = Vgoal;
 8000990:	68f9      	ldr	r1, [r7, #12]
 8000992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000996:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_ZN8DC_Motor5Motor10Record_CNTEv>:

void Motor::Record_CNT() {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	continue_CNT += CNT;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80009b8:	441a      	add	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	611a      	str	r2, [r3, #16]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_ZN8DC_Motor5Motor9Reset_CNTEv>:

void Motor::Reset_CNT() {
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	continue_CNT = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_ZN8DC_Motor5Motor7MoveDisEv>:

double Motor::MoveDis() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	double dis = continue_CNT * CONST_FOR_MOTOR[num];
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <_ZN8DC_Motor5Motor7MoveDisEv+0x44>)
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	ed93 7b00 	vldr	d7, [r3]
 8000a08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a0c:	ed87 7b02 	vstr	d7, [r7, #8]

	Reset_CNT();
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffda 	bl	80009ca <_ZN8DC_Motor5Motor9Reset_CNTEv>

	return dis;
 8000a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000a1e:	eeb0 0b47 	vmov.f64	d0, d7
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800e2e8 	.word	0x0800e2e8

08000a2c <_ZN8DC_Motor5Motor7GetVnowEv>:

double Motor::GetVnow() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	return Vnow;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000a3a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000a3e:	eeb0 0b47 	vmov.f64	d0, d7
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_ZN8DC_Motor5MotorC1Ev>:

namespace DC_Motor {

class Motor {
public:
	Motor() {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	f04f 0200 	mov.w	r2, #0
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	e9c1 2300 	strd	r2, r3, [r1]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	829a      	strh	r2, [r3, #20]
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <_ZN8DC_Motor5MotorC1Ev+0x84>)
 8000a92:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	}
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40440000 	.word	0x40440000

08000ad4 <_ZN8CAR_INFOC1Ev>:

typedef struct {
	double Vx = 0.0;
	double Vy = 0.0;
	double Omega = 0.0;
} CAR_INFO;
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	e9c1 2300 	strd	r2, r3, [r1]
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <_ZN4OmniC1Ev>:
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim15;

Omni omni;

Omni::Omni() {
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2403      	movs	r4, #3
 8000b24:	461d      	mov	r5, r3
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	db05      	blt.n	8000b36 <_ZN4OmniC1Ev+0x1e>
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f7ff ff8e 	bl	8000a4c <_ZN8DC_Motor5MotorC1Ev>
 8000b30:	3568      	adds	r5, #104	; 0x68
 8000b32:	3c01      	subs	r4, #1
 8000b34:	e7f7      	b.n	8000b26 <_ZN4OmniC1Ev+0xe>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc9 	bl	8000ad4 <_ZN8CAR_INFOC1Ev>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ffc3 	bl	8000ad4 <_ZN8CAR_INFOC1Ev>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffbd 	bl	8000ad4 <_ZN8CAR_INFOC1Ev>
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	a304      	add	r3, pc, #16	; (adr r3, 8000b70 <_ZN4OmniC1Ev+0x58>)
 8000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b62:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
}
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b70:	3d70a3d7 	.word	0x3d70a3d7
 8000b74:	3fc3d70a 	.word	0x3fc3d70a

08000b78 <_ZN4Omni4InitEv>:

void Omni::Init() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	this->motors[0].Init(0, &htim2, 500., 1500., 60.);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8000bf8 <_ZN4Omni4InitEv+0x80>
 8000b86:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8000c00 <_ZN4Omni4InitEv+0x88>
 8000b8a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8000c08 <_ZN4Omni4InitEv+0x90>
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <_ZN4Omni4InitEv+0x98>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fda8 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[1].Init(1, &htim5, 500., 1500., 60.);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3368      	adds	r3, #104	; 0x68
 8000b9c:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8000bf8 <_ZN4Omni4InitEv+0x80>
 8000ba0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8000c00 <_ZN4Omni4InitEv+0x88>
 8000ba4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8000c08 <_ZN4Omni4InitEv+0x90>
 8000ba8:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <_ZN4Omni4InitEv+0x9c>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd9b 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[2].Init(2, &htim3, 500., 1500., 60.);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	33d0      	adds	r3, #208	; 0xd0
 8000bb6:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8000bf8 <_ZN4Omni4InitEv+0x80>
 8000bba:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8000c00 <_ZN4Omni4InitEv+0x88>
 8000bbe:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000c08 <_ZN4Omni4InitEv+0x90>
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <_ZN4Omni4InitEv+0xa0>)
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fd8e 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>
	this->motors[3].Init(3, &htim4, 500., 1500., 60.);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000bd2:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8000bf8 <_ZN4Omni4InitEv+0x80>
 8000bd6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8000c00 <_ZN4Omni4InitEv+0x88>
 8000bda:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000c08 <_ZN4Omni4InitEv+0x90>
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <_ZN4Omni4InitEv+0xa4>)
 8000be0:	2103      	movs	r1, #3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fd80 	bl	80006e8 <_ZN8DC_Motor5Motor4InitEsP17TIM_HandleTypeDefddd>

	DC_Motor::Init();
 8000be8:	f7ff fd48 	bl	800067c <_ZN8DC_Motor4InitEv>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	00000000 	.word	0x00000000
 8000bfc:	404e0000 	.word	0x404e0000
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40977000 	.word	0x40977000
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	407f4000 	.word	0x407f4000
 8000c10:	24000ca0 	.word	0x24000ca0
 8000c14:	24000d84 	.word	0x24000d84
 8000c18:	24000cec 	.word	0x24000cec
 8000c1c:	24000d38 	.word	0x24000d38

08000c20 <_ZN4Omni16Get_Car_locationEv>:

void Omni::Get_Car_location() {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	double m[4];
	for (int i = 0; i < 4; i++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	dc15      	bgt.n	8000c5e <_ZN4Omni16Get_Car_locationEv+0x3e>
		m[i] = this->motors[i].MoveDis();
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	2268      	movs	r2, #104	; 0x68
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fed0 	bl	80009e4 <_ZN8DC_Motor5Motor7MoveDisEv>
 8000c44:	eeb0 7b40 	vmov.f64	d7, d0
 8000c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	3330      	adds	r3, #48	; 0x30
 8000c4e:	443b      	add	r3, r7
 8000c50:	3b28      	subs	r3, #40	; 0x28
 8000c52:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	3301      	adds	r3, #1
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c5c:	e7e6      	b.n	8000c2c <_ZN4Omni16Get_Car_locationEv+0xc>
	}
//	NowCarLocation.Vx += -m[1] + m[3];
//	NowCarLocation.Vy += m[0] - m[2];
//	NowCarLocation.Omega += (m[0] + m[1] + m[2] + m[3]) / 4. / CarRadius;
}
 8000c5e:	bf00      	nop
 8000c60:	3730      	adds	r7, #48	; 0x30
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_ZN4Omni16UpdateNowCarInfoEv>:

void Omni::UpdateNowCarInfo() {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	ed2d 8b02 	vpush	{d8}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	// Get each motors' Vnow
	// Unit : m/s , rad/s
	this->UpdateMotorVnow();
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f890 	bl	8000d98 <_ZN4Omni15UpdateMotorVnowEv>

	NowCarInfo.Vx = (motors[3].GetVnow() - motors[1].GetVnow());
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fed4 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c84:	eeb0 8b40 	vmov.f64	d8, d0
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3368      	adds	r3, #104	; 0x68
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fecd 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000c92:	eeb0 7b40 	vmov.f64	d7, d0
 8000c96:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
	NowCarInfo.Vy = (motors[0].GetVnow() - motors[2].GetVnow());
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fec2 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000ca8:	eeb0 8b40 	vmov.f64	d8, d0
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	33d0      	adds	r3, #208	; 0xd0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff febb 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000cb6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cba:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8
	NowCarInfo.Omega = (motors[0].GetVnow() + motors[1].GetVnow() + motors[2].GetVnow() + motors[3].GetVnow()) * CarRadius;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff feb0 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000ccc:	eeb0 8b40 	vmov.f64	d8, d0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3368      	adds	r3, #104	; 0x68
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fea9 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000cda:	eeb0 7b40 	vmov.f64	d7, d0
 8000cde:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	33d0      	adds	r3, #208	; 0xd0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fea0 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000cec:	eeb0 7b40 	vmov.f64	d7, d0
 8000cf0:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe96 	bl	8000a2c <_ZN8DC_Motor5Motor7GetVnowEv>
 8000d00:	eeb0 7b40 	vmov.f64	d7, d0
 8000d04:	ee38 6b07 	vadd.f64	d6, d8, d7
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
 8000d0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	ecbd 8b02 	vpop	{d8}
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN4Omni14SetGoalCarInfoEddd>:

// Set all motors' velocity base on Car Vgoal.
void Omni::SetGoalCarInfo(double Vx, double Vy, double Omega) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	61f8      	str	r0, [r7, #28]
 8000d2c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000d30:	ed87 1b02 	vstr	d1, [r7, #8]
 8000d34:	ed87 2b00 	vstr	d2, [r7]
	this->GoalCarInfo.Vx = Vx;
 8000d38:	69f9      	ldr	r1, [r7, #28]
 8000d3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d3e:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	this->GoalCarInfo.Vy = Vy;
 8000d42:	69f9      	ldr	r1, [r7, #28]
 8000d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d48:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	this->GoalCarInfo.Omega = Omega;
 8000d4c:	69f9      	ldr	r1, [r7, #28]
 8000d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d52:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8

	SetMotorVgoal();
 8000d56:	69f8      	ldr	r0, [r7, #28]
 8000d58:	f000 f8d6 	bl	8000f08 <_ZN4Omni13SetMotorVgoalEv>
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN4Omni10Update_PIDEv>:

void Omni::Update_PID() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	dc0c      	bgt.n	8000d90 <_ZN4Omni10Update_PIDEv+0x2c>
		this->motors[i].UpdatePID();
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2268      	movs	r2, #104	; 0x68
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fcd8 	bl	8000738 <_ZN8DC_Motor5Motor9UpdatePIDEv>
	for (int i = 0; i < 4; i++) {
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e7ef      	b.n	8000d70 <_ZN4Omni10Update_PIDEv+0xc>
	}
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN4Omni15UpdateMotorVnowEv>:

void Omni::UpdateMotorVnow() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	dc0c      	bgt.n	8000dc4 <_ZN4Omni15UpdateMotorVnowEv+0x2c>
		this->motors[i].UpdateVnow();
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2268      	movs	r2, #104	; 0x68
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fdb6 	bl	8000928 <_ZN8DC_Motor5Motor10UpdateVnowEv>
	for (int i = 0; i < 4; i++) {
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e7ef      	b.n	8000da4 <_ZN4Omni15UpdateMotorVnowEv+0xc>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <_ZN4Omni4MoveEv>:

// TODO : Check for the DIR
void Omni::Move() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	// DIR
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, (motors[0].u > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	ed93 7b00 	vldr	d7, [r3]
 8000dde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de6:	dd01      	ble.n	8000dec <_ZN4Omni4MoveEv+0x1c>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <_ZN4Omni4MoveEv+0x1e>
 8000dec:	2300      	movs	r3, #0
 8000dee:	461a      	mov	r2, r3
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	483e      	ldr	r0, [pc, #248]	; (8000ef0 <_ZN4Omni4MoveEv+0x120>)
 8000df6:	f007 f919 	bl	800802c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (motors[1].u > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000e00:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e08:	dd01      	ble.n	8000e0e <_ZN4Omni4MoveEv+0x3e>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <_ZN4Omni4MoveEv+0x40>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	461a      	mov	r2, r3
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <_ZN4Omni4MoveEv+0x124>)
 8000e18:	f007 f908 	bl	800802c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, (motors[2].u > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000e22:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	dd01      	ble.n	8000e30 <_ZN4Omni4MoveEv+0x60>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <_ZN4Omni4MoveEv+0x62>
 8000e30:	2300      	movs	r3, #0
 8000e32:	461a      	mov	r2, r3
 8000e34:	2108      	movs	r1, #8
 8000e36:	4830      	ldr	r0, [pc, #192]	; (8000ef8 <_ZN4Omni4MoveEv+0x128>)
 8000e38:	f007 f8f8 	bl	800802c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (motors[3].u > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8000e42:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	dd01      	ble.n	8000e50 <_ZN4Omni4MoveEv+0x80>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <_ZN4Omni4MoveEv+0x82>
 8000e50:	2300      	movs	r3, #0
 8000e52:	461a      	mov	r2, r3
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4828      	ldr	r0, [pc, #160]	; (8000efc <_ZN4Omni4MoveEv+0x12c>)
 8000e5a:	f007 f8e7 	bl	800802c <HAL_GPIO_WritePin>

	// PWM
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, int(fabs(motors[0].u) * 3200));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	ed93 7b00 	vldr	d7, [r3]
 8000e64:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e68:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000ee8 <_ZN4Omni4MoveEv+0x118>
 8000e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e70:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <_ZN4Omni4MoveEv+0x130>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	ee17 2a90 	vmov	r2, s15
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, int(fabs(motors[1].u) * 3200));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000e84:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e88:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000ee8 <_ZN4Omni4MoveEv+0x118>
 8000e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e90:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <_ZN4Omni4MoveEv+0x130>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	ee17 2a90 	vmov	r2, s15
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, int(fabs(motors[2].u) * 3200));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000ea4:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ea8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000ee8 <_ZN4Omni4MoveEv+0x118>
 8000eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eb0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_ZN4Omni4MoveEv+0x134>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	ee17 2a90 	vmov	r2, s15
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, int(fabs(motors[3].u) * 3200));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
 8000ec4:	eeb0 7bc7 	vabs.f64	d7, d7
 8000ec8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8000ee8 <_ZN4Omni4MoveEv+0x118>
 8000ecc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ed0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <_ZN4Omni4MoveEv+0x134>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	ee17 2a90 	vmov	r2, s15
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	40a90000 	.word	0x40a90000
 8000ef0:	58020c00 	.word	0x58020c00
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58021000 	.word	0x58021000
 8000efc:	58020800 	.word	0x58020800
 8000f00:	24000e68 	.word	0x24000e68
 8000f04:	24000f00 	.word	0x24000f00

08000f08 <_ZN4Omni13SetMotorVgoalEv>:

void Omni::SetMotorVgoal() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	// Unit : m/s
	this->motors[0].SetVgoal(GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	ed93 5b7a 	vldr	d5, [r3, #488]	; 0x1e8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000f24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f2c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f30:	4610      	mov	r0, r2
 8000f32:	f7ff fd27 	bl	8000984 <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[1].SetVgoal(-GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	ed93 6b7a 	vldr	d6, [r3, #488]	; 0x1e8
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000f48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8000f52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f56:	eeb0 0b47 	vmov.f64	d0, d7
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	f7ff fd12 	bl	8000984 <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[2].SetVgoal(-GoalCarInfo.Vy + CarRadius * GoalCarInfo.Omega);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 6b7a 	vldr	d6, [r3, #488]	; 0x1e8
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000f72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
 8000f7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f80:	eeb0 0b47 	vmov.f64	d0, d7
 8000f84:	4610      	mov	r0, r2
 8000f86:	f7ff fcfd 	bl	8000984 <_ZN8DC_Motor5Motor8SetVgoalEd>
	this->motors[3].SetVgoal(GoalCarInfo.Vx + CarRadius * GoalCarInfo.Omega);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	ed93 6b6e 	vldr	d6, [r3, #440]	; 0x1b8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	ed93 5b7a 	vldr	d5, [r3, #488]	; 0x1e8
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
 8000fa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000faa:	eeb0 0b47 	vmov.f64	d0, d7
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f7ff fce8 	bl	8000984 <_ZN8DC_Motor5Motor8SetVgoalEd>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN4Omni13GetNowCarInfoEv>:

CAR_INFO Omni::GetNowCarInfo() {
 8000fbc:	b4b0      	push	{r4, r5, r7}
 8000fbe:	b08f      	sub	sp, #60	; 0x3c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	61f8      	str	r0, [r7, #28]
	return NowCarInfo;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f107 0420 	add.w	r4, r7, #32
 8000fca:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fd6:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fe6:	ec45 4b15 	vmov	d5, r4, r5
 8000fea:	ec41 0b16 	vmov	d6, r0, r1
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0b45 	vmov.f64	d0, d5
 8000ff6:	eeb0 1b46 	vmov.f64	d1, d6
 8000ffa:	eeb0 2b47 	vmov.f64	d2, d7
 8000ffe:	373c      	adds	r7, #60	; 0x3c
 8001000:	46bd      	mov	sp, r7
 8001002:	bcb0      	pop	{r4, r5, r7}
 8001004:	4770      	bx	lr
	...

08001008 <_Z41__static_initialization_and_destruction_0ii>:
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d107      	bne.n	8001028 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	4293      	cmp	r3, r2
 8001020:	d102      	bne.n	8001028 <_Z41__static_initialization_and_destruction_0ii+0x20>
Omni omni;
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001024:	f7ff fd78 	bl	8000b18 <_ZN4OmniC1Ev>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	24000098 	.word	0x24000098

08001034 <_GLOBAL__sub_I_omni>:
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
 8001038:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ffe3 	bl	8001008 <_Z41__static_initialization_and_destruction_0ii>
 8001042:	bd80      	pop	{r7, pc}

08001044 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <_ZN3ros3MsgC1Ev+0x1c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	0800e414 	.word	0x0800e414

08001064 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ffe8 	bl	8001044 <_ZN3ros3MsgC1Ev>
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800e3fc 	.word	0x0800e3fc

080010b4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010b4:	b480      	push	{r7}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80010cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	4401      	add	r1, r0
 80010d6:	b2d3      	uxtb	r3, r2
 80010d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80010da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	0a02      	lsrs	r2, r0, #8
 80010e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010ec:	0a0b      	lsrs	r3, r1, #8
 80010ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f0:	3101      	adds	r1, #1
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	4401      	add	r1, r0
 80010f6:	b2d3      	uxtb	r3, r2
 80010f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80010fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	0c02      	lsrs	r2, r0, #16
 8001108:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800110c:	0c0b      	lsrs	r3, r1, #16
 800110e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001110:	3102      	adds	r1, #2
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	4401      	add	r1, r0
 8001116:	b2d3      	uxtb	r3, r2
 8001118:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800111a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	0e02      	lsrs	r2, r0, #24
 8001128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800112c:	0e0b      	lsrs	r3, r1, #24
 800112e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001130:	3103      	adds	r1, #3
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	4401      	add	r1, r0
 8001136:	b2d3      	uxtb	r3, r2
 8001138:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800113a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	000a      	movs	r2, r1
 8001148:	2300      	movs	r3, #0
 800114a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800114c:	3104      	adds	r1, #4
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	4401      	add	r1, r0
 8001152:	b2d3      	uxtb	r3, r2
 8001154:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001156:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	0a0a      	lsrs	r2, r1, #8
 8001164:	2300      	movs	r3, #0
 8001166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001168:	3105      	adds	r1, #5
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	4401      	add	r1, r0
 800116e:	b2d3      	uxtb	r3, r2
 8001170:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001172:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	0c0a      	lsrs	r2, r1, #16
 8001180:	2300      	movs	r3, #0
 8001182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001184:	3106      	adds	r1, #6
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	4401      	add	r1, r0
 800118a:	b2d3      	uxtb	r3, r2
 800118c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800118e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	0e0a      	lsrs	r2, r1, #24
 800119c:	2300      	movs	r3, #0
 800119e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011a0:	3107      	adds	r1, #7
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	4401      	add	r1, r0
 80011a6:	b2d3      	uxtb	r3, r2
 80011a8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3308      	adds	r3, #8
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80011ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	4401      	add	r1, r0
 80011c4:	b2d3      	uxtb	r3, r2
 80011c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80011c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	0a02      	lsrs	r2, r0, #8
 80011d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011da:	0a0b      	lsrs	r3, r1, #8
 80011dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011de:	3101      	adds	r1, #1
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	4401      	add	r1, r0
 80011e4:	b2d3      	uxtb	r3, r2
 80011e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80011e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	0c02      	lsrs	r2, r0, #16
 80011f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011fa:	0c0b      	lsrs	r3, r1, #16
 80011fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fe:	3102      	adds	r1, #2
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	4401      	add	r1, r0
 8001204:	b2d3      	uxtb	r3, r2
 8001206:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001208:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	0e02      	lsrs	r2, r0, #24
 8001216:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800121a:	0e0b      	lsrs	r3, r1, #24
 800121c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800121e:	3103      	adds	r1, #3
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	4401      	add	r1, r0
 8001224:	b2d3      	uxtb	r3, r2
 8001226:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001228:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	000a      	movs	r2, r1
 8001236:	2300      	movs	r3, #0
 8001238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800123a:	3104      	adds	r1, #4
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	4401      	add	r1, r0
 8001240:	b2d3      	uxtb	r3, r2
 8001242:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001244:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	0a0a      	lsrs	r2, r1, #8
 8001252:	2300      	movs	r3, #0
 8001254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001256:	3105      	adds	r1, #5
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	4401      	add	r1, r0
 800125c:	b2d3      	uxtb	r3, r2
 800125e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001260:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	0c0a      	lsrs	r2, r1, #16
 800126e:	2300      	movs	r3, #0
 8001270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001272:	3106      	adds	r1, #6
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	4401      	add	r1, r0
 8001278:	b2d3      	uxtb	r3, r2
 800127a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800127c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	0e0a      	lsrs	r2, r1, #24
 800128a:	2300      	movs	r3, #0
 800128c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800128e:	3107      	adds	r1, #7
 8001290:	6838      	ldr	r0, [r7, #0]
 8001292:	4401      	add	r1, r0
 8001294:	b2d3      	uxtb	r3, r2
 8001296:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3308      	adds	r3, #8
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80012a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	4401      	add	r1, r0
 80012b2:	b2d3      	uxtb	r3, r2
 80012b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80012b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	0a02      	lsrs	r2, r0, #8
 80012c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012c8:	0a0b      	lsrs	r3, r1, #8
 80012ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012cc:	3101      	adds	r1, #1
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	4401      	add	r1, r0
 80012d2:	b2d3      	uxtb	r3, r2
 80012d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80012d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	0c02      	lsrs	r2, r0, #16
 80012e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012e8:	0c0b      	lsrs	r3, r1, #16
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	3102      	adds	r1, #2
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	4401      	add	r1, r0
 80012f2:	b2d3      	uxtb	r3, r2
 80012f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80012f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	0e02      	lsrs	r2, r0, #24
 8001304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001308:	0e0b      	lsrs	r3, r1, #24
 800130a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800130c:	3103      	adds	r1, #3
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	4401      	add	r1, r0
 8001312:	b2d3      	uxtb	r3, r2
 8001314:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	000a      	movs	r2, r1
 8001324:	2300      	movs	r3, #0
 8001326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001328:	3104      	adds	r1, #4
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	4401      	add	r1, r0
 800132e:	b2d3      	uxtb	r3, r2
 8001330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8001332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	0a0a      	lsrs	r2, r1, #8
 8001340:	2300      	movs	r3, #0
 8001342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001344:	3105      	adds	r1, #5
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	4401      	add	r1, r0
 800134a:	b2d3      	uxtb	r3, r2
 800134c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800134e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	0c0a      	lsrs	r2, r1, #16
 800135c:	2300      	movs	r3, #0
 800135e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001360:	3106      	adds	r1, #6
 8001362:	6838      	ldr	r0, [r7, #0]
 8001364:	4401      	add	r1, r0
 8001366:	b2d3      	uxtb	r3, r2
 8001368:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800136a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	0e0a      	lsrs	r2, r1, #24
 8001378:	2300      	movs	r3, #0
 800137a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137c:	3107      	adds	r1, #7
 800137e:	6838      	ldr	r0, [r7, #0]
 8001380:	4401      	add	r1, r0
 8001382:	b2d3      	uxtb	r3, r2
 8001384:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	3308      	adds	r3, #8
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800138e:	4618      	mov	r0, r3
 8001390:	372c      	adds	r7, #44	; 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800139a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800139e:	b0eb      	sub	sp, #428	; 0x1ac
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80013a6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80013c0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80013c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	461c      	mov	r4, r3
 80013d2:	4615      	mov	r5, r2
 80013d4:	ea40 0804 	orr.w	r8, r0, r4
 80013d8:	ea41 0905 	orr.w	r9, r1, r5
 80013dc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80013e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	469a      	mov	sl, r3
 80013f8:	4693      	mov	fp, r2
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8001406:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800140a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800140e:	ea40 0402 	orr.w	r4, r0, r2
 8001412:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8001416:	430b      	orrs	r3, r1
 8001418:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800141c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8001420:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001424:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001428:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800142c:	1c9a      	adds	r2, r3, #2
 800142e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2200      	movs	r2, #0
 800143a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800143e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800144e:	464c      	mov	r4, r9
 8001450:	0423      	lsls	r3, r4, #16
 8001452:	4644      	mov	r4, r8
 8001454:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001458:	4644      	mov	r4, r8
 800145a:	0422      	lsls	r2, r4, #16
 800145c:	ea40 0402 	orr.w	r4, r0, r2
 8001460:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8001464:	430b      	orrs	r3, r1
 8001466:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800146a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800146e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001472:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001476:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800147a:	1cda      	adds	r2, r3, #3
 800147c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2200      	movs	r2, #0
 8001488:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800148c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001490:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001494:	4623      	mov	r3, r4
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800149c:	4623      	mov	r3, r4
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014a4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80014a8:	4623      	mov	r3, r4
 80014aa:	4303      	orrs	r3, r0
 80014ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014b0:	462b      	mov	r3, r5
 80014b2:	430b      	orrs	r3, r1
 80014b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014b8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80014bc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80014c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80014c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014c8:	1d1a      	adds	r2, r3, #4
 80014ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2200      	movs	r2, #0
 80014d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80014da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80014ea:	0023      	movs	r3, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	ea40 0402 	orr.w	r4, r0, r2
 80014f2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80014f6:	430b      	orrs	r3, r1
 80014f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80014fc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8001500:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001504:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001508:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800150c:	1d5a      	adds	r2, r3, #5
 800150e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800151e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800152e:	0223      	lsls	r3, r4, #8
 8001530:	2200      	movs	r2, #0
 8001532:	ea40 0402 	orr.w	r4, r0, r2
 8001536:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800153a:	430b      	orrs	r3, r1
 800153c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001540:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001544:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001548:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800154c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001550:	1d9a      	adds	r2, r3, #6
 8001552:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2200      	movs	r2, #0
 800155e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001562:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001572:	0423      	lsls	r3, r4, #16
 8001574:	2200      	movs	r2, #0
 8001576:	ea40 0402 	orr.w	r4, r0, r2
 800157a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800157e:	430b      	orrs	r3, r1
 8001580:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001584:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001588:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800158c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001590:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001594:	1dda      	adds	r2, r3, #7
 8001596:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80015a6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80015b6:	0623      	lsls	r3, r4, #24
 80015b8:	2200      	movs	r2, #0
 80015ba:	ea40 0402 	orr.w	r4, r0, r2
 80015be:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80015c2:	430b      	orrs	r3, r1
 80015c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015c8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80015cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80015d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80015d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80015dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015e0:	3308      	adds	r3, #8
 80015e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80015f6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80015fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2200      	movs	r2, #0
 8001606:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800160a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800160e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001612:	4623      	mov	r3, r4
 8001614:	4303      	orrs	r3, r0
 8001616:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800161a:	462b      	mov	r3, r5
 800161c:	430b      	orrs	r3, r1
 800161e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001622:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8001626:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800162a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800162e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2200      	movs	r2, #0
 8001640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001644:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001654:	464c      	mov	r4, r9
 8001656:	0223      	lsls	r3, r4, #8
 8001658:	4644      	mov	r4, r8
 800165a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800165e:	4644      	mov	r4, r8
 8001660:	0222      	lsls	r2, r4, #8
 8001662:	ea40 0402 	orr.w	r4, r0, r2
 8001666:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800166a:	430b      	orrs	r3, r1
 800166c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001670:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001674:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001678:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800167c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001680:	1c9a      	adds	r2, r3, #2
 8001682:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2200      	movs	r2, #0
 800168e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001692:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016a2:	464c      	mov	r4, r9
 80016a4:	0423      	lsls	r3, r4, #16
 80016a6:	4644      	mov	r4, r8
 80016a8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80016ac:	4644      	mov	r4, r8
 80016ae:	0422      	lsls	r2, r4, #16
 80016b0:	ea40 0402 	orr.w	r4, r0, r2
 80016b4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80016b8:	430b      	orrs	r3, r1
 80016ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016be:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80016c2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016c6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80016ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016ce:	1cda      	adds	r2, r3, #3
 80016d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016d4:	4413      	add	r3, r2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80016e0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80016e4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80016e8:	4623      	mov	r3, r4
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016f0:	4623      	mov	r3, r4
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80016f8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016fc:	4623      	mov	r3, r4
 80016fe:	4303      	orrs	r3, r0
 8001700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001704:	462b      	mov	r3, r5
 8001706:	430b      	orrs	r3, r1
 8001708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800170c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8001710:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001714:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001718:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800171c:	1d1a      	adds	r2, r3, #4
 800171e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2200      	movs	r2, #0
 800172a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800172e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800173e:	0023      	movs	r3, r4
 8001740:	2200      	movs	r2, #0
 8001742:	ea40 0402 	orr.w	r4, r0, r2
 8001746:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800174a:	430b      	orrs	r3, r1
 800174c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001750:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8001754:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001758:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800175c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001760:	1d5a      	adds	r2, r3, #5
 8001762:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2200      	movs	r2, #0
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001772:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8001782:	0223      	lsls	r3, r4, #8
 8001784:	2200      	movs	r2, #0
 8001786:	ea40 0402 	orr.w	r4, r0, r2
 800178a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800178e:	430b      	orrs	r3, r1
 8001790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001794:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001798:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800179c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017a4:	1d9a      	adds	r2, r3, #6
 80017a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80017b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80017c6:	0423      	lsls	r3, r4, #16
 80017c8:	2200      	movs	r2, #0
 80017ca:	ea40 0402 	orr.w	r4, r0, r2
 80017ce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80017d2:	430b      	orrs	r3, r1
 80017d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80017d8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80017dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80017e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80017e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017e8:	1dda      	adds	r2, r3, #7
 80017ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800180a:	0623      	lsls	r3, r4, #24
 800180c:	2200      	movs	r2, #0
 800180e:	ea40 0402 	orr.w	r4, r0, r2
 8001812:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001816:	430b      	orrs	r3, r1
 8001818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800181c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001820:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8001824:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001828:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800182c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8001830:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001834:	3308      	adds	r3, #8
 8001836:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001846:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800184a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800184e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2200      	movs	r2, #0
 800185a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800185e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001862:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001866:	4623      	mov	r3, r4
 8001868:	4303      	orrs	r3, r0
 800186a:	67bb      	str	r3, [r7, #120]	; 0x78
 800186c:	462b      	mov	r3, r5
 800186e:	430b      	orrs	r3, r1
 8001870:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001872:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001876:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800187a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800187e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2200      	movs	r2, #0
 8001890:	673b      	str	r3, [r7, #112]	; 0x70
 8001892:	677a      	str	r2, [r7, #116]	; 0x74
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80018a0:	464c      	mov	r4, r9
 80018a2:	0223      	lsls	r3, r4, #8
 80018a4:	4644      	mov	r4, r8
 80018a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80018aa:	4644      	mov	r4, r8
 80018ac:	0222      	lsls	r2, r4, #8
 80018ae:	ea40 0402 	orr.w	r4, r0, r2
 80018b2:	66bc      	str	r4, [r7, #104]	; 0x68
 80018b4:	430b      	orrs	r3, r1
 80018b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80018b8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80018bc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018c0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80018c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80018c8:	1c9a      	adds	r2, r3, #2
 80018ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2200      	movs	r2, #0
 80018d6:	663b      	str	r3, [r7, #96]	; 0x60
 80018d8:	667a      	str	r2, [r7, #100]	; 0x64
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80018e6:	464c      	mov	r4, r9
 80018e8:	0423      	lsls	r3, r4, #16
 80018ea:	4644      	mov	r4, r8
 80018ec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80018f0:	4644      	mov	r4, r8
 80018f2:	0422      	lsls	r2, r4, #16
 80018f4:	ea40 0402 	orr.w	r4, r0, r2
 80018f8:	65bc      	str	r4, [r7, #88]	; 0x58
 80018fa:	430b      	orrs	r3, r1
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fe:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001902:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001906:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800190a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800190e:	1cda      	adds	r2, r3, #3
 8001910:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2200      	movs	r2, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
 800191e:	657a      	str	r2, [r7, #84]	; 0x54
 8001920:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001924:	4623      	mov	r3, r4
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192a:	4623      	mov	r3, r4
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001930:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001934:	4623      	mov	r3, r4
 8001936:	4303      	orrs	r3, r0
 8001938:	643b      	str	r3, [r7, #64]	; 0x40
 800193a:	462b      	mov	r3, r5
 800193c:	430b      	orrs	r3, r1
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
 8001940:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001944:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001948:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800194c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2200      	movs	r2, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800196c:	0023      	movs	r3, r4
 800196e:	2200      	movs	r2, #0
 8001970:	ea40 0402 	orr.w	r4, r0, r2
 8001974:	633c      	str	r4, [r7, #48]	; 0x30
 8001976:	430b      	orrs	r3, r1
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800197e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001982:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001986:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800198a:	1d5a      	adds	r2, r3, #5
 800198c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2200      	movs	r2, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80019a6:	0223      	lsls	r3, r4, #8
 80019a8:	2200      	movs	r2, #0
 80019aa:	ea40 0402 	orr.w	r4, r0, r2
 80019ae:	623c      	str	r4, [r7, #32]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019b8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80019bc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019c4:	3306      	adds	r3, #6
 80019c6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	61fa      	str	r2, [r7, #28]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	69bc      	ldr	r4, [r7, #24]
 80019e0:	0423      	lsls	r3, r4, #16
 80019e2:	2200      	movs	r2, #0
 80019e4:	ea40 0402 	orr.w	r4, r0, r2
 80019e8:	613c      	str	r4, [r7, #16]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019f2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80019f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80019fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019fe:	3307      	adds	r3, #7
 8001a00:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	60fa      	str	r2, [r7, #12]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	68bc      	ldr	r4, [r7, #8]
 8001a1a:	0623      	lsls	r3, r4, #24
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	ea40 0402 	orr.w	r4, r0, r2
 8001a22:	603c      	str	r4, [r7, #0]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a2c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8001a30:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001a34:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001a38:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8001a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a40:	3308      	adds	r3, #8
 8001a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8001a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a56:	4770      	bx	lr

08001a58 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	0800e148 	.word	0x0800e148

08001a74 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	0800e160 	.word	0x0800e160

08001a90 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fad2 	bl	8001044 <_ZN3ros3MsgC1Ev>
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fada 	bl	8001064 <_ZN13geometry_msgs7Vector3C1Ev>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3328      	adds	r3, #40	; 0x28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fad5 	bl	8001064 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	0800e3e4 	.word	0x0800e3e4

08001ac8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 0008 	add.w	r0, r3, #8
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff fae6 	bl	80010b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff fad9 	bl	80010b4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    }
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f103 0008 	add.w	r0, r3, #8
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff fc33 	bl	800139a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff fc26 	bl	800139a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
     return offset;
 8001b56:	68fb      	ldr	r3, [r7, #12]
    }
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	0800e184 	.word	0x0800e184

08001b7c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	0800e198 	.word	0x0800e198

08001b98 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
      data()
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fa3c 	bl	8001044 <_ZN3ros3MsgC1Ev>
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffde 	bl	8001b98 <_ZN3ros4TimeC1Ev>
    {
    }
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	0800e3cc 	.word	0x0800e3cc

08001bec <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	b2ca      	uxtb	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0a19      	lsrs	r1, r3, #8
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3301      	adds	r3, #1
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	0c19      	lsrs	r1, r3, #16
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3302      	adds	r3, #2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0e19      	lsrs	r1, r3, #24
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3303      	adds	r3, #3
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6899      	ldr	r1, [r3, #8]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a19      	lsrs	r1, r3, #8
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	0c19      	lsrs	r1, r3, #16
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	b2ca      	uxtb	r2, r1
 8001c74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0e19      	lsrs	r1, r3, #24
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	b2ca      	uxtb	r2, r1
 8001c86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    }
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	440b      	add	r3, r1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3303      	adds	r3, #3
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	440b      	add	r3, r1
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	061b      	lsls	r3, r3, #24
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	440b      	add	r3, r1
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	440b      	add	r3, r1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3303      	adds	r3, #3
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3304      	adds	r3, #4
 8001d54:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d56:	68fb      	ldr	r3, [r7, #12]
    }
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	0800e1bc 	.word	0x0800e1bc

08001d80 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	0800e1cc 	.word	0x0800e1cc

08001d9c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f94c 	bl	8001044 <_ZN3ros3MsgC1Ev>
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	809a      	strh	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
    {
    }
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	0800e3b4 	.word	0x0800e3b4
 8001de0:	0800e1f0 	.word	0x0800e1f0

08001de4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	8899      	ldrh	r1, [r3, #4]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	889b      	ldrh	r3, [r3, #4]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	b299      	uxth	r1, r3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b2ca      	uxtb	r2, r1
 8001e12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3302      	adds	r3, #2
 8001e18:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fa76 	bl	8000310 <strlen>
 8001e24:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 ff7a 	bl	8002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	3304      	adds	r3, #4
 8001e38:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	18d0      	adds	r0, r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4619      	mov	r1, r3
 8001e48:	f00b ffd8 	bl	800ddfc <memcpy>
      offset += length_topic_name;
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4413      	add	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fa59 	bl	8000310 <strlen>
 8001e5e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 ff5d 	bl	8002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	18d0      	adds	r0, r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f00b ffbb 	bl	800ddfc <memcpy>
      offset += length_message_type;
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fa3c 	bl	8000310 <strlen>
 8001e98:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	6939      	ldr	r1, [r7, #16]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 ff40 	bl	8002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	18d0      	adds	r0, r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f00b ff9e 	bl	800ddfc <memcpy>
      offset += length_md5sum;
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2ca      	uxtb	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0a19      	lsrs	r1, r3, #8
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0c19      	lsrs	r1, r3, #16
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0e19      	lsrs	r1, r3, #24
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3303      	adds	r3, #3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001f10:	69fb      	ldr	r3, [r7, #28]
    }
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b08a      	sub	sp, #40	; 0x28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	889b      	ldrh	r3, [r3, #4]
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	440b      	add	r3, r1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3302      	adds	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	441a      	add	r2, r3
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fefc 	bl	8002d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d20c      	bcs.n	8001f9c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	441a      	add	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	440b      	add	r3, r1
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3301      	adds	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	e7ec      	b.n	8001f76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	441a      	add	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fec9 	bl	8002d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	6a3a      	ldr	r2, [r7, #32]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d20c      	bcs.n	8002002 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	441a      	add	r2, r3
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	6839      	ldr	r1, [r7, #0]
 8001ff4:	440b      	add	r3, r1
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	e7ec      	b.n	8001fdc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	3b01      	subs	r3, #1
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	4413      	add	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3b01      	subs	r3, #1
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	441a      	add	r2, r3
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fe96 	bl	8002d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3304      	adds	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	429a      	cmp	r2, r3
 800204c:	d20c      	bcs.n	8002068 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	441a      	add	r2, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3b01      	subs	r3, #1
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	440b      	add	r3, r1
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e7ec      	b.n	8002042 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	3b01      	subs	r3, #1
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3b01      	subs	r3, #1
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	441a      	add	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	440a      	add	r2, r1
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3301      	adds	r3, #1
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	440b      	add	r3, r1
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	3302      	adds	r3, #2
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	440b      	add	r3, r1
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	4313      	orrs	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	3303      	adds	r3, #3
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	440b      	add	r3, r1
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	3304      	adds	r3, #4
 80020de:	61bb      	str	r3, [r7, #24]
     return offset;
 80020e0:	69bb      	ldr	r3, [r7, #24]
    }
 80020e2:	4618      	mov	r0, r3
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	0800e1f4 	.word	0x0800e1f4

08002108 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	0800e210 	.word	0x0800e210

08002124 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe ff88 	bl	8001044 <_ZN3ros3MsgC1Ev>
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	711a      	strb	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002144:	609a      	str	r2, [r3, #8]
    {
    }
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	0800e39c 	.word	0x0800e39c
 8002154:	0800e1f0 	.word	0x0800e1f0

08002158 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	7912      	ldrb	r2, [r2, #4]
 8002170:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3301      	adds	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f8c7 	bl	8000310 <strlen>
 8002182:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fdcb 	bl	8002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	18d0      	adds	r0, r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f00b fe29 	bl	800ddfc <memcpy>
      offset += length_msg;
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80021b2:	68fb      	ldr	r3, [r7, #12]
    }
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	3301      	adds	r3, #1
 80021da:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	441a      	add	r2, r3
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fdbb 	bl	8002d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	3304      	adds	r3, #4
 80021f2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	d20c      	bcs.n	800221e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	441a      	add	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3b01      	subs	r3, #1
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	440b      	add	r3, r1
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e7ec      	b.n	80021f8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	3b01      	subs	r3, #1
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	3b01      	subs	r3, #1
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
     return offset;
 8002242:	693b      	ldr	r3, [r7, #16]
    }
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	0800e234 	.word	0x0800e234

08002268 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	0800e248 	.word	0x0800e248

08002284 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fed8 	bl	8001044 <_ZN3ros3MsgC1Ev>
 8002294:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	0800e384 	.word	0x0800e384

080022cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	b2ca      	uxtb	r2, r1
 80022e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0a19      	lsrs	r1, r3, #8
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	3301      	adds	r3, #1
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0c19      	lsrs	r1, r3, #16
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3302      	adds	r3, #2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0e19      	lsrs	r1, r3, #24
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3303      	adds	r3, #3
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	4413      	add	r3, r2
 800231a:	b2ca      	uxtb	r2, r1
 800231c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3304      	adds	r3, #4
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	429a      	cmp	r2, r3
 8002330:	d22b      	bcs.n	800238a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	b2ca      	uxtb	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	0a19      	lsrs	r1, r3, #8
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3301      	adds	r3, #1
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4413      	add	r3, r2
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	0c19      	lsrs	r1, r3, #16
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3302      	adds	r3, #2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4413      	add	r3, r2
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	0e19      	lsrs	r1, r3, #24
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3303      	adds	r3, #3
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	4413      	add	r3, r2
 8002378:	b2ca      	uxtb	r2, r1
 800237a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	3304      	adds	r3, #4
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	3301      	adds	r3, #1
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	e7ce      	b.n	8002328 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	4413      	add	r3, r2
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	0a19      	lsrs	r1, r3, #8
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	0c19      	lsrs	r1, r3, #16
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	3302      	adds	r3, #2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	0e19      	lsrs	r1, r3, #24
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	3303      	adds	r3, #3
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3304      	adds	r3, #4
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d22b      	bcs.n	800243a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0a19      	lsrs	r1, r3, #8
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3301      	adds	r3, #1
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	4413      	add	r3, r2
 8002408:	b2ca      	uxtb	r2, r1
 800240a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	0c19      	lsrs	r1, r3, #16
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3302      	adds	r3, #2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	0e19      	lsrs	r1, r3, #24
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3303      	adds	r3, #3
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	b2ca      	uxtb	r2, r1
 800242a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3304      	adds	r3, #4
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	e7ce      	b.n	80023d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69d9      	ldr	r1, [r3, #28]
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	0a19      	lsrs	r1, r3, #8
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	0c19      	lsrs	r1, r3, #16
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	3302      	adds	r3, #2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	b2ca      	uxtb	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	0e19      	lsrs	r1, r3, #24
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	3303      	adds	r3, #3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3304      	adds	r3, #4
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	429a      	cmp	r2, r3
 8002490:	d228      	bcs.n	80024e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fd ff36 	bl	8000310 <strlen>
 80024a4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	6979      	ldr	r1, [r7, #20]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fc3a 	bl	8002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	3304      	adds	r3, #4
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	18d0      	adds	r0, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4619      	mov	r1, r3
 80024d0:	f00b fc94 	bl	800ddfc <memcpy>
      offset += length_stringsi;
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	4413      	add	r3, r2
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3301      	adds	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e7d1      	b.n	8002488 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024e6:	4618      	mov	r0, r3
 80024e8:	3728      	adds	r7, #40	; 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08e      	sub	sp, #56	; 0x38
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	3301      	adds	r3, #1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	6a3a      	ldr	r2, [r7, #32]
 8002514:	4313      	orrs	r3, r2
 8002516:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251a:	3302      	adds	r3, #2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	4313      	orrs	r3, r2
 8002528:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	3303      	adds	r3, #3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	4313      	orrs	r3, r2
 800253a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253e:	3304      	adds	r3, #4
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	429a      	cmp	r2, r3
 800254a:	d90a      	bls.n	8002562 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f00b fc66 	bl	800de28 <realloc>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002572:	429a      	cmp	r2, r3
 8002574:	d236      	bcs.n	80025e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	440a      	add	r2, r1
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258c:	3301      	adds	r3, #1
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	440b      	add	r3, r1
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	3302      	adds	r3, #2
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	440b      	add	r3, r1
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	3303      	adds	r3, #3
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	440b      	add	r3, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	3304      	adds	r3, #4
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	3301      	adds	r3, #1
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
 80025e2:	e7c3      	b.n	800256c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	3301      	adds	r3, #1
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	3302      	adds	r3, #2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	4313      	orrs	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	3303      	adds	r3, #3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	4313      	orrs	r3, r2
 8002622:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	3304      	adds	r3, #4
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	429a      	cmp	r2, r3
 8002632:	d90a      	bls.n	800264a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f00b fbf2 	bl	800de28 <realloc>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265a:	429a      	cmp	r2, r3
 800265c:	d236      	bcs.n	80026cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440a      	add	r2, r1
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	3301      	adds	r3, #1
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	440b      	add	r3, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	3302      	adds	r3, #2
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	440b      	add	r3, r1
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	3303      	adds	r3, #3
 800269a:	6839      	ldr	r1, [r7, #0]
 800269c:	440b      	add	r3, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	3304      	adds	r3, #4
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3214      	adds	r2, #20
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	3301      	adds	r3, #1
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	e7c3      	b.n	8002654 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	3301      	adds	r3, #1
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	3302      	adds	r3, #2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	3303      	adds	r3, #3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	3304      	adds	r3, #4
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	429a      	cmp	r2, r3
 800271a:	d90a      	bls.n	8002732 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f00b fb7e 	bl	800de28 <realloc>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002742:	429a      	cmp	r2, r3
 8002744:	d23f      	bcs.n	80027c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	441a      	add	r2, r3
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fb06 	bl	8002d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	3304      	adds	r3, #4
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	441a      	add	r2, r3
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	440b      	add	r3, r1
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	3301      	adds	r3, #1
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e7ec      	b.n	8002762 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	3b01      	subs	r3, #1
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	3b01      	subs	r3, #1
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	441a      	add	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80027a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	3220      	adds	r2, #32
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	3301      	adds	r3, #1
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c4:	e7ba      	b.n	800273c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80027c8:	4618      	mov	r0, r3
 80027ca:	3738      	adds	r7, #56	; 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	0800e308 	.word	0x0800e308

080027ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	0800e26c 	.word	0x0800e26c

08002808 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68d8      	ldr	r0, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6891      	ldr	r1, [r2, #8]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
  };
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
  }
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <_ZN13STM32Hardware10getRdmaIndEv>:
	UART_HandleTypeDef *huart;

	const static uint16_t rbuflen = 512;
	uint8_t rbuf[rbuflen];
	uint32_t rind;
	inline uint32_t getRdmaInd(void) {
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
		return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a42      	ldr	r2, [pc, #264]	; (8002994 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d068      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a40      	ldr	r2, [pc, #256]	; (8002998 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d061      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3d      	ldr	r2, [pc, #244]	; (800299c <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d05a      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d053      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04c      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a36      	ldr	r2, [pc, #216]	; (80029a8 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a33      	ldr	r2, [pc, #204]	; (80029ac <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d03e      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d037      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a2e      	ldr	r2, [pc, #184]	; (80029b4 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d030      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d029      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a29      	ldr	r2, [pc, #164]	; (80029bc <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01b      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d014      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00d      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d006      	beq.n	8002960 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	e008      	b.n	8002986 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
	}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40020010 	.word	0x40020010
 8002998:	40020028 	.word	0x40020028
 800299c:	40020040 	.word	0x40020040
 80029a0:	40020058 	.word	0x40020058
 80029a4:	40020070 	.word	0x40020070
 80029a8:	40020088 	.word	0x40020088
 80029ac:	400200a0 	.word	0x400200a0
 80029b0:	400200b8 	.word	0x400200b8
 80029b4:	40020410 	.word	0x40020410
 80029b8:	40020428 	.word	0x40020428
 80029bc:	40020440 	.word	0x40020440
 80029c0:	40020458 	.word	0x40020458
 80029c4:	40020470 	.word	0x40020470
 80029c8:	40020488 	.word	0x40020488
 80029cc:	400204a0 	.word	0x400204a0
 80029d0:	400204b8 	.word	0x400204b8

080029d4 <_ZN13STM32HardwareC1Ev>:
	const static uint16_t tbuflen = 512;
	uint8_t tbuf[tbuflen];
	uint32_t twind, tfind;

public:
	STM32Hardware() :
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
			huart(&huart1), rind(0), twind(0), tfind(0) {
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <_ZN13STM32HardwareC1Ev+0x34>)
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	}
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	24000f4c 	.word	0x24000f4c

08002a0c <_ZN13STM32Hardware4initEv>:

	STM32Hardware(UART_HandleTypeDef *huart_) :
			huart(huart_), rind(0), twind(0), tfind(0) {
	}

	void init() {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
		reset_rbuf();
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f804 	bl	8002a22 <_ZN13STM32Hardware10reset_rbufEv>
	}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_ZN13STM32Hardware10reset_rbufEv>:

	void reset_rbuf(void) {
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a36:	4619      	mov	r1, r3
 8002a38:	f009 f962 	bl	800bd00 <HAL_UART_Receive_DMA>
	}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZN13STM32Hardware4readEv>:

	int read() {
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
		int c = -1;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a50:	60fb      	str	r3, [r7, #12]
		if (rind != getRdmaInd()) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff0d 	bl	8002878 <_ZN13STM32Hardware10getRdmaIndEv>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	429c      	cmp	r4, r3
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <_ZN13STM32Hardware4readEv+0x50>
			c = rbuf[rind++];
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a74:	1c59      	adds	r1, r3, #1
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]
			rind &= rbuflen - 1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		return c;
 8002a94:	68fb      	ldr	r3, [r7, #12]
	}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
	...

08002aa0 <_ZN13STM32Hardware5flushEv>:

	void flush(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
		static bool mutex = false;

		if ((huart->gState == HAL_UART_STATE_READY) && !mutex) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d108      	bne.n	8002ac6 <_ZN13STM32Hardware5flushEv+0x26>
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <_ZN13STM32Hardware5flushEv+0x26>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <_ZN13STM32Hardware5flushEv+0x28>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d03f      	beq.n	8002b4c <_ZN13STM32Hardware5flushEv+0xac>
			mutex = true;
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]

			if (twind != tfind) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d031      	beq.n	8002b46 <_ZN13STM32Hardware5flushEv+0xa6>
				uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d20a      	bcs.n	8002b08 <_ZN13STM32Hardware5flushEv+0x68>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	e006      	b.n	8002b16 <_ZN13STM32Hardware5flushEv+0x76>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	81fb      	strh	r3, [r7, #14]
				HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	89fa      	ldrh	r2, [r7, #14]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f009 f855 	bl	800bbdc <HAL_UART_Transmit_DMA>
				tfind = (tfind + len) & (tbuflen - 1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b38:	89fb      	ldrh	r3, [r7, #14]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			mutex = false;
 8002b46:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
		}
	}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	24000288 	.word	0x24000288

08002b58 <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t *data, int length) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
		int n = length;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	617b      	str	r3, [r7, #20]
		n = n <= tbuflen ? n : tbuflen;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6e:	bfa8      	it	ge
 8002b70:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b74:	617b      	str	r3, [r7, #20]

		int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b7c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	bf28      	it	cs
 8002b86:	4613      	movcs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
		memcpy(&(tbuf[twind]), data, n_tail);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00b f92d 	bl	800ddfc <memcpy>
		twind = (twind + n) & (tbuflen - 1);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4413      	add	r3, r2
 8002bac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

		if (n != n_tail) {
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d00b      	beq.n	8002bd6 <_ZN13STM32Hardware5writeEPhi+0x7e>
			memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	18d1      	adds	r1, r2, r3
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f00b f913 	bl	800ddfc <memcpy>
		}

		flush();
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff ff62 	bl	8002aa0 <_ZN13STM32Hardware5flushEv>
	}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZN13STM32Hardware4timeEv>:

	unsigned long time() {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();;
 8002bec:	f002 f920 	bl	8004e30 <HAL_GetTick>
 8002bf0:	4603      	mov	r3, r0
	}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE>:

ros::Subscriber<geometry_msgs::Twist> CarVelSub("Omni_Vgoal", ROS::GoalVel_CB);

ros::Publisher CarVelPub("Omni_Vnow", &CarVnow);

void ROS::GoalVel_CB(const geometry_msgs::Twist &msg) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	omni.SetGoalCarInfo(msg.linear.x, msg.linear.y, msg.angular.z);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	ed93 6b06 	vldr	d6, [r3, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8002c16:	eeb0 2b45 	vmov.f64	d2, d5
 8002c1a:	eeb0 1b46 	vmov.f64	d1, d6
 8002c1e:	eeb0 0b47 	vmov.f64	d0, d7
 8002c22:	4803      	ldr	r0, [pc, #12]	; (8002c30 <_ZN3ROS10GoalVel_CBERKN13geometry_msgs5TwistE+0x34>)
 8002c24:	f7fe f87e 	bl	8000d24 <_ZN4Omni14SetGoalCarInfoEddd>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	24000098 	.word	0x24000098

08002c34 <_ZN3ROS5setupEv>:

void ROS::setup() {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
	nh.initNode();
 8002c38:	4807      	ldr	r0, [pc, #28]	; (8002c58 <_ZN3ROS5setupEv+0x24>)
 8002c3a:	f000 f97d 	bl	8002f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(CarVelSub);
 8002c3e:	4907      	ldr	r1, [pc, #28]	; (8002c5c <_ZN3ROS5setupEv+0x28>)
 8002c40:	4805      	ldr	r0, [pc, #20]	; (8002c58 <_ZN3ROS5setupEv+0x24>)
 8002c42:	f000 f996 	bl	8002f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
	nh.advertise(CarVelPub);
 8002c46:	4906      	ldr	r1, [pc, #24]	; (8002c60 <_ZN3ROS5setupEv+0x2c>)
 8002c48:	4803      	ldr	r0, [pc, #12]	; (8002c58 <_ZN3ROS5setupEv+0x24>)
 8002c4a:	f000 f9bd 	bl	8002fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	HAL_TIM_Base_Start_IT(&htim7);
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <_ZN3ROS5setupEv+0x30>)
 8002c50:	f007 fcee 	bl	800a630 <HAL_TIM_Base_Start_IT>
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2400028c 	.word	0x2400028c
 8002c5c:	24000c28 	.word	0x24000c28
 8002c60:	24000c88 	.word	0x24000c88
 8002c64:	24000dd0 	.word	0x24000dd0

08002c68 <_ZN3ROS4loopEv>:

void ROS::loop() {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <_ZN3ROS4loopEv+0x10>)
 8002c6e:	f000 f9db 	bl	8003028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2400028c 	.word	0x2400028c

08002c7c <_ZN3ROS10PubCarVnowEv>:

void ROS::PubCarVnow() {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	NowCarInfo = omni.GetNowCarInfo();
 8002c80:	4813      	ldr	r0, [pc, #76]	; (8002cd0 <_ZN3ROS10PubCarVnowEv+0x54>)
 8002c82:	f7fe f99b 	bl	8000fbc <_ZN4Omni13GetNowCarInfoEv>
 8002c86:	eeb0 5b40 	vmov.f64	d5, d0
 8002c8a:	eeb0 6b41 	vmov.f64	d6, d1
 8002c8e:	eeb0 7b42 	vmov.f64	d7, d2
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002c94:	ed83 5b00 	vstr	d5, [r3]
 8002c98:	ed83 6b02 	vstr	d6, [r3, #8]
 8002c9c:	ed83 7b04 	vstr	d7, [r3, #16]

	CarVnow.linear.x = NowCarInfo.Vx;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	490c      	ldr	r1, [pc, #48]	; (8002cd8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002ca8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CarVnow.linear.y = NowCarInfo.Vy;
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002cae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cb2:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002cb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	CarVnow.angular.z = NowCarInfo.Omega;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <_ZN3ROS10PubCarVnowEv+0x58>)
 8002cba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cbe:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002cc0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	CarVelPub.publish(&CarVnow);
 8002cc4:	4904      	ldr	r1, [pc, #16]	; (8002cd8 <_ZN3ROS10PubCarVnowEv+0x5c>)
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <_ZN3ROS10PubCarVnowEv+0x60>)
 8002cc8:	f7ff fdb5 	bl	8002836 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	24000098 	.word	0x24000098
 8002cd4:	24000c10 	.word	0x24000c10
 8002cd8:	24000bc8 	.word	0x24000bc8
 8002cdc:	24000c88 	.word	0x24000c88

08002ce0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <HAL_UART_TxCpltCallback+0x20>)
 8002cea:	f000 fb76 	bl	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fed5 	bl	8002aa0 <_ZN13STM32Hardware5flushEv>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2400028c 	.word	0x2400028c

08002d04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8002d0c:	4805      	ldr	r0, [pc, #20]	; (8002d24 <HAL_UART_RxCpltCallback+0x20>)
 8002d0e:	f000 fb64 	bl	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fe84 	bl	8002a22 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2400028c 	.word	0x2400028c

08002d28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d80d      	bhi.n	8002d58 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	fa22 f103 	lsr.w	r1, r2, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b2ca      	uxtb	r2, r1
 8002d4e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e7ee      	b.n	8002d36 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d811      	bhi.n	8002da2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6839      	ldr	r1, [r7, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	440a      	add	r2, r1
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	00d2      	lsls	r2, r2, #3
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e7ea      	b.n	8002d78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	0800e370 	.word	0x0800e370

08002dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ffe8 	bl	8002db0 <_ZN3ros15NodeHandleBase_C1Ev>
 8002de0:	4a3a      	ldr	r2, [pc, #232]	; (8002ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fdf2 	bl	80029d4 <_ZN13STM32HardwareC1Ev>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fa40 	bl	8002284 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b18      	cmp	r3, #24
 8002e0c:	d80b      	bhi.n	8002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e7f0      	b.n	8002e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b18      	cmp	r3, #24
 8002e2e:	d80a      	bhi.n	8002e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3301      	adds	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e7f1      	b.n	8002e2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d20a      	bcs.n	8002e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e7f0      	b.n	8002e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e72:	d20a      	bcs.n	8002e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	e7f0      	b.n	8002e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	0800e344 	.word	0x0800e344

08002ed0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	0800e358 	.word	0x0800e358

08002ef0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ffe5 	bl	8002ed0 <_ZN3ros11Subscriber_C1Ev>
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3310      	adds	r3, #16
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fdbd 	bl	8001a90 <_ZN13geometry_msgs5TwistC1Ev>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	609a      	str	r2, [r3, #8]
  };
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	0800e32c 	.word	0x0800e32c

08002f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fd61 	bl	8002a0c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b18      	cmp	r3, #24
 8002f84:	dc19      	bgt.n	8002fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10d      	bne.n	8002fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002f96:	6839      	ldr	r1, [r7, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	605a      	str	r2, [r3, #4]
        return true;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e004      	b.n	8002fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e7e2      	b.n	8002f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002fba:	2300      	movs	r3, #0
  }
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b18      	cmp	r3, #24
 8002fda:	dc1e      	bgt.n	800301a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d111      	bne.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	60da      	str	r2, [r3, #12]
        return true;
 800300e:	2301      	movs	r3, #1
 8003010:	e004      	b.n	800301c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e7dd      	b.n	8002fd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800301a:	2300      	movs	r3, #0
  }
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fdd5 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 800303a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800304a:	4293      	cmp	r3, r2
 800304c:	d903      	bls.n	8003056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d903      	bls.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800307a:	2b00      	cmp	r3, #0
 800307c:	d014      	beq.n	80030a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fdae 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003094:	429a      	cmp	r2, r3
 8003096:	bf8c      	ite	hi
 8003098:	2301      	movhi	r3, #1
 800309a:	2300      	movls	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80030a2:	f06f 0301 	mvn.w	r3, #1
 80030a6:	e194      	b.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fcc9 	bl	8002a44 <_ZN13STM32Hardware4readEv>
 80030b2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f2c0 8174 	blt.w	80033a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030d2:	2b07      	cmp	r3, #7
 80030d4:	d11e      	bne.n	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80030dc:	1c59      	adds	r1, r3, #1
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	b2d1      	uxtb	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	460a      	mov	r2, r1
 80030ee:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80030f8:	1e5a      	subs	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1b4      	bne.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003112:	e7af      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800311a:	2b00      	cmp	r3, #0
 800311c:	d128      	bne.n	8003170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2bff      	cmp	r3, #255	; 0xff
 8003122:	d10d      	bne.n	8003140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f103 0214 	add.w	r2, r3, #20
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800313e:	e799      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fd4d 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 800314a:	4602      	mov	r2, r0
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	bf8c      	ite	hi
 8003158:	2301      	movhi	r3, #1
 800315a:	2300      	movls	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d088      	beq.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800316a:	f06f 0301 	mvn.w	r3, #1
 800316e:	e130      	b.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003176:	2b01      	cmp	r3, #1
 8003178:	d118      	bne.n	80031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2bfe      	cmp	r3, #254	; 0xfe
 800317e:	d107      	bne.n	8003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800318e:	e771      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f47f af68 	bne.w	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f924 	bl	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80031aa:	e763      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d113      	bne.n	80031de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80031dc:	e74a      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d110      	bne.n	800320a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	441a      	add	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003208:	e734      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003210:	2b04      	cmp	r3, #4
 8003212:	d116      	bne.n	8003242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800321a:	425a      	negs	r2, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	bf58      	it	pl
 8003222:	4253      	negpl	r3, r2
 8003224:	2bff      	cmp	r3, #255	; 0xff
 8003226:	d107      	bne.n	8003238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003236:	e71d      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003240:	e718      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003248:	2b05      	cmp	r3, #5
 800324a:	d10f      	bne.n	800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800326a:	e703      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003272:	2b06      	cmp	r3, #6
 8003274:	d117      	bne.n	80032a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2207      	movs	r2, #7
 800328c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f aeec 	bne.w	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2208      	movs	r2, #8
 80032a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032a4:	e6e6      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	f47f aee1 	bne.w	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80032c0:	425a      	negs	r2, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	bf58      	it	pl
 80032c8:	4253      	negpl	r3, r2
 80032ca:	2bff      	cmp	r3, #255	; 0xff
 80032cc:	f47f aed2 	bne.w	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d110      	bne.n	80032fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f889 	bl	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f8a4 	bl	800342e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032fa:	e06a      	b.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d107      	bne.n	8003316 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f96c 	bl	80035ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003314:	e6ae      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800331c:	2b06      	cmp	r3, #6
 800331e:	d10e      	bne.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f7ff f8dd 	bl	80024ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800333c:	e69a      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003344:	2b0b      	cmp	r3, #11
 8003346:	d104      	bne.n	8003352 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003350:	e690      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003358:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f43f ae84 	beq.w	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003372:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f202 2222 	addw	r2, r2, #546	; 0x222
 800337c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003386:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800339e:	4611      	mov	r1, r2
 80033a0:	4798      	blx	r3
    while (true)
 80033a2:	e667      	b.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80033a4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00f      	beq.n	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80033be:	4293      	cmp	r3, r2
 80033c0:	d906      	bls.n	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f815 	bl	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80033d0:	2300      	movs	r3, #0
  }
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
  }
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fbdc 	bl	8001bbc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f107 020c 	add.w	r2, r7, #12
 800340e:	210a      	movs	r1, #10
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
    rt_time = hardware_.time();
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fbe3 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800342e:	b590      	push	{r4, r7, lr}
 8003430:	b08b      	sub	sp, #44	; 0x2c
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003436:	f107 030c 	add.w	r3, r7, #12
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fcae 	bl	8001d9c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2b18      	cmp	r3, #24
 8003448:	dc63      	bgt.n	8003512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d056      	beq.n	800350a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	b29b      	uxth	r3, r3
 800346e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4798      	blx	r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4608      	mov	r0, r1
 80034d8:	4798      	blx	r3
 80034da:	4603      	mov	r3, r0
 80034dc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80034de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681c      	ldr	r4, [r3, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f9b0 	bl	800285e <_ZN3ros9Publisher15getEndpointTypeEv>
 80034fe:	4601      	mov	r1, r0
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	461a      	mov	r2, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	e798      	b.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	2b18      	cmp	r3, #24
 800351a:	dc5f      	bgt.n	80035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d053      	beq.n	80035d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	b29b      	uxth	r3, r3
 800353c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003556:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3308      	adds	r3, #8
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4608      	mov	r0, r1
 800356e:	4798      	blx	r3
 8003570:	4603      	mov	r3, r0
 8003572:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	f202 2222 	addw	r2, r2, #546	; 0x222
 800357c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4608      	mov	r0, r1
 8003594:	4798      	blx	r3
 8003596:	4603      	mov	r3, r0
 8003598:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800359a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681c      	ldr	r4, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3304      	adds	r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4798      	blx	r3
 80035c8:	4601      	mov	r1, r0
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	461a      	mov	r2, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	3301      	adds	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	e79c      	b.n	8003516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80035e4:	bf00      	nop
 80035e6:	372c      	adds	r7, #44	; 0x2c
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}

080035ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fade 	bl	8001bbc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff faed 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 800360a:	4602      	mov	r2, r0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fb3d 	bl	8001c9c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4915      	ldr	r1, [pc, #84]	; (800367c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003628:	fba1 1303 	umull	r1, r3, r1, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003632:	6939      	ldr	r1, [r7, #16]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003638:	fba3 0302 	umull	r0, r3, r3, r2
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003642:	fb00 f303 	mul.w	r3, r0, r3
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	440b      	add	r3, r1
 8003650:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003652:	f107 0308 	add.w	r3, r7, #8
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8a6 	bl	80037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fabd 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	10624dd3 	.word	0x10624dd3
 8003680:	000f4240 	.word	0x000f4240

08003684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b63      	cmp	r3, #99	; 0x63
 8003694:	dd09      	ble.n	80036aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800369c:	f083 0301 	eor.w	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e079      	b.n	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80036b6:	3207      	adds	r2, #7
 80036b8:	4611      	mov	r1, r2
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
 80036be:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	22fe      	movs	r2, #254	; 0xfe
 80036cc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80036f6:	4413      	add	r3, r2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	b21b      	sxth	r3, r3
 8003712:	121b      	asrs	r3, r3, #8
 8003714:	b21b      	sxth	r3, r3
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003722:	2305      	movs	r3, #5
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3306      	adds	r3, #6
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	dc0d      	bgt.n	800374c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	3301      	adds	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e7ec      	b.n	8003726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3307      	adds	r3, #7
 8003750:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	425a      	negs	r2, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	bf58      	it	pl
 800375c:	4253      	negpl	r3, r2
 800375e:	b2da      	uxtb	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	6179      	str	r1, [r7, #20]
 8003766:	43d2      	mvns	r2, r2
 8003768:	b2d1      	uxtb	r1, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	460a      	mov	r2, r1
 8003770:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377a:	dc0a      	bgt.n	8003792 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1d18      	adds	r0, r3, #4
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4619      	mov	r1, r3
 800378a:	f7ff f9e5 	bl	8002b58 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	e005      	b.n	800379e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003792:	4905      	ldr	r1, [pc, #20]	; (80037a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f849 	bl	800382c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800379e:	4618      	mov	r0, r3
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	0800e290 	.word	0x0800e290

080037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fa12 	bl	8002be4 <_ZN13STM32Hardware4timeEv>
 80037c0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4915      	ldr	r1, [pc, #84]	; (8003820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037ca:	fba1 1303 	umull	r1, r3, r1, r3
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80037e2:	fba3 0302 	umull	r0, r3, r3, r2
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ec:	fb00 f303 	mul.w	r3, r0, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	1aca      	subs	r2, r1, r3
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80037fc:	4413      	add	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7fc ff06 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	10624dd3 	.word	0x10624dd3
 8003824:	000f4240 	.word	0x000f4240
 8003828:	3b9aca00 	.word	0x3b9aca00

0800382c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	2103      	movs	r1, #3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f804 	bl	8003848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	460b      	mov	r3, r1
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fc62 	bl	8002124 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003860:	7afb      	ldrb	r3, [r7, #11]
 8003862:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f107 0214 	add.w	r2, r7, #20
 8003872:	2107      	movs	r1, #7
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	4798      	blx	r3
  }
 8003878:	bf00      	nop
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_Z41__static_initialization_and_destruction_0ii>:

void ROS::init(void) {
//	nh.getHardware()->init();
}
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d116      	bne.n	80038be <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003896:	4293      	cmp	r3, r2
 8003898:	d111      	bne.n	80038be <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800389a:	480b      	ldr	r0, [pc, #44]	; (80038c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800389c:	f7ff fa98 	bl	8002dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist CarVnow;
 80038a0:	480a      	ldr	r0, [pc, #40]	; (80038cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80038a2:	f7fe f8f5 	bl	8001a90 <_ZN13geometry_msgs5TwistC1Ev>
ros::Subscriber<geometry_msgs::Twist> CarVelSub("Omni_Vgoal", ROS::GoalVel_CB);
 80038a6:	2301      	movs	r3, #1
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80038ac:	480a      	ldr	r0, [pc, #40]	; (80038d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80038ae:	f7ff fb1f 	bl	8002ef0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher CarVelPub("Omni_Vnow", &CarVnow);
 80038b2:	2300      	movs	r3, #0
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80038b6:	4909      	ldr	r1, [pc, #36]	; (80038dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80038ba:	f7fe ffa5 	bl	8002808 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	2400028c 	.word	0x2400028c
 80038cc:	24000bc8 	.word	0x24000bc8
 80038d0:	08002bfd 	.word	0x08002bfd
 80038d4:	0800e2cc 	.word	0x0800e2cc
 80038d8:	24000c28 	.word	0x24000c28
 80038dc:	0800e2d8 	.word	0x0800e2d8
 80038e0:	24000c88 	.word	0x24000c88

080038e4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3310      	adds	r3, #16
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe f90d 	bl	8001b14 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	3210      	adds	r2, #16
 8003902:	4610      	mov	r0, r2
 8003904:	4798      	blx	r3
  }
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3310      	adds	r3, #16
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe f914 	bl	8001b60 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003938:	4603      	mov	r3, r0
  }
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3310      	adds	r3, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f914 	bl	8001b7c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003954:	4603      	mov	r3, r0
  }
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
    return configured_;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_GLOBAL__sub_I_nh>:
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
 800397c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003980:	2001      	movs	r0, #1
 8003982:	f7ff ff7d 	bl	8003880 <_Z41__static_initialization_and_destruction_0ii>
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim12;

// Count ROS frequency.
static int ROS_CAR_FREQUENCY = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_PeriodElapsedCallback+0x58>

		// Update Car Vnow
		omni.UpdateNowCarInfo();
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800399c:	f7fd f963 	bl	8000c66 <_ZN4Omni16UpdateNowCarInfoEv>

		// Update four wheel's PID value.
		omni.Update_PID();
 80039a0:	4816      	ldr	r0, [pc, #88]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039a2:	f7fd f9df 	bl	8000d64 <_ZN4Omni10Update_PIDEv>

		// Output GPIO and PWM
		omni.Move();
 80039a6:	4815      	ldr	r0, [pc, #84]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039a8:	f7fd fa12 	bl	8000dd0 <_ZN4Omni4MoveEv>

		// Debug from Live Expressions ( Optional )
		omni.SetMotorVgoal();
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039ae:	f7fd faab 	bl	8000f08 <_ZN4Omni13SetMotorVgoalEv>

		// ROS pub -> Mecanum
		if (++ROS_CAR_FREQUENCY >= ROS_CAR_PUB_FREQUENCY) {
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b09      	cmp	r3, #9
 80039c2:	bfcc      	ite	gt
 80039c4:	2301      	movgt	r3, #1
 80039c6:	2300      	movle	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00f      	beq.n	80039ee <HAL_TIM_PeriodElapsedCallback+0x66>
			ROS_CAR_FREQUENCY = 0;
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
			omni.Get_Car_location();
 80039d4:	4809      	ldr	r0, [pc, #36]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80039d6:	f7fd f923 	bl	8000c20 <_ZN4Omni16Get_Car_locationEv>
			ROS::PubCarVnow();
 80039da:	f7ff f94f 	bl	8002c7c <_ZN3ROS10PubCarVnowEv>
		}
	}
	else if (htim->Instance == TIM7) {
		ROS::loop();
	}
}
 80039de:	e006      	b.n	80039ee <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (htim->Instance == TIM7) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_PeriodElapsedCallback+0x66>
		ROS::loop();
 80039ea:	f7ff f93d 	bl	8002c68 <_ZN3ROS4loopEv>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40001c00 	.word	0x40001c00
 80039fc:	24000098 	.word	0x24000098
 8003a00:	24000c9c 	.word	0x24000c9c
 8003a04:	40001400 	.word	0x40001400

08003a08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a0c:	f001 f98a 	bl	8004d24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003a10:	f000 f81c 	bl	8003a4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003a14:	f000 fc2a 	bl	800426c <MX_GPIO_Init>
	MX_TIM2_Init();
 8003a18:	f000 f888 	bl	8003b2c <MX_TIM2_Init>
	MX_TIM3_Init();
 8003a1c:	f000 f8da 	bl	8003bd4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003a20:	f000 f92e 	bl	8003c80 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003a24:	f000 f982 	bl	8003d2c <MX_TIM5_Init>
	MX_TIM12_Init();
 8003a28:	f000 fa9e 	bl	8003f68 <MX_TIM12_Init>
	MX_TIM15_Init();
 8003a2c:	f000 fb10 	bl	8004050 <MX_TIM15_Init>
	MX_TIM13_Init();
 8003a30:	f000 faea 	bl	8004008 <MX_TIM13_Init>
	MX_DMA_Init();
 8003a34:	f000 fbf2 	bl	800421c <MX_DMA_Init>
	MX_USART1_UART_Init();
 8003a38:	f000 fb9c 	bl	8004174 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003a3c:	f000 f9cc 	bl	8003dd8 <MX_TIM7_Init>
	MX_TIM8_Init();
 8003a40:	f000 fa00 	bl	8003e44 <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */

	main_function();
 8003a44:	f000 fcde 	bl	8004404 <main_function>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003a48:	e7fe      	b.n	8003a48 <main+0x40>
	...

08003a4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b09c      	sub	sp, #112	; 0x70
 8003a50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a56:	224c      	movs	r2, #76	; 0x4c
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f00a f9dc 	bl	800de18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	2220      	movs	r2, #32
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f00a f9d6 	bl	800de18 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f004 faf7 	bl	8008060 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a72:	2300      	movs	r3, #0
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <SystemClock_Config+0xdc>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <SystemClock_Config+0xdc>)
 8003a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a84:	6193      	str	r3, [r2, #24]
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <SystemClock_Config+0xdc>)
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8003a92:	bf00      	nop
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <SystemClock_Config+0xdc>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa0:	d1f8      	bne.n	8003a94 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003aac:	2302      	movs	r3, #2
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 256;
 8003ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003aca:	2304      	movs	r3, #4
 8003acc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 fafa 	bl	80080d4 <HAL_RCC_OscConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <SystemClock_Config+0x9e>
		Error_Handler();
 8003ae6:	f000 fc87 	bl	80043f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8003aea:	233f      	movs	r3, #63	; 0x3f
 8003aec:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aee:	2303      	movs	r3, #3
 8003af0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003af6:	2308      	movs	r3, #8
 8003af8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003afa:	2340      	movs	r3, #64	; 0x40
 8003afc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003afe:	2340      	movs	r3, #64	; 0x40
 8003b00:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b06:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003b08:	2340      	movs	r3, #64	; 0x40
 8003b0a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	2102      	movs	r1, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 fe8d 	bl	8008830 <HAL_RCC_ClockConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <SystemClock_Config+0xd4>
		Error_Handler();
 8003b1c:	f000 fc6c 	bl	80043f8 <Error_Handler>
	}
}
 8003b20:	bf00      	nop
 8003b22:	3770      	adds	r7, #112	; 0x70
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	58024800 	.word	0x58024800

08003b2c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08c      	sub	sp, #48	; 0x30
 8003b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003b32:	f107 030c 	add.w	r3, r7, #12
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f00a f96c 	bl	800de18 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b40:	463b      	mov	r3, r7
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b50:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003b52:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b64:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b72:	2303      	movs	r3, #3
 8003b74:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	480c      	ldr	r0, [pc, #48]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003b9e:	f006 ff41 	bl	800aa24 <HAL_TIM_Encoder_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM2_Init+0x80>
		Error_Handler();
 8003ba8:	f000 fc26 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4805      	ldr	r0, [pc, #20]	; (8003bd0 <MX_TIM2_Init+0xa4>)
 8003bba:	f007 fe65 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM2_Init+0x9c>
		Error_Handler();
 8003bc4:	f000 fc18 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003bc8:	bf00      	nop
 8003bca:	3730      	adds	r7, #48	; 0x30
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	24000ca0 	.word	0x24000ca0

08003bd4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f00a f918 	bl	800de18 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003be8:	463b      	mov	r3, r7
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003bf4:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <MX_TIM3_Init+0xa8>)
 8003bf6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003c04:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c20:	2301      	movs	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c30:	2301      	movs	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	480d      	ldr	r0, [pc, #52]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003c44:	f006 feee 	bl	800aa24 <HAL_TIM_Encoder_Init>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8003c4e:	f000 fbd3 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4806      	ldr	r0, [pc, #24]	; (8003c78 <MX_TIM3_Init+0xa4>)
 8003c60:	f007 fe12 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_TIM3_Init+0x9a>
		Error_Handler();
 8003c6a:	f000 fbc5 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003c6e:	bf00      	nop
 8003c70:	3730      	adds	r7, #48	; 0x30
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	24000cec 	.word	0x24000cec
 8003c7c:	40000400 	.word	0x40000400

08003c80 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00a f8c2 	bl	800de18 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c94:	463b      	mov	r3, r7
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003ca0:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <MX_TIM4_Init+0xa8>)
 8003ca2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003ce8:	f107 030c 	add.w	r3, r7, #12
 8003cec:	4619      	mov	r1, r3
 8003cee:	480d      	ldr	r0, [pc, #52]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003cf0:	f006 fe98 	bl	800aa24 <HAL_TIM_Encoder_Init>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <MX_TIM4_Init+0x7e>
		Error_Handler();
 8003cfa:	f000 fb7d 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003d06:	463b      	mov	r3, r7
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4806      	ldr	r0, [pc, #24]	; (8003d24 <MX_TIM4_Init+0xa4>)
 8003d0c:	f007 fdbc 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_TIM4_Init+0x9a>
		Error_Handler();
 8003d16:	f000 fb6f 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003d1a:	bf00      	nop
 8003d1c:	3730      	adds	r7, #48	; 0x30
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	24000d38 	.word	0x24000d38
 8003d28:	40000800 	.word	0x40000800

08003d2c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d32:	f107 030c 	add.w	r3, r7, #12
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00a f86c 	bl	800de18 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d40:	463b      	mov	r3, r7
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d4c:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <MX_TIM5_Init+0xa8>)
 8003d4e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d62:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d64:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d70:	2303      	movs	r3, #3
 8003d72:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	4619      	mov	r1, r3
 8003d9a:	480d      	ldr	r0, [pc, #52]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003d9c:	f006 fe42 	bl	800aa24 <HAL_TIM_Encoder_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_TIM5_Init+0x7e>
		Error_Handler();
 8003da6:	f000 fb27 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003daa:	2300      	movs	r3, #0
 8003dac:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003db2:	463b      	mov	r3, r7
 8003db4:	4619      	mov	r1, r3
 8003db6:	4806      	ldr	r0, [pc, #24]	; (8003dd0 <MX_TIM5_Init+0xa4>)
 8003db8:	f007 fd66 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM5_Init+0x9a>
		Error_Handler();
 8003dc2:	f000 fb19 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8003dc6:	bf00      	nop
 8003dc8:	3730      	adds	r7, #48	; 0x30
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	24000d84 	.word	0x24000d84
 8003dd4:	40000c00 	.word	0x40000c00

08003dd8 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <MX_TIM7_Init+0x68>)
 8003dec:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 127;
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003df0:	227f      	movs	r2, #127	; 0x7f
 8003df2:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9999;
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003dfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e00:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003e08:	480c      	ldr	r0, [pc, #48]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003e0a:	f006 fbb9 	bl	800a580 <HAL_TIM_Base_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003e14:	f000 faf0 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4805      	ldr	r0, [pc, #20]	; (8003e3c <MX_TIM7_Init+0x64>)
 8003e26:	f007 fd2f 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM7_Init+0x5c>
		Error_Handler();
 8003e30:	f000 fae2 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	24000dd0 	.word	0x24000dd0
 8003e40:	40001400 	.word	0x40001400

08003e44 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b098      	sub	sp, #96	; 0x60
 8003e48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	2234      	movs	r2, #52	; 0x34
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f009 ffd1 	bl	800de18 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8003e76:	4b3a      	ldr	r3, [pc, #232]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003e78:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <MX_TIM8_Init+0x120>)
 8003e7a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 12799;
 8003e7c:	4b38      	ldr	r3, [pc, #224]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003e7e:	f243 12ff 	movw	r2, #12799	; 0x31ff
 8003e82:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 9999;
 8003e8a:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003e8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e90:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e92:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8003e98:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e9e:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8003ea4:	482e      	ldr	r0, [pc, #184]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003ea6:	f006 fc49 	bl	800a73c <HAL_TIM_PWM_Init>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_TIM8_Init+0x70>
		Error_Handler();
 8003eb0:	f000 faa2 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8003ec0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4826      	ldr	r0, [pc, #152]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003ec8:	f007 fcde 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM8_Init+0x92>
		Error_Handler();
 8003ed2:	f000 fa91 	bl	80043f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ed6:	2360      	movs	r3, #96	; 0x60
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 5000;
 8003eda:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003ef4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4619      	mov	r1, r3
 8003efc:	4818      	ldr	r0, [pc, #96]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003efe:	f006 ffe5 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM8_Init+0xc8>
		Error_Handler();
 8003f08:	f000 fa76 	bl	80043f8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f24:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8003f3c:	1d3b      	adds	r3, r7, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4807      	ldr	r0, [pc, #28]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003f42:	f007 fd3d 	bl	800b9c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM8_Init+0x10c>
		Error_Handler();
 8003f4c:	f000 fa54 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8003f50:	4803      	ldr	r0, [pc, #12]	; (8003f60 <MX_TIM8_Init+0x11c>)
 8003f52:	f000 fc2d 	bl	80047b0 <HAL_TIM_MspPostInit>

}
 8003f56:	bf00      	nop
 8003f58:	3760      	adds	r7, #96	; 0x60
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	24000e1c 	.word	0x24000e1c
 8003f64:	40010400 	.word	0x40010400

08003f68 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
 8003f7c:	615a      	str	r2, [r3, #20]
 8003f7e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8003f80:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <MX_TIM12_Init+0x98>)
 8003f82:	4a20      	ldr	r2, [pc, #128]	; (8004004 <MX_TIM12_Init+0x9c>)
 8003f84:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <MX_TIM12_Init+0x98>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <MX_TIM12_Init+0x98>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 3199;
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <MX_TIM12_Init+0x98>)
 8003f94:	f640 427f 	movw	r2, #3199	; 0xc7f
 8003f98:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <MX_TIM12_Init+0x98>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <MX_TIM12_Init+0x98>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8003fa6:	4816      	ldr	r0, [pc, #88]	; (8004000 <MX_TIM12_Init+0x98>)
 8003fa8:	f006 fbc8 	bl	800a73c <HAL_TIM_PWM_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM12_Init+0x4e>
		Error_Handler();
 8003fb2:	f000 fa21 	bl	80043f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fb6:	2360      	movs	r3, #96	; 0x60
 8003fb8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4619      	mov	r1, r3
 8003fcc:	480c      	ldr	r0, [pc, #48]	; (8004000 <MX_TIM12_Init+0x98>)
 8003fce:	f006 ff7d 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <MX_TIM12_Init+0x74>
		Error_Handler();
 8003fd8:	f000 fa0e 	bl	80043f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	2204      	movs	r2, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <MX_TIM12_Init+0x98>)
 8003fe4:	f006 ff72 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM12_Init+0x8a>
		Error_Handler();
 8003fee:	f000 fa03 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8003ff2:	4803      	ldr	r0, [pc, #12]	; (8004000 <MX_TIM12_Init+0x98>)
 8003ff4:	f000 fbdc 	bl	80047b0 <HAL_TIM_MspPostInit>

}
 8003ff8:	bf00      	nop
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	24000e68 	.word	0x24000e68
 8004004:	40001800 	.word	0x40001800

08004008 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800400c:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <MX_TIM13_Init+0x40>)
 800400e:	4a0f      	ldr	r2, [pc, #60]	; (800404c <MX_TIM13_Init+0x44>)
 8004010:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 127;
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <MX_TIM13_Init+0x40>)
 8004014:	227f      	movs	r2, #127	; 0x7f
 8004016:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <MX_TIM13_Init+0x40>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <MX_TIM13_Init+0x40>)
 8004020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004024:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <MX_TIM13_Init+0x40>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <MX_TIM13_Init+0x40>)
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8004032:	4805      	ldr	r0, [pc, #20]	; (8004048 <MX_TIM13_Init+0x40>)
 8004034:	f006 faa4 	bl	800a580 <HAL_TIM_Base_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800403e:	f000 f9db 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	24000eb4 	.word	0x24000eb4
 800404c:	40001c00 	.word	0x40001c00

08004050 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b098      	sub	sp, #96	; 0x60
 8004054:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004056:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	615a      	str	r2, [r3, #20]
 8004074:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2234      	movs	r2, #52	; 0x34
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f009 fecb 	bl	800de18 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8004082:	4b3a      	ldr	r3, [pc, #232]	; (800416c <MX_TIM15_Init+0x11c>)
 8004084:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <MX_TIM15_Init+0x120>)
 8004086:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8004088:	4b38      	ldr	r3, [pc, #224]	; (800416c <MX_TIM15_Init+0x11c>)
 800408a:	2200      	movs	r2, #0
 800408c:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408e:	4b37      	ldr	r3, [pc, #220]	; (800416c <MX_TIM15_Init+0x11c>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 3199;
 8004094:	4b35      	ldr	r3, [pc, #212]	; (800416c <MX_TIM15_Init+0x11c>)
 8004096:	f640 427f 	movw	r2, #3199	; 0xc7f
 800409a:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409c:	4b33      	ldr	r3, [pc, #204]	; (800416c <MX_TIM15_Init+0x11c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 80040a2:	4b32      	ldr	r3, [pc, #200]	; (800416c <MX_TIM15_Init+0x11c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <MX_TIM15_Init+0x11c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80040ae:	482f      	ldr	r0, [pc, #188]	; (800416c <MX_TIM15_Init+0x11c>)
 80040b0:	f006 fb44 	bl	800a73c <HAL_TIM_PWM_Init>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM15_Init+0x6e>
		Error_Handler();
 80040ba:	f000 f99d 	bl	80043f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK) {
 80040c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040ca:	4619      	mov	r1, r3
 80040cc:	4827      	ldr	r0, [pc, #156]	; (800416c <MX_TIM15_Init+0x11c>)
 80040ce:	f007 fbdb 	bl	800b888 <HAL_TIMEx_MasterConfigSynchronization>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM15_Init+0x8c>
		Error_Handler();
 80040d8:	f000 f98e 	bl	80043f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040dc:	2360      	movs	r3, #96	; 0x60
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e4:	2300      	movs	r3, #0
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040e8:	2300      	movs	r3, #0
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80040f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040fc:	2200      	movs	r2, #0
 80040fe:	4619      	mov	r1, r3
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <MX_TIM15_Init+0x11c>)
 8004102:	f006 fee3 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM15_Init+0xc0>
		Error_Handler();
 800410c:	f000 f974 	bl	80043f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004114:	2204      	movs	r2, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4814      	ldr	r0, [pc, #80]	; (800416c <MX_TIM15_Init+0x11c>)
 800411a:	f006 fed7 	bl	800aecc <HAL_TIM_PWM_ConfigChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM15_Init+0xd8>
		Error_Handler();
 8004124:	f000 f968 	bl	80043f8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800413c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004140:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004146:	2300      	movs	r3, #0
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <MX_TIM15_Init+0x11c>)
 8004150:	f007 fc36 	bl	800b9c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM15_Init+0x10e>
		Error_Handler();
 800415a:	f000 f94d 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 800415e:	4803      	ldr	r0, [pc, #12]	; (800416c <MX_TIM15_Init+0x11c>)
 8004160:	f000 fb26 	bl	80047b0 <HAL_TIM_MspPostInit>

}
 8004164:	bf00      	nop
 8004166:	3760      	adds	r7, #96	; 0x60
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	24000f00 	.word	0x24000f00
 8004170:	40014000 	.word	0x40014000

08004174 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004178:	4b26      	ldr	r3, [pc, #152]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 800417a:	4a27      	ldr	r2, [pc, #156]	; (8004218 <MX_USART1_UART_Init+0xa4>)
 800417c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 8004180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004184:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 800419a:	220c      	movs	r2, #12
 800419c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041b8:	2240      	movs	r2, #64	; 0x40
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
	huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44
	huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	649a      	str	r2, [r3, #72]	; 0x48
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80041ca:	4812      	ldr	r0, [pc, #72]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041cc:	f007 fcb6 	bl	800bb3c <HAL_UART_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_USART1_UART_Init+0x66>
		Error_Handler();
 80041d6:	f000 f90f 	bl	80043f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80041da:	2100      	movs	r1, #0
 80041dc:	480d      	ldr	r0, [pc, #52]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041de:	f009 fcfd 	bl	800dbdc <HAL_UARTEx_SetTxFifoThreshold>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_USART1_UART_Init+0x78>
		Error_Handler();
 80041e8:	f000 f906 	bl	80043f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80041ec:	2100      	movs	r1, #0
 80041ee:	4809      	ldr	r0, [pc, #36]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 80041f0:	f009 fd32 	bl	800dc58 <HAL_UARTEx_SetRxFifoThreshold>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_USART1_UART_Init+0x8a>
		Error_Handler();
 80041fa:	f000 f8fd 	bl	80043f8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80041fe:	4805      	ldr	r0, [pc, #20]	; (8004214 <MX_USART1_UART_Init+0xa0>)
 8004200:	f009 fcb3 	bl	800db6a <HAL_UARTEx_DisableFifoMode>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_USART1_UART_Init+0x9a>
		Error_Handler();
 800420a:	f000 f8f5 	bl	80043f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	24000f4c 	.word	0x24000f4c
 8004218:	40011000 	.word	0x40011000

0800421c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <MX_DMA_Init+0x4c>)
 8004224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004228:	4a0f      	ldr	r2, [pc, #60]	; (8004268 <MX_DMA_Init+0x4c>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <MX_DMA_Init+0x4c>)
 8004234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004240:	2200      	movs	r2, #0
 8004242:	2100      	movs	r1, #0
 8004244:	200b      	movs	r0, #11
 8004246:	f000 feda 	bl	8004ffe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800424a:	200b      	movs	r0, #11
 800424c:	f000 fef1 	bl	8005032 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	200c      	movs	r0, #12
 8004256:	f000 fed2 	bl	8004ffe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800425a:	200c      	movs	r0, #12
 800425c:	f000 fee9 	bl	8005032 <HAL_NVIC_EnableIRQ>

}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	58024400 	.word	0x58024400

0800426c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	; 0x30
 8004270:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004272:	f107 031c 	add.w	r3, r7, #28
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <MX_GPIO_Init+0x178>)
 8004284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004288:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <MX_GPIO_Init+0x178>)
 800428a:	f043 0310 	orr.w	r3, r3, #16
 800428e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <MX_GPIO_Init+0x178>)
 8004294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a6:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042b0:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c4:	4a47      	ldr	r2, [pc, #284]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ce:	4b45      	ldr	r3, [pc, #276]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80042dc:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	4a40      	ldr	r2, [pc, #256]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ec:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <MX_GPIO_Init+0x178>)
 80042fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004300:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <MX_GPIO_Init+0x178>)
 8004302:	f043 0302 	orr.w	r3, r3, #2
 8004306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <MX_GPIO_Init+0x178>)
 800430c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004318:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <MX_GPIO_Init+0x178>)
 800431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431e:	4a31      	ldr	r2, [pc, #196]	; (80043e4 <MX_GPIO_Init+0x178>)
 8004320:	f043 0308 	orr.w	r3, r3, #8
 8004324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <MX_GPIO_Init+0x178>)
 800432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8004336:	2200      	movs	r2, #0
 8004338:	2108      	movs	r1, #8
 800433a:	482b      	ldr	r0, [pc, #172]	; (80043e8 <MX_GPIO_Init+0x17c>)
 800433c:	f003 fe76 	bl	800802c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004346:	4829      	ldr	r0, [pc, #164]	; (80043ec <MX_GPIO_Init+0x180>)
 8004348:	f003 fe70 	bl	800802c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004352:	4827      	ldr	r0, [pc, #156]	; (80043f0 <MX_GPIO_Init+0x184>)
 8004354:	f003 fe6a 	bl	800802c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800435e:	4825      	ldr	r0, [pc, #148]	; (80043f4 <MX_GPIO_Init+0x188>)
 8004360:	f003 fe64 	bl	800802c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004364:	2308      	movs	r3, #8
 8004366:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004368:	2301      	movs	r3, #1
 800436a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004374:	f107 031c 	add.w	r3, r7, #28
 8004378:	4619      	mov	r1, r3
 800437a:	481b      	ldr	r0, [pc, #108]	; (80043e8 <MX_GPIO_Init+0x17c>)
 800437c:	f003 fcae 	bl	8007cdc <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004384:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004386:	2301      	movs	r3, #1
 8004388:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438a:	2300      	movs	r3, #0
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438e:	2300      	movs	r3, #0
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004392:	f107 031c 	add.w	r3, r7, #28
 8004396:	4619      	mov	r1, r3
 8004398:	4814      	ldr	r0, [pc, #80]	; (80043ec <MX_GPIO_Init+0x180>)
 800439a:	f003 fc9f 	bl	8007cdc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800439e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a4:	2301      	movs	r3, #1
 80043a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	4619      	mov	r1, r3
 80043b6:	480e      	ldr	r0, [pc, #56]	; (80043f0 <MX_GPIO_Init+0x184>)
 80043b8:	f003 fc90 	bl	8007cdc <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043c2:	2301      	movs	r3, #1
 80043c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043ce:	f107 031c 	add.w	r3, r7, #28
 80043d2:	4619      	mov	r1, r3
 80043d4:	4807      	ldr	r0, [pc, #28]	; (80043f4 <MX_GPIO_Init+0x188>)
 80043d6:	f003 fc81 	bl	8007cdc <HAL_GPIO_Init>

}
 80043da:	bf00      	nop
 80043dc:	3730      	adds	r7, #48	; 0x30
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	58024400 	.word	0x58024400
 80043e8:	58021000 	.word	0x58021000
 80043ec:	58020800 	.word	0x58020800
 80043f0:	58020400 	.word	0x58020400
 80043f4:	58020c00 	.word	0x58020c00

080043f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043fc:	b672      	cpsid	i
}
 80043fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004400:	e7fe      	b.n	8004400 <Error_Handler+0x8>
	...

08004404 <main_function>:
#include "Omni.h"

// For LED blink
extern TIM_HandleTypeDef htim8;

void main_function() {
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
	// Init
	ROS::setup();
 8004408:	f7fe fc14 	bl	8002c34 <_ZN3ROS5setupEv>
	omni.Init();
 800440c:	4803      	ldr	r0, [pc, #12]	; (800441c <main_function+0x18>)
 800440e:	f7fc fbb3 	bl	8000b78 <_ZN4Omni4InitEv>

	// For LED blink
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004412:	2100      	movs	r1, #0
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <main_function+0x1c>)
 8004416:	f006 f9e9 	bl	800a7ec <HAL_TIM_PWM_Start>
#ifdef DEBUGGER_MODE
	DebugMode.DebuggingMode();
	return;
#endif

	while (true) {
 800441a:	e7fe      	b.n	800441a <main_function+0x16>
 800441c:	24000098 	.word	0x24000098
 8004420:	24000e1c 	.word	0x24000e1c

08004424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_MspInit+0x30>)
 800442c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004430:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_MspInit+0x30>)
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_MspInit+0x30>)
 800443c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	58024400 	.word	0x58024400

08004458 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d14e      	bne.n	8004518 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800447a:	4b77      	ldr	r3, [pc, #476]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800447c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004480:	4a75      	ldr	r2, [pc, #468]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800448a:	4b73      	ldr	r3, [pc, #460]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800448c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004498:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800449a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800449e:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044a8:	4b6b      	ldr	r3, [pc, #428]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80044aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b6:	4b68      	ldr	r3, [pc, #416]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80044b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044bc:	4a66      	ldr	r2, [pc, #408]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80044be:	f043 0302 	orr.w	r3, r3, #2
 80044c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044c6:	4b64      	ldr	r3, [pc, #400]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80044c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044e6:	2301      	movs	r3, #1
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ee:	4619      	mov	r1, r3
 80044f0:	485a      	ldr	r0, [pc, #360]	; (800465c <HAL_TIM_Encoder_MspInit+0x204>)
 80044f2:	f003 fbf3 	bl	8007cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044f6:	2308      	movs	r3, #8
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fa:	2302      	movs	r3, #2
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004502:	2300      	movs	r3, #0
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004506:	2301      	movs	r3, #1
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800450a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800450e:	4619      	mov	r1, r3
 8004510:	4853      	ldr	r0, [pc, #332]	; (8004660 <HAL_TIM_Encoder_MspInit+0x208>)
 8004512:	f003 fbe3 	bl	8007cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004516:	e09b      	b.n	8004650 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a51      	ldr	r2, [pc, #324]	; (8004664 <HAL_TIM_Encoder_MspInit+0x20c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d12e      	bne.n	8004580 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004522:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004528:	4a4b      	ldr	r2, [pc, #300]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800452a:	f043 0302 	orr.w	r3, r3, #2
 800452e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004532:	4b49      	ldr	r3, [pc, #292]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004540:	4b45      	ldr	r3, [pc, #276]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004546:	4a44      	ldr	r2, [pc, #272]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004550:	4b41      	ldr	r3, [pc, #260]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800455e:	2330      	movs	r3, #48	; 0x30
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456a:	2300      	movs	r3, #0
 800456c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800456e:	2302      	movs	r3, #2
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	4839      	ldr	r0, [pc, #228]	; (8004660 <HAL_TIM_Encoder_MspInit+0x208>)
 800457a:	f003 fbaf 	bl	8007cdc <HAL_GPIO_Init>
}
 800457e:	e067      	b.n	8004650 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a38      	ldr	r2, [pc, #224]	; (8004668 <HAL_TIM_Encoder_MspInit+0x210>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d12f      	bne.n	80045ea <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800458c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004590:	4a31      	ldr	r2, [pc, #196]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800459c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80045aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80045ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80045c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045cc:	2302      	movs	r3, #2
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d4:	2300      	movs	r3, #0
 80045d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045d8:	2302      	movs	r3, #2
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e0:	4619      	mov	r1, r3
 80045e2:	4822      	ldr	r0, [pc, #136]	; (800466c <HAL_TIM_Encoder_MspInit+0x214>)
 80045e4:	f003 fb7a 	bl	8007cdc <HAL_GPIO_Init>
}
 80045e8:	e032      	b.n	8004650 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <HAL_TIM_Encoder_MspInit+0x218>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d12d      	bne.n	8004650 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80045f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004604:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004618:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <HAL_TIM_Encoder_MspInit+0x200>)
 8004624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004630:	2303      	movs	r3, #3
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	2302      	movs	r3, #2
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463c:	2300      	movs	r3, #0
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004640:	2302      	movs	r3, #2
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004648:	4619      	mov	r1, r3
 800464a:	4804      	ldr	r0, [pc, #16]	; (800465c <HAL_TIM_Encoder_MspInit+0x204>)
 800464c:	f003 fb46 	bl	8007cdc <HAL_GPIO_Init>
}
 8004650:	bf00      	nop
 8004652:	3740      	adds	r7, #64	; 0x40
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	58024400 	.word	0x58024400
 800465c:	58020000 	.word	0x58020000
 8004660:	58020400 	.word	0x58020400
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	58020c00 	.word	0x58020c00
 8004670:	40000c00 	.word	0x40000c00

08004674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <HAL_TIM_Base_MspInit+0x84>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d117      	bne.n	80046b6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_TIM_Base_MspInit+0x88>)
 8004688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468c:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <HAL_TIM_Base_MspInit+0x88>)
 800468e:	f043 0320 	orr.w	r3, r3, #32
 8004692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004696:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_TIM_Base_MspInit+0x88>)
 8004698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	2037      	movs	r0, #55	; 0x37
 80046aa:	f000 fca8 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80046ae:	2037      	movs	r0, #55	; 0x37
 80046b0:	f000 fcbf 	bl	8005032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80046b4:	e01b      	b.n	80046ee <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM13)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a11      	ldr	r2, [pc, #68]	; (8004700 <HAL_TIM_Base_MspInit+0x8c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d116      	bne.n	80046ee <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80046c0:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <HAL_TIM_Base_MspInit+0x88>)
 80046c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <HAL_TIM_Base_MspInit+0x88>)
 80046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_TIM_Base_MspInit+0x88>)
 80046d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	202c      	movs	r0, #44	; 0x2c
 80046e4:	f000 fc8b 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80046e8:	202c      	movs	r0, #44	; 0x2c
 80046ea:	f000 fca2 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40001400 	.word	0x40001400
 80046fc:	58024400 	.word	0x58024400
 8004700:	40001c00 	.word	0x40001c00

08004704 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <HAL_TIM_PWM_MspInit+0x9c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d117      	bne.n	8004746 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004716:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800471c:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004734:	2200      	movs	r2, #0
 8004736:	2100      	movs	r1, #0
 8004738:	202c      	movs	r0, #44	; 0x2c
 800473a:	f000 fc60 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800473e:	202c      	movs	r0, #44	; 0x2c
 8004740:	f000 fc77 	bl	8005032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004744:	e028      	b.n	8004798 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM12)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <HAL_TIM_PWM_MspInit+0xa4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10f      	bne.n	8004770 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004756:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	693b      	ldr	r3, [r7, #16]
}
 800476e:	e013      	b.n	8004798 <HAL_TIM_PWM_MspInit+0x94>
  else if(htim_pwm->Instance==TIM15)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <HAL_TIM_PWM_MspInit+0xa8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10e      	bne.n	8004798 <HAL_TIM_PWM_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004780:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_TIM_PWM_MspInit+0xa0>)
 800478c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	bf00      	nop
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40010400 	.word	0x40010400
 80047a4:	58024400 	.word	0x58024400
 80047a8:	40001800 	.word	0x40001800
 80047ac:	40014000 	.word	0x40014000

080047b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b8:	f107 0314 	add.w	r3, r7, #20
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a38      	ldr	r2, [pc, #224]	; (80048b0 <HAL_TIM_MspPostInit+0x100>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d11f      	bne.n	8004812 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047d2:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 80047d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047d8:	4a36      	ldr	r2, [pc, #216]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e2:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 80047e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f4:	2302      	movs	r3, #2
 80047f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fc:	2300      	movs	r3, #0
 80047fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004800:	2303      	movs	r3, #3
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	4619      	mov	r1, r3
 800480a:	482b      	ldr	r0, [pc, #172]	; (80048b8 <HAL_TIM_MspPostInit+0x108>)
 800480c:	f003 fa66 	bl	8007cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004810:	e049      	b.n	80048a6 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM12)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a29      	ldr	r2, [pc, #164]	; (80048bc <HAL_TIM_MspPostInit+0x10c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d120      	bne.n	800485e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 800481e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004822:	4a24      	ldr	r2, [pc, #144]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 800482e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800483a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800483e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004848:	2300      	movs	r3, #0
 800484a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800484c:	2302      	movs	r3, #2
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	4619      	mov	r1, r3
 8004856:	481a      	ldr	r0, [pc, #104]	; (80048c0 <HAL_TIM_MspPostInit+0x110>)
 8004858:	f003 fa40 	bl	8007cdc <HAL_GPIO_Init>
}
 800485c:	e023      	b.n	80048a6 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_TIM_MspPostInit+0x114>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d11e      	bne.n	80048a6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 800486a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 8004870:	f043 0310 	orr.w	r3, r3, #16
 8004874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004878:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <HAL_TIM_MspPostInit+0x104>)
 800487a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004886:	2360      	movs	r3, #96	; 0x60
 8004888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	2302      	movs	r3, #2
 800488c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004896:	2304      	movs	r3, #4
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800489a:	f107 0314 	add.w	r3, r7, #20
 800489e:	4619      	mov	r1, r3
 80048a0:	4809      	ldr	r0, [pc, #36]	; (80048c8 <HAL_TIM_MspPostInit+0x118>)
 80048a2:	f003 fa1b 	bl	8007cdc <HAL_GPIO_Init>
}
 80048a6:	bf00      	nop
 80048a8:	3728      	adds	r7, #40	; 0x28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40010400 	.word	0x40010400
 80048b4:	58024400 	.word	0x58024400
 80048b8:	58020800 	.word	0x58020800
 80048bc:	40001800 	.word	0x40001800
 80048c0:	58020400 	.word	0x58020400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	58021000 	.word	0x58021000

080048cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b0b6      	sub	sp, #216	; 0xd8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048e4:	f107 0310 	add.w	r3, r7, #16
 80048e8:	22b4      	movs	r2, #180	; 0xb4
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f009 fa93 	bl	800de18 <memset>
  if(huart->Instance==USART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <HAL_UART_MspInit+0x188>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	f040 80a7 	bne.w	8004a4c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048fe:	2301      	movs	r3, #1
 8004900:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	4618      	mov	r0, r3
 800490e:	f004 fb1b 	bl	8008f48 <HAL_RCCEx_PeriphCLKConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004918:	f7ff fd6e 	bl	80043f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800491c:	4b4e      	ldr	r3, [pc, #312]	; (8004a58 <HAL_UART_MspInit+0x18c>)
 800491e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004922:	4a4d      	ldr	r2, [pc, #308]	; (8004a58 <HAL_UART_MspInit+0x18c>)
 8004924:	f043 0310 	orr.w	r3, r3, #16
 8004928:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800492c:	4b4a      	ldr	r3, [pc, #296]	; (8004a58 <HAL_UART_MspInit+0x18c>)
 800492e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_UART_MspInit+0x18c>)
 800493c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004940:	4a45      	ldr	r2, [pc, #276]	; (8004a58 <HAL_UART_MspInit+0x18c>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800494a:	4b43      	ldr	r3, [pc, #268]	; (8004a58 <HAL_UART_MspInit+0x18c>)
 800494c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004958:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800495c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004960:	2302      	movs	r3, #2
 8004962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004972:	2307      	movs	r3, #7
 8004974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004978:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800497c:	4619      	mov	r1, r3
 800497e:	4837      	ldr	r0, [pc, #220]	; (8004a5c <HAL_UART_MspInit+0x190>)
 8004980:	f003 f9ac 	bl	8007cdc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <HAL_UART_MspInit+0x194>)
 8004986:	4a37      	ldr	r2, [pc, #220]	; (8004a64 <HAL_UART_MspInit+0x198>)
 8004988:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800498a:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_UART_MspInit+0x194>)
 800498c:	2229      	movs	r2, #41	; 0x29
 800498e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004990:	4b33      	ldr	r3, [pc, #204]	; (8004a60 <HAL_UART_MspInit+0x194>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004996:	4b32      	ldr	r3, [pc, #200]	; (8004a60 <HAL_UART_MspInit+0x194>)
 8004998:	2200      	movs	r2, #0
 800499a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800499c:	4b30      	ldr	r3, [pc, #192]	; (8004a60 <HAL_UART_MspInit+0x194>)
 800499e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049a4:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049aa:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80049b0:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80049b6:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80049c4:	4826      	ldr	r0, [pc, #152]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049c6:	f000 fb4f 	bl	8005068 <HAL_DMA_Init>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80049d0:	f7ff fd12 	bl	80043f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80049da:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <HAL_UART_MspInit+0x194>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 80049e2:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_UART_MspInit+0x1a0>)
 80049e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 80049e8:	222a      	movs	r2, #42	; 0x2a
 80049ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049ec:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 80049fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a06:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a0c:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a18:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a20:	4811      	ldr	r0, [pc, #68]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a22:	f000 fb21 	bl	8005068 <HAL_DMA_Init>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004a2c:	f7ff fce4 	bl	80043f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a34:	679a      	str	r2, [r3, #120]	; 0x78
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <HAL_UART_MspInit+0x19c>)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2025      	movs	r0, #37	; 0x25
 8004a42:	f000 fadc 	bl	8004ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a46:	2025      	movs	r0, #37	; 0x25
 8004a48:	f000 faf3 	bl	8005032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a4c:	bf00      	nop
 8004a4e:	37d8      	adds	r7, #216	; 0xd8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40011000 	.word	0x40011000
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	58020000 	.word	0x58020000
 8004a60:	24000fdc 	.word	0x24000fdc
 8004a64:	40020010 	.word	0x40020010
 8004a68:	24001054 	.word	0x24001054
 8004a6c:	40020028 	.word	0x40020028

08004a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <NMI_Handler+0x4>

08004a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7a:	e7fe      	b.n	8004a7a <HardFault_Handler+0x4>

08004a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a80:	e7fe      	b.n	8004a80 <MemManage_Handler+0x4>

08004a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a86:	e7fe      	b.n	8004a86 <BusFault_Handler+0x4>

08004a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a8c:	e7fe      	b.n	8004a8c <UsageFault_Handler+0x4>

08004a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004abc:	f000 f9a4 	bl	8004e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <DMA1_Stream0_IRQHandler+0x10>)
 8004aca:	f001 fdf5 	bl	80066b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	24000fdc 	.word	0x24000fdc

08004ad8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <DMA1_Stream1_IRQHandler+0x10>)
 8004ade:	f001 fdeb 	bl	80066b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	24001054 	.word	0x24001054

08004aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <USART1_IRQHandler+0x10>)
 8004af2:	f007 f95b 	bl	800bdac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	24000f4c 	.word	0x24000f4c

08004b00 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004b04:	4803      	ldr	r0, [pc, #12]	; (8004b14 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004b06:	f006 f8c1 	bl	800ac8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004b0a:	4803      	ldr	r0, [pc, #12]	; (8004b18 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004b0c:	f006 f8be 	bl	800ac8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	24000e1c 	.word	0x24000e1c
 8004b18:	24000eb4 	.word	0x24000eb4

08004b1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b20:	4802      	ldr	r0, [pc, #8]	; (8004b2c <TIM7_IRQHandler+0x10>)
 8004b22:	f006 f8b3 	bl	800ac8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	24000dd0 	.word	0x24000dd0

08004b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
	return 1;
 8004b34:	2301      	movs	r3, #1
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <_kill>:

int _kill(int pid, int sig)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b4a:	f009 f92d 	bl	800dda8 <__errno>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2216      	movs	r2, #22
 8004b52:	601a      	str	r2, [r3, #0]
	return -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_exit>:

void _exit (int status)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ffe7 	bl	8004b40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b72:	e7fe      	b.n	8004b72 <_exit+0x12>

08004b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b7c:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <_sbrk+0x5c>)
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <_sbrk+0x60>)
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <_sbrk+0x64>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <_sbrk+0x64>)
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <_sbrk+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <_sbrk+0x64>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d207      	bcs.n	8004bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ba4:	f009 f900 	bl	800dda8 <__errno>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	220c      	movs	r2, #12
 8004bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bb2:	e009      	b.n	8004bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <_sbrk+0x64>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <_sbrk+0x64>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <_sbrk+0x64>)
 8004bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	24050000 	.word	0x24050000
 8004bd4:	00000400 	.word	0x00000400
 8004bd8:	240010cc 	.word	0x240010cc
 8004bdc:	240010e8 	.word	0x240010e8

08004be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <SystemInit+0xd0>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	4a31      	ldr	r2, [pc, #196]	; (8004cb0 <SystemInit+0xd0>)
 8004bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bf4:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <SystemInit+0xd4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d807      	bhi.n	8004c10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c00:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <SystemInit+0xd4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 030f 	bic.w	r3, r3, #15
 8004c08:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <SystemInit+0xd4>)
 8004c0a:	f043 0307 	orr.w	r3, r3, #7
 8004c0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <SystemInit+0xd8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <SystemInit+0xd8>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c1c:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <SystemInit+0xd8>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c22:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <SystemInit+0xd8>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4924      	ldr	r1, [pc, #144]	; (8004cb8 <SystemInit+0xd8>)
 8004c28:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <SystemInit+0xdc>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c2e:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <SystemInit+0xd4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c3a:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <SystemInit+0xd4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 030f 	bic.w	r3, r3, #15
 8004c42:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <SystemInit+0xd4>)
 8004c44:	f043 0307 	orr.w	r3, r3, #7
 8004c48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <SystemInit+0xd8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <SystemInit+0xd8>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <SystemInit+0xd8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c5c:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <SystemInit+0xd8>)
 8004c5e:	4a18      	ldr	r2, [pc, #96]	; (8004cc0 <SystemInit+0xe0>)
 8004c60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <SystemInit+0xd8>)
 8004c64:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <SystemInit+0xe4>)
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <SystemInit+0xd8>)
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <SystemInit+0xe8>)
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <SystemInit+0xd8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c74:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <SystemInit+0xd8>)
 8004c76:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <SystemInit+0xe8>)
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c7a:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <SystemInit+0xd8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c80:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <SystemInit+0xd8>)
 8004c82:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <SystemInit+0xe8>)
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <SystemInit+0xd8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <SystemInit+0xd8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <SystemInit+0xd8>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c98:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <SystemInit+0xd8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <SystemInit+0xec>)
 8004ca0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004ca4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00
 8004cb4:	52002000 	.word	0x52002000
 8004cb8:	58024400 	.word	0x58024400
 8004cbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8004cc0:	02020200 	.word	0x02020200
 8004cc4:	01ff0000 	.word	0x01ff0000
 8004cc8:	01010280 	.word	0x01010280
 8004ccc:	52004000 	.word	0x52004000

08004cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004cd4:	f7ff ff84 	bl	8004be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cd8:	480c      	ldr	r0, [pc, #48]	; (8004d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cda:	490d      	ldr	r1, [pc, #52]	; (8004d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ce0:	e002      	b.n	8004ce8 <LoopCopyDataInit>

08004ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ce6:	3304      	adds	r3, #4

08004ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cec:	d3f9      	bcc.n	8004ce2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cf0:	4c0a      	ldr	r4, [pc, #40]	; (8004d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cf4:	e001      	b.n	8004cfa <LoopFillZerobss>

08004cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cf8:	3204      	adds	r2, #4

08004cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cfc:	d3fb      	bcc.n	8004cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cfe:	f009 f859 	bl	800ddb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d02:	f7fe fe81 	bl	8003a08 <main>
  bx  lr
 8004d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d08:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004d0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004d10:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004d14:	0800e47c 	.word	0x0800e47c
  ldr r2, =_sbss
 8004d18:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004d1c:	240010e4 	.word	0x240010e4

08004d20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d20:	e7fe      	b.n	8004d20 <ADC3_IRQHandler>
	...

08004d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d2a:	2003      	movs	r0, #3
 8004d2c:	f000 f95c 	bl	8004fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d30:	f003 ff34 	bl	8008b9c <HAL_RCC_GetSysClockFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <HAL_Init+0x68>)
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	4913      	ldr	r1, [pc, #76]	; (8004d90 <HAL_Init+0x6c>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <HAL_Init+0x68>)
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	4a0e      	ldr	r2, [pc, #56]	; (8004d90 <HAL_Init+0x6c>)
 8004d58:	5cd3      	ldrb	r3, [r2, r3]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <HAL_Init+0x70>)
 8004d66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d68:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <HAL_Init+0x74>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d6e:	200f      	movs	r0, #15
 8004d70:	f000 f814 	bl	8004d9c <HAL_InitTick>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e002      	b.n	8004d84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d7e:	f7ff fb51 	bl	8004424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	0800e424 	.word	0x0800e424
 8004d94:	24000004 	.word	0x24000004
 8004d98:	24000000 	.word	0x24000000

08004d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_InitTick+0x60>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e021      	b.n	8004df4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_InitTick+0x64>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_InitTick+0x60>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4619      	mov	r1, r3
 8004dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f941 	bl	800504e <HAL_SYSTICK_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00e      	b.n	8004df4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d80a      	bhi.n	8004df2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004de4:	f000 f90b 	bl	8004ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004de8:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <HAL_InitTick+0x68>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	2400000c 	.word	0x2400000c
 8004e00:	24000000 	.word	0x24000000
 8004e04:	24000008 	.word	0x24000008

08004e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_IncTick+0x20>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_IncTick+0x24>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_IncTick+0x24>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2400000c 	.word	0x2400000c
 8004e2c:	240010d0 	.word	0x240010d0

08004e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return uwTick;
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_GetTick+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	240010d0 	.word	0x240010d0

08004e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <__NVIC_SetPriorityGrouping+0x40>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e76:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <__NVIC_SetPriorityGrouping+0x40>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	60d3      	str	r3, [r2, #12]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00
 8004e8c:	05fa0000 	.word	0x05fa0000

08004e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	f003 0307 	and.w	r3, r3, #7
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	db0b      	blt.n	8004ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	f003 021f 	and.w	r2, r3, #31
 8004ec4:	4907      	ldr	r1, [pc, #28]	; (8004ee4 <__NVIC_EnableIRQ+0x38>)
 8004ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2001      	movs	r0, #1
 8004ece:	fa00 f202 	lsl.w	r2, r0, r2
 8004ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000e100 	.word	0xe000e100

08004ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	6039      	str	r1, [r7, #0]
 8004ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db0a      	blt.n	8004f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	490c      	ldr	r1, [pc, #48]	; (8004f34 <__NVIC_SetPriority+0x4c>)
 8004f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f10:	e00a      	b.n	8004f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	4908      	ldr	r1, [pc, #32]	; (8004f38 <__NVIC_SetPriority+0x50>)
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	0112      	lsls	r2, r2, #4
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	440b      	add	r3, r1
 8004f26:	761a      	strb	r2, [r3, #24]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000e100 	.word	0xe000e100
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f1c3 0307 	rsb	r3, r3, #7
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	bf28      	it	cs
 8004f5a:	2304      	movcs	r3, #4
 8004f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d902      	bls.n	8004f6c <NVIC_EncodePriority+0x30>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3b03      	subs	r3, #3
 8004f6a:	e000      	b.n	8004f6e <NVIC_EncodePriority+0x32>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43da      	mvns	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	401a      	ands	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	43d9      	mvns	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	4313      	orrs	r3, r2
         );
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	; 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fb4:	d301      	bcc.n	8004fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e00f      	b.n	8004fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <SysTick_Config+0x40>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fc2:	210f      	movs	r1, #15
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc8:	f7ff ff8e 	bl	8004ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <SysTick_Config+0x40>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <SysTick_Config+0x40>)
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	e000e010 	.word	0xe000e010

08004fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff29 	bl	8004e48 <__NVIC_SetPriorityGrouping>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	4603      	mov	r3, r0
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800500c:	f7ff ff40 	bl	8004e90 <__NVIC_GetPriorityGrouping>
 8005010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff90 	bl	8004f3c <NVIC_EncodePriority>
 800501c:	4602      	mov	r2, r0
 800501e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff5f 	bl	8004ee8 <__NVIC_SetPriority>
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800503c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff33 	bl	8004eac <__NVIC_EnableIRQ>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ffa4 	bl	8004fa4 <SysTick_Config>
 800505c:	4603      	mov	r3, r0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005070:	f7ff fede 	bl	8004e30 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e314      	b.n	80056aa <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a66      	ldr	r2, [pc, #408]	; (8005220 <HAL_DMA_Init+0x1b8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d04a      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a65      	ldr	r2, [pc, #404]	; (8005224 <HAL_DMA_Init+0x1bc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d045      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a63      	ldr	r2, [pc, #396]	; (8005228 <HAL_DMA_Init+0x1c0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d040      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a62      	ldr	r2, [pc, #392]	; (800522c <HAL_DMA_Init+0x1c4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d03b      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a60      	ldr	r2, [pc, #384]	; (8005230 <HAL_DMA_Init+0x1c8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d036      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5f      	ldr	r2, [pc, #380]	; (8005234 <HAL_DMA_Init+0x1cc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d031      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5d      	ldr	r2, [pc, #372]	; (8005238 <HAL_DMA_Init+0x1d0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d02c      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5c      	ldr	r2, [pc, #368]	; (800523c <HAL_DMA_Init+0x1d4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d027      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a5a      	ldr	r2, [pc, #360]	; (8005240 <HAL_DMA_Init+0x1d8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d022      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a59      	ldr	r2, [pc, #356]	; (8005244 <HAL_DMA_Init+0x1dc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d01d      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a57      	ldr	r2, [pc, #348]	; (8005248 <HAL_DMA_Init+0x1e0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d018      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a56      	ldr	r2, [pc, #344]	; (800524c <HAL_DMA_Init+0x1e4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a54      	ldr	r2, [pc, #336]	; (8005250 <HAL_DMA_Init+0x1e8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00e      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a53      	ldr	r2, [pc, #332]	; (8005254 <HAL_DMA_Init+0x1ec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a51      	ldr	r2, [pc, #324]	; (8005258 <HAL_DMA_Init+0x1f0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_DMA_Init+0xb8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a50      	ldr	r2, [pc, #320]	; (800525c <HAL_DMA_Init+0x1f4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d101      	bne.n	8005124 <HAL_DMA_Init+0xbc>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_DMA_Init+0xbe>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 813c 	beq.w	80053a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a37      	ldr	r2, [pc, #220]	; (8005220 <HAL_DMA_Init+0x1b8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d04a      	beq.n	80051dc <HAL_DMA_Init+0x174>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a36      	ldr	r2, [pc, #216]	; (8005224 <HAL_DMA_Init+0x1bc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d045      	beq.n	80051dc <HAL_DMA_Init+0x174>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a34      	ldr	r2, [pc, #208]	; (8005228 <HAL_DMA_Init+0x1c0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d040      	beq.n	80051dc <HAL_DMA_Init+0x174>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a33      	ldr	r2, [pc, #204]	; (800522c <HAL_DMA_Init+0x1c4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d03b      	beq.n	80051dc <HAL_DMA_Init+0x174>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a31      	ldr	r2, [pc, #196]	; (8005230 <HAL_DMA_Init+0x1c8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d036      	beq.n	80051dc <HAL_DMA_Init+0x174>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a30      	ldr	r2, [pc, #192]	; (8005234 <HAL_DMA_Init+0x1cc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d031      	beq.n	80051dc <HAL_DMA_Init+0x174>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2e      	ldr	r2, [pc, #184]	; (8005238 <HAL_DMA_Init+0x1d0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02c      	beq.n	80051dc <HAL_DMA_Init+0x174>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2d      	ldr	r2, [pc, #180]	; (800523c <HAL_DMA_Init+0x1d4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d027      	beq.n	80051dc <HAL_DMA_Init+0x174>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <HAL_DMA_Init+0x1d8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d022      	beq.n	80051dc <HAL_DMA_Init+0x174>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <HAL_DMA_Init+0x1dc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d01d      	beq.n	80051dc <HAL_DMA_Init+0x174>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a28      	ldr	r2, [pc, #160]	; (8005248 <HAL_DMA_Init+0x1e0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d018      	beq.n	80051dc <HAL_DMA_Init+0x174>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a27      	ldr	r2, [pc, #156]	; (800524c <HAL_DMA_Init+0x1e4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d013      	beq.n	80051dc <HAL_DMA_Init+0x174>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a25      	ldr	r2, [pc, #148]	; (8005250 <HAL_DMA_Init+0x1e8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00e      	beq.n	80051dc <HAL_DMA_Init+0x174>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a24      	ldr	r2, [pc, #144]	; (8005254 <HAL_DMA_Init+0x1ec>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_DMA_Init+0x174>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a22      	ldr	r2, [pc, #136]	; (8005258 <HAL_DMA_Init+0x1f0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_DMA_Init+0x174>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a21      	ldr	r2, [pc, #132]	; (800525c <HAL_DMA_Init+0x1f4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d108      	bne.n	80051ee <HAL_DMA_Init+0x186>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e007      	b.n	80051fe <HAL_DMA_Init+0x196>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051fe:	e02f      	b.n	8005260 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005200:	f7ff fe16 	bl	8004e30 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b05      	cmp	r3, #5
 800520c:	d928      	bls.n	8005260 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2203      	movs	r2, #3
 8005218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e244      	b.n	80056aa <HAL_DMA_Init+0x642>
 8005220:	40020010 	.word	0x40020010
 8005224:	40020028 	.word	0x40020028
 8005228:	40020040 	.word	0x40020040
 800522c:	40020058 	.word	0x40020058
 8005230:	40020070 	.word	0x40020070
 8005234:	40020088 	.word	0x40020088
 8005238:	400200a0 	.word	0x400200a0
 800523c:	400200b8 	.word	0x400200b8
 8005240:	40020410 	.word	0x40020410
 8005244:	40020428 	.word	0x40020428
 8005248:	40020440 	.word	0x40020440
 800524c:	40020458 	.word	0x40020458
 8005250:	40020470 	.word	0x40020470
 8005254:	40020488 	.word	0x40020488
 8005258:	400204a0 	.word	0x400204a0
 800525c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1c8      	bne.n	8005200 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4b84      	ldr	r3, [pc, #528]	; (800548c <HAL_DMA_Init+0x424>)
 800527a:	4013      	ands	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005286:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005292:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800529e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d107      	bne.n	80052c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	4313      	orrs	r3, r2
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b28      	cmp	r3, #40	; 0x28
 80052ca:	d903      	bls.n	80052d4 <HAL_DMA_Init+0x26c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b2e      	cmp	r3, #46	; 0x2e
 80052d2:	d91f      	bls.n	8005314 <HAL_DMA_Init+0x2ac>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b3e      	cmp	r3, #62	; 0x3e
 80052da:	d903      	bls.n	80052e4 <HAL_DMA_Init+0x27c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b42      	cmp	r3, #66	; 0x42
 80052e2:	d917      	bls.n	8005314 <HAL_DMA_Init+0x2ac>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b46      	cmp	r3, #70	; 0x46
 80052ea:	d903      	bls.n	80052f4 <HAL_DMA_Init+0x28c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b48      	cmp	r3, #72	; 0x48
 80052f2:	d90f      	bls.n	8005314 <HAL_DMA_Init+0x2ac>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b4e      	cmp	r3, #78	; 0x4e
 80052fa:	d903      	bls.n	8005304 <HAL_DMA_Init+0x29c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b52      	cmp	r3, #82	; 0x52
 8005302:	d907      	bls.n	8005314 <HAL_DMA_Init+0x2ac>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b73      	cmp	r3, #115	; 0x73
 800530a:	d905      	bls.n	8005318 <HAL_DMA_Init+0x2b0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b77      	cmp	r3, #119	; 0x77
 8005312:	d801      	bhi.n	8005318 <HAL_DMA_Init+0x2b0>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <HAL_DMA_Init+0x2b2>
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005324:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0307 	bic.w	r3, r3, #7
 800533c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b04      	cmp	r3, #4
 800534e:	d117      	bne.n	8005380 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00e      	beq.n	8005380 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f002 fb30 	bl	80079c8 <DMA_CheckFifoParam>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2240      	movs	r2, #64	; 0x40
 8005372:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e194      	b.n	80056aa <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f002 fa6b 	bl	8007864 <DMA_CalcBaseAndBitshift>
 800538e:	4603      	mov	r3, r0
 8005390:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	223f      	movs	r2, #63	; 0x3f
 800539c:	409a      	lsls	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	e0ca      	b.n	800553a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a39      	ldr	r2, [pc, #228]	; (8005490 <HAL_DMA_Init+0x428>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d022      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a38      	ldr	r2, [pc, #224]	; (8005494 <HAL_DMA_Init+0x42c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d01d      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a36      	ldr	r2, [pc, #216]	; (8005498 <HAL_DMA_Init+0x430>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d018      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a35      	ldr	r2, [pc, #212]	; (800549c <HAL_DMA_Init+0x434>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a33      	ldr	r2, [pc, #204]	; (80054a0 <HAL_DMA_Init+0x438>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a32      	ldr	r2, [pc, #200]	; (80054a4 <HAL_DMA_Init+0x43c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d009      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a30      	ldr	r2, [pc, #192]	; (80054a8 <HAL_DMA_Init+0x440>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_Init+0x38c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <HAL_DMA_Init+0x444>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d101      	bne.n	80053f8 <HAL_DMA_Init+0x390>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_DMA_Init+0x392>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 8094 	beq.w	8005528 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a22      	ldr	r2, [pc, #136]	; (8005490 <HAL_DMA_Init+0x428>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d021      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_DMA_Init+0x42c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01c      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <HAL_DMA_Init+0x430>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d017      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1e      	ldr	r2, [pc, #120]	; (800549c <HAL_DMA_Init+0x434>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d012      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_DMA_Init+0x438>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00d      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_DMA_Init+0x43c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d008      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <HAL_DMA_Init+0x440>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <HAL_DMA_Init+0x3e6>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_DMA_Init+0x444>)
 800544c:	4293      	cmp	r3, r2
 800544e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <HAL_DMA_Init+0x448>)
 800546c:	4013      	ands	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d01d      	beq.n	80054b4 <HAL_DMA_Init+0x44c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b80      	cmp	r3, #128	; 0x80
 800547e:	d102      	bne.n	8005486 <HAL_DMA_Init+0x41e>
 8005480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005484:	e017      	b.n	80054b6 <HAL_DMA_Init+0x44e>
 8005486:	2300      	movs	r3, #0
 8005488:	e015      	b.n	80054b6 <HAL_DMA_Init+0x44e>
 800548a:	bf00      	nop
 800548c:	fe10803f 	.word	0xfe10803f
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494
 80054b0:	fffe000f 	.word	0xfffe000f
 80054b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68d2      	ldr	r2, [r2, #12]
 80054ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b6e      	ldr	r3, [pc, #440]	; (80056b4 <HAL_DMA_Init+0x64c>)
 80054fc:	4413      	add	r3, r2
 80054fe:	4a6e      	ldr	r2, [pc, #440]	; (80056b8 <HAL_DMA_Init+0x650>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	009a      	lsls	r2, r3, #2
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f002 f9a9 	bl	8007864 <DMA_CalcBaseAndBitshift>
 8005512:	4603      	mov	r3, r0
 8005514:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	2201      	movs	r2, #1
 8005520:	409a      	lsls	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	e008      	b.n	800553a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0b7      	b.n	80056aa <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a5f      	ldr	r2, [pc, #380]	; (80056bc <HAL_DMA_Init+0x654>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d072      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5d      	ldr	r2, [pc, #372]	; (80056c0 <HAL_DMA_Init+0x658>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d06d      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a5c      	ldr	r2, [pc, #368]	; (80056c4 <HAL_DMA_Init+0x65c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d068      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a5a      	ldr	r2, [pc, #360]	; (80056c8 <HAL_DMA_Init+0x660>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d063      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a59      	ldr	r2, [pc, #356]	; (80056cc <HAL_DMA_Init+0x664>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d05e      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a57      	ldr	r2, [pc, #348]	; (80056d0 <HAL_DMA_Init+0x668>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d059      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a56      	ldr	r2, [pc, #344]	; (80056d4 <HAL_DMA_Init+0x66c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d054      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a54      	ldr	r2, [pc, #336]	; (80056d8 <HAL_DMA_Init+0x670>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d04f      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a53      	ldr	r2, [pc, #332]	; (80056dc <HAL_DMA_Init+0x674>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04a      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a51      	ldr	r2, [pc, #324]	; (80056e0 <HAL_DMA_Init+0x678>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d045      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a50      	ldr	r2, [pc, #320]	; (80056e4 <HAL_DMA_Init+0x67c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <HAL_DMA_Init+0x680>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d03b      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a4d      	ldr	r2, [pc, #308]	; (80056ec <HAL_DMA_Init+0x684>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d036      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a4b      	ldr	r2, [pc, #300]	; (80056f0 <HAL_DMA_Init+0x688>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d031      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a4a      	ldr	r2, [pc, #296]	; (80056f4 <HAL_DMA_Init+0x68c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d02c      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a48      	ldr	r2, [pc, #288]	; (80056f8 <HAL_DMA_Init+0x690>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d027      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a47      	ldr	r2, [pc, #284]	; (80056fc <HAL_DMA_Init+0x694>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a45      	ldr	r2, [pc, #276]	; (8005700 <HAL_DMA_Init+0x698>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a44      	ldr	r2, [pc, #272]	; (8005704 <HAL_DMA_Init+0x69c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a42      	ldr	r2, [pc, #264]	; (8005708 <HAL_DMA_Init+0x6a0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a41      	ldr	r2, [pc, #260]	; (800570c <HAL_DMA_Init+0x6a4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a3f      	ldr	r2, [pc, #252]	; (8005710 <HAL_DMA_Init+0x6a8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a3e      	ldr	r2, [pc, #248]	; (8005714 <HAL_DMA_Init+0x6ac>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_DMA_Init+0x5c2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a3c      	ldr	r2, [pc, #240]	; (8005718 <HAL_DMA_Init+0x6b0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <HAL_DMA_Init+0x5c6>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_DMA_Init+0x5c8>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d032      	beq.n	800569a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f002 fa43 	bl	8007ac0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d102      	bne.n	8005648 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800565c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_DMA_Init+0x620>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b08      	cmp	r3, #8
 800566c:	d80c      	bhi.n	8005688 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f002 fac0 	bl	8007bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	e008      	b.n	800569a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	a7fdabf8 	.word	0xa7fdabf8
 80056b8:	cccccccd 	.word	0xcccccccd
 80056bc:	40020010 	.word	0x40020010
 80056c0:	40020028 	.word	0x40020028
 80056c4:	40020040 	.word	0x40020040
 80056c8:	40020058 	.word	0x40020058
 80056cc:	40020070 	.word	0x40020070
 80056d0:	40020088 	.word	0x40020088
 80056d4:	400200a0 	.word	0x400200a0
 80056d8:	400200b8 	.word	0x400200b8
 80056dc:	40020410 	.word	0x40020410
 80056e0:	40020428 	.word	0x40020428
 80056e4:	40020440 	.word	0x40020440
 80056e8:	40020458 	.word	0x40020458
 80056ec:	40020470 	.word	0x40020470
 80056f0:	40020488 	.word	0x40020488
 80056f4:	400204a0 	.word	0x400204a0
 80056f8:	400204b8 	.word	0x400204b8
 80056fc:	58025408 	.word	0x58025408
 8005700:	5802541c 	.word	0x5802541c
 8005704:	58025430 	.word	0x58025430
 8005708:	58025444 	.word	0x58025444
 800570c:	58025458 	.word	0x58025458
 8005710:	5802546c 	.word	0x5802546c
 8005714:	58025480 	.word	0x58025480
 8005718:	58025494 	.word	0x58025494

0800571c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e226      	b.n	8005b86 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Start_IT+0x2a>
 8005742:	2302      	movs	r3, #2
 8005744:	e21f      	b.n	8005b86 <HAL_DMA_Start_IT+0x46a>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	f040 820a 	bne.w	8005b70 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a68      	ldr	r2, [pc, #416]	; (8005910 <HAL_DMA_Start_IT+0x1f4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d04a      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a66      	ldr	r2, [pc, #408]	; (8005914 <HAL_DMA_Start_IT+0x1f8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d045      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a65      	ldr	r2, [pc, #404]	; (8005918 <HAL_DMA_Start_IT+0x1fc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d040      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a63      	ldr	r2, [pc, #396]	; (800591c <HAL_DMA_Start_IT+0x200>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d03b      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a62      	ldr	r2, [pc, #392]	; (8005920 <HAL_DMA_Start_IT+0x204>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d036      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a60      	ldr	r2, [pc, #384]	; (8005924 <HAL_DMA_Start_IT+0x208>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d031      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a5f      	ldr	r2, [pc, #380]	; (8005928 <HAL_DMA_Start_IT+0x20c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d02c      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5d      	ldr	r2, [pc, #372]	; (800592c <HAL_DMA_Start_IT+0x210>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d027      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a5c      	ldr	r2, [pc, #368]	; (8005930 <HAL_DMA_Start_IT+0x214>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5a      	ldr	r2, [pc, #360]	; (8005934 <HAL_DMA_Start_IT+0x218>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01d      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a59      	ldr	r2, [pc, #356]	; (8005938 <HAL_DMA_Start_IT+0x21c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a57      	ldr	r2, [pc, #348]	; (800593c <HAL_DMA_Start_IT+0x220>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a56      	ldr	r2, [pc, #344]	; (8005940 <HAL_DMA_Start_IT+0x224>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a54      	ldr	r2, [pc, #336]	; (8005944 <HAL_DMA_Start_IT+0x228>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a53      	ldr	r2, [pc, #332]	; (8005948 <HAL_DMA_Start_IT+0x22c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_DMA_Start_IT+0xee>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a51      	ldr	r2, [pc, #324]	; (800594c <HAL_DMA_Start_IT+0x230>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d108      	bne.n	800581c <HAL_DMA_Start_IT+0x100>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e007      	b.n	800582c <HAL_DMA_Start_IT+0x110>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f001 fe6a 	bl	800750c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a34      	ldr	r2, [pc, #208]	; (8005910 <HAL_DMA_Start_IT+0x1f4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d04a      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a33      	ldr	r2, [pc, #204]	; (8005914 <HAL_DMA_Start_IT+0x1f8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d045      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a31      	ldr	r2, [pc, #196]	; (8005918 <HAL_DMA_Start_IT+0x1fc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d040      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a30      	ldr	r2, [pc, #192]	; (800591c <HAL_DMA_Start_IT+0x200>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d03b      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <HAL_DMA_Start_IT+0x204>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d036      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <HAL_DMA_Start_IT+0x208>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d031      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <HAL_DMA_Start_IT+0x20c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d02c      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2a      	ldr	r2, [pc, #168]	; (800592c <HAL_DMA_Start_IT+0x210>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d027      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a28      	ldr	r2, [pc, #160]	; (8005930 <HAL_DMA_Start_IT+0x214>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d022      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a27      	ldr	r2, [pc, #156]	; (8005934 <HAL_DMA_Start_IT+0x218>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01d      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a25      	ldr	r2, [pc, #148]	; (8005938 <HAL_DMA_Start_IT+0x21c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d018      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a24      	ldr	r2, [pc, #144]	; (800593c <HAL_DMA_Start_IT+0x220>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d013      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <HAL_DMA_Start_IT+0x224>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00e      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	; (8005944 <HAL_DMA_Start_IT+0x228>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <HAL_DMA_Start_IT+0x22c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_DMA_Start_IT+0x1bc>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_DMA_Start_IT+0x230>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <HAL_DMA_Start_IT+0x1c0>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_DMA_Start_IT+0x1c2>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d036      	beq.n	8005950 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 021e 	bic.w	r2, r3, #30
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0216 	orr.w	r2, r2, #22
 80058f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03e      	beq.n	800597c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0208 	orr.w	r2, r2, #8
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e035      	b.n	800597c <HAL_DMA_Start_IT+0x260>
 8005910:	40020010 	.word	0x40020010
 8005914:	40020028 	.word	0x40020028
 8005918:	40020040 	.word	0x40020040
 800591c:	40020058 	.word	0x40020058
 8005920:	40020070 	.word	0x40020070
 8005924:	40020088 	.word	0x40020088
 8005928:	400200a0 	.word	0x400200a0
 800592c:	400200b8 	.word	0x400200b8
 8005930:	40020410 	.word	0x40020410
 8005934:	40020428 	.word	0x40020428
 8005938:	40020440 	.word	0x40020440
 800593c:	40020458 	.word	0x40020458
 8005940:	40020470 	.word	0x40020470
 8005944:	40020488 	.word	0x40020488
 8005948:	400204a0 	.word	0x400204a0
 800594c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 020e 	bic.w	r2, r3, #14
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 020a 	orr.w	r2, r2, #10
 8005962:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0204 	orr.w	r2, r2, #4
 800597a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a83      	ldr	r2, [pc, #524]	; (8005b90 <HAL_DMA_Start_IT+0x474>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d072      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a82      	ldr	r2, [pc, #520]	; (8005b94 <HAL_DMA_Start_IT+0x478>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d06d      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a80      	ldr	r2, [pc, #512]	; (8005b98 <HAL_DMA_Start_IT+0x47c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d068      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7f      	ldr	r2, [pc, #508]	; (8005b9c <HAL_DMA_Start_IT+0x480>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d063      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7d      	ldr	r2, [pc, #500]	; (8005ba0 <HAL_DMA_Start_IT+0x484>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d05e      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a7c      	ldr	r2, [pc, #496]	; (8005ba4 <HAL_DMA_Start_IT+0x488>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d059      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a7a      	ldr	r2, [pc, #488]	; (8005ba8 <HAL_DMA_Start_IT+0x48c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d054      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a79      	ldr	r2, [pc, #484]	; (8005bac <HAL_DMA_Start_IT+0x490>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d04f      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a77      	ldr	r2, [pc, #476]	; (8005bb0 <HAL_DMA_Start_IT+0x494>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04a      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a76      	ldr	r2, [pc, #472]	; (8005bb4 <HAL_DMA_Start_IT+0x498>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d045      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a74      	ldr	r2, [pc, #464]	; (8005bb8 <HAL_DMA_Start_IT+0x49c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d040      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a73      	ldr	r2, [pc, #460]	; (8005bbc <HAL_DMA_Start_IT+0x4a0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03b      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a71      	ldr	r2, [pc, #452]	; (8005bc0 <HAL_DMA_Start_IT+0x4a4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d036      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a70      	ldr	r2, [pc, #448]	; (8005bc4 <HAL_DMA_Start_IT+0x4a8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d031      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a6e      	ldr	r2, [pc, #440]	; (8005bc8 <HAL_DMA_Start_IT+0x4ac>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a6d      	ldr	r2, [pc, #436]	; (8005bcc <HAL_DMA_Start_IT+0x4b0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d027      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a6b      	ldr	r2, [pc, #428]	; (8005bd0 <HAL_DMA_Start_IT+0x4b4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6a      	ldr	r2, [pc, #424]	; (8005bd4 <HAL_DMA_Start_IT+0x4b8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a68      	ldr	r2, [pc, #416]	; (8005bd8 <HAL_DMA_Start_IT+0x4bc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a67      	ldr	r2, [pc, #412]	; (8005bdc <HAL_DMA_Start_IT+0x4c0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a65      	ldr	r2, [pc, #404]	; (8005be0 <HAL_DMA_Start_IT+0x4c4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a64      	ldr	r2, [pc, #400]	; (8005be4 <HAL_DMA_Start_IT+0x4c8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a62      	ldr	r2, [pc, #392]	; (8005be8 <HAL_DMA_Start_IT+0x4cc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_DMA_Start_IT+0x350>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a61      	ldr	r2, [pc, #388]	; (8005bec <HAL_DMA_Start_IT+0x4d0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_DMA_Start_IT+0x354>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_DMA_Start_IT+0x356>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01a      	beq.n	8005aac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a92:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aaa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a37      	ldr	r2, [pc, #220]	; (8005b90 <HAL_DMA_Start_IT+0x474>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d04a      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a36      	ldr	r2, [pc, #216]	; (8005b94 <HAL_DMA_Start_IT+0x478>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d045      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <HAL_DMA_Start_IT+0x47c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d040      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a33      	ldr	r2, [pc, #204]	; (8005b9c <HAL_DMA_Start_IT+0x480>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d03b      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a31      	ldr	r2, [pc, #196]	; (8005ba0 <HAL_DMA_Start_IT+0x484>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d036      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a30      	ldr	r2, [pc, #192]	; (8005ba4 <HAL_DMA_Start_IT+0x488>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d031      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2e      	ldr	r2, [pc, #184]	; (8005ba8 <HAL_DMA_Start_IT+0x48c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d02c      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2d      	ldr	r2, [pc, #180]	; (8005bac <HAL_DMA_Start_IT+0x490>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d027      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <HAL_DMA_Start_IT+0x494>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d022      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <HAL_DMA_Start_IT+0x498>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01d      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a28      	ldr	r2, [pc, #160]	; (8005bb8 <HAL_DMA_Start_IT+0x49c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d018      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a27      	ldr	r2, [pc, #156]	; (8005bbc <HAL_DMA_Start_IT+0x4a0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a25      	ldr	r2, [pc, #148]	; (8005bc0 <HAL_DMA_Start_IT+0x4a4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00e      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a24      	ldr	r2, [pc, #144]	; (8005bc4 <HAL_DMA_Start_IT+0x4a8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <HAL_DMA_Start_IT+0x4ac>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <HAL_DMA_Start_IT+0x430>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <HAL_DMA_Start_IT+0x4b0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d108      	bne.n	8005b5e <HAL_DMA_Start_IT+0x442>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e012      	b.n	8005b84 <HAL_DMA_Start_IT+0x468>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e009      	b.n	8005b84 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40020010 	.word	0x40020010
 8005b94:	40020028 	.word	0x40020028
 8005b98:	40020040 	.word	0x40020040
 8005b9c:	40020058 	.word	0x40020058
 8005ba0:	40020070 	.word	0x40020070
 8005ba4:	40020088 	.word	0x40020088
 8005ba8:	400200a0 	.word	0x400200a0
 8005bac:	400200b8 	.word	0x400200b8
 8005bb0:	40020410 	.word	0x40020410
 8005bb4:	40020428 	.word	0x40020428
 8005bb8:	40020440 	.word	0x40020440
 8005bbc:	40020458 	.word	0x40020458
 8005bc0:	40020470 	.word	0x40020470
 8005bc4:	40020488 	.word	0x40020488
 8005bc8:	400204a0 	.word	0x400204a0
 8005bcc:	400204b8 	.word	0x400204b8
 8005bd0:	58025408 	.word	0x58025408
 8005bd4:	5802541c 	.word	0x5802541c
 8005bd8:	58025430 	.word	0x58025430
 8005bdc:	58025444 	.word	0x58025444
 8005be0:	58025458 	.word	0x58025458
 8005be4:	5802546c 	.word	0x5802546c
 8005be8:	58025480 	.word	0x58025480
 8005bec:	58025494 	.word	0x58025494

08005bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005bf8:	f7ff f91a 	bl	8004e30 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e2dc      	b.n	80061c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d008      	beq.n	8005c26 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e2cd      	b.n	80061c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a76      	ldr	r2, [pc, #472]	; (8005e04 <HAL_DMA_Abort+0x214>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d04a      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a74      	ldr	r2, [pc, #464]	; (8005e08 <HAL_DMA_Abort+0x218>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d045      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a73      	ldr	r2, [pc, #460]	; (8005e0c <HAL_DMA_Abort+0x21c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d040      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a71      	ldr	r2, [pc, #452]	; (8005e10 <HAL_DMA_Abort+0x220>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d03b      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a70      	ldr	r2, [pc, #448]	; (8005e14 <HAL_DMA_Abort+0x224>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d036      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a6e      	ldr	r2, [pc, #440]	; (8005e18 <HAL_DMA_Abort+0x228>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d031      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6d      	ldr	r2, [pc, #436]	; (8005e1c <HAL_DMA_Abort+0x22c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d02c      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a6b      	ldr	r2, [pc, #428]	; (8005e20 <HAL_DMA_Abort+0x230>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d027      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a6a      	ldr	r2, [pc, #424]	; (8005e24 <HAL_DMA_Abort+0x234>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d022      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a68      	ldr	r2, [pc, #416]	; (8005e28 <HAL_DMA_Abort+0x238>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01d      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a67      	ldr	r2, [pc, #412]	; (8005e2c <HAL_DMA_Abort+0x23c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a65      	ldr	r2, [pc, #404]	; (8005e30 <HAL_DMA_Abort+0x240>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a64      	ldr	r2, [pc, #400]	; (8005e34 <HAL_DMA_Abort+0x244>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a62      	ldr	r2, [pc, #392]	; (8005e38 <HAL_DMA_Abort+0x248>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a61      	ldr	r2, [pc, #388]	; (8005e3c <HAL_DMA_Abort+0x24c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_DMA_Abort+0xd6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5f      	ldr	r2, [pc, #380]	; (8005e40 <HAL_DMA_Abort+0x250>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_DMA_Abort+0xda>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <HAL_DMA_Abort+0xdc>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 021e 	bic.w	r2, r2, #30
 8005cde:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e00a      	b.n	8005d0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 020e 	bic.w	r2, r2, #14
 8005d06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <HAL_DMA_Abort+0x214>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d072      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3a      	ldr	r2, [pc, #232]	; (8005e08 <HAL_DMA_Abort+0x218>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d06d      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a39      	ldr	r2, [pc, #228]	; (8005e0c <HAL_DMA_Abort+0x21c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d068      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a37      	ldr	r2, [pc, #220]	; (8005e10 <HAL_DMA_Abort+0x220>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d063      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a36      	ldr	r2, [pc, #216]	; (8005e14 <HAL_DMA_Abort+0x224>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d05e      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a34      	ldr	r2, [pc, #208]	; (8005e18 <HAL_DMA_Abort+0x228>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d059      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a33      	ldr	r2, [pc, #204]	; (8005e1c <HAL_DMA_Abort+0x22c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d054      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a31      	ldr	r2, [pc, #196]	; (8005e20 <HAL_DMA_Abort+0x230>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d04f      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a30      	ldr	r2, [pc, #192]	; (8005e24 <HAL_DMA_Abort+0x234>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d04a      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <HAL_DMA_Abort+0x238>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d045      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <HAL_DMA_Abort+0x23c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d040      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a2b      	ldr	r2, [pc, #172]	; (8005e30 <HAL_DMA_Abort+0x240>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d03b      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2a      	ldr	r2, [pc, #168]	; (8005e34 <HAL_DMA_Abort+0x244>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d036      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <HAL_DMA_Abort+0x248>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <HAL_DMA_Abort+0x24c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d02c      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <HAL_DMA_Abort+0x250>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d027      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a24      	ldr	r2, [pc, #144]	; (8005e44 <HAL_DMA_Abort+0x254>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <HAL_DMA_Abort+0x258>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01d      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <HAL_DMA_Abort+0x25c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d018      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <HAL_DMA_Abort+0x260>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <HAL_DMA_Abort+0x264>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00e      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_DMA_Abort+0x268>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	; (8005e5c <HAL_DMA_Abort+0x26c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_DMA_Abort+0x20e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <HAL_DMA_Abort+0x270>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d132      	bne.n	8005e64 <HAL_DMA_Abort+0x274>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e031      	b.n	8005e66 <HAL_DMA_Abort+0x276>
 8005e02:	bf00      	nop
 8005e04:	40020010 	.word	0x40020010
 8005e08:	40020028 	.word	0x40020028
 8005e0c:	40020040 	.word	0x40020040
 8005e10:	40020058 	.word	0x40020058
 8005e14:	40020070 	.word	0x40020070
 8005e18:	40020088 	.word	0x40020088
 8005e1c:	400200a0 	.word	0x400200a0
 8005e20:	400200b8 	.word	0x400200b8
 8005e24:	40020410 	.word	0x40020410
 8005e28:	40020428 	.word	0x40020428
 8005e2c:	40020440 	.word	0x40020440
 8005e30:	40020458 	.word	0x40020458
 8005e34:	40020470 	.word	0x40020470
 8005e38:	40020488 	.word	0x40020488
 8005e3c:	400204a0 	.word	0x400204a0
 8005e40:	400204b8 	.word	0x400204b8
 8005e44:	58025408 	.word	0x58025408
 8005e48:	5802541c 	.word	0x5802541c
 8005e4c:	58025430 	.word	0x58025430
 8005e50:	58025444 	.word	0x58025444
 8005e54:	58025458 	.word	0x58025458
 8005e58:	5802546c 	.word	0x5802546c
 8005e5c:	58025480 	.word	0x58025480
 8005e60:	58025494 	.word	0x58025494
 8005e64:	2300      	movs	r3, #0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6d      	ldr	r2, [pc, #436]	; (8006034 <HAL_DMA_Abort+0x444>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d04a      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6b      	ldr	r2, [pc, #428]	; (8006038 <HAL_DMA_Abort+0x448>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d045      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6a      	ldr	r2, [pc, #424]	; (800603c <HAL_DMA_Abort+0x44c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d040      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a68      	ldr	r2, [pc, #416]	; (8006040 <HAL_DMA_Abort+0x450>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03b      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a67      	ldr	r2, [pc, #412]	; (8006044 <HAL_DMA_Abort+0x454>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d036      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a65      	ldr	r2, [pc, #404]	; (8006048 <HAL_DMA_Abort+0x458>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d031      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a64      	ldr	r2, [pc, #400]	; (800604c <HAL_DMA_Abort+0x45c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d02c      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a62      	ldr	r2, [pc, #392]	; (8006050 <HAL_DMA_Abort+0x460>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d027      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a61      	ldr	r2, [pc, #388]	; (8006054 <HAL_DMA_Abort+0x464>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <HAL_DMA_Abort+0x468>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a5e      	ldr	r2, [pc, #376]	; (800605c <HAL_DMA_Abort+0x46c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a5c      	ldr	r2, [pc, #368]	; (8006060 <HAL_DMA_Abort+0x470>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a5b      	ldr	r2, [pc, #364]	; (8006064 <HAL_DMA_Abort+0x474>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a59      	ldr	r2, [pc, #356]	; (8006068 <HAL_DMA_Abort+0x478>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a58      	ldr	r2, [pc, #352]	; (800606c <HAL_DMA_Abort+0x47c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_DMA_Abort+0x32a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a56      	ldr	r2, [pc, #344]	; (8006070 <HAL_DMA_Abort+0x480>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d108      	bne.n	8005f2c <HAL_DMA_Abort+0x33c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e007      	b.n	8005f3c <HAL_DMA_Abort+0x34c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f3c:	e013      	b.n	8005f66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f3e:	f7fe ff77 	bl	8004e30 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	d90c      	bls.n	8005f66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2203      	movs	r2, #3
 8005f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e12d      	b.n	80061c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <HAL_DMA_Abort+0x444>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d04a      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <HAL_DMA_Abort+0x448>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d045      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2c      	ldr	r2, [pc, #176]	; (800603c <HAL_DMA_Abort+0x44c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d040      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <HAL_DMA_Abort+0x450>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d03b      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a29      	ldr	r2, [pc, #164]	; (8006044 <HAL_DMA_Abort+0x454>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d036      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a27      	ldr	r2, [pc, #156]	; (8006048 <HAL_DMA_Abort+0x458>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d031      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a26      	ldr	r2, [pc, #152]	; (800604c <HAL_DMA_Abort+0x45c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d02c      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a24      	ldr	r2, [pc, #144]	; (8006050 <HAL_DMA_Abort+0x460>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d027      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a23      	ldr	r2, [pc, #140]	; (8006054 <HAL_DMA_Abort+0x464>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d022      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a21      	ldr	r2, [pc, #132]	; (8006058 <HAL_DMA_Abort+0x468>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a20      	ldr	r2, [pc, #128]	; (800605c <HAL_DMA_Abort+0x46c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <HAL_DMA_Abort+0x470>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_DMA_Abort+0x474>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1b      	ldr	r2, [pc, #108]	; (8006068 <HAL_DMA_Abort+0x478>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1a      	ldr	r2, [pc, #104]	; (800606c <HAL_DMA_Abort+0x47c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_DMA_Abort+0x422>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_DMA_Abort+0x480>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d101      	bne.n	8006016 <HAL_DMA_Abort+0x426>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <HAL_DMA_Abort+0x428>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02b      	beq.n	8006074 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006020:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	223f      	movs	r2, #63	; 0x3f
 800602c:	409a      	lsls	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	609a      	str	r2, [r3, #8]
 8006032:	e02a      	b.n	800608a <HAL_DMA_Abort+0x49a>
 8006034:	40020010 	.word	0x40020010
 8006038:	40020028 	.word	0x40020028
 800603c:	40020040 	.word	0x40020040
 8006040:	40020058 	.word	0x40020058
 8006044:	40020070 	.word	0x40020070
 8006048:	40020088 	.word	0x40020088
 800604c:	400200a0 	.word	0x400200a0
 8006050:	400200b8 	.word	0x400200b8
 8006054:	40020410 	.word	0x40020410
 8006058:	40020428 	.word	0x40020428
 800605c:	40020440 	.word	0x40020440
 8006060:	40020458 	.word	0x40020458
 8006064:	40020470 	.word	0x40020470
 8006068:	40020488 	.word	0x40020488
 800606c:	400204a0 	.word	0x400204a0
 8006070:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2201      	movs	r2, #1
 8006084:	409a      	lsls	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a4f      	ldr	r2, [pc, #316]	; (80061cc <HAL_DMA_Abort+0x5dc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d072      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a4d      	ldr	r2, [pc, #308]	; (80061d0 <HAL_DMA_Abort+0x5e0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d06d      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a4c      	ldr	r2, [pc, #304]	; (80061d4 <HAL_DMA_Abort+0x5e4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d068      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4a      	ldr	r2, [pc, #296]	; (80061d8 <HAL_DMA_Abort+0x5e8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d063      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a49      	ldr	r2, [pc, #292]	; (80061dc <HAL_DMA_Abort+0x5ec>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d05e      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a47      	ldr	r2, [pc, #284]	; (80061e0 <HAL_DMA_Abort+0x5f0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d059      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a46      	ldr	r2, [pc, #280]	; (80061e4 <HAL_DMA_Abort+0x5f4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d054      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a44      	ldr	r2, [pc, #272]	; (80061e8 <HAL_DMA_Abort+0x5f8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d04f      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a43      	ldr	r2, [pc, #268]	; (80061ec <HAL_DMA_Abort+0x5fc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d04a      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a41      	ldr	r2, [pc, #260]	; (80061f0 <HAL_DMA_Abort+0x600>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d045      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a40      	ldr	r2, [pc, #256]	; (80061f4 <HAL_DMA_Abort+0x604>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d040      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3e      	ldr	r2, [pc, #248]	; (80061f8 <HAL_DMA_Abort+0x608>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d03b      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3d      	ldr	r2, [pc, #244]	; (80061fc <HAL_DMA_Abort+0x60c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d036      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3b      	ldr	r2, [pc, #236]	; (8006200 <HAL_DMA_Abort+0x610>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d031      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3a      	ldr	r2, [pc, #232]	; (8006204 <HAL_DMA_Abort+0x614>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d02c      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a38      	ldr	r2, [pc, #224]	; (8006208 <HAL_DMA_Abort+0x618>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d027      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a37      	ldr	r2, [pc, #220]	; (800620c <HAL_DMA_Abort+0x61c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a35      	ldr	r2, [pc, #212]	; (8006210 <HAL_DMA_Abort+0x620>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_DMA_Abort+0x624>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a32      	ldr	r2, [pc, #200]	; (8006218 <HAL_DMA_Abort+0x628>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a31      	ldr	r2, [pc, #196]	; (800621c <HAL_DMA_Abort+0x62c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a2f      	ldr	r2, [pc, #188]	; (8006220 <HAL_DMA_Abort+0x630>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2e      	ldr	r2, [pc, #184]	; (8006224 <HAL_DMA_Abort+0x634>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_DMA_Abort+0x58a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2c      	ldr	r2, [pc, #176]	; (8006228 <HAL_DMA_Abort+0x638>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_DMA_Abort+0x58e>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_DMA_Abort+0x590>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d015      	beq.n	80061b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800618c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40020010 	.word	0x40020010
 80061d0:	40020028 	.word	0x40020028
 80061d4:	40020040 	.word	0x40020040
 80061d8:	40020058 	.word	0x40020058
 80061dc:	40020070 	.word	0x40020070
 80061e0:	40020088 	.word	0x40020088
 80061e4:	400200a0 	.word	0x400200a0
 80061e8:	400200b8 	.word	0x400200b8
 80061ec:	40020410 	.word	0x40020410
 80061f0:	40020428 	.word	0x40020428
 80061f4:	40020440 	.word	0x40020440
 80061f8:	40020458 	.word	0x40020458
 80061fc:	40020470 	.word	0x40020470
 8006200:	40020488 	.word	0x40020488
 8006204:	400204a0 	.word	0x400204a0
 8006208:	400204b8 	.word	0x400204b8
 800620c:	58025408 	.word	0x58025408
 8006210:	5802541c 	.word	0x5802541c
 8006214:	58025430 	.word	0x58025430
 8006218:	58025444 	.word	0x58025444
 800621c:	58025458 	.word	0x58025458
 8006220:	5802546c 	.word	0x5802546c
 8006224:	58025480 	.word	0x58025480
 8006228:	58025494 	.word	0x58025494

0800622c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e237      	b.n	80066ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d004      	beq.n	8006254 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2280      	movs	r2, #128	; 0x80
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e22c      	b.n	80066ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5c      	ldr	r2, [pc, #368]	; (80063cc <HAL_DMA_Abort_IT+0x1a0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d04a      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5b      	ldr	r2, [pc, #364]	; (80063d0 <HAL_DMA_Abort_IT+0x1a4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d045      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a59      	ldr	r2, [pc, #356]	; (80063d4 <HAL_DMA_Abort_IT+0x1a8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d040      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a58      	ldr	r2, [pc, #352]	; (80063d8 <HAL_DMA_Abort_IT+0x1ac>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d03b      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a56      	ldr	r2, [pc, #344]	; (80063dc <HAL_DMA_Abort_IT+0x1b0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d036      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a55      	ldr	r2, [pc, #340]	; (80063e0 <HAL_DMA_Abort_IT+0x1b4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d031      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a53      	ldr	r2, [pc, #332]	; (80063e4 <HAL_DMA_Abort_IT+0x1b8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d02c      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a52      	ldr	r2, [pc, #328]	; (80063e8 <HAL_DMA_Abort_IT+0x1bc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d027      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a50      	ldr	r2, [pc, #320]	; (80063ec <HAL_DMA_Abort_IT+0x1c0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d022      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a4f      	ldr	r2, [pc, #316]	; (80063f0 <HAL_DMA_Abort_IT+0x1c4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d01d      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a4d      	ldr	r2, [pc, #308]	; (80063f4 <HAL_DMA_Abort_IT+0x1c8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d018      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a4c      	ldr	r2, [pc, #304]	; (80063f8 <HAL_DMA_Abort_IT+0x1cc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a4a      	ldr	r2, [pc, #296]	; (80063fc <HAL_DMA_Abort_IT+0x1d0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00e      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a49      	ldr	r2, [pc, #292]	; (8006400 <HAL_DMA_Abort_IT+0x1d4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a47      	ldr	r2, [pc, #284]	; (8006404 <HAL_DMA_Abort_IT+0x1d8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xc8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a46      	ldr	r2, [pc, #280]	; (8006408 <HAL_DMA_Abort_IT+0x1dc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d101      	bne.n	80062f8 <HAL_DMA_Abort_IT+0xcc>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_DMA_Abort_IT+0xce>
 80062f8:	2300      	movs	r3, #0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8086 	beq.w	800640c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2204      	movs	r2, #4
 8006304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a2f      	ldr	r2, [pc, #188]	; (80063cc <HAL_DMA_Abort_IT+0x1a0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d04a      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <HAL_DMA_Abort_IT+0x1a4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d045      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a2c      	ldr	r2, [pc, #176]	; (80063d4 <HAL_DMA_Abort_IT+0x1a8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d040      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <HAL_DMA_Abort_IT+0x1ac>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d03b      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a29      	ldr	r2, [pc, #164]	; (80063dc <HAL_DMA_Abort_IT+0x1b0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d036      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a28      	ldr	r2, [pc, #160]	; (80063e0 <HAL_DMA_Abort_IT+0x1b4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d031      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a26      	ldr	r2, [pc, #152]	; (80063e4 <HAL_DMA_Abort_IT+0x1b8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d02c      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <HAL_DMA_Abort_IT+0x1bc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d027      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a23      	ldr	r2, [pc, #140]	; (80063ec <HAL_DMA_Abort_IT+0x1c0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <HAL_DMA_Abort_IT+0x1c4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d01d      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <HAL_DMA_Abort_IT+0x1c8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_DMA_Abort_IT+0x1cc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1d      	ldr	r2, [pc, #116]	; (80063fc <HAL_DMA_Abort_IT+0x1d0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_DMA_Abort_IT+0x1d4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <HAL_DMA_Abort_IT+0x1d8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <HAL_DMA_Abort_IT+0x17c>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a19      	ldr	r2, [pc, #100]	; (8006408 <HAL_DMA_Abort_IT+0x1dc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <HAL_DMA_Abort_IT+0x18e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	e178      	b.n	80066ac <HAL_DMA_Abort_IT+0x480>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e16f      	b.n	80066ac <HAL_DMA_Abort_IT+0x480>
 80063cc:	40020010 	.word	0x40020010
 80063d0:	40020028 	.word	0x40020028
 80063d4:	40020040 	.word	0x40020040
 80063d8:	40020058 	.word	0x40020058
 80063dc:	40020070 	.word	0x40020070
 80063e0:	40020088 	.word	0x40020088
 80063e4:	400200a0 	.word	0x400200a0
 80063e8:	400200b8 	.word	0x400200b8
 80063ec:	40020410 	.word	0x40020410
 80063f0:	40020428 	.word	0x40020428
 80063f4:	40020440 	.word	0x40020440
 80063f8:	40020458 	.word	0x40020458
 80063fc:	40020470 	.word	0x40020470
 8006400:	40020488 	.word	0x40020488
 8006404:	400204a0 	.word	0x400204a0
 8006408:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 020e 	bic.w	r2, r2, #14
 800641a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a6c      	ldr	r2, [pc, #432]	; (80065d4 <HAL_DMA_Abort_IT+0x3a8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d04a      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6b      	ldr	r2, [pc, #428]	; (80065d8 <HAL_DMA_Abort_IT+0x3ac>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d045      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a69      	ldr	r2, [pc, #420]	; (80065dc <HAL_DMA_Abort_IT+0x3b0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d040      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a68      	ldr	r2, [pc, #416]	; (80065e0 <HAL_DMA_Abort_IT+0x3b4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d03b      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a66      	ldr	r2, [pc, #408]	; (80065e4 <HAL_DMA_Abort_IT+0x3b8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d036      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a65      	ldr	r2, [pc, #404]	; (80065e8 <HAL_DMA_Abort_IT+0x3bc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d031      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a63      	ldr	r2, [pc, #396]	; (80065ec <HAL_DMA_Abort_IT+0x3c0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02c      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a62      	ldr	r2, [pc, #392]	; (80065f0 <HAL_DMA_Abort_IT+0x3c4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d027      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a60      	ldr	r2, [pc, #384]	; (80065f4 <HAL_DMA_Abort_IT+0x3c8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5f      	ldr	r2, [pc, #380]	; (80065f8 <HAL_DMA_Abort_IT+0x3cc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5d      	ldr	r2, [pc, #372]	; (80065fc <HAL_DMA_Abort_IT+0x3d0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a5c      	ldr	r2, [pc, #368]	; (8006600 <HAL_DMA_Abort_IT+0x3d4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a5a      	ldr	r2, [pc, #360]	; (8006604 <HAL_DMA_Abort_IT+0x3d8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a59      	ldr	r2, [pc, #356]	; (8006608 <HAL_DMA_Abort_IT+0x3dc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a57      	ldr	r2, [pc, #348]	; (800660c <HAL_DMA_Abort_IT+0x3e0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <HAL_DMA_Abort_IT+0x290>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a56      	ldr	r2, [pc, #344]	; (8006610 <HAL_DMA_Abort_IT+0x3e4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <HAL_DMA_Abort_IT+0x2a2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e007      	b.n	80064de <HAL_DMA_Abort_IT+0x2b2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a3c      	ldr	r2, [pc, #240]	; (80065d4 <HAL_DMA_Abort_IT+0x3a8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d072      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a3a      	ldr	r2, [pc, #232]	; (80065d8 <HAL_DMA_Abort_IT+0x3ac>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d06d      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a39      	ldr	r2, [pc, #228]	; (80065dc <HAL_DMA_Abort_IT+0x3b0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d068      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a37      	ldr	r2, [pc, #220]	; (80065e0 <HAL_DMA_Abort_IT+0x3b4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d063      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a36      	ldr	r2, [pc, #216]	; (80065e4 <HAL_DMA_Abort_IT+0x3b8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d05e      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a34      	ldr	r2, [pc, #208]	; (80065e8 <HAL_DMA_Abort_IT+0x3bc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d059      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a33      	ldr	r2, [pc, #204]	; (80065ec <HAL_DMA_Abort_IT+0x3c0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d054      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a31      	ldr	r2, [pc, #196]	; (80065f0 <HAL_DMA_Abort_IT+0x3c4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04f      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a30      	ldr	r2, [pc, #192]	; (80065f4 <HAL_DMA_Abort_IT+0x3c8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d04a      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <HAL_DMA_Abort_IT+0x3cc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d045      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <HAL_DMA_Abort_IT+0x3d0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d040      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2b      	ldr	r2, [pc, #172]	; (8006600 <HAL_DMA_Abort_IT+0x3d4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d03b      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <HAL_DMA_Abort_IT+0x3d8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d036      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a28      	ldr	r2, [pc, #160]	; (8006608 <HAL_DMA_Abort_IT+0x3dc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d031      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a27      	ldr	r2, [pc, #156]	; (800660c <HAL_DMA_Abort_IT+0x3e0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d02c      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a25      	ldr	r2, [pc, #148]	; (8006610 <HAL_DMA_Abort_IT+0x3e4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d027      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <HAL_DMA_Abort_IT+0x3e8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_DMA_Abort_IT+0x3ec>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a21      	ldr	r2, [pc, #132]	; (800661c <HAL_DMA_Abort_IT+0x3f0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <HAL_DMA_Abort_IT+0x3f4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <HAL_DMA_Abort_IT+0x3f8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_DMA_Abort_IT+0x3fc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1b      	ldr	r2, [pc, #108]	; (800662c <HAL_DMA_Abort_IT+0x400>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_DMA_Abort_IT+0x3a2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_DMA_Abort_IT+0x404>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d132      	bne.n	8006634 <HAL_DMA_Abort_IT+0x408>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e031      	b.n	8006636 <HAL_DMA_Abort_IT+0x40a>
 80065d2:	bf00      	nop
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494
 8006634:	2300      	movs	r3, #0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d028      	beq.n	800668c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006648:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	2201      	movs	r2, #1
 800665a:	409a      	lsls	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006668:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00c      	beq.n	800668c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006680:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800668a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	; 0x28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066c4:	4b67      	ldr	r3, [pc, #412]	; (8006864 <HAL_DMA_IRQHandler+0x1ac>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a67      	ldr	r2, [pc, #412]	; (8006868 <HAL_DMA_IRQHandler+0x1b0>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	0a9b      	lsrs	r3, r3, #10
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a5f      	ldr	r2, [pc, #380]	; (800686c <HAL_DMA_IRQHandler+0x1b4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d04a      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a5d      	ldr	r2, [pc, #372]	; (8006870 <HAL_DMA_IRQHandler+0x1b8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d045      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a5c      	ldr	r2, [pc, #368]	; (8006874 <HAL_DMA_IRQHandler+0x1bc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d040      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a5a      	ldr	r2, [pc, #360]	; (8006878 <HAL_DMA_IRQHandler+0x1c0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d03b      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a59      	ldr	r2, [pc, #356]	; (800687c <HAL_DMA_IRQHandler+0x1c4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d036      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a57      	ldr	r2, [pc, #348]	; (8006880 <HAL_DMA_IRQHandler+0x1c8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d031      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a56      	ldr	r2, [pc, #344]	; (8006884 <HAL_DMA_IRQHandler+0x1cc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d02c      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a54      	ldr	r2, [pc, #336]	; (8006888 <HAL_DMA_IRQHandler+0x1d0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d027      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a53      	ldr	r2, [pc, #332]	; (800688c <HAL_DMA_IRQHandler+0x1d4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d022      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a51      	ldr	r2, [pc, #324]	; (8006890 <HAL_DMA_IRQHandler+0x1d8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01d      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a50      	ldr	r2, [pc, #320]	; (8006894 <HAL_DMA_IRQHandler+0x1dc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d018      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a4e      	ldr	r2, [pc, #312]	; (8006898 <HAL_DMA_IRQHandler+0x1e0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a4d      	ldr	r2, [pc, #308]	; (800689c <HAL_DMA_IRQHandler+0x1e4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00e      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a4b      	ldr	r2, [pc, #300]	; (80068a0 <HAL_DMA_IRQHandler+0x1e8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a4a      	ldr	r2, [pc, #296]	; (80068a4 <HAL_DMA_IRQHandler+0x1ec>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_DMA_IRQHandler+0xd2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a48      	ldr	r2, [pc, #288]	; (80068a8 <HAL_DMA_IRQHandler+0x1f0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_DMA_IRQHandler+0xd6>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <HAL_DMA_IRQHandler+0xd8>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 842b 	beq.w	8006fec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2208      	movs	r2, #8
 80067a0:	409a      	lsls	r2, r3
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80a2 	beq.w	80068f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a2e      	ldr	r2, [pc, #184]	; (800686c <HAL_DMA_IRQHandler+0x1b4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d04a      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a2d      	ldr	r2, [pc, #180]	; (8006870 <HAL_DMA_IRQHandler+0x1b8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d045      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a2b      	ldr	r2, [pc, #172]	; (8006874 <HAL_DMA_IRQHandler+0x1bc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d040      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a2a      	ldr	r2, [pc, #168]	; (8006878 <HAL_DMA_IRQHandler+0x1c0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d03b      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a28      	ldr	r2, [pc, #160]	; (800687c <HAL_DMA_IRQHandler+0x1c4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d036      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a27      	ldr	r2, [pc, #156]	; (8006880 <HAL_DMA_IRQHandler+0x1c8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d031      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a25      	ldr	r2, [pc, #148]	; (8006884 <HAL_DMA_IRQHandler+0x1cc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d02c      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a24      	ldr	r2, [pc, #144]	; (8006888 <HAL_DMA_IRQHandler+0x1d0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d027      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a22      	ldr	r2, [pc, #136]	; (800688c <HAL_DMA_IRQHandler+0x1d4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d022      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a21      	ldr	r2, [pc, #132]	; (8006890 <HAL_DMA_IRQHandler+0x1d8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d01d      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1f      	ldr	r2, [pc, #124]	; (8006894 <HAL_DMA_IRQHandler+0x1dc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d018      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <HAL_DMA_IRQHandler+0x1e0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d013      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1c      	ldr	r2, [pc, #112]	; (800689c <HAL_DMA_IRQHandler+0x1e4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00e      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <HAL_DMA_IRQHandler+0x1e8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d009      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <HAL_DMA_IRQHandler+0x1ec>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <HAL_DMA_IRQHandler+0x194>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <HAL_DMA_IRQHandler+0x1f0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d12f      	bne.n	80068ac <HAL_DMA_IRQHandler+0x1f4>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf14      	ite	ne
 800685a:	2301      	movne	r3, #1
 800685c:	2300      	moveq	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	e02e      	b.n	80068c0 <HAL_DMA_IRQHandler+0x208>
 8006862:	bf00      	nop
 8006864:	24000000 	.word	0x24000000
 8006868:	1b4e81b5 	.word	0x1b4e81b5
 800686c:	40020010 	.word	0x40020010
 8006870:	40020028 	.word	0x40020028
 8006874:	40020040 	.word	0x40020040
 8006878:	40020058 	.word	0x40020058
 800687c:	40020070 	.word	0x40020070
 8006880:	40020088 	.word	0x40020088
 8006884:	400200a0 	.word	0x400200a0
 8006888:	400200b8 	.word	0x400200b8
 800688c:	40020410 	.word	0x40020410
 8006890:	40020428 	.word	0x40020428
 8006894:	40020440 	.word	0x40020440
 8006898:	40020458 	.word	0x40020458
 800689c:	40020470 	.word	0x40020470
 80068a0:	40020488 	.word	0x40020488
 80068a4:	400204a0 	.word	0x400204a0
 80068a8:	400204b8 	.word	0x400204b8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d015      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	2208      	movs	r2, #8
 80068de:	409a      	lsls	r2, r3
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e8:	f043 0201 	orr.w	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d06e      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a69      	ldr	r2, [pc, #420]	; (8006ab0 <HAL_DMA_IRQHandler+0x3f8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d04a      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a67      	ldr	r2, [pc, #412]	; (8006ab4 <HAL_DMA_IRQHandler+0x3fc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d045      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a66      	ldr	r2, [pc, #408]	; (8006ab8 <HAL_DMA_IRQHandler+0x400>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d040      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a64      	ldr	r2, [pc, #400]	; (8006abc <HAL_DMA_IRQHandler+0x404>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d03b      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a63      	ldr	r2, [pc, #396]	; (8006ac0 <HAL_DMA_IRQHandler+0x408>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d036      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a61      	ldr	r2, [pc, #388]	; (8006ac4 <HAL_DMA_IRQHandler+0x40c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d031      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a60      	ldr	r2, [pc, #384]	; (8006ac8 <HAL_DMA_IRQHandler+0x410>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d02c      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a5e      	ldr	r2, [pc, #376]	; (8006acc <HAL_DMA_IRQHandler+0x414>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d027      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a5d      	ldr	r2, [pc, #372]	; (8006ad0 <HAL_DMA_IRQHandler+0x418>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d022      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a5b      	ldr	r2, [pc, #364]	; (8006ad4 <HAL_DMA_IRQHandler+0x41c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01d      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a5a      	ldr	r2, [pc, #360]	; (8006ad8 <HAL_DMA_IRQHandler+0x420>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d018      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a58      	ldr	r2, [pc, #352]	; (8006adc <HAL_DMA_IRQHandler+0x424>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a57      	ldr	r2, [pc, #348]	; (8006ae0 <HAL_DMA_IRQHandler+0x428>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a55      	ldr	r2, [pc, #340]	; (8006ae4 <HAL_DMA_IRQHandler+0x42c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a54      	ldr	r2, [pc, #336]	; (8006ae8 <HAL_DMA_IRQHandler+0x430>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x2ee>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a52      	ldr	r2, [pc, #328]	; (8006aec <HAL_DMA_IRQHandler+0x434>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10a      	bne.n	80069bc <HAL_DMA_IRQHandler+0x304>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	e003      	b.n	80069c4 <HAL_DMA_IRQHandler+0x30c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00d      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069cc:	f003 031f 	and.w	r3, r3, #31
 80069d0:	2201      	movs	r2, #1
 80069d2:	409a      	lsls	r2, r3
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	f043 0202 	orr.w	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2204      	movs	r2, #4
 80069ee:	409a      	lsls	r2, r3
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 808f 	beq.w	8006b18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2c      	ldr	r2, [pc, #176]	; (8006ab0 <HAL_DMA_IRQHandler+0x3f8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04a      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <HAL_DMA_IRQHandler+0x3fc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d045      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <HAL_DMA_IRQHandler+0x400>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d040      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a27      	ldr	r2, [pc, #156]	; (8006abc <HAL_DMA_IRQHandler+0x404>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d03b      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <HAL_DMA_IRQHandler+0x408>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d036      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <HAL_DMA_IRQHandler+0x40c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d031      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a23      	ldr	r2, [pc, #140]	; (8006ac8 <HAL_DMA_IRQHandler+0x410>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d02c      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a21      	ldr	r2, [pc, #132]	; (8006acc <HAL_DMA_IRQHandler+0x414>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d027      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <HAL_DMA_IRQHandler+0x418>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_DMA_IRQHandler+0x41c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01d      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <HAL_DMA_IRQHandler+0x420>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d018      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <HAL_DMA_IRQHandler+0x424>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1a      	ldr	r2, [pc, #104]	; (8006ae0 <HAL_DMA_IRQHandler+0x428>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a18      	ldr	r2, [pc, #96]	; (8006ae4 <HAL_DMA_IRQHandler+0x42c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <HAL_DMA_IRQHandler+0x430>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3e2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a15      	ldr	r2, [pc, #84]	; (8006aec <HAL_DMA_IRQHandler+0x434>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d12a      	bne.n	8006af0 <HAL_DMA_IRQHandler+0x438>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e023      	b.n	8006af8 <HAL_DMA_IRQHandler+0x440>
 8006ab0:	40020010 	.word	0x40020010
 8006ab4:	40020028 	.word	0x40020028
 8006ab8:	40020040 	.word	0x40020040
 8006abc:	40020058 	.word	0x40020058
 8006ac0:	40020070 	.word	0x40020070
 8006ac4:	40020088 	.word	0x40020088
 8006ac8:	400200a0 	.word	0x400200a0
 8006acc:	400200b8 	.word	0x400200b8
 8006ad0:	40020410 	.word	0x40020410
 8006ad4:	40020428 	.word	0x40020428
 8006ad8:	40020440 	.word	0x40020440
 8006adc:	40020458 	.word	0x40020458
 8006ae0:	40020470 	.word	0x40020470
 8006ae4:	40020488 	.word	0x40020488
 8006ae8:	400204a0 	.word	0x400204a0
 8006aec:	400204b8 	.word	0x400204b8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00d      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	2204      	movs	r2, #4
 8006b06:	409a      	lsls	r2, r3
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	2210      	movs	r2, #16
 8006b22:	409a      	lsls	r2, r3
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80a6 	beq.w	8006c7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a85      	ldr	r2, [pc, #532]	; (8006d48 <HAL_DMA_IRQHandler+0x690>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04a      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a83      	ldr	r2, [pc, #524]	; (8006d4c <HAL_DMA_IRQHandler+0x694>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d045      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a82      	ldr	r2, [pc, #520]	; (8006d50 <HAL_DMA_IRQHandler+0x698>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d040      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a80      	ldr	r2, [pc, #512]	; (8006d54 <HAL_DMA_IRQHandler+0x69c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d03b      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a7f      	ldr	r2, [pc, #508]	; (8006d58 <HAL_DMA_IRQHandler+0x6a0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d036      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a7d      	ldr	r2, [pc, #500]	; (8006d5c <HAL_DMA_IRQHandler+0x6a4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d031      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a7c      	ldr	r2, [pc, #496]	; (8006d60 <HAL_DMA_IRQHandler+0x6a8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d02c      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a7a      	ldr	r2, [pc, #488]	; (8006d64 <HAL_DMA_IRQHandler+0x6ac>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d027      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a79      	ldr	r2, [pc, #484]	; (8006d68 <HAL_DMA_IRQHandler+0x6b0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a77      	ldr	r2, [pc, #476]	; (8006d6c <HAL_DMA_IRQHandler+0x6b4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01d      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a76      	ldr	r2, [pc, #472]	; (8006d70 <HAL_DMA_IRQHandler+0x6b8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a74      	ldr	r2, [pc, #464]	; (8006d74 <HAL_DMA_IRQHandler+0x6bc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a73      	ldr	r2, [pc, #460]	; (8006d78 <HAL_DMA_IRQHandler+0x6c0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a71      	ldr	r2, [pc, #452]	; (8006d7c <HAL_DMA_IRQHandler+0x6c4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a70      	ldr	r2, [pc, #448]	; (8006d80 <HAL_DMA_IRQHandler+0x6c8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_DMA_IRQHandler+0x516>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a6e      	ldr	r2, [pc, #440]	; (8006d84 <HAL_DMA_IRQHandler+0x6cc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d10a      	bne.n	8006be4 <HAL_DMA_IRQHandler+0x52c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e009      	b.n	8006bf8 <HAL_DMA_IRQHandler+0x540>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bf14      	ite	ne
 8006bf2:	2301      	movne	r3, #1
 8006bf4:	2300      	moveq	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d03e      	beq.n	8006c7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2210      	movs	r2, #16
 8006c06:	409a      	lsls	r2, r3
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d108      	bne.n	8006c3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d024      	beq.n	8006c7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
 8006c38:	e01f      	b.n	8006c7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01b      	beq.n	8006c7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	e016      	b.n	8006c7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d107      	bne.n	8006c6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0208 	bic.w	r2, r2, #8
 8006c68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	2220      	movs	r2, #32
 8006c84:	409a      	lsls	r2, r3
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8110 	beq.w	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <HAL_DMA_IRQHandler+0x690>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04a      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <HAL_DMA_IRQHandler+0x694>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d045      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a29      	ldr	r2, [pc, #164]	; (8006d50 <HAL_DMA_IRQHandler+0x698>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d040      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a28      	ldr	r2, [pc, #160]	; (8006d54 <HAL_DMA_IRQHandler+0x69c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03b      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_DMA_IRQHandler+0x6a0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a25      	ldr	r2, [pc, #148]	; (8006d5c <HAL_DMA_IRQHandler+0x6a4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d031      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <HAL_DMA_IRQHandler+0x6a8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02c      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <HAL_DMA_IRQHandler+0x6ac>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d027      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_DMA_IRQHandler+0x6b0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <HAL_DMA_IRQHandler+0x6b4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_DMA_IRQHandler+0x6b8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <HAL_DMA_IRQHandler+0x6bc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1a      	ldr	r2, [pc, #104]	; (8006d78 <HAL_DMA_IRQHandler+0x6c0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <HAL_DMA_IRQHandler+0x6c4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a17      	ldr	r2, [pc, #92]	; (8006d80 <HAL_DMA_IRQHandler+0x6c8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_DMA_IRQHandler+0x678>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <HAL_DMA_IRQHandler+0x6cc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d12b      	bne.n	8006d88 <HAL_DMA_IRQHandler+0x6d0>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	2300      	moveq	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	e02a      	b.n	8006d9c <HAL_DMA_IRQHandler+0x6e4>
 8006d46:	bf00      	nop
 8006d48:	40020010 	.word	0x40020010
 8006d4c:	40020028 	.word	0x40020028
 8006d50:	40020040 	.word	0x40020040
 8006d54:	40020058 	.word	0x40020058
 8006d58:	40020070 	.word	0x40020070
 8006d5c:	40020088 	.word	0x40020088
 8006d60:	400200a0 	.word	0x400200a0
 8006d64:	400200b8 	.word	0x400200b8
 8006d68:	40020410 	.word	0x40020410
 8006d6c:	40020428 	.word	0x40020428
 8006d70:	40020440 	.word	0x40020440
 8006d74:	40020458 	.word	0x40020458
 8006d78:	40020470 	.word	0x40020470
 8006d7c:	40020488 	.word	0x40020488
 8006d80:	400204a0 	.word	0x400204a0
 8006d84:	400204b8 	.word	0x400204b8
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bf14      	ite	ne
 8006d96:	2301      	movne	r3, #1
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8087 	beq.w	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2220      	movs	r2, #32
 8006dac:	409a      	lsls	r2, r3
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d139      	bne.n	8006e32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0216 	bic.w	r2, r2, #22
 8006dcc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ddc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d103      	bne.n	8006dee <HAL_DMA_IRQHandler+0x736>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d007      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0208 	bic.w	r2, r2, #8
 8006dfc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	223f      	movs	r2, #63	; 0x3f
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 834a 	beq.w	80074bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
          }
          return;
 8006e30:	e344      	b.n	80074bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d018      	beq.n	8006e72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d02c      	beq.n	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
 8006e5e:	e027      	b.n	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
 8006e70:	e01e      	b.n	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10f      	bne.n	8006ea0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0210 	bic.w	r2, r2, #16
 8006e8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8306 	beq.w	80074c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8088 	beq.w	8006fd8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a7a      	ldr	r2, [pc, #488]	; (80070c0 <HAL_DMA_IRQHandler+0xa08>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d04a      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a79      	ldr	r2, [pc, #484]	; (80070c4 <HAL_DMA_IRQHandler+0xa0c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d045      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a77      	ldr	r2, [pc, #476]	; (80070c8 <HAL_DMA_IRQHandler+0xa10>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d040      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a76      	ldr	r2, [pc, #472]	; (80070cc <HAL_DMA_IRQHandler+0xa14>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d03b      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a74      	ldr	r2, [pc, #464]	; (80070d0 <HAL_DMA_IRQHandler+0xa18>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d036      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a73      	ldr	r2, [pc, #460]	; (80070d4 <HAL_DMA_IRQHandler+0xa1c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d031      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a71      	ldr	r2, [pc, #452]	; (80070d8 <HAL_DMA_IRQHandler+0xa20>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d02c      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a70      	ldr	r2, [pc, #448]	; (80070dc <HAL_DMA_IRQHandler+0xa24>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d027      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6e      	ldr	r2, [pc, #440]	; (80070e0 <HAL_DMA_IRQHandler+0xa28>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d022      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a6d      	ldr	r2, [pc, #436]	; (80070e4 <HAL_DMA_IRQHandler+0xa2c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d01d      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a6b      	ldr	r2, [pc, #428]	; (80070e8 <HAL_DMA_IRQHandler+0xa30>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d018      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a6a      	ldr	r2, [pc, #424]	; (80070ec <HAL_DMA_IRQHandler+0xa34>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a68      	ldr	r2, [pc, #416]	; (80070f0 <HAL_DMA_IRQHandler+0xa38>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00e      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a67      	ldr	r2, [pc, #412]	; (80070f4 <HAL_DMA_IRQHandler+0xa3c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d009      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a65      	ldr	r2, [pc, #404]	; (80070f8 <HAL_DMA_IRQHandler+0xa40>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x8b8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a64      	ldr	r2, [pc, #400]	; (80070fc <HAL_DMA_IRQHandler+0xa44>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d108      	bne.n	8006f82 <HAL_DMA_IRQHandler+0x8ca>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e007      	b.n	8006f92 <HAL_DMA_IRQHandler+0x8da>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0201 	bic.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d307      	bcc.n	8006fae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f2      	bne.n	8006f92 <HAL_DMA_IRQHandler+0x8da>
 8006fac:	e000      	b.n	8006fb0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006fae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006fc6:	e003      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8272 	beq.w	80074c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
 8006fea:	e26c      	b.n	80074c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a43      	ldr	r2, [pc, #268]	; (8007100 <HAL_DMA_IRQHandler+0xa48>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d022      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a42      	ldr	r2, [pc, #264]	; (8007104 <HAL_DMA_IRQHandler+0xa4c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d01d      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a40      	ldr	r2, [pc, #256]	; (8007108 <HAL_DMA_IRQHandler+0xa50>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d018      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a3f      	ldr	r2, [pc, #252]	; (800710c <HAL_DMA_IRQHandler+0xa54>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a3d      	ldr	r2, [pc, #244]	; (8007110 <HAL_DMA_IRQHandler+0xa58>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <HAL_DMA_IRQHandler+0xa5c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a3a      	ldr	r2, [pc, #232]	; (8007118 <HAL_DMA_IRQHandler+0xa60>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_DMA_IRQHandler+0x984>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a39      	ldr	r2, [pc, #228]	; (800711c <HAL_DMA_IRQHandler+0xa64>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <HAL_DMA_IRQHandler+0x988>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <HAL_DMA_IRQHandler+0x98a>
 8007040:	2300      	movs	r3, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 823f 	beq.w	80074c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2204      	movs	r2, #4
 800705a:	409a      	lsls	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80cd 	beq.w	8007200 <HAL_DMA_IRQHandler+0xb48>
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80c7 	beq.w	8007200 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	2204      	movs	r2, #4
 800707c:	409a      	lsls	r2, r3
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d049      	beq.n	8007120 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 8210 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070a8:	e20a      	b.n	80074c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8206 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070bc:	e200      	b.n	80074c0 <HAL_DMA_IRQHandler+0xe08>
 80070be:	bf00      	nop
 80070c0:	40020010 	.word	0x40020010
 80070c4:	40020028 	.word	0x40020028
 80070c8:	40020040 	.word	0x40020040
 80070cc:	40020058 	.word	0x40020058
 80070d0:	40020070 	.word	0x40020070
 80070d4:	40020088 	.word	0x40020088
 80070d8:	400200a0 	.word	0x400200a0
 80070dc:	400200b8 	.word	0x400200b8
 80070e0:	40020410 	.word	0x40020410
 80070e4:	40020428 	.word	0x40020428
 80070e8:	40020440 	.word	0x40020440
 80070ec:	40020458 	.word	0x40020458
 80070f0:	40020470 	.word	0x40020470
 80070f4:	40020488 	.word	0x40020488
 80070f8:	400204a0 	.word	0x400204a0
 80070fc:	400204b8 	.word	0x400204b8
 8007100:	58025408 	.word	0x58025408
 8007104:	5802541c 	.word	0x5802541c
 8007108:	58025430 	.word	0x58025430
 800710c:	58025444 	.word	0x58025444
 8007110:	58025458 	.word	0x58025458
 8007114:	5802546c 	.word	0x5802546c
 8007118:	58025480 	.word	0x58025480
 800711c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d160      	bne.n	80071ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a7f      	ldr	r2, [pc, #508]	; (800732c <HAL_DMA_IRQHandler+0xc74>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d04a      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a7d      	ldr	r2, [pc, #500]	; (8007330 <HAL_DMA_IRQHandler+0xc78>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d045      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a7c      	ldr	r2, [pc, #496]	; (8007334 <HAL_DMA_IRQHandler+0xc7c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d040      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a7a      	ldr	r2, [pc, #488]	; (8007338 <HAL_DMA_IRQHandler+0xc80>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d03b      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a79      	ldr	r2, [pc, #484]	; (800733c <HAL_DMA_IRQHandler+0xc84>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d036      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a77      	ldr	r2, [pc, #476]	; (8007340 <HAL_DMA_IRQHandler+0xc88>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d031      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a76      	ldr	r2, [pc, #472]	; (8007344 <HAL_DMA_IRQHandler+0xc8c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d02c      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a74      	ldr	r2, [pc, #464]	; (8007348 <HAL_DMA_IRQHandler+0xc90>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d027      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a73      	ldr	r2, [pc, #460]	; (800734c <HAL_DMA_IRQHandler+0xc94>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d022      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a71      	ldr	r2, [pc, #452]	; (8007350 <HAL_DMA_IRQHandler+0xc98>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01d      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a70      	ldr	r2, [pc, #448]	; (8007354 <HAL_DMA_IRQHandler+0xc9c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d018      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a6e      	ldr	r2, [pc, #440]	; (8007358 <HAL_DMA_IRQHandler+0xca0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d013      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a6d      	ldr	r2, [pc, #436]	; (800735c <HAL_DMA_IRQHandler+0xca4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00e      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a6b      	ldr	r2, [pc, #428]	; (8007360 <HAL_DMA_IRQHandler+0xca8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d009      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a6a      	ldr	r2, [pc, #424]	; (8007364 <HAL_DMA_IRQHandler+0xcac>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <HAL_DMA_IRQHandler+0xb12>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a68      	ldr	r2, [pc, #416]	; (8007368 <HAL_DMA_IRQHandler+0xcb0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d108      	bne.n	80071dc <HAL_DMA_IRQHandler+0xb24>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0208 	bic.w	r2, r2, #8
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	e007      	b.n	80071ec <HAL_DMA_IRQHandler+0xb34>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0204 	bic.w	r2, r2, #4
 80071ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8165 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071fe:	e15f      	b.n	80074c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	2202      	movs	r2, #2
 800720a:	409a      	lsls	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80c5 	beq.w	80073a0 <HAL_DMA_IRQHandler+0xce8>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80bf 	beq.w	80073a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2202      	movs	r2, #2
 800722c:	409a      	lsls	r2, r3
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d018      	beq.n	800726e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 813a 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007258:	e134      	b.n	80074c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8130 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800726c:	e12a      	b.n	80074c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 8089 	bne.w	800738c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2b      	ldr	r2, [pc, #172]	; (800732c <HAL_DMA_IRQHandler+0xc74>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d04a      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a29      	ldr	r2, [pc, #164]	; (8007330 <HAL_DMA_IRQHandler+0xc78>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d045      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a28      	ldr	r2, [pc, #160]	; (8007334 <HAL_DMA_IRQHandler+0xc7c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d040      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a26      	ldr	r2, [pc, #152]	; (8007338 <HAL_DMA_IRQHandler+0xc80>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d03b      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a25      	ldr	r2, [pc, #148]	; (800733c <HAL_DMA_IRQHandler+0xc84>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d036      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a23      	ldr	r2, [pc, #140]	; (8007340 <HAL_DMA_IRQHandler+0xc88>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d031      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a22      	ldr	r2, [pc, #136]	; (8007344 <HAL_DMA_IRQHandler+0xc8c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d02c      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <HAL_DMA_IRQHandler+0xc90>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d027      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1f      	ldr	r2, [pc, #124]	; (800734c <HAL_DMA_IRQHandler+0xc94>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d022      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <HAL_DMA_IRQHandler+0xc98>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01d      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <HAL_DMA_IRQHandler+0xc9c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d018      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1a      	ldr	r2, [pc, #104]	; (8007358 <HAL_DMA_IRQHandler+0xca0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a19      	ldr	r2, [pc, #100]	; (800735c <HAL_DMA_IRQHandler+0xca4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00e      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a17      	ldr	r2, [pc, #92]	; (8007360 <HAL_DMA_IRQHandler+0xca8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a16      	ldr	r2, [pc, #88]	; (8007364 <HAL_DMA_IRQHandler+0xcac>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <HAL_DMA_IRQHandler+0xc62>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a14      	ldr	r2, [pc, #80]	; (8007368 <HAL_DMA_IRQHandler+0xcb0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d128      	bne.n	800736c <HAL_DMA_IRQHandler+0xcb4>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0214 	bic.w	r2, r2, #20
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e027      	b.n	800737c <HAL_DMA_IRQHandler+0xcc4>
 800732c:	40020010 	.word	0x40020010
 8007330:	40020028 	.word	0x40020028
 8007334:	40020040 	.word	0x40020040
 8007338:	40020058 	.word	0x40020058
 800733c:	40020070 	.word	0x40020070
 8007340:	40020088 	.word	0x40020088
 8007344:	400200a0 	.word	0x400200a0
 8007348:	400200b8 	.word	0x400200b8
 800734c:	40020410 	.word	0x40020410
 8007350:	40020428 	.word	0x40020428
 8007354:	40020440 	.word	0x40020440
 8007358:	40020458 	.word	0x40020458
 800735c:	40020470 	.word	0x40020470
 8007360:	40020488 	.word	0x40020488
 8007364:	400204a0 	.word	0x400204a0
 8007368:	400204b8 	.word	0x400204b8
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 020a 	bic.w	r2, r2, #10
 800737a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8097 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800739e:	e091      	b.n	80074c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	2208      	movs	r2, #8
 80073aa:	409a      	lsls	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4013      	ands	r3, r2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8088 	beq.w	80074c6 <HAL_DMA_IRQHandler+0xe0e>
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8082 	beq.w	80074c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a41      	ldr	r2, [pc, #260]	; (80074cc <HAL_DMA_IRQHandler+0xe14>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d04a      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a3f      	ldr	r2, [pc, #252]	; (80074d0 <HAL_DMA_IRQHandler+0xe18>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d045      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <HAL_DMA_IRQHandler+0xe1c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d040      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <HAL_DMA_IRQHandler+0xe20>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d03b      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3b      	ldr	r2, [pc, #236]	; (80074dc <HAL_DMA_IRQHandler+0xe24>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d036      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a39      	ldr	r2, [pc, #228]	; (80074e0 <HAL_DMA_IRQHandler+0xe28>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d031      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a38      	ldr	r2, [pc, #224]	; (80074e4 <HAL_DMA_IRQHandler+0xe2c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d02c      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a36      	ldr	r2, [pc, #216]	; (80074e8 <HAL_DMA_IRQHandler+0xe30>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d027      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a35      	ldr	r2, [pc, #212]	; (80074ec <HAL_DMA_IRQHandler+0xe34>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a33      	ldr	r2, [pc, #204]	; (80074f0 <HAL_DMA_IRQHandler+0xe38>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01d      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a32      	ldr	r2, [pc, #200]	; (80074f4 <HAL_DMA_IRQHandler+0xe3c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d018      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a30      	ldr	r2, [pc, #192]	; (80074f8 <HAL_DMA_IRQHandler+0xe40>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2f      	ldr	r2, [pc, #188]	; (80074fc <HAL_DMA_IRQHandler+0xe44>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2d      	ldr	r2, [pc, #180]	; (8007500 <HAL_DMA_IRQHandler+0xe48>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a2c      	ldr	r2, [pc, #176]	; (8007504 <HAL_DMA_IRQHandler+0xe4c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <HAL_DMA_IRQHandler+0xdaa>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2a      	ldr	r2, [pc, #168]	; (8007508 <HAL_DMA_IRQHandler+0xe50>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d108      	bne.n	8007474 <HAL_DMA_IRQHandler+0xdbc>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 021c 	bic.w	r2, r2, #28
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e007      	b.n	8007484 <HAL_DMA_IRQHandler+0xdcc>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 020e 	bic.w	r2, r2, #14
 8007482:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2201      	movs	r2, #1
 800748e:	409a      	lsls	r2, r3
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
 80074ba:	e004      	b.n	80074c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80074bc:	bf00      	nop
 80074be:	e002      	b.n	80074c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074c6:	3728      	adds	r7, #40	; 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40020010 	.word	0x40020010
 80074d0:	40020028 	.word	0x40020028
 80074d4:	40020040 	.word	0x40020040
 80074d8:	40020058 	.word	0x40020058
 80074dc:	40020070 	.word	0x40020070
 80074e0:	40020088 	.word	0x40020088
 80074e4:	400200a0 	.word	0x400200a0
 80074e8:	400200b8 	.word	0x400200b8
 80074ec:	40020410 	.word	0x40020410
 80074f0:	40020428 	.word	0x40020428
 80074f4:	40020440 	.word	0x40020440
 80074f8:	40020458 	.word	0x40020458
 80074fc:	40020470 	.word	0x40020470
 8007500:	40020488 	.word	0x40020488
 8007504:	400204a0 	.word	0x400204a0
 8007508:	400204b8 	.word	0x400204b8

0800750c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a7f      	ldr	r2, [pc, #508]	; (8007728 <DMA_SetConfig+0x21c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d072      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a7d      	ldr	r2, [pc, #500]	; (800772c <DMA_SetConfig+0x220>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d06d      	beq.n	8007616 <DMA_SetConfig+0x10a>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a7c      	ldr	r2, [pc, #496]	; (8007730 <DMA_SetConfig+0x224>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d068      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a7a      	ldr	r2, [pc, #488]	; (8007734 <DMA_SetConfig+0x228>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d063      	beq.n	8007616 <DMA_SetConfig+0x10a>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a79      	ldr	r2, [pc, #484]	; (8007738 <DMA_SetConfig+0x22c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d05e      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a77      	ldr	r2, [pc, #476]	; (800773c <DMA_SetConfig+0x230>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d059      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a76      	ldr	r2, [pc, #472]	; (8007740 <DMA_SetConfig+0x234>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d054      	beq.n	8007616 <DMA_SetConfig+0x10a>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a74      	ldr	r2, [pc, #464]	; (8007744 <DMA_SetConfig+0x238>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d04f      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a73      	ldr	r2, [pc, #460]	; (8007748 <DMA_SetConfig+0x23c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d04a      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a71      	ldr	r2, [pc, #452]	; (800774c <DMA_SetConfig+0x240>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d045      	beq.n	8007616 <DMA_SetConfig+0x10a>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a70      	ldr	r2, [pc, #448]	; (8007750 <DMA_SetConfig+0x244>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d040      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a6e      	ldr	r2, [pc, #440]	; (8007754 <DMA_SetConfig+0x248>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d03b      	beq.n	8007616 <DMA_SetConfig+0x10a>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a6d      	ldr	r2, [pc, #436]	; (8007758 <DMA_SetConfig+0x24c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d036      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a6b      	ldr	r2, [pc, #428]	; (800775c <DMA_SetConfig+0x250>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d031      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a6a      	ldr	r2, [pc, #424]	; (8007760 <DMA_SetConfig+0x254>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d02c      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a68      	ldr	r2, [pc, #416]	; (8007764 <DMA_SetConfig+0x258>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d027      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a67      	ldr	r2, [pc, #412]	; (8007768 <DMA_SetConfig+0x25c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d022      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a65      	ldr	r2, [pc, #404]	; (800776c <DMA_SetConfig+0x260>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01d      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a64      	ldr	r2, [pc, #400]	; (8007770 <DMA_SetConfig+0x264>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d018      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a62      	ldr	r2, [pc, #392]	; (8007774 <DMA_SetConfig+0x268>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a61      	ldr	r2, [pc, #388]	; (8007778 <DMA_SetConfig+0x26c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00e      	beq.n	8007616 <DMA_SetConfig+0x10a>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5f      	ldr	r2, [pc, #380]	; (800777c <DMA_SetConfig+0x270>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <DMA_SetConfig+0x10a>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a5e      	ldr	r2, [pc, #376]	; (8007780 <DMA_SetConfig+0x274>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <DMA_SetConfig+0x10a>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a5c      	ldr	r2, [pc, #368]	; (8007784 <DMA_SetConfig+0x278>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <DMA_SetConfig+0x10e>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <DMA_SetConfig+0x110>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007628:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800763a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a39      	ldr	r2, [pc, #228]	; (8007728 <DMA_SetConfig+0x21c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d04a      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a38      	ldr	r2, [pc, #224]	; (800772c <DMA_SetConfig+0x220>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d045      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a36      	ldr	r2, [pc, #216]	; (8007730 <DMA_SetConfig+0x224>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d040      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a35      	ldr	r2, [pc, #212]	; (8007734 <DMA_SetConfig+0x228>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d03b      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a33      	ldr	r2, [pc, #204]	; (8007738 <DMA_SetConfig+0x22c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d036      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a32      	ldr	r2, [pc, #200]	; (800773c <DMA_SetConfig+0x230>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d031      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a30      	ldr	r2, [pc, #192]	; (8007740 <DMA_SetConfig+0x234>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d02c      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2f      	ldr	r2, [pc, #188]	; (8007744 <DMA_SetConfig+0x238>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d027      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2d      	ldr	r2, [pc, #180]	; (8007748 <DMA_SetConfig+0x23c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d022      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2c      	ldr	r2, [pc, #176]	; (800774c <DMA_SetConfig+0x240>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d01d      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a2a      	ldr	r2, [pc, #168]	; (8007750 <DMA_SetConfig+0x244>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d018      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a29      	ldr	r2, [pc, #164]	; (8007754 <DMA_SetConfig+0x248>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d013      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a27      	ldr	r2, [pc, #156]	; (8007758 <DMA_SetConfig+0x24c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00e      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a26      	ldr	r2, [pc, #152]	; (800775c <DMA_SetConfig+0x250>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d009      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a24      	ldr	r2, [pc, #144]	; (8007760 <DMA_SetConfig+0x254>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <DMA_SetConfig+0x1d0>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a23      	ldr	r2, [pc, #140]	; (8007764 <DMA_SetConfig+0x258>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d101      	bne.n	80076e0 <DMA_SetConfig+0x1d4>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <DMA_SetConfig+0x1d6>
 80076e0:	2300      	movs	r3, #0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d059      	beq.n	800779a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	223f      	movs	r2, #63	; 0x3f
 80076f0:	409a      	lsls	r2, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007704:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d138      	bne.n	8007788 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007726:	e086      	b.n	8007836 <DMA_SetConfig+0x32a>
 8007728:	40020010 	.word	0x40020010
 800772c:	40020028 	.word	0x40020028
 8007730:	40020040 	.word	0x40020040
 8007734:	40020058 	.word	0x40020058
 8007738:	40020070 	.word	0x40020070
 800773c:	40020088 	.word	0x40020088
 8007740:	400200a0 	.word	0x400200a0
 8007744:	400200b8 	.word	0x400200b8
 8007748:	40020410 	.word	0x40020410
 800774c:	40020428 	.word	0x40020428
 8007750:	40020440 	.word	0x40020440
 8007754:	40020458 	.word	0x40020458
 8007758:	40020470 	.word	0x40020470
 800775c:	40020488 	.word	0x40020488
 8007760:	400204a0 	.word	0x400204a0
 8007764:	400204b8 	.word	0x400204b8
 8007768:	58025408 	.word	0x58025408
 800776c:	5802541c 	.word	0x5802541c
 8007770:	58025430 	.word	0x58025430
 8007774:	58025444 	.word	0x58025444
 8007778:	58025458 	.word	0x58025458
 800777c:	5802546c 	.word	0x5802546c
 8007780:	58025480 	.word	0x58025480
 8007784:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	60da      	str	r2, [r3, #12]
}
 8007798:	e04d      	b.n	8007836 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a29      	ldr	r2, [pc, #164]	; (8007844 <DMA_SetConfig+0x338>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d022      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a27      	ldr	r2, [pc, #156]	; (8007848 <DMA_SetConfig+0x33c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d01d      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a26      	ldr	r2, [pc, #152]	; (800784c <DMA_SetConfig+0x340>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d018      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a24      	ldr	r2, [pc, #144]	; (8007850 <DMA_SetConfig+0x344>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a23      	ldr	r2, [pc, #140]	; (8007854 <DMA_SetConfig+0x348>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00e      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a21      	ldr	r2, [pc, #132]	; (8007858 <DMA_SetConfig+0x34c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a20      	ldr	r2, [pc, #128]	; (800785c <DMA_SetConfig+0x350>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <DMA_SetConfig+0x2de>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1e      	ldr	r2, [pc, #120]	; (8007860 <DMA_SetConfig+0x354>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d101      	bne.n	80077ee <DMA_SetConfig+0x2e2>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <DMA_SetConfig+0x2e4>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d020      	beq.n	8007836 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2201      	movs	r2, #1
 80077fe:	409a      	lsls	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d108      	bne.n	8007826 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	60da      	str	r2, [r3, #12]
}
 8007824:	e007      	b.n	8007836 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	60da      	str	r2, [r3, #12]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	58025408 	.word	0x58025408
 8007848:	5802541c 	.word	0x5802541c
 800784c:	58025430 	.word	0x58025430
 8007850:	58025444 	.word	0x58025444
 8007854:	58025458 	.word	0x58025458
 8007858:	5802546c 	.word	0x5802546c
 800785c:	58025480 	.word	0x58025480
 8007860:	58025494 	.word	0x58025494

08007864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a42      	ldr	r2, [pc, #264]	; (800797c <DMA_CalcBaseAndBitshift+0x118>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d04a      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a41      	ldr	r2, [pc, #260]	; (8007980 <DMA_CalcBaseAndBitshift+0x11c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d045      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a3f      	ldr	r2, [pc, #252]	; (8007984 <DMA_CalcBaseAndBitshift+0x120>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d040      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a3e      	ldr	r2, [pc, #248]	; (8007988 <DMA_CalcBaseAndBitshift+0x124>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d03b      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a3c      	ldr	r2, [pc, #240]	; (800798c <DMA_CalcBaseAndBitshift+0x128>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d036      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a3b      	ldr	r2, [pc, #236]	; (8007990 <DMA_CalcBaseAndBitshift+0x12c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d031      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a39      	ldr	r2, [pc, #228]	; (8007994 <DMA_CalcBaseAndBitshift+0x130>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d02c      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a38      	ldr	r2, [pc, #224]	; (8007998 <DMA_CalcBaseAndBitshift+0x134>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d027      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a36      	ldr	r2, [pc, #216]	; (800799c <DMA_CalcBaseAndBitshift+0x138>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d022      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a35      	ldr	r2, [pc, #212]	; (80079a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d01d      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a33      	ldr	r2, [pc, #204]	; (80079a4 <DMA_CalcBaseAndBitshift+0x140>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d018      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a32      	ldr	r2, [pc, #200]	; (80079a8 <DMA_CalcBaseAndBitshift+0x144>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a30      	ldr	r2, [pc, #192]	; (80079ac <DMA_CalcBaseAndBitshift+0x148>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00e      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a2f      	ldr	r2, [pc, #188]	; (80079b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d009      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a2d      	ldr	r2, [pc, #180]	; (80079b4 <DMA_CalcBaseAndBitshift+0x150>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <DMA_CalcBaseAndBitshift+0xa8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a2c      	ldr	r2, [pc, #176]	; (80079b8 <DMA_CalcBaseAndBitshift+0x154>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d101      	bne.n	8007910 <DMA_CalcBaseAndBitshift+0xac>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <DMA_CalcBaseAndBitshift+0xae>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d024      	beq.n	8007960 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	3b10      	subs	r3, #16
 800791e:	4a27      	ldr	r2, [pc, #156]	; (80079bc <DMA_CalcBaseAndBitshift+0x158>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	091b      	lsrs	r3, r3, #4
 8007926:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	4a24      	ldr	r2, [pc, #144]	; (80079c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007930:	5cd3      	ldrb	r3, [r2, r3]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d908      	bls.n	8007950 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007946:	4013      	ands	r3, r2
 8007948:	1d1a      	adds	r2, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	659a      	str	r2, [r3, #88]	; 0x58
 800794e:	e00d      	b.n	800796c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007958:	4013      	ands	r3, r2
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6593      	str	r3, [r2, #88]	; 0x58
 800795e:	e005      	b.n	800796c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	40020010 	.word	0x40020010
 8007980:	40020028 	.word	0x40020028
 8007984:	40020040 	.word	0x40020040
 8007988:	40020058 	.word	0x40020058
 800798c:	40020070 	.word	0x40020070
 8007990:	40020088 	.word	0x40020088
 8007994:	400200a0 	.word	0x400200a0
 8007998:	400200b8 	.word	0x400200b8
 800799c:	40020410 	.word	0x40020410
 80079a0:	40020428 	.word	0x40020428
 80079a4:	40020440 	.word	0x40020440
 80079a8:	40020458 	.word	0x40020458
 80079ac:	40020470 	.word	0x40020470
 80079b0:	40020488 	.word	0x40020488
 80079b4:	400204a0 	.word	0x400204a0
 80079b8:	400204b8 	.word	0x400204b8
 80079bc:	aaaaaaab 	.word	0xaaaaaaab
 80079c0:	0800e434 	.word	0x0800e434
 80079c4:	fffffc00 	.word	0xfffffc00

080079c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d120      	bne.n	8007a1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d858      	bhi.n	8007a96 <DMA_CheckFifoParam+0xce>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <DMA_CheckFifoParam+0x24>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a0f 	.word	0x08007a0f
 80079f4:	080079fd 	.word	0x080079fd
 80079f8:	08007a97 	.word	0x08007a97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d048      	beq.n	8007a9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a0c:	e045      	b.n	8007a9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a16:	d142      	bne.n	8007a9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a1c:	e03f      	b.n	8007a9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a26:	d123      	bne.n	8007a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d838      	bhi.n	8007aa2 <DMA_CheckFifoParam+0xda>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <DMA_CheckFifoParam+0x70>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a49 	.word	0x08007a49
 8007a3c:	08007a4f 	.word	0x08007a4f
 8007a40:	08007a49 	.word	0x08007a49
 8007a44:	08007a61 	.word	0x08007a61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
        break;
 8007a4c:	e030      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d025      	beq.n	8007aa6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a5e:	e022      	b.n	8007aa6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a68:	d11f      	bne.n	8007aaa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a6e:	e01c      	b.n	8007aaa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d902      	bls.n	8007a7e <DMA_CheckFifoParam+0xb6>
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d003      	beq.n	8007a84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a7c:	e018      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
        break;
 8007a82:	e015      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00e      	beq.n	8007aae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
    break;
 8007a94:	e00b      	b.n	8007aae <DMA_CheckFifoParam+0xe6>
        break;
 8007a96:	bf00      	nop
 8007a98:	e00a      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        break;
 8007a9a:	bf00      	nop
 8007a9c:	e008      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e006      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e004      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        break;
 8007aa6:	bf00      	nop
 8007aa8:	e002      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <DMA_CheckFifoParam+0xe8>
    break;
 8007aae:	bf00      	nop
    }
  }

  return status;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a38      	ldr	r2, [pc, #224]	; (8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d022      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a36      	ldr	r2, [pc, #216]	; (8007bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01d      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a35      	ldr	r2, [pc, #212]	; (8007bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d018      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a33      	ldr	r2, [pc, #204]	; (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a32      	ldr	r2, [pc, #200]	; (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00e      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a30      	ldr	r2, [pc, #192]	; (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a2f      	ldr	r2, [pc, #188]	; (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a2d      	ldr	r2, [pc, #180]	; (8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d101      	bne.n	8007b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01a      	beq.n	8007b5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	3b08      	subs	r3, #8
 8007b30:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	091b      	lsrs	r3, r3, #4
 8007b38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4b26      	ldr	r3, [pc, #152]	; (8007bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a24      	ldr	r2, [pc, #144]	; (8007bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b4c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	2201      	movs	r2, #1
 8007b56:	409a      	lsls	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b5c:	e024      	b.n	8007ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	3b10      	subs	r3, #16
 8007b66:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	091b      	lsrs	r3, r3, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d806      	bhi.n	8007b86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d902      	bls.n	8007b86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3308      	adds	r3, #8
 8007b84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4b18      	ldr	r3, [pc, #96]	; (8007bec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a16      	ldr	r2, [pc, #88]	; (8007bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f003 031f 	and.w	r3, r3, #31
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	58025408 	.word	0x58025408
 8007bb8:	5802541c 	.word	0x5802541c
 8007bbc:	58025430 	.word	0x58025430
 8007bc0:	58025444 	.word	0x58025444
 8007bc4:	58025458 	.word	0x58025458
 8007bc8:	5802546c 	.word	0x5802546c
 8007bcc:	58025480 	.word	0x58025480
 8007bd0:	58025494 	.word	0x58025494
 8007bd4:	cccccccd 	.word	0xcccccccd
 8007bd8:	16009600 	.word	0x16009600
 8007bdc:	58025880 	.word	0x58025880
 8007be0:	aaaaaaab 	.word	0xaaaaaaab
 8007be4:	400204b8 	.word	0x400204b8
 8007be8:	4002040f 	.word	0x4002040f
 8007bec:	10008200 	.word	0x10008200
 8007bf0:	40020880 	.word	0x40020880

08007bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d04a      	beq.n	8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d847      	bhi.n	8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a25      	ldr	r2, [pc, #148]	; (8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d022      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d01d      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a22      	ldr	r2, [pc, #136]	; (8007cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d018      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a21      	ldr	r2, [pc, #132]	; (8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d013      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00e      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d009      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d004      	beq.n	8007c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d101      	bne.n	8007c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c64:	2300      	movs	r3, #0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c7c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c7e:	e009      	b.n	8007c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	2201      	movs	r2, #1
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	58025408 	.word	0x58025408
 8007cb0:	5802541c 	.word	0x5802541c
 8007cb4:	58025430 	.word	0x58025430
 8007cb8:	58025444 	.word	0x58025444
 8007cbc:	58025458 	.word	0x58025458
 8007cc0:	5802546c 	.word	0x5802546c
 8007cc4:	58025480 	.word	0x58025480
 8007cc8:	58025494 	.word	0x58025494
 8007ccc:	1600963f 	.word	0x1600963f
 8007cd0:	58025940 	.word	0x58025940
 8007cd4:	1000823f 	.word	0x1000823f
 8007cd8:	40020940 	.word	0x40020940

08007cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b089      	sub	sp, #36	; 0x24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cea:	4b86      	ldr	r3, [pc, #536]	; (8007f04 <HAL_GPIO_Init+0x228>)
 8007cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cee:	e18c      	b.n	800800a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 817e 	beq.w	8008004 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d005      	beq.n	8007d20 <HAL_GPIO_Init+0x44>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d130      	bne.n	8007d82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	43db      	mvns	r3, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4013      	ands	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d56:	2201      	movs	r2, #1
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	4013      	ands	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	091b      	lsrs	r3, r3, #4
 8007d6c:	f003 0201 	and.w	r2, r3, #1
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	fa02 f303 	lsl.w	r3, r2, r3
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d017      	beq.n	8007dbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	2203      	movs	r2, #3
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	43db      	mvns	r3, r3
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4013      	ands	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	fa02 f303 	lsl.w	r3, r2, r3
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d123      	bne.n	8007e12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	08da      	lsrs	r2, r3, #3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3208      	adds	r2, #8
 8007dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	220f      	movs	r2, #15
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	08da      	lsrs	r2, r3, #3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3208      	adds	r2, #8
 8007e0c:	69b9      	ldr	r1, [r7, #24]
 8007e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	43db      	mvns	r3, r3
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	4013      	ands	r3, r2
 8007e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f003 0203 	and.w	r2, r3, #3
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80d8 	beq.w	8008004 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e54:	4b2c      	ldr	r3, [pc, #176]	; (8007f08 <HAL_GPIO_Init+0x22c>)
 8007e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e5a:	4a2b      	ldr	r2, [pc, #172]	; (8007f08 <HAL_GPIO_Init+0x22c>)
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e64:	4b28      	ldr	r3, [pc, #160]	; (8007f08 <HAL_GPIO_Init+0x22c>)
 8007e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e72:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <HAL_GPIO_Init+0x230>)
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	089b      	lsrs	r3, r3, #2
 8007e78:	3302      	adds	r3, #2
 8007e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	220f      	movs	r2, #15
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <HAL_GPIO_Init+0x234>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d04a      	beq.n	8007f34 <HAL_GPIO_Init+0x258>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1c      	ldr	r2, [pc, #112]	; (8007f14 <HAL_GPIO_Init+0x238>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d02b      	beq.n	8007efe <HAL_GPIO_Init+0x222>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1b      	ldr	r2, [pc, #108]	; (8007f18 <HAL_GPIO_Init+0x23c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d025      	beq.n	8007efa <HAL_GPIO_Init+0x21e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a1a      	ldr	r2, [pc, #104]	; (8007f1c <HAL_GPIO_Init+0x240>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01f      	beq.n	8007ef6 <HAL_GPIO_Init+0x21a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a19      	ldr	r2, [pc, #100]	; (8007f20 <HAL_GPIO_Init+0x244>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d019      	beq.n	8007ef2 <HAL_GPIO_Init+0x216>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <HAL_GPIO_Init+0x248>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <HAL_GPIO_Init+0x212>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a17      	ldr	r2, [pc, #92]	; (8007f28 <HAL_GPIO_Init+0x24c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00d      	beq.n	8007eea <HAL_GPIO_Init+0x20e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a16      	ldr	r2, [pc, #88]	; (8007f2c <HAL_GPIO_Init+0x250>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <HAL_GPIO_Init+0x20a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <HAL_GPIO_Init+0x254>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d101      	bne.n	8007ee2 <HAL_GPIO_Init+0x206>
 8007ede:	2309      	movs	r3, #9
 8007ee0:	e029      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007ee2:	230a      	movs	r3, #10
 8007ee4:	e027      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007ee6:	2307      	movs	r3, #7
 8007ee8:	e025      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007eea:	2306      	movs	r3, #6
 8007eec:	e023      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007eee:	2305      	movs	r3, #5
 8007ef0:	e021      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007ef2:	2304      	movs	r3, #4
 8007ef4:	e01f      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e01d      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e01b      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e019      	b.n	8007f36 <HAL_GPIO_Init+0x25a>
 8007f02:	bf00      	nop
 8007f04:	58000080 	.word	0x58000080
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	58000400 	.word	0x58000400
 8007f10:	58020000 	.word	0x58020000
 8007f14:	58020400 	.word	0x58020400
 8007f18:	58020800 	.word	0x58020800
 8007f1c:	58020c00 	.word	0x58020c00
 8007f20:	58021000 	.word	0x58021000
 8007f24:	58021400 	.word	0x58021400
 8007f28:	58021800 	.word	0x58021800
 8007f2c:	58021c00 	.word	0x58021c00
 8007f30:	58022400 	.word	0x58022400
 8007f34:	2300      	movs	r3, #0
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	f002 0203 	and.w	r2, r2, #3
 8007f3c:	0092      	lsls	r2, r2, #2
 8007f3e:	4093      	lsls	r3, r2
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f46:	4938      	ldr	r1, [pc, #224]	; (8008028 <HAL_GPIO_Init+0x34c>)
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	089b      	lsrs	r3, r3, #2
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4013      	ands	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4013      	ands	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	3301      	adds	r3, #1
 8008008:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	fa22 f303 	lsr.w	r3, r2, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f ae6b 	bne.w	8007cf0 <HAL_GPIO_Init+0x14>
  }
}
 800801a:	bf00      	nop
 800801c:	bf00      	nop
 800801e:	3724      	adds	r7, #36	; 0x24
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	58000400 	.word	0x58000400

0800802c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	807b      	strh	r3, [r7, #2]
 8008038:	4613      	mov	r3, r2
 800803a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800803c:	787b      	ldrb	r3, [r7, #1]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008042:	887a      	ldrh	r2, [r7, #2]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008048:	e003      	b.n	8008052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800804a:	887b      	ldrh	r3, [r7, #2]
 800804c:	041a      	lsls	r2, r3, #16
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	619a      	str	r2, [r3, #24]
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
	...

08008060 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008068:	4b19      	ldr	r3, [pc, #100]	; (80080d0 <HAL_PWREx_ConfigSupply+0x70>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b04      	cmp	r3, #4
 8008072:	d00a      	beq.n	800808a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008074:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <HAL_PWREx_ConfigSupply+0x70>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	429a      	cmp	r2, r3
 8008080:	d001      	beq.n	8008086 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e01f      	b.n	80080c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	e01d      	b.n	80080c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800808a:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <HAL_PWREx_ConfigSupply+0x70>)
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f023 0207 	bic.w	r2, r3, #7
 8008092:	490f      	ldr	r1, [pc, #60]	; (80080d0 <HAL_PWREx_ConfigSupply+0x70>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4313      	orrs	r3, r2
 8008098:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800809a:	f7fc fec9 	bl	8004e30 <HAL_GetTick>
 800809e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080a0:	e009      	b.n	80080b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80080a2:	f7fc fec5 	bl	8004e30 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080b0:	d901      	bls.n	80080b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e007      	b.n	80080c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <HAL_PWREx_ConfigSupply+0x70>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c2:	d1ee      	bne.n	80080a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	58024800 	.word	0x58024800

080080d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08c      	sub	sp, #48	; 0x30
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e39d      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 8087 	beq.w	8008202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080f4:	4b88      	ldr	r3, [pc, #544]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080fe:	4b86      	ldr	r3, [pc, #536]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	2b10      	cmp	r3, #16
 8008108:	d007      	beq.n	800811a <HAL_RCC_OscConfig+0x46>
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	2b18      	cmp	r3, #24
 800810e:	d110      	bne.n	8008132 <HAL_RCC_OscConfig+0x5e>
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d10b      	bne.n	8008132 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800811a:	4b7f      	ldr	r3, [pc, #508]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d06c      	beq.n	8008200 <HAL_RCC_OscConfig+0x12c>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d168      	bne.n	8008200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e377      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813a:	d106      	bne.n	800814a <HAL_RCC_OscConfig+0x76>
 800813c:	4b76      	ldr	r3, [pc, #472]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a75      	ldr	r2, [pc, #468]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	e02e      	b.n	80081a8 <HAL_RCC_OscConfig+0xd4>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10c      	bne.n	800816c <HAL_RCC_OscConfig+0x98>
 8008152:	4b71      	ldr	r3, [pc, #452]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a70      	ldr	r2, [pc, #448]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	4b6e      	ldr	r3, [pc, #440]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a6d      	ldr	r2, [pc, #436]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	e01d      	b.n	80081a8 <HAL_RCC_OscConfig+0xd4>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008174:	d10c      	bne.n	8008190 <HAL_RCC_OscConfig+0xbc>
 8008176:	4b68      	ldr	r3, [pc, #416]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a67      	ldr	r2, [pc, #412]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800817c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	4b65      	ldr	r3, [pc, #404]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a64      	ldr	r2, [pc, #400]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	e00b      	b.n	80081a8 <HAL_RCC_OscConfig+0xd4>
 8008190:	4b61      	ldr	r3, [pc, #388]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a60      	ldr	r2, [pc, #384]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	4b5e      	ldr	r3, [pc, #376]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a5d      	ldr	r2, [pc, #372]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80081a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d013      	beq.n	80081d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b0:	f7fc fe3e 	bl	8004e30 <HAL_GetTick>
 80081b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b6:	e008      	b.n	80081ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081b8:	f7fc fe3a 	bl	8004e30 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b64      	cmp	r3, #100	; 0x64
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e32b      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081ca:	4b53      	ldr	r3, [pc, #332]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0f0      	beq.n	80081b8 <HAL_RCC_OscConfig+0xe4>
 80081d6:	e014      	b.n	8008202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d8:	f7fc fe2a 	bl	8004e30 <HAL_GetTick>
 80081dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081e0:	f7fc fe26 	bl	8004e30 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b64      	cmp	r3, #100	; 0x64
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e317      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081f2:	4b49      	ldr	r3, [pc, #292]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f0      	bne.n	80081e0 <HAL_RCC_OscConfig+0x10c>
 80081fe:	e000      	b.n	8008202 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 808c 	beq.w	8008328 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008210:	4b41      	ldr	r3, [pc, #260]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008218:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800821a:	4b3f      	ldr	r3, [pc, #252]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800821c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d007      	beq.n	8008236 <HAL_RCC_OscConfig+0x162>
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	2b18      	cmp	r3, #24
 800822a:	d137      	bne.n	800829c <HAL_RCC_OscConfig+0x1c8>
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d132      	bne.n	800829c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008236:	4b38      	ldr	r3, [pc, #224]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <HAL_RCC_OscConfig+0x17a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e2e9      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800824e:	4b32      	ldr	r3, [pc, #200]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f023 0219 	bic.w	r2, r3, #25
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	492f      	ldr	r1, [pc, #188]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008260:	f7fc fde6 	bl	8004e30 <HAL_GetTick>
 8008264:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008268:	f7fc fde2 	bl	8004e30 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e2d3      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800827a:	4b27      	ldr	r3, [pc, #156]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008286:	4b24      	ldr	r3, [pc, #144]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	061b      	lsls	r3, r3, #24
 8008294:	4920      	ldr	r1, [pc, #128]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 8008296:	4313      	orrs	r3, r2
 8008298:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800829a:	e045      	b.n	8008328 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d026      	beq.n	80082f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082a4:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f023 0219 	bic.w	r2, r3, #25
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	4919      	ldr	r1, [pc, #100]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b6:	f7fc fdbb 	bl	8004e30 <HAL_GetTick>
 80082ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082be:	f7fc fdb7 	bl	8004e30 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e2a8      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082d0:	4b11      	ldr	r3, [pc, #68]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082dc:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	061b      	lsls	r3, r3, #24
 80082ea:	490b      	ldr	r1, [pc, #44]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	604b      	str	r3, [r1, #4]
 80082f0:	e01a      	b.n	8008328 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a08      	ldr	r2, [pc, #32]	; (8008318 <HAL_RCC_OscConfig+0x244>)
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fe:	f7fc fd97 	bl	8004e30 <HAL_GetTick>
 8008302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008304:	e00a      	b.n	800831c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008306:	f7fc fd93 	bl	8004e30 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d903      	bls.n	800831c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e284      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
 8008318:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800831c:	4b96      	ldr	r3, [pc, #600]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1ee      	bne.n	8008306 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b00      	cmp	r3, #0
 8008332:	d06a      	beq.n	800840a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008334:	4b90      	ldr	r3, [pc, #576]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800833c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800833e:	4b8e      	ldr	r3, [pc, #568]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	2b08      	cmp	r3, #8
 8008348:	d007      	beq.n	800835a <HAL_RCC_OscConfig+0x286>
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b18      	cmp	r3, #24
 800834e:	d11b      	bne.n	8008388 <HAL_RCC_OscConfig+0x2b4>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d116      	bne.n	8008388 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800835a:	4b87      	ldr	r3, [pc, #540]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_RCC_OscConfig+0x29e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d001      	beq.n	8008372 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e257      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008372:	4b81      	ldr	r3, [pc, #516]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	061b      	lsls	r3, r3, #24
 8008380:	497d      	ldr	r1, [pc, #500]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008382:	4313      	orrs	r3, r2
 8008384:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008386:	e040      	b.n	800840a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d023      	beq.n	80083d8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008390:	4b79      	ldr	r3, [pc, #484]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a78      	ldr	r2, [pc, #480]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fc fd48 	bl	8004e30 <HAL_GetTick>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083a4:	f7fc fd44 	bl	8004e30 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e235      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083b6:	4b70      	ldr	r3, [pc, #448]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c2:	4b6d      	ldr	r3, [pc, #436]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	061b      	lsls	r3, r3, #24
 80083d0:	4969      	ldr	r1, [pc, #420]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60cb      	str	r3, [r1, #12]
 80083d6:	e018      	b.n	800840a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083d8:	4b67      	ldr	r3, [pc, #412]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a66      	ldr	r2, [pc, #408]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80083de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fc fd24 	bl	8004e30 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083ec:	f7fc fd20 	bl	8004e30 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e211      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083fe:	4b5e      	ldr	r3, [pc, #376]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d036      	beq.n	8008484 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d019      	beq.n	8008452 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800841e:	4b56      	ldr	r3, [pc, #344]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008422:	4a55      	ldr	r2, [pc, #340]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842a:	f7fc fd01 	bl	8004e30 <HAL_GetTick>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008432:	f7fc fcfd 	bl	8004e30 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e1ee      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008444:	4b4c      	ldr	r3, [pc, #304]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <HAL_RCC_OscConfig+0x35e>
 8008450:	e018      	b.n	8008484 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008452:	4b49      	ldr	r3, [pc, #292]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008456:	4a48      	ldr	r2, [pc, #288]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800845e:	f7fc fce7 	bl	8004e30 <HAL_GetTick>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008466:	f7fc fce3 	bl	8004e30 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e1d4      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008478:	4b3f      	ldr	r3, [pc, #252]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800847a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1f0      	bne.n	8008466 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d036      	beq.n	80084fe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d019      	beq.n	80084cc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008498:	4b37      	ldr	r3, [pc, #220]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a36      	ldr	r2, [pc, #216]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800849e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084a4:	f7fc fcc4 	bl	8004e30 <HAL_GetTick>
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084ac:	f7fc fcc0 	bl	8004e30 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e1b1      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084be:	4b2e      	ldr	r3, [pc, #184]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0f0      	beq.n	80084ac <HAL_RCC_OscConfig+0x3d8>
 80084ca:	e018      	b.n	80084fe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084cc:	4b2a      	ldr	r3, [pc, #168]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a29      	ldr	r2, [pc, #164]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80084d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084d8:	f7fc fcaa 	bl	8004e30 <HAL_GetTick>
 80084dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084e0:	f7fc fca6 	bl	8004e30 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e197      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084f2:	4b21      	ldr	r3, [pc, #132]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1f0      	bne.n	80084e0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 8086 	beq.w	8008618 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <HAL_RCC_OscConfig+0x4a8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1a      	ldr	r2, [pc, #104]	; (800857c <HAL_RCC_OscConfig+0x4a8>)
 8008512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008518:	f7fc fc8a 	bl	8004e30 <HAL_GetTick>
 800851c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008520:	f7fc fc86 	bl	8004e30 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b64      	cmp	r3, #100	; 0x64
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e177      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <HAL_RCC_OscConfig+0x4a8>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0f0      	beq.n	8008520 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d106      	bne.n	8008554 <HAL_RCC_OscConfig+0x480>
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854a:	4a0b      	ldr	r2, [pc, #44]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	6713      	str	r3, [r2, #112]	; 0x70
 8008552:	e032      	b.n	80085ba <HAL_RCC_OscConfig+0x4e6>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d111      	bne.n	8008580 <HAL_RCC_OscConfig+0x4ac>
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800855e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008560:	4a05      	ldr	r2, [pc, #20]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 8008562:	f023 0301 	bic.w	r3, r3, #1
 8008566:	6713      	str	r3, [r2, #112]	; 0x70
 8008568:	4b03      	ldr	r3, [pc, #12]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800856a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856c:	4a02      	ldr	r2, [pc, #8]	; (8008578 <HAL_RCC_OscConfig+0x4a4>)
 800856e:	f023 0304 	bic.w	r3, r3, #4
 8008572:	6713      	str	r3, [r2, #112]	; 0x70
 8008574:	e021      	b.n	80085ba <HAL_RCC_OscConfig+0x4e6>
 8008576:	bf00      	nop
 8008578:	58024400 	.word	0x58024400
 800857c:	58024800 	.word	0x58024800
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2b05      	cmp	r3, #5
 8008586:	d10c      	bne.n	80085a2 <HAL_RCC_OscConfig+0x4ce>
 8008588:	4b83      	ldr	r3, [pc, #524]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800858a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858c:	4a82      	ldr	r2, [pc, #520]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800858e:	f043 0304 	orr.w	r3, r3, #4
 8008592:	6713      	str	r3, [r2, #112]	; 0x70
 8008594:	4b80      	ldr	r3, [pc, #512]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008598:	4a7f      	ldr	r2, [pc, #508]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	6713      	str	r3, [r2, #112]	; 0x70
 80085a0:	e00b      	b.n	80085ba <HAL_RCC_OscConfig+0x4e6>
 80085a2:	4b7d      	ldr	r3, [pc, #500]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	4a7c      	ldr	r2, [pc, #496]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	6713      	str	r3, [r2, #112]	; 0x70
 80085ae:	4b7a      	ldr	r3, [pc, #488]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	4a79      	ldr	r2, [pc, #484]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80085b4:	f023 0304 	bic.w	r3, r3, #4
 80085b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d015      	beq.n	80085ee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c2:	f7fc fc35 	bl	8004e30 <HAL_GetTick>
 80085c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085c8:	e00a      	b.n	80085e0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ca:	f7fc fc31 	bl	8004e30 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d8:	4293      	cmp	r3, r2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e120      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085e0:	4b6d      	ldr	r3, [pc, #436]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80085e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0ee      	beq.n	80085ca <HAL_RCC_OscConfig+0x4f6>
 80085ec:	e014      	b.n	8008618 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ee:	f7fc fc1f 	bl	8004e30 <HAL_GetTick>
 80085f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085f4:	e00a      	b.n	800860c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085f6:	f7fc fc1b 	bl	8004e30 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	f241 3288 	movw	r2, #5000	; 0x1388
 8008604:	4293      	cmp	r3, r2
 8008606:	d901      	bls.n	800860c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e10a      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800860c:	4b62      	ldr	r3, [pc, #392]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800860e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1ee      	bne.n	80085f6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80ff 	beq.w	8008820 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008622:	4b5d      	ldr	r3, [pc, #372]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800862a:	2b18      	cmp	r3, #24
 800862c:	f000 80ba 	beq.w	80087a4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b02      	cmp	r3, #2
 8008636:	f040 8095 	bne.w	8008764 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800863a:	4b57      	ldr	r3, [pc, #348]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a56      	ldr	r2, [pc, #344]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008646:	f7fc fbf3 	bl	8004e30 <HAL_GetTick>
 800864a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800864e:	f7fc fbef 	bl	8004e30 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e0e0      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008660:	4b4d      	ldr	r3, [pc, #308]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f0      	bne.n	800864e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800866c:	4b4a      	ldr	r3, [pc, #296]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800866e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008670:	4b4a      	ldr	r3, [pc, #296]	; (800879c <HAL_RCC_OscConfig+0x6c8>)
 8008672:	4013      	ands	r3, r2
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800867c:	0112      	lsls	r2, r2, #4
 800867e:	430a      	orrs	r2, r1
 8008680:	4945      	ldr	r1, [pc, #276]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008682:	4313      	orrs	r3, r2
 8008684:	628b      	str	r3, [r1, #40]	; 0x28
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	3b01      	subs	r3, #1
 800868c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008694:	3b01      	subs	r3, #1
 8008696:	025b      	lsls	r3, r3, #9
 8008698:	b29b      	uxth	r3, r3
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	3b01      	subs	r3, #1
 80086a2:	041b      	lsls	r3, r3, #16
 80086a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ae:	3b01      	subs	r3, #1
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086b6:	4938      	ldr	r1, [pc, #224]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80086bc:	4b36      	ldr	r3, [pc, #216]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a35      	ldr	r2, [pc, #212]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086c8:	4b33      	ldr	r3, [pc, #204]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086cc:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <HAL_RCC_OscConfig+0x6cc>)
 80086ce:	4013      	ands	r3, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086d4:	00d2      	lsls	r2, r2, #3
 80086d6:	4930      	ldr	r1, [pc, #192]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086dc:	4b2e      	ldr	r3, [pc, #184]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	f023 020c 	bic.w	r2, r3, #12
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	492b      	ldr	r1, [pc, #172]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086ee:	4b2a      	ldr	r3, [pc, #168]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f023 0202 	bic.w	r2, r3, #2
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fa:	4927      	ldr	r1, [pc, #156]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008700:	4b25      	ldr	r3, [pc, #148]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	4a24      	ldr	r2, [pc, #144]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800870c:	4b22      	ldr	r3, [pc, #136]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	4a21      	ldr	r2, [pc, #132]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008718:	4b1f      	ldr	r3, [pc, #124]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	4a1e      	ldr	r2, [pc, #120]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800871e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008724:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008730:	4b19      	ldr	r3, [pc, #100]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a18      	ldr	r2, [pc, #96]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800873a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fc fb78 	bl	8004e30 <HAL_GetTick>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008744:	f7fc fb74 	bl	8004e30 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e065      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008756:	4b10      	ldr	r3, [pc, #64]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <HAL_RCC_OscConfig+0x670>
 8008762:	e05d      	b.n	8008820 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008764:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a0b      	ldr	r2, [pc, #44]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800876a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800876e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008770:	f7fc fb5e 	bl	8004e30 <HAL_GetTick>
 8008774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008776:	e008      	b.n	800878a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008778:	f7fc fb5a 	bl	8004e30 <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d901      	bls.n	800878a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e04b      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800878a:	4b03      	ldr	r3, [pc, #12]	; (8008798 <HAL_RCC_OscConfig+0x6c4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1f0      	bne.n	8008778 <HAL_RCC_OscConfig+0x6a4>
 8008796:	e043      	b.n	8008820 <HAL_RCC_OscConfig+0x74c>
 8008798:	58024400 	.word	0x58024400
 800879c:	fffffc0c 	.word	0xfffffc0c
 80087a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087a4:	4b21      	ldr	r3, [pc, #132]	; (800882c <HAL_RCC_OscConfig+0x758>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087aa:	4b20      	ldr	r3, [pc, #128]	; (800882c <HAL_RCC_OscConfig+0x758>)
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d031      	beq.n	800881c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f003 0203 	and.w	r2, r3, #3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d12a      	bne.n	800881c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	091b      	lsrs	r3, r3, #4
 80087ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d122      	bne.n	800881c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d11a      	bne.n	800881c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	0a5b      	lsrs	r3, r3, #9
 80087ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d111      	bne.n	800881c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	0c1b      	lsrs	r3, r3, #16
 80087fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008806:	429a      	cmp	r2, r3
 8008808:	d108      	bne.n	800881c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	0e1b      	lsrs	r3, r3, #24
 800880e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008818:	429a      	cmp	r2, r3
 800881a:	d001      	beq.n	8008820 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3730      	adds	r7, #48	; 0x30
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	58024400 	.word	0x58024400

08008830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e19c      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008844:	4b8a      	ldr	r3, [pc, #552]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d910      	bls.n	8008874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008852:	4b87      	ldr	r3, [pc, #540]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f023 020f 	bic.w	r2, r3, #15
 800885a:	4985      	ldr	r1, [pc, #532]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	4313      	orrs	r3, r2
 8008860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008862:	4b83      	ldr	r3, [pc, #524]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d001      	beq.n	8008874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e184      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d010      	beq.n	80088a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	4b7b      	ldr	r3, [pc, #492]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800888c:	429a      	cmp	r2, r3
 800888e:	d908      	bls.n	80088a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008890:	4b78      	ldr	r3, [pc, #480]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	4975      	ldr	r1, [pc, #468]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d010      	beq.n	80088d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	4b70      	ldr	r3, [pc, #448]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d908      	bls.n	80088d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088be:	4b6d      	ldr	r3, [pc, #436]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	496a      	ldr	r1, [pc, #424]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699a      	ldr	r2, [r3, #24]
 80088e0:	4b64      	ldr	r3, [pc, #400]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d908      	bls.n	80088fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088ec:	4b61      	ldr	r3, [pc, #388]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	495e      	ldr	r1, [pc, #376]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d010      	beq.n	800892c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69da      	ldr	r2, [r3, #28]
 800890e:	4b59      	ldr	r3, [pc, #356]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008916:	429a      	cmp	r2, r3
 8008918:	d908      	bls.n	800892c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800891a:	4b56      	ldr	r3, [pc, #344]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	4953      	ldr	r1, [pc, #332]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008928:	4313      	orrs	r3, r2
 800892a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d010      	beq.n	800895a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	4b4d      	ldr	r3, [pc, #308]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	429a      	cmp	r2, r3
 8008946:	d908      	bls.n	800895a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008948:	4b4a      	ldr	r3, [pc, #296]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f023 020f 	bic.w	r2, r3, #15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	4947      	ldr	r1, [pc, #284]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008956:	4313      	orrs	r3, r2
 8008958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d055      	beq.n	8008a12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008966:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	4940      	ldr	r1, [pc, #256]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008974:	4313      	orrs	r3, r2
 8008976:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d107      	bne.n	8008990 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008980:	4b3c      	ldr	r3, [pc, #240]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d121      	bne.n	80089d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0f6      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d107      	bne.n	80089a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008998:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d115      	bne.n	80089d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e0ea      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d107      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089b0:	4b30      	ldr	r3, [pc, #192]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e0de      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089c0:	4b2c      	ldr	r3, [pc, #176]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0d6      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089d0:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f023 0207 	bic.w	r2, r3, #7
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	4925      	ldr	r1, [pc, #148]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e2:	f7fc fa25 	bl	8004e30 <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e8:	e00a      	b.n	8008a00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ea:	f7fc fa21 	bl	8004e30 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e0be      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a00:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d1eb      	bne.n	80089ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d010      	beq.n	8008a40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d208      	bcs.n	8008a40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	f023 020f 	bic.w	r2, r3, #15
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	490e      	ldr	r1, [pc, #56]	; (8008a74 <HAL_RCC_ClockConfig+0x244>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a40:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d214      	bcs.n	8008a78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a4e:	4b08      	ldr	r3, [pc, #32]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f023 020f 	bic.w	r2, r3, #15
 8008a56:	4906      	ldr	r1, [pc, #24]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a5e:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <HAL_RCC_ClockConfig+0x240>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d005      	beq.n	8008a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e086      	b.n	8008b7e <HAL_RCC_ClockConfig+0x34e>
 8008a70:	52002000 	.word	0x52002000
 8008a74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d010      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	4b3f      	ldr	r3, [pc, #252]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d208      	bcs.n	8008aa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a94:	4b3c      	ldr	r3, [pc, #240]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	4939      	ldr	r1, [pc, #228]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d010      	beq.n	8008ad4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695a      	ldr	r2, [r3, #20]
 8008ab6:	4b34      	ldr	r3, [pc, #208]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d208      	bcs.n	8008ad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ac2:	4b31      	ldr	r3, [pc, #196]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	492e      	ldr	r1, [pc, #184]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d010      	beq.n	8008b02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	4b28      	ldr	r3, [pc, #160]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d208      	bcs.n	8008b02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008af0:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	4922      	ldr	r1, [pc, #136]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d010      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69da      	ldr	r2, [r3, #28]
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d208      	bcs.n	8008b30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	4917      	ldr	r1, [pc, #92]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b30:	f000 f834 	bl	8008b9c <HAL_RCC_GetSysClockFreq>
 8008b34:	4602      	mov	r2, r0
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	4912      	ldr	r1, [pc, #72]	; (8008b8c <HAL_RCC_ClockConfig+0x35c>)
 8008b42:	5ccb      	ldrb	r3, [r1, r3]
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <HAL_RCC_ClockConfig+0x358>)
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	4a0d      	ldr	r2, [pc, #52]	; (8008b8c <HAL_RCC_ClockConfig+0x35c>)
 8008b58:	5cd3      	ldrb	r3, [r2, r3]
 8008b5a:	f003 031f 	and.w	r3, r3, #31
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	4a0a      	ldr	r2, [pc, #40]	; (8008b90 <HAL_RCC_ClockConfig+0x360>)
 8008b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b68:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <HAL_RCC_ClockConfig+0x364>)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <HAL_RCC_ClockConfig+0x368>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fc f912 	bl	8004d9c <HAL_InitTick>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	0800e424 	.word	0x0800e424
 8008b90:	24000004 	.word	0x24000004
 8008b94:	24000000 	.word	0x24000000
 8008b98:	24000008 	.word	0x24000008

08008b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b089      	sub	sp, #36	; 0x24
 8008ba0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ba2:	4bb3      	ldr	r3, [pc, #716]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008baa:	2b18      	cmp	r3, #24
 8008bac:	f200 8155 	bhi.w	8008e5a <HAL_RCC_GetSysClockFreq+0x2be>
 8008bb0:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb6:	bf00      	nop
 8008bb8:	08008c1d 	.word	0x08008c1d
 8008bbc:	08008e5b 	.word	0x08008e5b
 8008bc0:	08008e5b 	.word	0x08008e5b
 8008bc4:	08008e5b 	.word	0x08008e5b
 8008bc8:	08008e5b 	.word	0x08008e5b
 8008bcc:	08008e5b 	.word	0x08008e5b
 8008bd0:	08008e5b 	.word	0x08008e5b
 8008bd4:	08008e5b 	.word	0x08008e5b
 8008bd8:	08008c43 	.word	0x08008c43
 8008bdc:	08008e5b 	.word	0x08008e5b
 8008be0:	08008e5b 	.word	0x08008e5b
 8008be4:	08008e5b 	.word	0x08008e5b
 8008be8:	08008e5b 	.word	0x08008e5b
 8008bec:	08008e5b 	.word	0x08008e5b
 8008bf0:	08008e5b 	.word	0x08008e5b
 8008bf4:	08008e5b 	.word	0x08008e5b
 8008bf8:	08008c49 	.word	0x08008c49
 8008bfc:	08008e5b 	.word	0x08008e5b
 8008c00:	08008e5b 	.word	0x08008e5b
 8008c04:	08008e5b 	.word	0x08008e5b
 8008c08:	08008e5b 	.word	0x08008e5b
 8008c0c:	08008e5b 	.word	0x08008e5b
 8008c10:	08008e5b 	.word	0x08008e5b
 8008c14:	08008e5b 	.word	0x08008e5b
 8008c18:	08008c4f 	.word	0x08008c4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c1c:	4b94      	ldr	r3, [pc, #592]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0320 	and.w	r3, r3, #32
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d009      	beq.n	8008c3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c28:	4b91      	ldr	r3, [pc, #580]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	08db      	lsrs	r3, r3, #3
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	4a90      	ldr	r2, [pc, #576]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c34:	fa22 f303 	lsr.w	r3, r2, r3
 8008c38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008c3a:	e111      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c3c:	4b8d      	ldr	r3, [pc, #564]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c3e:	61bb      	str	r3, [r7, #24]
    break;
 8008c40:	e10e      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008c42:	4b8d      	ldr	r3, [pc, #564]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c44:	61bb      	str	r3, [r7, #24]
    break;
 8008c46:	e10b      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008c48:	4b8c      	ldr	r3, [pc, #560]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c4a:	61bb      	str	r3, [r7, #24]
    break;
 8008c4c:	e108      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c4e:	4b88      	ldr	r3, [pc, #544]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c58:	4b85      	ldr	r3, [pc, #532]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	091b      	lsrs	r3, r3, #4
 8008c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c64:	4b82      	ldr	r3, [pc, #520]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c6e:	4b80      	ldr	r3, [pc, #512]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c72:	08db      	lsrs	r3, r3, #3
 8008c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	ee07 3a90 	vmov	s15, r3
 8008c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80e1 	beq.w	8008e54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	f000 8083 	beq.w	8008da0 <HAL_RCC_GetSysClockFreq+0x204>
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	f200 80a1 	bhi.w	8008de4 <HAL_RCC_GetSysClockFreq+0x248>
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x114>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d056      	beq.n	8008d5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008cae:	e099      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cb0:	4b6f      	ldr	r3, [pc, #444]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d02d      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cbc:	4b6c      	ldr	r3, [pc, #432]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	08db      	lsrs	r3, r3, #3
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	4a6b      	ldr	r2, [pc, #428]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ccc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce6:	4b62      	ldr	r3, [pc, #392]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cfa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008d16:	e087      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b51      	ldr	r3, [pc, #324]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d5a:	e065      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6e:	4b40      	ldr	r3, [pc, #256]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9e:	e043      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db2:	4b2f      	ldr	r3, [pc, #188]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de2:	e021      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df6:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008e28:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	0a5b      	lsrs	r3, r3, #9
 8008e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e32:	3301      	adds	r3, #1
 8008e34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e4c:	ee17 3a90 	vmov	r3, s15
 8008e50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e52:	e005      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61bb      	str	r3, [r7, #24]
    break;
 8008e58:	e002      	b.n	8008e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e5c:	61bb      	str	r3, [r7, #24]
    break;
 8008e5e:	bf00      	nop
  }

  return sysclockfreq;
 8008e60:	69bb      	ldr	r3, [r7, #24]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3724      	adds	r7, #36	; 0x24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	58024400 	.word	0x58024400
 8008e74:	03d09000 	.word	0x03d09000
 8008e78:	003d0900 	.word	0x003d0900
 8008e7c:	007a1200 	.word	0x007a1200
 8008e80:	46000000 	.word	0x46000000
 8008e84:	4c742400 	.word	0x4c742400
 8008e88:	4a742400 	.word	0x4a742400
 8008e8c:	4af42400 	.word	0x4af42400

08008e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e96:	f7ff fe81 	bl	8008b9c <HAL_RCC_GetSysClockFreq>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	0a1b      	lsrs	r3, r3, #8
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	490f      	ldr	r1, [pc, #60]	; (8008ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ea8:	5ccb      	ldrb	r3, [r1, r3]
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ebe:	5cd3      	ldrb	r3, [r2, r3]
 8008ec0:	f003 031f 	and.w	r3, r3, #31
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eca:	4a07      	ldr	r2, [pc, #28]	; (8008ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ecc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ece:	4a07      	ldr	r2, [pc, #28]	; (8008eec <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	58024400 	.word	0x58024400
 8008ee4:	0800e424 	.word	0x0800e424
 8008ee8:	24000004 	.word	0x24000004
 8008eec:	24000000 	.word	0x24000000

08008ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ef4:	f7ff ffcc 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	f003 0307 	and.w	r3, r3, #7
 8008f04:	4904      	ldr	r1, [pc, #16]	; (8008f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f06:	5ccb      	ldrb	r3, [r1, r3]
 8008f08:	f003 031f 	and.w	r3, r3, #31
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	58024400 	.word	0x58024400
 8008f18:	0800e424 	.word	0x0800e424

08008f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f20:	f7ff ffb6 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8008f24:	4602      	mov	r2, r0
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	0a1b      	lsrs	r3, r3, #8
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	4904      	ldr	r1, [pc, #16]	; (8008f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f32:	5ccb      	ldrb	r3, [r1, r3]
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	58024400 	.word	0x58024400
 8008f44:	0800e424 	.word	0x0800e424

08008f48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f50:	2300      	movs	r3, #0
 8008f52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f54:	2300      	movs	r3, #0
 8008f56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d03f      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f6c:	d02a      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f72:	d824      	bhi.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f78:	d018      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f7e:	d81e      	bhi.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f88:	d007      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f8a:	e018      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f8c:	4ba4      	ldr	r3, [pc, #656]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4aa3      	ldr	r2, [pc, #652]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f98:	e015      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	2102      	movs	r1, #2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 f989 	bl	800a2b8 <RCCEx_PLL2_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008faa:	e00c      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3324      	adds	r3, #36	; 0x24
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fa32 	bl	800a41c <RCCEx_PLL3_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008fbc:	e003      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc2:	e000      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008fcc:	4b94      	ldr	r3, [pc, #592]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd8:	4991      	ldr	r1, [pc, #580]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8008fde:	e001      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
 8008fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d03d      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d826      	bhi.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ff8:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffe:	bf00      	nop
 8009000:	08009015 	.word	0x08009015
 8009004:	08009023 	.word	0x08009023
 8009008:	08009035 	.word	0x08009035
 800900c:	0800904d 	.word	0x0800904d
 8009010:	0800904d 	.word	0x0800904d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009014:	4b82      	ldr	r3, [pc, #520]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	4a81      	ldr	r2, [pc, #516]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800901a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800901e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009020:	e015      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3304      	adds	r3, #4
 8009026:	2100      	movs	r1, #0
 8009028:	4618      	mov	r0, r3
 800902a:	f001 f945 	bl	800a2b8 <RCCEx_PLL2_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009032:	e00c      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3324      	adds	r3, #36	; 0x24
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f001 f9ee 	bl	800a41c <RCCEx_PLL3_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009044:	e003      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
      break;
 800904a:	e000      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800904c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009054:	4b72      	ldr	r3, [pc, #456]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009058:	f023 0207 	bic.w	r2, r3, #7
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009060:	496f      	ldr	r1, [pc, #444]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009062:	4313      	orrs	r3, r2
 8009064:	650b      	str	r3, [r1, #80]	; 0x50
 8009066:	e001      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009074:	2b00      	cmp	r3, #0
 8009076:	d051      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800907e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009082:	d036      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009084:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009088:	d830      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800908a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800908e:	d032      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009094:	d82a      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009096:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800909a:	d02e      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800909c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090a0:	d824      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80090a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a6:	d018      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x192>
 80090a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ac:	d81e      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x172>
 80090b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090b6:	d007      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80090b8:	e018      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ba:	4b59      	ldr	r3, [pc, #356]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	4a58      	ldr	r2, [pc, #352]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80090c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090c6:	e019      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 f8f2 	bl	800a2b8 <RCCEx_PLL2_Config>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80090d8:	e010      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3324      	adds	r3, #36	; 0x24
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f001 f99b 	bl	800a41c <RCCEx_PLL3_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090ea:	e007      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
      break;
 80090f0:	e004      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090f2:	bf00      	nop
 80090f4:	e002      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090f6:	bf00      	nop
 80090f8:	e000      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80090fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10a      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009102:	4b47      	ldr	r3, [pc, #284]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009110:	4943      	ldr	r1, [pc, #268]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009112:	4313      	orrs	r3, r2
 8009114:	658b      	str	r3, [r1, #88]	; 0x58
 8009116:	e001      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009124:	2b00      	cmp	r3, #0
 8009126:	d051      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800912e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009132:	d036      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009134:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009138:	d830      	bhi.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800913a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800913e:	d032      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009144:	d82a      	bhi.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800914a:	d02e      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800914c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009150:	d824      	bhi.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009156:	d018      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800915c:	d81e      	bhi.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009166:	d007      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009168:	e018      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916a:	4b2d      	ldr	r3, [pc, #180]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	4a2c      	ldr	r2, [pc, #176]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009176:	e019      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f001 f89a 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009188:	e010      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3324      	adds	r3, #36	; 0x24
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f001 f943 	bl	800a41c <RCCEx_PLL3_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800919a:	e007      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
      break;
 80091a0:	e004      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80091a2:	bf00      	nop
 80091a4:	e002      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80091a6:	bf00      	nop
 80091a8:	e000      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80091aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091b2:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091c0:	4917      	ldr	r1, [pc, #92]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	658b      	str	r3, [r1, #88]	; 0x58
 80091c6:	e001      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d035      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091dc:	2b30      	cmp	r3, #48	; 0x30
 80091de:	d01c      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091e0:	2b30      	cmp	r3, #48	; 0x30
 80091e2:	d817      	bhi.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d00c      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d813      	bhi.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d019      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80091f0:	2b10      	cmp	r3, #16
 80091f2:	d10f      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	4a09      	ldr	r2, [pc, #36]	; (8009220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009200:	e011      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	2102      	movs	r1, #2
 8009208:	4618      	mov	r0, r3
 800920a:	f001 f855 	bl	800a2b8 <RCCEx_PLL2_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009212:	e008      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
      break;
 8009218:	e005      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800921a:	bf00      	nop
 800921c:	e003      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800921e:	bf00      	nop
 8009220:	58024400 	.word	0x58024400
      break;
 8009224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d109      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800922c:	4ba3      	ldr	r3, [pc, #652]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800922e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009238:	49a0      	ldr	r1, [pc, #640]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800923a:	4313      	orrs	r3, r2
 800923c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800923e:	e001      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d047      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009258:	d030      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800925a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800925e:	d82a      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009264:	d02c      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009266:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800926a:	d824      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800926c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009270:	d018      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009276:	d81e      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800927c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009280:	d007      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009282:	e018      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009284:	4b8d      	ldr	r3, [pc, #564]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	4a8c      	ldr	r2, [pc, #560]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800928a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800928e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009290:	e017      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3304      	adds	r3, #4
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f001 f80d 	bl	800a2b8 <RCCEx_PLL2_Config>
 800929e:	4603      	mov	r3, r0
 80092a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092a2:	e00e      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3324      	adds	r3, #36	; 0x24
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 f8b6 	bl	800a41c <RCCEx_PLL3_Config>
 80092b0:	4603      	mov	r3, r0
 80092b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092b4:	e005      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ba:	e002      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80092c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d109      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092c8:	4b7c      	ldr	r3, [pc, #496]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	4979      	ldr	r1, [pc, #484]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	650b      	str	r3, [r1, #80]	; 0x50
 80092da:	e001      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d049      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092f4:	d02e      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80092f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092fa:	d828      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80092fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009300:	d02a      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009306:	d822      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800930c:	d026      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800930e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009312:	d81c      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009318:	d010      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800931a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800931e:	d816      	bhi.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01d      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009328:	d111      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3304      	adds	r3, #4
 800932e:	2101      	movs	r1, #1
 8009330:	4618      	mov	r0, r3
 8009332:	f000 ffc1 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800933a:	e012      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3324      	adds	r3, #36	; 0x24
 8009340:	2101      	movs	r1, #1
 8009342:	4618      	mov	r0, r3
 8009344:	f001 f86a 	bl	800a41c <RCCEx_PLL3_Config>
 8009348:	4603      	mov	r3, r0
 800934a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800934c:	e009      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	75fb      	strb	r3, [r7, #23]
      break;
 8009352:	e006      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009354:	bf00      	nop
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009358:	bf00      	nop
 800935a:	e002      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009368:	4b54      	ldr	r3, [pc, #336]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800936a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009374:	4951      	ldr	r1, [pc, #324]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009376:	4313      	orrs	r3, r2
 8009378:	650b      	str	r3, [r1, #80]	; 0x50
 800937a:	e001      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d04b      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009396:	d02e      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800939c:	d828      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800939e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a2:	d02a      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80093a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a8:	d822      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ae:	d026      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80093b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093b4:	d81c      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ba:	d010      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x496>
 80093bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c0:	d816      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01d      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80093c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ca:	d111      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3304      	adds	r3, #4
 80093d0:	2101      	movs	r1, #1
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 ff70 	bl	800a2b8 <RCCEx_PLL2_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093dc:	e012      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3324      	adds	r3, #36	; 0x24
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f819 	bl	800a41c <RCCEx_PLL3_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093ee:	e009      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
      break;
 80093f4:	e006      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093f6:	bf00      	nop
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800940a:	4b2c      	ldr	r3, [pc, #176]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009418:	4928      	ldr	r1, [pc, #160]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800941a:	4313      	orrs	r3, r2
 800941c:	658b      	str	r3, [r1, #88]	; 0x58
 800941e:	e001      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02f      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009438:	d00e      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800943a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943e:	d814      	bhi.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d015      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009448:	d10f      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009456:	e00c      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	2101      	movs	r1, #1
 800945e:	4618      	mov	r0, r3
 8009460:	f000 ff2a 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009468:	e003      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	75fb      	strb	r3, [r7, #23]
      break;
 800946e:	e000      	b.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d109      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009478:	4b10      	ldr	r3, [pc, #64]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800947a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009484:	490d      	ldr	r1, [pc, #52]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009486:	4313      	orrs	r3, r2
 8009488:	650b      	str	r3, [r1, #80]	; 0x50
 800948a:	e001      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d034      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d81d      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80094a4:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094aa:	bf00      	nop
 80094ac:	080094e7 	.word	0x080094e7
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094cf 	.word	0x080094cf
 80094b8:	080094e7 	.word	0x080094e7
 80094bc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c0:	4bb1      	ldr	r3, [pc, #708]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	4ab0      	ldr	r2, [pc, #704]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094cc:	e00c      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3304      	adds	r3, #4
 80094d2:	2102      	movs	r1, #2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 feef 	bl	800a2b8 <RCCEx_PLL2_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094de:	e003      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
      break;
 80094e4:	e000      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80094e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094ee:	4ba6      	ldr	r3, [pc, #664]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f2:	f023 0203 	bic.w	r2, r3, #3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	49a3      	ldr	r1, [pc, #652]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009500:	e001      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 8086 	beq.w	8009620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009514:	4b9d      	ldr	r3, [pc, #628]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a9c      	ldr	r2, [pc, #624]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800951a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800951e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009520:	f7fb fc86 	bl	8004e30 <HAL_GetTick>
 8009524:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009526:	e009      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009528:	f7fb fc82 	bl	8004e30 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	2b64      	cmp	r3, #100	; 0x64
 8009534:	d902      	bls.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	75fb      	strb	r3, [r7, #23]
        break;
 800953a:	e005      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800953c:	4b93      	ldr	r3, [pc, #588]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009544:	2b00      	cmp	r3, #0
 8009546:	d0ef      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d166      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800954e:	4b8e      	ldr	r3, [pc, #568]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009558:	4053      	eors	r3, r2
 800955a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800955e:	2b00      	cmp	r3, #0
 8009560:	d013      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009562:	4b89      	ldr	r3, [pc, #548]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800956a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800956c:	4b86      	ldr	r3, [pc, #536]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800956e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009570:	4a85      	ldr	r2, [pc, #532]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009576:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009578:	4b83      	ldr	r3, [pc, #524]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800957a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957c:	4a82      	ldr	r2, [pc, #520]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800957e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009582:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009584:	4a80      	ldr	r2, [pc, #512]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009594:	d115      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009596:	f7fb fc4b 	bl	8004e30 <HAL_GetTick>
 800959a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800959c:	e00b      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800959e:	f7fb fc47 	bl	8004e30 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d902      	bls.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	75fb      	strb	r3, [r7, #23]
            break;
 80095b4:	e005      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095b6:	4b74      	ldr	r3, [pc, #464]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0ed      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d126      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095d6:	d10d      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80095d8:	4b6b      	ldr	r3, [pc, #428]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095e6:	0919      	lsrs	r1, r3, #4
 80095e8:	4b69      	ldr	r3, [pc, #420]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80095ea:	400b      	ands	r3, r1
 80095ec:	4966      	ldr	r1, [pc, #408]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	610b      	str	r3, [r1, #16]
 80095f2:	e005      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80095f4:	4b64      	ldr	r3, [pc, #400]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	4a63      	ldr	r2, [pc, #396]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80095fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80095fe:	6113      	str	r3, [r2, #16]
 8009600:	4b61      	ldr	r3, [pc, #388]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800960a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800960e:	495e      	ldr	r1, [pc, #376]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009610:	4313      	orrs	r3, r2
 8009612:	670b      	str	r3, [r1, #112]	; 0x70
 8009614:	e004      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	75bb      	strb	r3, [r7, #22]
 800961a:	e001      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d07e      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009630:	2b28      	cmp	r3, #40	; 0x28
 8009632:	d867      	bhi.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	0800970b 	.word	0x0800970b
 8009640:	08009705 	.word	0x08009705
 8009644:	08009705 	.word	0x08009705
 8009648:	08009705 	.word	0x08009705
 800964c:	08009705 	.word	0x08009705
 8009650:	08009705 	.word	0x08009705
 8009654:	08009705 	.word	0x08009705
 8009658:	08009705 	.word	0x08009705
 800965c:	080096e1 	.word	0x080096e1
 8009660:	08009705 	.word	0x08009705
 8009664:	08009705 	.word	0x08009705
 8009668:	08009705 	.word	0x08009705
 800966c:	08009705 	.word	0x08009705
 8009670:	08009705 	.word	0x08009705
 8009674:	08009705 	.word	0x08009705
 8009678:	08009705 	.word	0x08009705
 800967c:	080096f3 	.word	0x080096f3
 8009680:	08009705 	.word	0x08009705
 8009684:	08009705 	.word	0x08009705
 8009688:	08009705 	.word	0x08009705
 800968c:	08009705 	.word	0x08009705
 8009690:	08009705 	.word	0x08009705
 8009694:	08009705 	.word	0x08009705
 8009698:	08009705 	.word	0x08009705
 800969c:	0800970b 	.word	0x0800970b
 80096a0:	08009705 	.word	0x08009705
 80096a4:	08009705 	.word	0x08009705
 80096a8:	08009705 	.word	0x08009705
 80096ac:	08009705 	.word	0x08009705
 80096b0:	08009705 	.word	0x08009705
 80096b4:	08009705 	.word	0x08009705
 80096b8:	08009705 	.word	0x08009705
 80096bc:	0800970b 	.word	0x0800970b
 80096c0:	08009705 	.word	0x08009705
 80096c4:	08009705 	.word	0x08009705
 80096c8:	08009705 	.word	0x08009705
 80096cc:	08009705 	.word	0x08009705
 80096d0:	08009705 	.word	0x08009705
 80096d4:	08009705 	.word	0x08009705
 80096d8:	08009705 	.word	0x08009705
 80096dc:	0800970b 	.word	0x0800970b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3304      	adds	r3, #4
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fde6 	bl	800a2b8 <RCCEx_PLL2_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80096f0:	e00c      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3324      	adds	r3, #36	; 0x24
 80096f6:	2101      	movs	r1, #1
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fe8f 	bl	800a41c <RCCEx_PLL3_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009702:	e003      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	75fb      	strb	r3, [r7, #23]
      break;
 8009708:	e000      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800970a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009712:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009716:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800971e:	491a      	ldr	r1, [pc, #104]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009720:	4313      	orrs	r3, r2
 8009722:	654b      	str	r3, [r1, #84]	; 0x54
 8009724:	e001      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d03e      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	2b05      	cmp	r3, #5
 800973c:	d820      	bhi.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009795 	.word	0x08009795
 8009748:	0800975d 	.word	0x0800975d
 800974c:	0800976f 	.word	0x0800976f
 8009750:	08009795 	.word	0x08009795
 8009754:	08009795 	.word	0x08009795
 8009758:	08009795 	.word	0x08009795
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3304      	adds	r3, #4
 8009760:	2101      	movs	r1, #1
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fda8 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800976c:	e013      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3324      	adds	r3, #36	; 0x24
 8009772:	2101      	movs	r1, #1
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fe51 	bl	800a41c <RCCEx_PLL3_Config>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800977e:	e00a      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	75fb      	strb	r3, [r7, #23]
      break;
 8009784:	e007      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009786:	bf00      	nop
 8009788:	58024400 	.word	0x58024400
 800978c:	58024800 	.word	0x58024800
 8009790:	00ffffcf 	.word	0x00ffffcf
      break;
 8009794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800979c:	4b9f      	ldr	r3, [pc, #636]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800979e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a0:	f023 0207 	bic.w	r2, r3, #7
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	499c      	ldr	r1, [pc, #624]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	654b      	str	r3, [r1, #84]	; 0x54
 80097ae:	e001      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d039      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097c6:	2b05      	cmp	r3, #5
 80097c8:	d820      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80097ca:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	08009813 	.word	0x08009813
 80097d4:	080097e9 	.word	0x080097e9
 80097d8:	080097fb 	.word	0x080097fb
 80097dc:	08009813 	.word	0x08009813
 80097e0:	08009813 	.word	0x08009813
 80097e4:	08009813 	.word	0x08009813
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3304      	adds	r3, #4
 80097ec:	2101      	movs	r1, #1
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fd62 	bl	800a2b8 <RCCEx_PLL2_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80097f8:	e00c      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	3324      	adds	r3, #36	; 0x24
 80097fe:	2101      	movs	r1, #1
 8009800:	4618      	mov	r0, r3
 8009802:	f000 fe0b 	bl	800a41c <RCCEx_PLL3_Config>
 8009806:	4603      	mov	r3, r0
 8009808:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800980a:	e003      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	75fb      	strb	r3, [r7, #23]
      break;
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009814:	7dfb      	ldrb	r3, [r7, #23]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800981a:	4b80      	ldr	r3, [pc, #512]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800981c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800981e:	f023 0207 	bic.w	r2, r3, #7
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009828:	497c      	ldr	r1, [pc, #496]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800982a:	4313      	orrs	r3, r2
 800982c:	658b      	str	r3, [r1, #88]	; 0x58
 800982e:	e001      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d04b      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800984a:	d02e      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800984c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009850:	d828      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009856:	d02a      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985c:	d822      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800985e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009862:	d026      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009868:	d81c      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800986a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800986e:	d010      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009874:	d816      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01d      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800987a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987e:	d111      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	2100      	movs	r1, #0
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fd16 	bl	800a2b8 <RCCEx_PLL2_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009890:	e012      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3324      	adds	r3, #36	; 0x24
 8009896:	2102      	movs	r1, #2
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fdbf 	bl	800a41c <RCCEx_PLL3_Config>
 800989e:	4603      	mov	r3, r0
 80098a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098a2:	e009      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
      break;
 80098a8:	e006      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098aa:	bf00      	nop
 80098ac:	e004      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098ae:	bf00      	nop
 80098b0:	e002      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80098b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098be:	4b57      	ldr	r3, [pc, #348]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098cc:	4953      	ldr	r1, [pc, #332]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	654b      	str	r3, [r1, #84]	; 0x54
 80098d2:	e001      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d04b      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098ee:	d02e      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80098f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098f4:	d828      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	d02a      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80098fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009900:	d822      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009906:	d026      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800990c:	d81c      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800990e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009912:	d010      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009918:	d816      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01d      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800991e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009922:	d111      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	2100      	movs	r1, #0
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fcc4 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009934:	e012      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3324      	adds	r3, #36	; 0x24
 800993a:	2102      	movs	r1, #2
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fd6d 	bl	800a41c <RCCEx_PLL3_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009946:	e009      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	75fb      	strb	r3, [r7, #23]
      break;
 800994c:	e006      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800994e:	bf00      	nop
 8009950:	e004      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009952:	bf00      	nop
 8009954:	e002      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800995a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009962:	4b2e      	ldr	r3, [pc, #184]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009966:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009970:	492a      	ldr	r1, [pc, #168]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009972:	4313      	orrs	r3, r2
 8009974:	658b      	str	r3, [r1, #88]	; 0x58
 8009976:	e001      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009984:	2b00      	cmp	r3, #0
 8009986:	d04d      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800998e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009992:	d02e      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009994:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009998:	d828      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800999a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800999e:	d02a      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80099a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a4:	d822      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80099a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099aa:	d026      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80099ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099b0:	d81c      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80099b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099b6:	d010      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80099b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099bc:	d816      	bhi.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01d      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80099c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c6:	d111      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fc72 	bl	800a2b8 <RCCEx_PLL2_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099d8:	e012      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3324      	adds	r3, #36	; 0x24
 80099de:	2102      	movs	r1, #2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fd1b 	bl	800a41c <RCCEx_PLL3_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80099ea:	e009      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
      break;
 80099f0:	e006      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099f2:	bf00      	nop
 80099f4:	e004      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099f6:	bf00      	nop
 80099f8:	e002      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099fa:	bf00      	nop
 80099fc:	e000      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80099fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10c      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a14:	4901      	ldr	r1, [pc, #4]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	658b      	str	r3, [r1, #88]	; 0x58
 8009a1a:	e003      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0308 	and.w	r3, r3, #8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d018      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a38:	d10a      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3324      	adds	r3, #36	; 0x24
 8009a3e:	2102      	movs	r1, #2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fceb 	bl	800a41c <RCCEx_PLL3_Config>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a50:	4b8a      	ldr	r3, [pc, #552]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a5c:	4987      	ldr	r1, [pc, #540]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0310 	and.w	r3, r3, #16
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d01a      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a78:	d10a      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3324      	adds	r3, #36	; 0x24
 8009a7e:	2102      	movs	r1, #2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fccb 	bl	800a41c <RCCEx_PLL3_Config>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a90:	4b7a      	ldr	r3, [pc, #488]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9e:	4977      	ldr	r1, [pc, #476]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d034      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aba:	d01d      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ac0:	d817      	bhi.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aca:	d009      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009acc:	e011      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fbef 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ade:	e00c      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3324      	adds	r3, #36	; 0x24
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fc98 	bl	800a41c <RCCEx_PLL3_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009af0:	e003      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	75fb      	strb	r3, [r7, #23]
      break;
 8009af6:	e000      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b00:	4b5e      	ldr	r3, [pc, #376]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b0e:	495b      	ldr	r1, [pc, #364]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	658b      	str	r3, [r1, #88]	; 0x58
 8009b14:	e001      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d033      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b30:	d01c      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009b32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b36:	d816      	bhi.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b3c:	d003      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b42:	d007      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009b44:	e00f      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b46:	4b4d      	ldr	r3, [pc, #308]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	4a4c      	ldr	r2, [pc, #304]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b52:	e00c      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3324      	adds	r3, #36	; 0x24
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fc5e 	bl	800a41c <RCCEx_PLL3_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b64:	e003      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6a:	e000      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b74:	4b41      	ldr	r3, [pc, #260]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b82:	493e      	ldr	r1, [pc, #248]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	654b      	str	r3, [r1, #84]	; 0x54
 8009b88:	e001      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d029      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ba6:	d007      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ba8:	e00f      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009baa:	4b34      	ldr	r3, [pc, #208]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	4a33      	ldr	r2, [pc, #204]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bb6:	e00b      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	2102      	movs	r1, #2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fb7a 	bl	800a2b8 <RCCEx_PLL2_Config>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bc8:	e002      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bd6:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be2:	4926      	ldr	r1, [pc, #152]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009be8:	e001      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3324      	adds	r3, #36	; 0x24
 8009bfe:	2102      	movs	r1, #2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 fc0b 	bl	800a41c <RCCEx_PLL3_Config>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d033      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c24:	d017      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c2a:	d811      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c30:	d013      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c36:	d80b      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d010      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c40:	d106      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	4a0d      	ldr	r2, [pc, #52]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c4e:	e007      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	75fb      	strb	r3, [r7, #23]
      break;
 8009c54:	e004      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c56:	bf00      	nop
 8009c58:	e002      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c5a:	bf00      	nop
 8009c5c:	e000      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10c      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c66:	4b05      	ldr	r3, [pc, #20]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c72:	4902      	ldr	r1, [pc, #8]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c74:	4313      	orrs	r3, r2
 8009c76:	654b      	str	r3, [r1, #84]	; 0x54
 8009c78:	e004      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009c7a:	bf00      	nop
 8009c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
 8009c82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d008      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c90:	4b29      	ldr	r3, [pc, #164]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c9c:	4926      	ldr	r1, [pc, #152]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d008      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cae:	4b22      	ldr	r3, [pc, #136]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cba:	491f      	ldr	r1, [pc, #124]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00d      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ccc:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	4a19      	ldr	r2, [pc, #100]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cd6:	6113      	str	r3, [r2, #16]
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ce2:	4915      	ldr	r1, [pc, #84]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da08      	bge.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cf0:	4b11      	ldr	r3, [pc, #68]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cfc:	490e      	ldr	r1, [pc, #56]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d1c:	4906      	ldr	r1, [pc, #24]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009d22:	7dbb      	ldrb	r3, [r7, #22]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e000      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	58024400 	.word	0x58024400

08009d3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d40:	f7ff f8a6 	bl	8008e90 <HAL_RCC_GetHCLKFreq>
 8009d44:	4602      	mov	r2, r0
 8009d46:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	091b      	lsrs	r3, r3, #4
 8009d4c:	f003 0307 	and.w	r3, r3, #7
 8009d50:	4904      	ldr	r1, [pc, #16]	; (8009d64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d52:	5ccb      	ldrb	r3, [r1, r3]
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	58024400 	.word	0x58024400
 8009d64:	0800e424 	.word	0x0800e424

08009d68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b089      	sub	sp, #36	; 0x24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d70:	4ba1      	ldr	r3, [pc, #644]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009d7a:	4b9f      	ldr	r3, [pc, #636]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7e:	0b1b      	lsrs	r3, r3, #12
 8009d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d86:	4b9c      	ldr	r3, [pc, #624]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	091b      	lsrs	r3, r3, #4
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d92:	4b99      	ldr	r3, [pc, #612]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d96:	08db      	lsrs	r3, r3, #3
 8009d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 8111 	beq.w	8009fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	f000 8083 	beq.w	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	f200 80a1 	bhi.w	8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d056      	beq.n	8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009dd2:	e099      	b.n	8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd4:	4b88      	ldr	r3, [pc, #544]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02d      	beq.n	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009de0:	4b85      	ldr	r3, [pc, #532]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	08db      	lsrs	r3, r3, #3
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	4a84      	ldr	r2, [pc, #528]	; (8009ffc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009dec:	fa22 f303 	lsr.w	r3, r2, r3
 8009df0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	ee07 3a90 	vmov	s15, r3
 8009df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e3a:	e087      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b6a      	ldr	r3, [pc, #424]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7e:	e065      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e92:	4b59      	ldr	r3, [pc, #356]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec2:	e043      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a00c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed6:	4b48      	ldr	r3, [pc, #288]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f06:	e021      	b.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	ee07 3a90 	vmov	s15, r3
 8009f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1a:	4b37      	ldr	r3, [pc, #220]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f50:	0a5b      	lsrs	r3, r3, #9
 8009f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f72:	ee17 2a90 	vmov	r2, s15
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009f7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	0c1b      	lsrs	r3, r3, #16
 8009f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f84:	ee07 3a90 	vmov	s15, r3
 8009f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa0:	ee17 2a90 	vmov	r2, s15
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	0e1b      	lsrs	r3, r3, #24
 8009fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fce:	ee17 2a90 	vmov	r2, s15
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009fd6:	e008      	b.n	8009fea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	609a      	str	r2, [r3, #8]
}
 8009fea:	bf00      	nop
 8009fec:	3724      	adds	r7, #36	; 0x24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	46000000 	.word	0x46000000
 800a004:	4c742400 	.word	0x4c742400
 800a008:	4a742400 	.word	0x4a742400
 800a00c:	4af42400 	.word	0x4af42400

0800a010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a010:	b480      	push	{r7}
 800a012:	b089      	sub	sp, #36	; 0x24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a018:	4ba1      	ldr	r3, [pc, #644]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a022:	4b9f      	ldr	r3, [pc, #636]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	0d1b      	lsrs	r3, r3, #20
 800a028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a02c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a02e:	4b9c      	ldr	r3, [pc, #624]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a03a:	4b99      	ldr	r3, [pc, #612]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	08db      	lsrs	r3, r3, #3
 800a040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	fb02 f303 	mul.w	r3, r2, r3
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8111 	beq.w	800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	2b02      	cmp	r3, #2
 800a062:	f000 8083 	beq.w	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	f200 80a1 	bhi.w	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d056      	beq.n	800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a07a:	e099      	b.n	800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a07c:	4b88      	ldr	r3, [pc, #544]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02d      	beq.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a088:	4b85      	ldr	r3, [pc, #532]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	08db      	lsrs	r3, r3, #3
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	4a84      	ldr	r2, [pc, #528]	; (800a2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	ee07 3a90 	vmov	s15, r3
 800a0a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b2:	4b7b      	ldr	r3, [pc, #492]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0e2:	e087      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	ee07 3a90 	vmov	s15, r3
 800a0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f6:	4b6a      	ldr	r3, [pc, #424]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a106:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a126:	e065      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a132:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13a:	4b59      	ldr	r3, [pc, #356]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a14e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a166:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a16a:	e043      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	ee07 3a90 	vmov	s15, r3
 800a172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a176:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a17a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a17e:	4b48      	ldr	r3, [pc, #288]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a18e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a192:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1ae:	e021      	b.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c2:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1f4:	4b2a      	ldr	r3, [pc, #168]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	0a5b      	lsrs	r3, r3, #9
 800a1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a20a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21a:	ee17 2a90 	vmov	r2, s15
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a222:	4b1f      	ldr	r3, [pc, #124]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a23c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a248:	ee17 2a90 	vmov	r2, s15
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a250:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	0e1b      	lsrs	r3, r3, #24
 800a256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a26a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a26e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a276:	ee17 2a90 	vmov	r2, s15
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a27e:	e008      	b.n	800a292 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
}
 800a292:	bf00      	nop
 800a294:	3724      	adds	r7, #36	; 0x24
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	58024400 	.word	0x58024400
 800a2a4:	03d09000 	.word	0x03d09000
 800a2a8:	46000000 	.word	0x46000000
 800a2ac:	4c742400 	.word	0x4c742400
 800a2b0:	4a742400 	.word	0x4a742400
 800a2b4:	4af42400 	.word	0x4af42400

0800a2b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2c6:	4b53      	ldr	r3, [pc, #332]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d101      	bne.n	800a2d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e099      	b.n	800a40a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2d6:	4b4f      	ldr	r3, [pc, #316]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a4e      	ldr	r2, [pc, #312]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e2:	f7fa fda5 	bl	8004e30 <HAL_GetTick>
 800a2e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2e8:	e008      	b.n	800a2fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2ea:	f7fa fda1 	bl	8004e30 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d901      	bls.n	800a2fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e086      	b.n	800a40a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2fc:	4b45      	ldr	r3, [pc, #276]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1f0      	bne.n	800a2ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a308:	4b42      	ldr	r3, [pc, #264]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	031b      	lsls	r3, r3, #12
 800a316:	493f      	ldr	r1, [pc, #252]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	628b      	str	r3, [r1, #40]	; 0x28
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	3b01      	subs	r3, #1
 800a322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	025b      	lsls	r3, r3, #9
 800a32e:	b29b      	uxth	r3, r3
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	3b01      	subs	r3, #1
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	3b01      	subs	r3, #1
 800a346:	061b      	lsls	r3, r3, #24
 800a348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a34c:	4931      	ldr	r1, [pc, #196]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a352:	4b30      	ldr	r3, [pc, #192]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	492d      	ldr	r1, [pc, #180]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a360:	4313      	orrs	r3, r2
 800a362:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a364:	4b2b      	ldr	r3, [pc, #172]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	f023 0220 	bic.w	r2, r3, #32
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	4928      	ldr	r1, [pc, #160]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a376:	4b27      	ldr	r3, [pc, #156]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	4a26      	ldr	r2, [pc, #152]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a37c:	f023 0310 	bic.w	r3, r3, #16
 800a380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a386:	4b24      	ldr	r3, [pc, #144]	; (800a418 <RCCEx_PLL2_Config+0x160>)
 800a388:	4013      	ands	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	69d2      	ldr	r2, [r2, #28]
 800a38e:	00d2      	lsls	r2, r2, #3
 800a390:	4920      	ldr	r1, [pc, #128]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a392:	4313      	orrs	r3, r2
 800a394:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a396:	4b1f      	ldr	r3, [pc, #124]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	4a1e      	ldr	r2, [pc, #120]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	f043 0310 	orr.w	r3, r3, #16
 800a3a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3a8:	4b1a      	ldr	r3, [pc, #104]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	4a19      	ldr	r2, [pc, #100]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3b4:	e00f      	b.n	800a3d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d106      	bne.n	800a3ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3bc:	4b15      	ldr	r3, [pc, #84]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a14      	ldr	r2, [pc, #80]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3c8:	e005      	b.n	800a3d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3ca:	4b12      	ldr	r3, [pc, #72]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	4a11      	ldr	r2, [pc, #68]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a0e      	ldr	r2, [pc, #56]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e2:	f7fa fd25 	bl	8004e30 <HAL_GetTick>
 800a3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3e8:	e008      	b.n	800a3fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3ea:	f7fa fd21 	bl	8004e30 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e006      	b.n	800a40a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3fc:	4b05      	ldr	r3, [pc, #20]	; (800a414 <RCCEx_PLL2_Config+0x15c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0f0      	beq.n	800a3ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	58024400 	.word	0x58024400
 800a418:	ffff0007 	.word	0xffff0007

0800a41c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a42a:	4b53      	ldr	r3, [pc, #332]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	2b03      	cmp	r3, #3
 800a434:	d101      	bne.n	800a43a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e099      	b.n	800a56e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a43a:	4b4f      	ldr	r3, [pc, #316]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a4e      	ldr	r2, [pc, #312]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a446:	f7fa fcf3 	bl	8004e30 <HAL_GetTick>
 800a44a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a44c:	e008      	b.n	800a460 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a44e:	f7fa fcef 	bl	8004e30 <HAL_GetTick>
 800a452:	4602      	mov	r2, r0
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d901      	bls.n	800a460 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e086      	b.n	800a56e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a460:	4b45      	ldr	r3, [pc, #276]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1f0      	bne.n	800a44e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a46c:	4b42      	ldr	r3, [pc, #264]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	051b      	lsls	r3, r3, #20
 800a47a:	493f      	ldr	r1, [pc, #252]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	628b      	str	r3, [r1, #40]	; 0x28
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	3b01      	subs	r3, #1
 800a486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	3b01      	subs	r3, #1
 800a490:	025b      	lsls	r3, r3, #9
 800a492:	b29b      	uxth	r3, r3
 800a494:	431a      	orrs	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	041b      	lsls	r3, r3, #16
 800a49e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	061b      	lsls	r3, r3, #24
 800a4ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4b0:	4931      	ldr	r1, [pc, #196]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4b6:	4b30      	ldr	r3, [pc, #192]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	492d      	ldr	r1, [pc, #180]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4c8:	4b2b      	ldr	r3, [pc, #172]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	4928      	ldr	r1, [pc, #160]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4da:	4b27      	ldr	r3, [pc, #156]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	4a26      	ldr	r2, [pc, #152]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a4e6:	4b24      	ldr	r3, [pc, #144]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ea:	4b24      	ldr	r3, [pc, #144]	; (800a57c <RCCEx_PLL3_Config+0x160>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	69d2      	ldr	r2, [r2, #28]
 800a4f2:	00d2      	lsls	r2, r2, #3
 800a4f4:	4920      	ldr	r1, [pc, #128]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4fa:	4b1f      	ldr	r3, [pc, #124]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fe:	4a1e      	ldr	r2, [pc, #120]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a50c:	4b1a      	ldr	r3, [pc, #104]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	4a19      	ldr	r2, [pc, #100]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a516:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a518:	e00f      	b.n	800a53a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d106      	bne.n	800a52e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a520:	4b15      	ldr	r3, [pc, #84]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a14      	ldr	r2, [pc, #80]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a526:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a52a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a52c:	e005      	b.n	800a53a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a52e:	4b12      	ldr	r3, [pc, #72]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	4a11      	ldr	r2, [pc, #68]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a538:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a53a:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a0e      	ldr	r2, [pc, #56]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a546:	f7fa fc73 	bl	8004e30 <HAL_GetTick>
 800a54a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a54c:	e008      	b.n	800a560 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a54e:	f7fa fc6f 	bl	8004e30 <HAL_GetTick>
 800a552:	4602      	mov	r2, r0
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d901      	bls.n	800a560 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e006      	b.n	800a56e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <RCCEx_PLL3_Config+0x15c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0f0      	beq.n	800a54e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	58024400 	.word	0x58024400
 800a57c:	ffff0007 	.word	0xffff0007

0800a580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e049      	b.n	800a626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fa f864 	bl	8004674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f000 fdc0 	bl	800b144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b01      	cmp	r3, #1
 800a642:	d001      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e05e      	b.n	800a706 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0201 	orr.w	r2, r2, #1
 800a65e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a2b      	ldr	r2, [pc, #172]	; (800a714 <HAL_TIM_Base_Start_IT+0xe4>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d02c      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a672:	d027      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a27      	ldr	r2, [pc, #156]	; (800a718 <HAL_TIM_Base_Start_IT+0xe8>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a26      	ldr	r2, [pc, #152]	; (800a71c <HAL_TIM_Base_Start_IT+0xec>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d01d      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a24      	ldr	r2, [pc, #144]	; (800a720 <HAL_TIM_Base_Start_IT+0xf0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a23      	ldr	r2, [pc, #140]	; (800a724 <HAL_TIM_Base_Start_IT+0xf4>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a21      	ldr	r2, [pc, #132]	; (800a728 <HAL_TIM_Base_Start_IT+0xf8>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a20      	ldr	r2, [pc, #128]	; (800a72c <HAL_TIM_Base_Start_IT+0xfc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1e      	ldr	r2, [pc, #120]	; (800a730 <HAL_TIM_Base_Start_IT+0x100>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x94>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1d      	ldr	r2, [pc, #116]	; (800a734 <HAL_TIM_Base_Start_IT+0x104>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d115      	bne.n	800a6f0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	4b1b      	ldr	r3, [pc, #108]	; (800a738 <HAL_TIM_Base_Start_IT+0x108>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b06      	cmp	r3, #6
 800a6d4:	d015      	beq.n	800a702 <HAL_TIM_Base_Start_IT+0xd2>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6dc:	d011      	beq.n	800a702 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0201 	orr.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ee:	e008      	b.n	800a702 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	e000      	b.n	800a704 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40010000 	.word	0x40010000
 800a718:	40000400 	.word	0x40000400
 800a71c:	40000800 	.word	0x40000800
 800a720:	40000c00 	.word	0x40000c00
 800a724:	40010400 	.word	0x40010400
 800a728:	40001800 	.word	0x40001800
 800a72c:	40014000 	.word	0x40014000
 800a730:	4000e000 	.word	0x4000e000
 800a734:	4000e400 	.word	0x4000e400
 800a738:	00010007 	.word	0x00010007

0800a73c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e049      	b.n	800a7e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7f9 ffce 	bl	8004704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2202      	movs	r2, #2
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f000 fce2 	bl	800b144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <HAL_TIM_PWM_Start+0x24>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b01      	cmp	r3, #1
 800a806:	bf14      	ite	ne
 800a808:	2301      	movne	r3, #1
 800a80a:	2300      	moveq	r3, #0
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	e03c      	b.n	800a88a <HAL_TIM_PWM_Start+0x9e>
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b04      	cmp	r3, #4
 800a814:	d109      	bne.n	800a82a <HAL_TIM_PWM_Start+0x3e>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b01      	cmp	r3, #1
 800a820:	bf14      	ite	ne
 800a822:	2301      	movne	r3, #1
 800a824:	2300      	moveq	r3, #0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	e02f      	b.n	800a88a <HAL_TIM_PWM_Start+0x9e>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d109      	bne.n	800a844 <HAL_TIM_PWM_Start+0x58>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b01      	cmp	r3, #1
 800a83a:	bf14      	ite	ne
 800a83c:	2301      	movne	r3, #1
 800a83e:	2300      	moveq	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	e022      	b.n	800a88a <HAL_TIM_PWM_Start+0x9e>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b0c      	cmp	r3, #12
 800a848:	d109      	bne.n	800a85e <HAL_TIM_PWM_Start+0x72>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b01      	cmp	r3, #1
 800a854:	bf14      	ite	ne
 800a856:	2301      	movne	r3, #1
 800a858:	2300      	moveq	r3, #0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	e015      	b.n	800a88a <HAL_TIM_PWM_Start+0x9e>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b10      	cmp	r3, #16
 800a862:	d109      	bne.n	800a878 <HAL_TIM_PWM_Start+0x8c>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	bf14      	ite	ne
 800a870:	2301      	movne	r3, #1
 800a872:	2300      	moveq	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	e008      	b.n	800a88a <HAL_TIM_PWM_Start+0x9e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b01      	cmp	r3, #1
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e0ab      	b.n	800a9ea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <HAL_TIM_PWM_Start+0xb6>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8a0:	e023      	b.n	800a8ea <HAL_TIM_PWM_Start+0xfe>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d104      	bne.n	800a8b2 <HAL_TIM_PWM_Start+0xc6>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b0:	e01b      	b.n	800a8ea <HAL_TIM_PWM_Start+0xfe>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d104      	bne.n	800a8c2 <HAL_TIM_PWM_Start+0xd6>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c0:	e013      	b.n	800a8ea <HAL_TIM_PWM_Start+0xfe>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b0c      	cmp	r3, #12
 800a8c6:	d104      	bne.n	800a8d2 <HAL_TIM_PWM_Start+0xe6>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8d0:	e00b      	b.n	800a8ea <HAL_TIM_PWM_Start+0xfe>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b10      	cmp	r3, #16
 800a8d6:	d104      	bne.n	800a8e2 <HAL_TIM_PWM_Start+0xf6>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8e0:	e003      	b.n	800a8ea <HAL_TIM_PWM_Start+0xfe>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 ffa2 	bl	800b83c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a3d      	ldr	r2, [pc, #244]	; (800a9f4 <HAL_TIM_PWM_Start+0x208>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d013      	beq.n	800a92a <HAL_TIM_PWM_Start+0x13e>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a3c      	ldr	r2, [pc, #240]	; (800a9f8 <HAL_TIM_PWM_Start+0x20c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00e      	beq.n	800a92a <HAL_TIM_PWM_Start+0x13e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a3a      	ldr	r2, [pc, #232]	; (800a9fc <HAL_TIM_PWM_Start+0x210>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d009      	beq.n	800a92a <HAL_TIM_PWM_Start+0x13e>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a39      	ldr	r2, [pc, #228]	; (800aa00 <HAL_TIM_PWM_Start+0x214>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d004      	beq.n	800a92a <HAL_TIM_PWM_Start+0x13e>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a37      	ldr	r2, [pc, #220]	; (800aa04 <HAL_TIM_PWM_Start+0x218>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d101      	bne.n	800a92e <HAL_TIM_PWM_Start+0x142>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e000      	b.n	800a930 <HAL_TIM_PWM_Start+0x144>
 800a92e:	2300      	movs	r3, #0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a2a      	ldr	r2, [pc, #168]	; (800a9f4 <HAL_TIM_PWM_Start+0x208>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d02c      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a956:	d027      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a2a      	ldr	r2, [pc, #168]	; (800aa08 <HAL_TIM_PWM_Start+0x21c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d022      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a29      	ldr	r2, [pc, #164]	; (800aa0c <HAL_TIM_PWM_Start+0x220>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d01d      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a27      	ldr	r2, [pc, #156]	; (800aa10 <HAL_TIM_PWM_Start+0x224>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d018      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a1f      	ldr	r2, [pc, #124]	; (800a9f8 <HAL_TIM_PWM_Start+0x20c>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d013      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a23      	ldr	r2, [pc, #140]	; (800aa14 <HAL_TIM_PWM_Start+0x228>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00e      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a1b      	ldr	r2, [pc, #108]	; (800a9fc <HAL_TIM_PWM_Start+0x210>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d009      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a1f      	ldr	r2, [pc, #124]	; (800aa18 <HAL_TIM_PWM_Start+0x22c>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d004      	beq.n	800a9a8 <HAL_TIM_PWM_Start+0x1bc>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a1e      	ldr	r2, [pc, #120]	; (800aa1c <HAL_TIM_PWM_Start+0x230>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d115      	bne.n	800a9d4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689a      	ldr	r2, [r3, #8]
 800a9ae:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <HAL_TIM_PWM_Start+0x234>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b06      	cmp	r3, #6
 800a9b8:	d015      	beq.n	800a9e6 <HAL_TIM_PWM_Start+0x1fa>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9c0:	d011      	beq.n	800a9e6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0201 	orr.w	r2, r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9d2:	e008      	b.n	800a9e6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f042 0201 	orr.w	r2, r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	e000      	b.n	800a9e8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800
 800aa08:	40000400 	.word	0x40000400
 800aa0c:	40000800 	.word	0x40000800
 800aa10:	40000c00 	.word	0x40000c00
 800aa14:	40001800 	.word	0x40001800
 800aa18:	4000e000 	.word	0x4000e000
 800aa1c:	4000e400 	.word	0x4000e400
 800aa20:	00010007 	.word	0x00010007

0800aa24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e08f      	b.n	800ab58 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d106      	bne.n	800aa52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7f9 fd03 	bl	8004458 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2202      	movs	r2, #2
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6899      	ldr	r1, [r3, #8]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	4b3e      	ldr	r3, [pc, #248]	; (800ab60 <HAL_TIM_Encoder_Init+0x13c>)
 800aa66:	400b      	ands	r3, r1
 800aa68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	3304      	adds	r3, #4
 800aa72:	4619      	mov	r1, r3
 800aa74:	4610      	mov	r0, r2
 800aa76:	f000 fb65 	bl	800b144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <HAL_TIM_Encoder_Init+0x140>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	021b      	lsls	r3, r3, #8
 800aaae:	4313      	orrs	r3, r2
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4b2b      	ldr	r3, [pc, #172]	; (800ab68 <HAL_TIM_Encoder_Init+0x144>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4b2a      	ldr	r3, [pc, #168]	; (800ab6c <HAL_TIM_Encoder_Init+0x148>)
 800aac2:	4013      	ands	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68da      	ldr	r2, [r3, #12]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	021b      	lsls	r3, r3, #8
 800aad0:	4313      	orrs	r3, r2
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	011a      	lsls	r2, r3, #4
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	031b      	lsls	r3, r3, #12
 800aae4:	4313      	orrs	r3, r2
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aaf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aafa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4313      	orrs	r3, r2
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	fffebff8 	.word	0xfffebff8
 800ab64:	fffffcfc 	.word	0xfffffcfc
 800ab68:	fffff3f3 	.word	0xfffff3f3
 800ab6c:	ffff0f0f 	.word	0xffff0f0f

0800ab70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d110      	bne.n	800abc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d102      	bne.n	800abac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aba6:	7b7b      	ldrb	r3, [r7, #13]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d001      	beq.n	800abb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e069      	b.n	800ac84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc0:	e031      	b.n	800ac26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d110      	bne.n	800abea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d102      	bne.n	800abd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800abce:	7b3b      	ldrb	r3, [r7, #12]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d001      	beq.n	800abd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e055      	b.n	800ac84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abe8:	e01d      	b.n	800ac26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d108      	bne.n	800ac02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d105      	bne.n	800ac02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800abf6:	7b7b      	ldrb	r3, [r7, #13]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d102      	bne.n	800ac02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800abfc:	7b3b      	ldrb	r3, [r7, #12]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d001      	beq.n	800ac06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e03e      	b.n	800ac84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2202      	movs	r2, #2
 800ac0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2202      	movs	r2, #2
 800ac12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2202      	movs	r2, #2
 800ac1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2202      	movs	r2, #2
 800ac22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <HAL_TIM_Encoder_Start+0xc4>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d008      	beq.n	800ac44 <HAL_TIM_Encoder_Start+0xd4>
 800ac32:	e00f      	b.n	800ac54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fdfd 	bl	800b83c <TIM_CCxChannelCmd>
      break;
 800ac42:	e016      	b.n	800ac72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 fdf5 	bl	800b83c <TIM_CCxChannelCmd>
      break;
 800ac52:	e00e      	b.n	800ac72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fded 	bl	800b83c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2201      	movs	r2, #1
 800ac68:	2104      	movs	r1, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fde6 	bl	800b83c <TIM_CCxChannelCmd>
      break;
 800ac70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f042 0201 	orr.w	r2, r2, #1
 800ac80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	f003 0302 	and.w	r3, r3, #2
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d122      	bne.n	800ace8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b02      	cmp	r3, #2
 800acae:	d11b      	bne.n	800ace8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f06f 0202 	mvn.w	r2, #2
 800acb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	f003 0303 	and.w	r3, r3, #3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa1a 	bl	800b108 <HAL_TIM_IC_CaptureCallback>
 800acd4:	e005      	b.n	800ace2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fa0c 	bl	800b0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa1d 	bl	800b11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	f003 0304 	and.w	r3, r3, #4
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	d122      	bne.n	800ad3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d11b      	bne.n	800ad3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f06f 0204 	mvn.w	r2, #4
 800ad0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2202      	movs	r2, #2
 800ad12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f9f0 	bl	800b108 <HAL_TIM_IC_CaptureCallback>
 800ad28:	e005      	b.n	800ad36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f9e2 	bl	800b0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f9f3 	bl	800b11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	2b08      	cmp	r3, #8
 800ad48:	d122      	bne.n	800ad90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	f003 0308 	and.w	r3, r3, #8
 800ad54:	2b08      	cmp	r3, #8
 800ad56:	d11b      	bne.n	800ad90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f06f 0208 	mvn.w	r2, #8
 800ad60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2204      	movs	r2, #4
 800ad66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	f003 0303 	and.w	r3, r3, #3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d003      	beq.n	800ad7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f9c6 	bl	800b108 <HAL_TIM_IC_CaptureCallback>
 800ad7c:	e005      	b.n	800ad8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f9b8 	bl	800b0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f9c9 	bl	800b11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	f003 0310 	and.w	r3, r3, #16
 800ad9a:	2b10      	cmp	r3, #16
 800ad9c:	d122      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	2b10      	cmp	r3, #16
 800adaa:	d11b      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f06f 0210 	mvn.w	r2, #16
 800adb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2208      	movs	r2, #8
 800adba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f99c 	bl	800b108 <HAL_TIM_IC_CaptureCallback>
 800add0:	e005      	b.n	800adde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f98e 	bl	800b0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f99f 	bl	800b11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d10e      	bne.n	800ae10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d107      	bne.n	800ae10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f06f 0201 	mvn.w	r2, #1
 800ae08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7f8 fdbc 	bl	8003988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae1a:	2b80      	cmp	r3, #128	; 0x80
 800ae1c:	d10e      	bne.n	800ae3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae28:	2b80      	cmp	r3, #128	; 0x80
 800ae2a:	d107      	bne.n	800ae3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fe6c 	bl	800bb14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4a:	d10e      	bne.n	800ae6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	2b80      	cmp	r3, #128	; 0x80
 800ae58:	d107      	bne.n	800ae6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fe5f 	bl	800bb28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b40      	cmp	r3, #64	; 0x40
 800ae76:	d10e      	bne.n	800ae96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d107      	bne.n	800ae96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f94d 	bl	800b130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	d10e      	bne.n	800aec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	f003 0320 	and.w	r3, r3, #32
 800aeae:	2b20      	cmp	r3, #32
 800aeb0:	d107      	bne.n	800aec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f06f 0220 	mvn.w	r2, #32
 800aeba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fe1f 	bl	800bb00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d101      	bne.n	800aeea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e0ff      	b.n	800b0ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b14      	cmp	r3, #20
 800aef6:	f200 80f0 	bhi.w	800b0da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aefa:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af55 	.word	0x0800af55
 800af04:	0800b0db 	.word	0x0800b0db
 800af08:	0800b0db 	.word	0x0800b0db
 800af0c:	0800b0db 	.word	0x0800b0db
 800af10:	0800af95 	.word	0x0800af95
 800af14:	0800b0db 	.word	0x0800b0db
 800af18:	0800b0db 	.word	0x0800b0db
 800af1c:	0800b0db 	.word	0x0800b0db
 800af20:	0800afd7 	.word	0x0800afd7
 800af24:	0800b0db 	.word	0x0800b0db
 800af28:	0800b0db 	.word	0x0800b0db
 800af2c:	0800b0db 	.word	0x0800b0db
 800af30:	0800b017 	.word	0x0800b017
 800af34:	0800b0db 	.word	0x0800b0db
 800af38:	0800b0db 	.word	0x0800b0db
 800af3c:	0800b0db 	.word	0x0800b0db
 800af40:	0800b059 	.word	0x0800b059
 800af44:	0800b0db 	.word	0x0800b0db
 800af48:	0800b0db 	.word	0x0800b0db
 800af4c:	0800b0db 	.word	0x0800b0db
 800af50:	0800b099 	.word	0x0800b099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68b9      	ldr	r1, [r7, #8]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 f998 	bl	800b290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f042 0208 	orr.w	r2, r2, #8
 800af6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0204 	bic.w	r2, r2, #4
 800af7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6999      	ldr	r1, [r3, #24]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	691a      	ldr	r2, [r3, #16]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	619a      	str	r2, [r3, #24]
      break;
 800af92:	e0a5      	b.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 fa08 	bl	800b3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699a      	ldr	r2, [r3, #24]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6999      	ldr	r1, [r3, #24]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	021a      	lsls	r2, r3, #8
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	619a      	str	r2, [r3, #24]
      break;
 800afd4:	e084      	b.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fa71 	bl	800b4c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69da      	ldr	r2, [r3, #28]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f042 0208 	orr.w	r2, r2, #8
 800aff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69da      	ldr	r2, [r3, #28]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 0204 	bic.w	r2, r2, #4
 800b000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69d9      	ldr	r1, [r3, #28]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	430a      	orrs	r2, r1
 800b012:	61da      	str	r2, [r3, #28]
      break;
 800b014:	e064      	b.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fad9 	bl	800b5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69da      	ldr	r2, [r3, #28]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	69da      	ldr	r2, [r3, #28]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	69d9      	ldr	r1, [r3, #28]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	021a      	lsls	r2, r3, #8
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	61da      	str	r2, [r3, #28]
      break;
 800b056:	e043      	b.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 fb22 	bl	800b6a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f042 0208 	orr.w	r2, r2, #8
 800b072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f022 0204 	bic.w	r2, r2, #4
 800b082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	691a      	ldr	r2, [r3, #16]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b096:	e023      	b.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68b9      	ldr	r1, [r7, #8]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fb66 	bl	800b770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	021a      	lsls	r2, r3, #8
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0d8:	e002      	b.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b0de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop

0800b0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a44      	ldr	r2, [pc, #272]	; (800b268 <TIM_Base_SetConfig+0x124>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d013      	beq.n	800b184 <TIM_Base_SetConfig+0x40>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b162:	d00f      	beq.n	800b184 <TIM_Base_SetConfig+0x40>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a41      	ldr	r2, [pc, #260]	; (800b26c <TIM_Base_SetConfig+0x128>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00b      	beq.n	800b184 <TIM_Base_SetConfig+0x40>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a40      	ldr	r2, [pc, #256]	; (800b270 <TIM_Base_SetConfig+0x12c>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d007      	beq.n	800b184 <TIM_Base_SetConfig+0x40>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a3f      	ldr	r2, [pc, #252]	; (800b274 <TIM_Base_SetConfig+0x130>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d003      	beq.n	800b184 <TIM_Base_SetConfig+0x40>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a3e      	ldr	r2, [pc, #248]	; (800b278 <TIM_Base_SetConfig+0x134>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d108      	bne.n	800b196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	4313      	orrs	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a33      	ldr	r2, [pc, #204]	; (800b268 <TIM_Base_SetConfig+0x124>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d027      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a4:	d023      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a30      	ldr	r2, [pc, #192]	; (800b26c <TIM_Base_SetConfig+0x128>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d01f      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a2f      	ldr	r2, [pc, #188]	; (800b270 <TIM_Base_SetConfig+0x12c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d01b      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a2e      	ldr	r2, [pc, #184]	; (800b274 <TIM_Base_SetConfig+0x130>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d017      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a2d      	ldr	r2, [pc, #180]	; (800b278 <TIM_Base_SetConfig+0x134>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d013      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a2c      	ldr	r2, [pc, #176]	; (800b27c <TIM_Base_SetConfig+0x138>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d00f      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a2b      	ldr	r2, [pc, #172]	; (800b280 <TIM_Base_SetConfig+0x13c>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d00b      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a2a      	ldr	r2, [pc, #168]	; (800b284 <TIM_Base_SetConfig+0x140>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d007      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a29      	ldr	r2, [pc, #164]	; (800b288 <TIM_Base_SetConfig+0x144>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d003      	beq.n	800b1ee <TIM_Base_SetConfig+0xaa>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a28      	ldr	r2, [pc, #160]	; (800b28c <TIM_Base_SetConfig+0x148>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d108      	bne.n	800b200 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	689a      	ldr	r2, [r3, #8]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a10      	ldr	r2, [pc, #64]	; (800b268 <TIM_Base_SetConfig+0x124>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d00f      	beq.n	800b24c <TIM_Base_SetConfig+0x108>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a12      	ldr	r2, [pc, #72]	; (800b278 <TIM_Base_SetConfig+0x134>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d00b      	beq.n	800b24c <TIM_Base_SetConfig+0x108>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a11      	ldr	r2, [pc, #68]	; (800b27c <TIM_Base_SetConfig+0x138>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d007      	beq.n	800b24c <TIM_Base_SetConfig+0x108>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a10      	ldr	r2, [pc, #64]	; (800b280 <TIM_Base_SetConfig+0x13c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d003      	beq.n	800b24c <TIM_Base_SetConfig+0x108>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a0f      	ldr	r2, [pc, #60]	; (800b284 <TIM_Base_SetConfig+0x140>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d103      	bne.n	800b254 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	691a      	ldr	r2, [r3, #16]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	615a      	str	r2, [r3, #20]
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40010000 	.word	0x40010000
 800b26c:	40000400 	.word	0x40000400
 800b270:	40000800 	.word	0x40000800
 800b274:	40000c00 	.word	0x40000c00
 800b278:	40010400 	.word	0x40010400
 800b27c:	40014000 	.word	0x40014000
 800b280:	40014400 	.word	0x40014400
 800b284:	40014800 	.word	0x40014800
 800b288:	4000e000 	.word	0x4000e000
 800b28c:	4000e400 	.word	0x4000e400

0800b290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b290:	b480      	push	{r7}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	f023 0201 	bic.w	r2, r3, #1
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4b37      	ldr	r3, [pc, #220]	; (800b398 <TIM_OC1_SetConfig+0x108>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f023 0302 	bic.w	r3, r3, #2
 800b2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a2d      	ldr	r2, [pc, #180]	; (800b39c <TIM_OC1_SetConfig+0x10c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00f      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a2c      	ldr	r2, [pc, #176]	; (800b3a0 <TIM_OC1_SetConfig+0x110>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00b      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a2b      	ldr	r2, [pc, #172]	; (800b3a4 <TIM_OC1_SetConfig+0x114>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d007      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a2a      	ldr	r2, [pc, #168]	; (800b3a8 <TIM_OC1_SetConfig+0x118>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d003      	beq.n	800b30c <TIM_OC1_SetConfig+0x7c>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a29      	ldr	r2, [pc, #164]	; (800b3ac <TIM_OC1_SetConfig+0x11c>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d10c      	bne.n	800b326 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f023 0308 	bic.w	r3, r3, #8
 800b312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f023 0304 	bic.w	r3, r3, #4
 800b324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a1c      	ldr	r2, [pc, #112]	; (800b39c <TIM_OC1_SetConfig+0x10c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00f      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a1b      	ldr	r2, [pc, #108]	; (800b3a0 <TIM_OC1_SetConfig+0x110>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d00b      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a1a      	ldr	r2, [pc, #104]	; (800b3a4 <TIM_OC1_SetConfig+0x114>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d007      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a19      	ldr	r2, [pc, #100]	; (800b3a8 <TIM_OC1_SetConfig+0x118>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d003      	beq.n	800b34e <TIM_OC1_SetConfig+0xbe>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a18      	ldr	r2, [pc, #96]	; (800b3ac <TIM_OC1_SetConfig+0x11c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d111      	bne.n	800b372 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	4313      	orrs	r3, r2
 800b370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	621a      	str	r2, [r3, #32]
}
 800b38c:	bf00      	nop
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	fffeff8f 	.word	0xfffeff8f
 800b39c:	40010000 	.word	0x40010000
 800b3a0:	40010400 	.word	0x40010400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800

0800b3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	f023 0210 	bic.w	r2, r3, #16
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	4b34      	ldr	r3, [pc, #208]	; (800b4ac <TIM_OC2_SetConfig+0xfc>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f023 0320 	bic.w	r3, r3, #32
 800b3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	011b      	lsls	r3, r3, #4
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	4313      	orrs	r3, r2
 800b406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a29      	ldr	r2, [pc, #164]	; (800b4b0 <TIM_OC2_SetConfig+0x100>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d003      	beq.n	800b418 <TIM_OC2_SetConfig+0x68>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a28      	ldr	r2, [pc, #160]	; (800b4b4 <TIM_OC2_SetConfig+0x104>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d10d      	bne.n	800b434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4313      	orrs	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1e      	ldr	r2, [pc, #120]	; (800b4b0 <TIM_OC2_SetConfig+0x100>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00f      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a1d      	ldr	r2, [pc, #116]	; (800b4b4 <TIM_OC2_SetConfig+0x104>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d00b      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a1c      	ldr	r2, [pc, #112]	; (800b4b8 <TIM_OC2_SetConfig+0x108>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d007      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a1b      	ldr	r2, [pc, #108]	; (800b4bc <TIM_OC2_SetConfig+0x10c>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d003      	beq.n	800b45c <TIM_OC2_SetConfig+0xac>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a1a      	ldr	r2, [pc, #104]	; (800b4c0 <TIM_OC2_SetConfig+0x110>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d113      	bne.n	800b484 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b46a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	4313      	orrs	r3, r2
 800b482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	feff8fff 	.word	0xfeff8fff
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40010400 	.word	0x40010400
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40014400 	.word	0x40014400
 800b4c0:	40014800 	.word	0x40014800

0800b4c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4b33      	ldr	r3, [pc, #204]	; (800b5bc <TIM_OC3_SetConfig+0xf8>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0303 	bic.w	r3, r3, #3
 800b4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a28      	ldr	r2, [pc, #160]	; (800b5c0 <TIM_OC3_SetConfig+0xfc>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d003      	beq.n	800b52a <TIM_OC3_SetConfig+0x66>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a27      	ldr	r2, [pc, #156]	; (800b5c4 <TIM_OC3_SetConfig+0x100>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d10d      	bne.n	800b546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a1d      	ldr	r2, [pc, #116]	; (800b5c0 <TIM_OC3_SetConfig+0xfc>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d00f      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a1c      	ldr	r2, [pc, #112]	; (800b5c4 <TIM_OC3_SetConfig+0x100>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d00b      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a1b      	ldr	r2, [pc, #108]	; (800b5c8 <TIM_OC3_SetConfig+0x104>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d007      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a1a      	ldr	r2, [pc, #104]	; (800b5cc <TIM_OC3_SetConfig+0x108>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d003      	beq.n	800b56e <TIM_OC3_SetConfig+0xaa>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a19      	ldr	r2, [pc, #100]	; (800b5d0 <TIM_OC3_SetConfig+0x10c>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d113      	bne.n	800b596 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	4313      	orrs	r3, r2
 800b588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	621a      	str	r2, [r3, #32]
}
 800b5b0:	bf00      	nop
 800b5b2:	371c      	adds	r7, #28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	fffeff8f 	.word	0xfffeff8f
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800

0800b5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4b24      	ldr	r3, [pc, #144]	; (800b690 <TIM_OC4_SetConfig+0xbc>)
 800b600:	4013      	ands	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	4313      	orrs	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	031b      	lsls	r3, r3, #12
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a19      	ldr	r2, [pc, #100]	; (800b694 <TIM_OC4_SetConfig+0xc0>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d00f      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a18      	ldr	r2, [pc, #96]	; (800b698 <TIM_OC4_SetConfig+0xc4>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d00b      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a17      	ldr	r2, [pc, #92]	; (800b69c <TIM_OC4_SetConfig+0xc8>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d007      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a16      	ldr	r2, [pc, #88]	; (800b6a0 <TIM_OC4_SetConfig+0xcc>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d003      	beq.n	800b654 <TIM_OC4_SetConfig+0x80>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a15      	ldr	r2, [pc, #84]	; (800b6a4 <TIM_OC4_SetConfig+0xd0>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d109      	bne.n	800b668 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	019b      	lsls	r3, r3, #6
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	621a      	str	r2, [r3, #32]
}
 800b682:	bf00      	nop
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	feff8fff 	.word	0xfeff8fff
 800b694:	40010000 	.word	0x40010000
 800b698:	40010400 	.word	0x40010400
 800b69c:	40014000 	.word	0x40014000
 800b6a0:	40014400 	.word	0x40014400
 800b6a4:	40014800 	.word	0x40014800

0800b6a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4b21      	ldr	r3, [pc, #132]	; (800b758 <TIM_OC5_SetConfig+0xb0>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	041b      	lsls	r3, r3, #16
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a18      	ldr	r2, [pc, #96]	; (800b75c <TIM_OC5_SetConfig+0xb4>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00f      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a17      	ldr	r2, [pc, #92]	; (800b760 <TIM_OC5_SetConfig+0xb8>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00b      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a16      	ldr	r2, [pc, #88]	; (800b764 <TIM_OC5_SetConfig+0xbc>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d007      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a15      	ldr	r2, [pc, #84]	; (800b768 <TIM_OC5_SetConfig+0xc0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d003      	beq.n	800b71e <TIM_OC5_SetConfig+0x76>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a14      	ldr	r2, [pc, #80]	; (800b76c <TIM_OC5_SetConfig+0xc4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d109      	bne.n	800b732 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	021b      	lsls	r3, r3, #8
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	621a      	str	r2, [r3, #32]
}
 800b74c:	bf00      	nop
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	fffeff8f 	.word	0xfffeff8f
 800b75c:	40010000 	.word	0x40010000
 800b760:	40010400 	.word	0x40010400
 800b764:	40014000 	.word	0x40014000
 800b768:	40014400 	.word	0x40014400
 800b76c:	40014800 	.word	0x40014800

0800b770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4b22      	ldr	r3, [pc, #136]	; (800b824 <TIM_OC6_SetConfig+0xb4>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	051b      	lsls	r3, r3, #20
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a19      	ldr	r2, [pc, #100]	; (800b828 <TIM_OC6_SetConfig+0xb8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d00f      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a18      	ldr	r2, [pc, #96]	; (800b82c <TIM_OC6_SetConfig+0xbc>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d00b      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a17      	ldr	r2, [pc, #92]	; (800b830 <TIM_OC6_SetConfig+0xc0>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d007      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a16      	ldr	r2, [pc, #88]	; (800b834 <TIM_OC6_SetConfig+0xc4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d003      	beq.n	800b7e8 <TIM_OC6_SetConfig+0x78>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a15      	ldr	r2, [pc, #84]	; (800b838 <TIM_OC6_SetConfig+0xc8>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d109      	bne.n	800b7fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	029b      	lsls	r3, r3, #10
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	621a      	str	r2, [r3, #32]
}
 800b816:	bf00      	nop
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	feff8fff 	.word	0xfeff8fff
 800b828:	40010000 	.word	0x40010000
 800b82c:	40010400 	.word	0x40010400
 800b830:	40014000 	.word	0x40014000
 800b834:	40014400 	.word	0x40014400
 800b838:	40014800 	.word	0x40014800

0800b83c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f003 031f 	and.w	r3, r3, #31
 800b84e:	2201      	movs	r2, #1
 800b850:	fa02 f303 	lsl.w	r3, r2, r3
 800b854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a1a      	ldr	r2, [r3, #32]
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	43db      	mvns	r3, r3
 800b85e:	401a      	ands	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6a1a      	ldr	r2, [r3, #32]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f003 031f 	and.w	r3, r3, #31
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	fa01 f303 	lsl.w	r3, r1, r3
 800b874:	431a      	orrs	r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	621a      	str	r2, [r3, #32]
}
 800b87a:	bf00      	nop
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
	...

0800b888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d101      	bne.n	800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b89c:	2302      	movs	r3, #2
 800b89e:	e077      	b.n	800b990 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a35      	ldr	r2, [pc, #212]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d004      	beq.n	800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a34      	ldr	r2, [pc, #208]	; (800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d108      	bne.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a25      	ldr	r2, [pc, #148]	; (800b99c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d02c      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b912:	d027      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a22      	ldr	r2, [pc, #136]	; (800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d022      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a21      	ldr	r2, [pc, #132]	; (800b9a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d01d      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1f      	ldr	r2, [pc, #124]	; (800b9ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d018      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1a      	ldr	r2, [pc, #104]	; (800b9a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d013      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a1b      	ldr	r2, [pc, #108]	; (800b9b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d00e      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1a      	ldr	r2, [pc, #104]	; (800b9b4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d009      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a18      	ldr	r2, [pc, #96]	; (800b9b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d004      	beq.n	800b964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a17      	ldr	r2, [pc, #92]	; (800b9bc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d10c      	bne.n	800b97e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b96a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	4313      	orrs	r3, r2
 800b974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	40010000 	.word	0x40010000
 800b9a0:	40010400 	.word	0x40010400
 800b9a4:	40000400 	.word	0x40000400
 800b9a8:	40000800 	.word	0x40000800
 800b9ac:	40000c00 	.word	0x40000c00
 800b9b0:	40001800 	.word	0x40001800
 800b9b4:	40014000 	.word	0x40014000
 800b9b8:	4000e000 	.word	0x4000e000
 800b9bc:	4000e400 	.word	0x4000e400

0800b9c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d101      	bne.n	800b9dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9d8:	2302      	movs	r3, #2
 800b9da:	e087      	b.n	800baec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	4313      	orrs	r3, r2
 800ba44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	041b      	lsls	r3, r3, #16
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a27      	ldr	r2, [pc, #156]	; (800baf8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d004      	beq.n	800ba6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a25      	ldr	r2, [pc, #148]	; (800bafc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d106      	bne.n	800ba78 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a1e      	ldr	r2, [pc, #120]	; (800baf8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d004      	beq.n	800ba8c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a1d      	ldr	r2, [pc, #116]	; (800bafc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d126      	bne.n	800bada <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba96:	051b      	lsls	r3, r3, #20
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	4313      	orrs	r3, r2
 800bab6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a0e      	ldr	r2, [pc, #56]	; (800baf8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d004      	beq.n	800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a0d      	ldr	r2, [pc, #52]	; (800bafc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d106      	bne.n	800bada <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	40010000 	.word	0x40010000
 800bafc:	40010400 	.word	0x40010400

0800bb00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e042      	b.n	800bbd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d106      	bne.n	800bb66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7f8 feb3 	bl	80048cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2224      	movs	r2, #36	; 0x24
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0201 	bic.w	r2, r2, #1
 800bb7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fcdc 	bl	800c53c <UART_SetConfig>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e022      	b.n	800bbd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fb3c 	bl	800d214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f042 0201 	orr.w	r2, r2, #1
 800bbca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 fbc3 	bl	800d358 <UART_CheckIdleState>
 800bbd2:	4603      	mov	r3, r0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08a      	sub	sp, #40	; 0x28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbf0:	2b20      	cmp	r3, #32
 800bbf2:	d17a      	bne.n	800bcea <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d002      	beq.n	800bc00 <HAL_UART_Transmit_DMA+0x24>
 800bbfa:	88fb      	ldrh	r3, [r7, #6]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e073      	b.n	800bcec <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d101      	bne.n	800bc12 <HAL_UART_Transmit_DMA+0x36>
 800bc0e:	2302      	movs	r3, #2
 800bc10:	e06c      	b.n	800bcec <HAL_UART_Transmit_DMA+0x110>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	88fa      	ldrh	r2, [r7, #6]
 800bc24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	88fa      	ldrh	r2, [r7, #6]
 800bc2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2221      	movs	r2, #33	; 0x21
 800bc3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d02c      	beq.n	800bca2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc4c:	4a29      	ldr	r2, [pc, #164]	; (800bcf4 <HAL_UART_Transmit_DMA+0x118>)
 800bc4e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc54:	4a28      	ldr	r2, [pc, #160]	; (800bcf8 <HAL_UART_Transmit_DMA+0x11c>)
 800bc56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc5c:	4a27      	ldr	r2, [pc, #156]	; (800bcfc <HAL_UART_Transmit_DMA+0x120>)
 800bc5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc64:	2200      	movs	r2, #0
 800bc66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc70:	4619      	mov	r1, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3328      	adds	r3, #40	; 0x28
 800bc78:	461a      	mov	r2, r3
 800bc7a:	88fb      	ldrh	r3, [r7, #6]
 800bc7c:	f7f9 fd4e 	bl	800571c <HAL_DMA_Start_IT>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00d      	beq.n	800bca2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2210      	movs	r2, #16
 800bc8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e024      	b.n	800bcec <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2240      	movs	r2, #64	; 0x40
 800bca8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	613b      	str	r3, [r7, #16]
   return(result);
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd2:	623a      	str	r2, [r7, #32]
 800bcd4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	69f9      	ldr	r1, [r7, #28]
 800bcd8:	6a3a      	ldr	r2, [r7, #32]
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	61bb      	str	r3, [r7, #24]
   return(result);
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e5      	bne.n	800bcb2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	e000      	b.n	800bcec <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bcea:	2302      	movs	r3, #2
  }
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3728      	adds	r7, #40	; 0x28
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	0800d821 	.word	0x0800d821
 800bcf8:	0800d8b7 	.word	0x0800d8b7
 800bcfc:	0800da2d 	.word	0x0800da2d

0800bd00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d142      	bne.n	800bd9e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <HAL_UART_Receive_DMA+0x24>
 800bd1e:	88fb      	ldrh	r3, [r7, #6]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	e03b      	b.n	800bda0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d101      	bne.n	800bd36 <HAL_UART_Receive_DMA+0x36>
 800bd32:	2302      	movs	r3, #2
 800bd34:	e034      	b.n	800bda0 <HAL_UART_Receive_DMA+0xa0>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a17      	ldr	r2, [pc, #92]	; (800bda8 <HAL_UART_Receive_DMA+0xa8>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d01f      	beq.n	800bd8e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d018      	beq.n	800bd8e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	613b      	str	r3, [r7, #16]
   return(result);
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd70:	627b      	str	r3, [r7, #36]	; 0x24
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	623b      	str	r3, [r7, #32]
 800bd7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	69f9      	ldr	r1, [r7, #28]
 800bd80:	6a3a      	ldr	r2, [r7, #32]
 800bd82:	e841 2300 	strex	r3, r2, [r1]
 800bd86:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e6      	bne.n	800bd5c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd8e:	88fb      	ldrh	r3, [r7, #6]
 800bd90:	461a      	mov	r2, r3
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f001 fbf3 	bl	800d580 <UART_Start_Receive_DMA>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	e000      	b.n	800bda0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bd9e:	2302      	movs	r3, #2
  }
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3728      	adds	r7, #40	; 0x28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	58000c00 	.word	0x58000c00

0800bdac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b0ba      	sub	sp, #232	; 0xe8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bdd6:	f640 030f 	movw	r3, #2063	; 0x80f
 800bdda:	4013      	ands	r3, r2
 800bddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bde0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d11b      	bne.n	800be20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdec:	f003 0320 	and.w	r3, r3, #32
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d015      	beq.n	800be20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdf8:	f003 0320 	and.w	r3, r3, #32
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d105      	bne.n	800be0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d009      	beq.n	800be20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 835a 	beq.w	800c4ca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	4798      	blx	r3
      }
      return;
 800be1e:	e354      	b.n	800c4ca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 811f 	beq.w	800c068 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be2e:	4b8b      	ldr	r3, [pc, #556]	; (800c05c <HAL_UART_IRQHandler+0x2b0>)
 800be30:	4013      	ands	r3, r2
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be3a:	4b89      	ldr	r3, [pc, #548]	; (800c060 <HAL_UART_IRQHandler+0x2b4>)
 800be3c:	4013      	ands	r3, r2
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 8112 	beq.w	800c068 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d011      	beq.n	800be74 <HAL_UART_IRQHandler+0xc8>
 800be50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00b      	beq.n	800be74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2201      	movs	r2, #1
 800be62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be6a:	f043 0201 	orr.w	r2, r3, #1
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d011      	beq.n	800bea4 <HAL_UART_IRQHandler+0xf8>
 800be80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2202      	movs	r2, #2
 800be92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be9a:	f043 0204 	orr.w	r2, r3, #4
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d011      	beq.n	800bed4 <HAL_UART_IRQHandler+0x128>
 800beb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00b      	beq.n	800bed4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2204      	movs	r2, #4
 800bec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beca:	f043 0202 	orr.w	r2, r3, #2
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed8:	f003 0308 	and.w	r3, r3, #8
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d017      	beq.n	800bf10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d105      	bne.n	800bef8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800beec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bef0:	4b5a      	ldr	r3, [pc, #360]	; (800c05c <HAL_UART_IRQHandler+0x2b0>)
 800bef2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2208      	movs	r2, #8
 800befe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf06:	f043 0208 	orr.w	r2, r3, #8
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d012      	beq.n	800bf42 <HAL_UART_IRQHandler+0x196>
 800bf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00c      	beq.n	800bf42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf38:	f043 0220 	orr.w	r2, r3, #32
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 82c0 	beq.w	800c4ce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d013      	beq.n	800bf82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d007      	beq.n	800bf82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d005      	beq.n	800bfa6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d04f      	beq.n	800c046 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 fbd4 	bl	800d754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb6:	2b40      	cmp	r3, #64	; 0x40
 800bfb8:	d141      	bne.n	800c03e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3308      	adds	r3, #8
 800bfe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1d9      	bne.n	800bfba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d013      	beq.n	800c036 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c012:	4a14      	ldr	r2, [pc, #80]	; (800c064 <HAL_UART_IRQHandler+0x2b8>)
 800c014:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fa f906 	bl	800622c <HAL_DMA_Abort_IT>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d017      	beq.n	800c056 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c034:	e00f      	b.n	800c056 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fa6a 	bl	800c510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c03c:	e00b      	b.n	800c056 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa66 	bl	800c510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c044:	e007      	b.n	800c056 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fa62 	bl	800c510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c054:	e23b      	b.n	800c4ce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c056:	bf00      	nop
    return;
 800c058:	e239      	b.n	800c4ce <HAL_UART_IRQHandler+0x722>
 800c05a:	bf00      	nop
 800c05c:	10000001 	.word	0x10000001
 800c060:	04000120 	.word	0x04000120
 800c064:	0800daad 	.word	0x0800daad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	f040 81ce 	bne.w	800c40e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c076:	f003 0310 	and.w	r3, r3, #16
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 81c7 	beq.w	800c40e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c084:	f003 0310 	and.w	r3, r3, #16
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f000 81c0 	beq.w	800c40e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2210      	movs	r2, #16
 800c094:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a0:	2b40      	cmp	r3, #64	; 0x40
 800c0a2:	f040 813b 	bne.w	800c31c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a8b      	ldr	r2, [pc, #556]	; (800c2dc <HAL_UART_IRQHandler+0x530>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d059      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a89      	ldr	r2, [pc, #548]	; (800c2e0 <HAL_UART_IRQHandler+0x534>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d053      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a87      	ldr	r2, [pc, #540]	; (800c2e4 <HAL_UART_IRQHandler+0x538>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d04d      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a85      	ldr	r2, [pc, #532]	; (800c2e8 <HAL_UART_IRQHandler+0x53c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d047      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a83      	ldr	r2, [pc, #524]	; (800c2ec <HAL_UART_IRQHandler+0x540>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d041      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a81      	ldr	r2, [pc, #516]	; (800c2f0 <HAL_UART_IRQHandler+0x544>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d03b      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a7f      	ldr	r2, [pc, #508]	; (800c2f4 <HAL_UART_IRQHandler+0x548>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d035      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a7d      	ldr	r2, [pc, #500]	; (800c2f8 <HAL_UART_IRQHandler+0x54c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d02f      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a7b      	ldr	r2, [pc, #492]	; (800c2fc <HAL_UART_IRQHandler+0x550>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d029      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a79      	ldr	r2, [pc, #484]	; (800c300 <HAL_UART_IRQHandler+0x554>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d023      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a77      	ldr	r2, [pc, #476]	; (800c304 <HAL_UART_IRQHandler+0x558>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d01d      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a75      	ldr	r2, [pc, #468]	; (800c308 <HAL_UART_IRQHandler+0x55c>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d017      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a73      	ldr	r2, [pc, #460]	; (800c30c <HAL_UART_IRQHandler+0x560>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d011      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a71      	ldr	r2, [pc, #452]	; (800c310 <HAL_UART_IRQHandler+0x564>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00b      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a6f      	ldr	r2, [pc, #444]	; (800c314 <HAL_UART_IRQHandler+0x568>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d005      	beq.n	800c166 <HAL_UART_IRQHandler+0x3ba>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a6d      	ldr	r2, [pc, #436]	; (800c318 <HAL_UART_IRQHandler+0x56c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d105      	bne.n	800c172 <HAL_UART_IRQHandler+0x3c6>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	e004      	b.n	800c17c <HAL_UART_IRQHandler+0x3d0>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c180:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 81a4 	beq.w	800c4d2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c190:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c194:	429a      	cmp	r2, r3
 800c196:	f080 819c 	bcs.w	800c4d2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a8:	69db      	ldr	r3, [r3, #28]
 800c1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ae:	f000 8086 	beq.w	800c2be <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1ec:	e841 2300 	strex	r3, r2, [r1]
 800c1f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c1f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1da      	bne.n	800c1b2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3308      	adds	r3, #8
 800c202:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c206:	e853 3f00 	ldrex	r3, [r3]
 800c20a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c20c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c20e:	f023 0301 	bic.w	r3, r3, #1
 800c212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c220:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c224:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c226:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c22c:	e841 2300 	strex	r3, r2, [r1]
 800c230:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e1      	bne.n	800c1fc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3308      	adds	r3, #8
 800c23e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c24a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c24e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3308      	adds	r3, #8
 800c258:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c25c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c25e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c262:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c26a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e3      	bne.n	800c238 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2220      	movs	r2, #32
 800c274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c286:	e853 3f00 	ldrex	r3, [r3]
 800c28a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c28e:	f023 0310 	bic.w	r3, r3, #16
 800c292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2a8:	e841 2300 	strex	r3, r2, [r1]
 800c2ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1e4      	bne.n	800c27e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7f9 fc99 	bl	8005bf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f926 	bl	800c524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2d8:	e0fb      	b.n	800c4d2 <HAL_UART_IRQHandler+0x726>
 800c2da:	bf00      	nop
 800c2dc:	40020010 	.word	0x40020010
 800c2e0:	40020028 	.word	0x40020028
 800c2e4:	40020040 	.word	0x40020040
 800c2e8:	40020058 	.word	0x40020058
 800c2ec:	40020070 	.word	0x40020070
 800c2f0:	40020088 	.word	0x40020088
 800c2f4:	400200a0 	.word	0x400200a0
 800c2f8:	400200b8 	.word	0x400200b8
 800c2fc:	40020410 	.word	0x40020410
 800c300:	40020428 	.word	0x40020428
 800c304:	40020440 	.word	0x40020440
 800c308:	40020458 	.word	0x40020458
 800c30c:	40020470 	.word	0x40020470
 800c310:	40020488 	.word	0x40020488
 800c314:	400204a0 	.word	0x400204a0
 800c318:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c328:	b29b      	uxth	r3, r3
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c336:	b29b      	uxth	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 80cc 	beq.w	800c4d6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c33e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 80c7 	beq.w	800c4d6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	e853 3f00 	ldrex	r3, [r3]
 800c354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c35c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c36a:	647b      	str	r3, [r7, #68]	; 0x44
 800c36c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1e4      	bne.n	800c348 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3308      	adds	r3, #8
 800c384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	623b      	str	r3, [r7, #32]
   return(result);
 800c38e:	6a3a      	ldr	r2, [r7, #32]
 800c390:	4b54      	ldr	r3, [pc, #336]	; (800c4e4 <HAL_UART_IRQHandler+0x738>)
 800c392:	4013      	ands	r3, r2
 800c394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3308      	adds	r3, #8
 800c39e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3a2:	633a      	str	r2, [r7, #48]	; 0x30
 800c3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3aa:	e841 2300 	strex	r3, r2, [r1]
 800c3ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1e3      	bne.n	800c37e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2220      	movs	r2, #32
 800c3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f023 0310 	bic.w	r3, r3, #16
 800c3de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c3ec:	61fb      	str	r3, [r7, #28]
 800c3ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f0:	69b9      	ldr	r1, [r7, #24]
 800c3f2:	69fa      	ldr	r2, [r7, #28]
 800c3f4:	e841 2300 	strex	r3, r2, [r1]
 800c3f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1e4      	bne.n	800c3ca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f88c 	bl	800c524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c40c:	e063      	b.n	800c4d6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00e      	beq.n	800c438 <HAL_UART_IRQHandler+0x68c>
 800c41a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c41e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c422:	2b00      	cmp	r3, #0
 800c424:	d008      	beq.n	800c438 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c42e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 fb7c 	bl	800db2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c436:	e051      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c440:	2b00      	cmp	r3, #0
 800c442:	d014      	beq.n	800c46e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d105      	bne.n	800c45c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d008      	beq.n	800c46e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c460:	2b00      	cmp	r3, #0
 800c462:	d03a      	beq.n	800c4da <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	4798      	blx	r3
    }
    return;
 800c46c:	e035      	b.n	800c4da <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c476:	2b00      	cmp	r3, #0
 800c478:	d009      	beq.n	800c48e <HAL_UART_IRQHandler+0x6e2>
 800c47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fb26 	bl	800dad8 <UART_EndTransmit_IT>
    return;
 800c48c:	e026      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d009      	beq.n	800c4ae <HAL_UART_IRQHandler+0x702>
 800c49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c49e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f001 fb55 	bl	800db56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4ac:	e016      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d010      	beq.n	800c4dc <HAL_UART_IRQHandler+0x730>
 800c4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	da0c      	bge.n	800c4dc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f001 fb3d 	bl	800db42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4c8:	e008      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
      return;
 800c4ca:	bf00      	nop
 800c4cc:	e006      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
    return;
 800c4ce:	bf00      	nop
 800c4d0:	e004      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
      return;
 800c4d2:	bf00      	nop
 800c4d4:	e002      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
      return;
 800c4d6:	bf00      	nop
 800c4d8:	e000      	b.n	800c4dc <HAL_UART_IRQHandler+0x730>
    return;
 800c4da:	bf00      	nop
  }
}
 800c4dc:	37e8      	adds	r7, #232	; 0xe8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	effffffe 	.word	0xeffffffe

0800c4e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	460b      	mov	r3, r1
 800c52e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c540:	b092      	sub	sp, #72	; 0x48
 800c542:	af00      	add	r7, sp, #0
 800c544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	431a      	orrs	r2, r3
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	695b      	ldr	r3, [r3, #20]
 800c55a:	431a      	orrs	r2, r3
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	69db      	ldr	r3, [r3, #28]
 800c560:	4313      	orrs	r3, r2
 800c562:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4bbe      	ldr	r3, [pc, #760]	; (800c864 <UART_SetConfig+0x328>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	6812      	ldr	r2, [r2, #0]
 800c572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c574:	430b      	orrs	r3, r1
 800c576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	68da      	ldr	r2, [r3, #12]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4ab3      	ldr	r2, [pc, #716]	; (800c868 <UART_SetConfig+0x32c>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d004      	beq.n	800c5a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	689a      	ldr	r2, [r3, #8]
 800c5ae:	4baf      	ldr	r3, [pc, #700]	; (800c86c <UART_SetConfig+0x330>)
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c2:	f023 010f 	bic.w	r1, r3, #15
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4aa6      	ldr	r2, [pc, #664]	; (800c870 <UART_SetConfig+0x334>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d177      	bne.n	800c6cc <UART_SetConfig+0x190>
 800c5dc:	4ba5      	ldr	r3, [pc, #660]	; (800c874 <UART_SetConfig+0x338>)
 800c5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5e4:	2b28      	cmp	r3, #40	; 0x28
 800c5e6:	d86d      	bhi.n	800c6c4 <UART_SetConfig+0x188>
 800c5e8:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <UART_SetConfig+0xb4>)
 800c5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ee:	bf00      	nop
 800c5f0:	0800c695 	.word	0x0800c695
 800c5f4:	0800c6c5 	.word	0x0800c6c5
 800c5f8:	0800c6c5 	.word	0x0800c6c5
 800c5fc:	0800c6c5 	.word	0x0800c6c5
 800c600:	0800c6c5 	.word	0x0800c6c5
 800c604:	0800c6c5 	.word	0x0800c6c5
 800c608:	0800c6c5 	.word	0x0800c6c5
 800c60c:	0800c6c5 	.word	0x0800c6c5
 800c610:	0800c69d 	.word	0x0800c69d
 800c614:	0800c6c5 	.word	0x0800c6c5
 800c618:	0800c6c5 	.word	0x0800c6c5
 800c61c:	0800c6c5 	.word	0x0800c6c5
 800c620:	0800c6c5 	.word	0x0800c6c5
 800c624:	0800c6c5 	.word	0x0800c6c5
 800c628:	0800c6c5 	.word	0x0800c6c5
 800c62c:	0800c6c5 	.word	0x0800c6c5
 800c630:	0800c6a5 	.word	0x0800c6a5
 800c634:	0800c6c5 	.word	0x0800c6c5
 800c638:	0800c6c5 	.word	0x0800c6c5
 800c63c:	0800c6c5 	.word	0x0800c6c5
 800c640:	0800c6c5 	.word	0x0800c6c5
 800c644:	0800c6c5 	.word	0x0800c6c5
 800c648:	0800c6c5 	.word	0x0800c6c5
 800c64c:	0800c6c5 	.word	0x0800c6c5
 800c650:	0800c6ad 	.word	0x0800c6ad
 800c654:	0800c6c5 	.word	0x0800c6c5
 800c658:	0800c6c5 	.word	0x0800c6c5
 800c65c:	0800c6c5 	.word	0x0800c6c5
 800c660:	0800c6c5 	.word	0x0800c6c5
 800c664:	0800c6c5 	.word	0x0800c6c5
 800c668:	0800c6c5 	.word	0x0800c6c5
 800c66c:	0800c6c5 	.word	0x0800c6c5
 800c670:	0800c6b5 	.word	0x0800c6b5
 800c674:	0800c6c5 	.word	0x0800c6c5
 800c678:	0800c6c5 	.word	0x0800c6c5
 800c67c:	0800c6c5 	.word	0x0800c6c5
 800c680:	0800c6c5 	.word	0x0800c6c5
 800c684:	0800c6c5 	.word	0x0800c6c5
 800c688:	0800c6c5 	.word	0x0800c6c5
 800c68c:	0800c6c5 	.word	0x0800c6c5
 800c690:	0800c6bd 	.word	0x0800c6bd
 800c694:	2301      	movs	r3, #1
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e326      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c69c:	2304      	movs	r3, #4
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e322      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c6a4:	2308      	movs	r3, #8
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e31e      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c6ac:	2310      	movs	r3, #16
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b2:	e31a      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c6b4:	2320      	movs	r3, #32
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e316      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c6bc:	2340      	movs	r3, #64	; 0x40
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c2:	e312      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c6c4:	2380      	movs	r3, #128	; 0x80
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ca:	e30e      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a69      	ldr	r2, [pc, #420]	; (800c878 <UART_SetConfig+0x33c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d130      	bne.n	800c738 <UART_SetConfig+0x1fc>
 800c6d6:	4b67      	ldr	r3, [pc, #412]	; (800c874 <UART_SetConfig+0x338>)
 800c6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	2b05      	cmp	r3, #5
 800c6e0:	d826      	bhi.n	800c730 <UART_SetConfig+0x1f4>
 800c6e2:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <UART_SetConfig+0x1ac>)
 800c6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e8:	0800c701 	.word	0x0800c701
 800c6ec:	0800c709 	.word	0x0800c709
 800c6f0:	0800c711 	.word	0x0800c711
 800c6f4:	0800c719 	.word	0x0800c719
 800c6f8:	0800c721 	.word	0x0800c721
 800c6fc:	0800c729 	.word	0x0800c729
 800c700:	2300      	movs	r3, #0
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e2f0      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c708:	2304      	movs	r3, #4
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e2ec      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c710:	2308      	movs	r3, #8
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e2e8      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c718:	2310      	movs	r3, #16
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e2e4      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c720:	2320      	movs	r3, #32
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e2e0      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c728:	2340      	movs	r3, #64	; 0x40
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72e:	e2dc      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c730:	2380      	movs	r3, #128	; 0x80
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c736:	e2d8      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a4f      	ldr	r2, [pc, #316]	; (800c87c <UART_SetConfig+0x340>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d130      	bne.n	800c7a4 <UART_SetConfig+0x268>
 800c742:	4b4c      	ldr	r3, [pc, #304]	; (800c874 <UART_SetConfig+0x338>)
 800c744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b05      	cmp	r3, #5
 800c74c:	d826      	bhi.n	800c79c <UART_SetConfig+0x260>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <UART_SetConfig+0x218>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c76d 	.word	0x0800c76d
 800c758:	0800c775 	.word	0x0800c775
 800c75c:	0800c77d 	.word	0x0800c77d
 800c760:	0800c785 	.word	0x0800c785
 800c764:	0800c78d 	.word	0x0800c78d
 800c768:	0800c795 	.word	0x0800c795
 800c76c:	2300      	movs	r3, #0
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e2ba      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c774:	2304      	movs	r3, #4
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e2b6      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c77c:	2308      	movs	r3, #8
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e2b2      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c784:	2310      	movs	r3, #16
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e2ae      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c78c:	2320      	movs	r3, #32
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e2aa      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c794:	2340      	movs	r3, #64	; 0x40
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e2a6      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c79c:	2380      	movs	r3, #128	; 0x80
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a2:	e2a2      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a35      	ldr	r2, [pc, #212]	; (800c880 <UART_SetConfig+0x344>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d130      	bne.n	800c810 <UART_SetConfig+0x2d4>
 800c7ae:	4b31      	ldr	r3, [pc, #196]	; (800c874 <UART_SetConfig+0x338>)
 800c7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7b2:	f003 0307 	and.w	r3, r3, #7
 800c7b6:	2b05      	cmp	r3, #5
 800c7b8:	d826      	bhi.n	800c808 <UART_SetConfig+0x2cc>
 800c7ba:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <UART_SetConfig+0x284>)
 800c7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c0:	0800c7d9 	.word	0x0800c7d9
 800c7c4:	0800c7e1 	.word	0x0800c7e1
 800c7c8:	0800c7e9 	.word	0x0800c7e9
 800c7cc:	0800c7f1 	.word	0x0800c7f1
 800c7d0:	0800c7f9 	.word	0x0800c7f9
 800c7d4:	0800c801 	.word	0x0800c801
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e284      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c7e0:	2304      	movs	r3, #4
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e280      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c7e8:	2308      	movs	r3, #8
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ee:	e27c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f6:	e278      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c7f8:	2320      	movs	r3, #32
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e274      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c800:	2340      	movs	r3, #64	; 0x40
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e270      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c808:	2380      	movs	r3, #128	; 0x80
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80e:	e26c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a1b      	ldr	r2, [pc, #108]	; (800c884 <UART_SetConfig+0x348>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d142      	bne.n	800c8a0 <UART_SetConfig+0x364>
 800c81a:	4b16      	ldr	r3, [pc, #88]	; (800c874 <UART_SetConfig+0x338>)
 800c81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81e:	f003 0307 	and.w	r3, r3, #7
 800c822:	2b05      	cmp	r3, #5
 800c824:	d838      	bhi.n	800c898 <UART_SetConfig+0x35c>
 800c826:	a201      	add	r2, pc, #4	; (adr r2, 800c82c <UART_SetConfig+0x2f0>)
 800c828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82c:	0800c845 	.word	0x0800c845
 800c830:	0800c84d 	.word	0x0800c84d
 800c834:	0800c855 	.word	0x0800c855
 800c838:	0800c85d 	.word	0x0800c85d
 800c83c:	0800c889 	.word	0x0800c889
 800c840:	0800c891 	.word	0x0800c891
 800c844:	2300      	movs	r3, #0
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e24e      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c84c:	2304      	movs	r3, #4
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e24a      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c854:	2308      	movs	r3, #8
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85a:	e246      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c85c:	2310      	movs	r3, #16
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c862:	e242      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c864:	cfff69f3 	.word	0xcfff69f3
 800c868:	58000c00 	.word	0x58000c00
 800c86c:	11fff4ff 	.word	0x11fff4ff
 800c870:	40011000 	.word	0x40011000
 800c874:	58024400 	.word	0x58024400
 800c878:	40004400 	.word	0x40004400
 800c87c:	40004800 	.word	0x40004800
 800c880:	40004c00 	.word	0x40004c00
 800c884:	40005000 	.word	0x40005000
 800c888:	2320      	movs	r3, #32
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e22c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c890:	2340      	movs	r3, #64	; 0x40
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e228      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c898:	2380      	movs	r3, #128	; 0x80
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e224      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4ab1      	ldr	r2, [pc, #708]	; (800cb6c <UART_SetConfig+0x630>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d176      	bne.n	800c998 <UART_SetConfig+0x45c>
 800c8aa:	4bb1      	ldr	r3, [pc, #708]	; (800cb70 <UART_SetConfig+0x634>)
 800c8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8b2:	2b28      	cmp	r3, #40	; 0x28
 800c8b4:	d86c      	bhi.n	800c990 <UART_SetConfig+0x454>
 800c8b6:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <UART_SetConfig+0x380>)
 800c8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8bc:	0800c961 	.word	0x0800c961
 800c8c0:	0800c991 	.word	0x0800c991
 800c8c4:	0800c991 	.word	0x0800c991
 800c8c8:	0800c991 	.word	0x0800c991
 800c8cc:	0800c991 	.word	0x0800c991
 800c8d0:	0800c991 	.word	0x0800c991
 800c8d4:	0800c991 	.word	0x0800c991
 800c8d8:	0800c991 	.word	0x0800c991
 800c8dc:	0800c969 	.word	0x0800c969
 800c8e0:	0800c991 	.word	0x0800c991
 800c8e4:	0800c991 	.word	0x0800c991
 800c8e8:	0800c991 	.word	0x0800c991
 800c8ec:	0800c991 	.word	0x0800c991
 800c8f0:	0800c991 	.word	0x0800c991
 800c8f4:	0800c991 	.word	0x0800c991
 800c8f8:	0800c991 	.word	0x0800c991
 800c8fc:	0800c971 	.word	0x0800c971
 800c900:	0800c991 	.word	0x0800c991
 800c904:	0800c991 	.word	0x0800c991
 800c908:	0800c991 	.word	0x0800c991
 800c90c:	0800c991 	.word	0x0800c991
 800c910:	0800c991 	.word	0x0800c991
 800c914:	0800c991 	.word	0x0800c991
 800c918:	0800c991 	.word	0x0800c991
 800c91c:	0800c979 	.word	0x0800c979
 800c920:	0800c991 	.word	0x0800c991
 800c924:	0800c991 	.word	0x0800c991
 800c928:	0800c991 	.word	0x0800c991
 800c92c:	0800c991 	.word	0x0800c991
 800c930:	0800c991 	.word	0x0800c991
 800c934:	0800c991 	.word	0x0800c991
 800c938:	0800c991 	.word	0x0800c991
 800c93c:	0800c981 	.word	0x0800c981
 800c940:	0800c991 	.word	0x0800c991
 800c944:	0800c991 	.word	0x0800c991
 800c948:	0800c991 	.word	0x0800c991
 800c94c:	0800c991 	.word	0x0800c991
 800c950:	0800c991 	.word	0x0800c991
 800c954:	0800c991 	.word	0x0800c991
 800c958:	0800c991 	.word	0x0800c991
 800c95c:	0800c989 	.word	0x0800c989
 800c960:	2301      	movs	r3, #1
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e1c0      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c968:	2304      	movs	r3, #4
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e1bc      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c970:	2308      	movs	r3, #8
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e1b8      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c978:	2310      	movs	r3, #16
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e1b4      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c980:	2320      	movs	r3, #32
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e1b0      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e1ac      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c990:	2380      	movs	r3, #128	; 0x80
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c996:	e1a8      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a75      	ldr	r2, [pc, #468]	; (800cb74 <UART_SetConfig+0x638>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d130      	bne.n	800ca04 <UART_SetConfig+0x4c8>
 800c9a2:	4b73      	ldr	r3, [pc, #460]	; (800cb70 <UART_SetConfig+0x634>)
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d826      	bhi.n	800c9fc <UART_SetConfig+0x4c0>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <UART_SetConfig+0x478>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800c9cd 	.word	0x0800c9cd
 800c9b8:	0800c9d5 	.word	0x0800c9d5
 800c9bc:	0800c9dd 	.word	0x0800c9dd
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800c9ed 	.word	0x0800c9ed
 800c9c8:	0800c9f5 	.word	0x0800c9f5
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e18a      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e186      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c9dc:	2308      	movs	r3, #8
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e182      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e17e      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c9ec:	2320      	movs	r3, #32
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f2:	e17a      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fa:	e176      	b.n	800ccea <UART_SetConfig+0x7ae>
 800c9fc:	2380      	movs	r3, #128	; 0x80
 800c9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca02:	e172      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a5b      	ldr	r2, [pc, #364]	; (800cb78 <UART_SetConfig+0x63c>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d130      	bne.n	800ca70 <UART_SetConfig+0x534>
 800ca0e:	4b58      	ldr	r3, [pc, #352]	; (800cb70 <UART_SetConfig+0x634>)
 800ca10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b05      	cmp	r3, #5
 800ca18:	d826      	bhi.n	800ca68 <UART_SetConfig+0x52c>
 800ca1a:	a201      	add	r2, pc, #4	; (adr r2, 800ca20 <UART_SetConfig+0x4e4>)
 800ca1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca20:	0800ca39 	.word	0x0800ca39
 800ca24:	0800ca41 	.word	0x0800ca41
 800ca28:	0800ca49 	.word	0x0800ca49
 800ca2c:	0800ca51 	.word	0x0800ca51
 800ca30:	0800ca59 	.word	0x0800ca59
 800ca34:	0800ca61 	.word	0x0800ca61
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e154      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca40:	2304      	movs	r3, #4
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e150      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca48:	2308      	movs	r3, #8
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e14c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca50:	2310      	movs	r3, #16
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca56:	e148      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca58:	2320      	movs	r3, #32
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5e:	e144      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca60:	2340      	movs	r3, #64	; 0x40
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca66:	e140      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca68:	2380      	movs	r3, #128	; 0x80
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e13c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a41      	ldr	r2, [pc, #260]	; (800cb7c <UART_SetConfig+0x640>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	f040 8082 	bne.w	800cb80 <UART_SetConfig+0x644>
 800ca7c:	4b3c      	ldr	r3, [pc, #240]	; (800cb70 <UART_SetConfig+0x634>)
 800ca7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca84:	2b28      	cmp	r3, #40	; 0x28
 800ca86:	d86d      	bhi.n	800cb64 <UART_SetConfig+0x628>
 800ca88:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <UART_SetConfig+0x554>)
 800ca8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8e:	bf00      	nop
 800ca90:	0800cb35 	.word	0x0800cb35
 800ca94:	0800cb65 	.word	0x0800cb65
 800ca98:	0800cb65 	.word	0x0800cb65
 800ca9c:	0800cb65 	.word	0x0800cb65
 800caa0:	0800cb65 	.word	0x0800cb65
 800caa4:	0800cb65 	.word	0x0800cb65
 800caa8:	0800cb65 	.word	0x0800cb65
 800caac:	0800cb65 	.word	0x0800cb65
 800cab0:	0800cb3d 	.word	0x0800cb3d
 800cab4:	0800cb65 	.word	0x0800cb65
 800cab8:	0800cb65 	.word	0x0800cb65
 800cabc:	0800cb65 	.word	0x0800cb65
 800cac0:	0800cb65 	.word	0x0800cb65
 800cac4:	0800cb65 	.word	0x0800cb65
 800cac8:	0800cb65 	.word	0x0800cb65
 800cacc:	0800cb65 	.word	0x0800cb65
 800cad0:	0800cb45 	.word	0x0800cb45
 800cad4:	0800cb65 	.word	0x0800cb65
 800cad8:	0800cb65 	.word	0x0800cb65
 800cadc:	0800cb65 	.word	0x0800cb65
 800cae0:	0800cb65 	.word	0x0800cb65
 800cae4:	0800cb65 	.word	0x0800cb65
 800cae8:	0800cb65 	.word	0x0800cb65
 800caec:	0800cb65 	.word	0x0800cb65
 800caf0:	0800cb4d 	.word	0x0800cb4d
 800caf4:	0800cb65 	.word	0x0800cb65
 800caf8:	0800cb65 	.word	0x0800cb65
 800cafc:	0800cb65 	.word	0x0800cb65
 800cb00:	0800cb65 	.word	0x0800cb65
 800cb04:	0800cb65 	.word	0x0800cb65
 800cb08:	0800cb65 	.word	0x0800cb65
 800cb0c:	0800cb65 	.word	0x0800cb65
 800cb10:	0800cb55 	.word	0x0800cb55
 800cb14:	0800cb65 	.word	0x0800cb65
 800cb18:	0800cb65 	.word	0x0800cb65
 800cb1c:	0800cb65 	.word	0x0800cb65
 800cb20:	0800cb65 	.word	0x0800cb65
 800cb24:	0800cb65 	.word	0x0800cb65
 800cb28:	0800cb65 	.word	0x0800cb65
 800cb2c:	0800cb65 	.word	0x0800cb65
 800cb30:	0800cb5d 	.word	0x0800cb5d
 800cb34:	2301      	movs	r3, #1
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e0d6      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb3c:	2304      	movs	r3, #4
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e0d2      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb44:	2308      	movs	r3, #8
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e0ce      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb52:	e0ca      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb54:	2320      	movs	r3, #32
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e0c6      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e0c2      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb64:	2380      	movs	r3, #128	; 0x80
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e0be      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cb6c:	40011400 	.word	0x40011400
 800cb70:	58024400 	.word	0x58024400
 800cb74:	40007800 	.word	0x40007800
 800cb78:	40007c00 	.word	0x40007c00
 800cb7c:	40011800 	.word	0x40011800
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4aad      	ldr	r2, [pc, #692]	; (800ce3c <UART_SetConfig+0x900>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d176      	bne.n	800cc78 <UART_SetConfig+0x73c>
 800cb8a:	4bad      	ldr	r3, [pc, #692]	; (800ce40 <UART_SetConfig+0x904>)
 800cb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb92:	2b28      	cmp	r3, #40	; 0x28
 800cb94:	d86c      	bhi.n	800cc70 <UART_SetConfig+0x734>
 800cb96:	a201      	add	r2, pc, #4	; (adr r2, 800cb9c <UART_SetConfig+0x660>)
 800cb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9c:	0800cc41 	.word	0x0800cc41
 800cba0:	0800cc71 	.word	0x0800cc71
 800cba4:	0800cc71 	.word	0x0800cc71
 800cba8:	0800cc71 	.word	0x0800cc71
 800cbac:	0800cc71 	.word	0x0800cc71
 800cbb0:	0800cc71 	.word	0x0800cc71
 800cbb4:	0800cc71 	.word	0x0800cc71
 800cbb8:	0800cc71 	.word	0x0800cc71
 800cbbc:	0800cc49 	.word	0x0800cc49
 800cbc0:	0800cc71 	.word	0x0800cc71
 800cbc4:	0800cc71 	.word	0x0800cc71
 800cbc8:	0800cc71 	.word	0x0800cc71
 800cbcc:	0800cc71 	.word	0x0800cc71
 800cbd0:	0800cc71 	.word	0x0800cc71
 800cbd4:	0800cc71 	.word	0x0800cc71
 800cbd8:	0800cc71 	.word	0x0800cc71
 800cbdc:	0800cc51 	.word	0x0800cc51
 800cbe0:	0800cc71 	.word	0x0800cc71
 800cbe4:	0800cc71 	.word	0x0800cc71
 800cbe8:	0800cc71 	.word	0x0800cc71
 800cbec:	0800cc71 	.word	0x0800cc71
 800cbf0:	0800cc71 	.word	0x0800cc71
 800cbf4:	0800cc71 	.word	0x0800cc71
 800cbf8:	0800cc71 	.word	0x0800cc71
 800cbfc:	0800cc59 	.word	0x0800cc59
 800cc00:	0800cc71 	.word	0x0800cc71
 800cc04:	0800cc71 	.word	0x0800cc71
 800cc08:	0800cc71 	.word	0x0800cc71
 800cc0c:	0800cc71 	.word	0x0800cc71
 800cc10:	0800cc71 	.word	0x0800cc71
 800cc14:	0800cc71 	.word	0x0800cc71
 800cc18:	0800cc71 	.word	0x0800cc71
 800cc1c:	0800cc61 	.word	0x0800cc61
 800cc20:	0800cc71 	.word	0x0800cc71
 800cc24:	0800cc71 	.word	0x0800cc71
 800cc28:	0800cc71 	.word	0x0800cc71
 800cc2c:	0800cc71 	.word	0x0800cc71
 800cc30:	0800cc71 	.word	0x0800cc71
 800cc34:	0800cc71 	.word	0x0800cc71
 800cc38:	0800cc71 	.word	0x0800cc71
 800cc3c:	0800cc69 	.word	0x0800cc69
 800cc40:	2301      	movs	r3, #1
 800cc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc46:	e050      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc48:	2304      	movs	r3, #4
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4e:	e04c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc50:	2308      	movs	r3, #8
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc56:	e048      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc58:	2310      	movs	r3, #16
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5e:	e044      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc60:	2320      	movs	r3, #32
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc66:	e040      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc68:	2340      	movs	r3, #64	; 0x40
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6e:	e03c      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc70:	2380      	movs	r3, #128	; 0x80
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e038      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a71      	ldr	r2, [pc, #452]	; (800ce44 <UART_SetConfig+0x908>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d130      	bne.n	800cce4 <UART_SetConfig+0x7a8>
 800cc82:	4b6f      	ldr	r3, [pc, #444]	; (800ce40 <UART_SetConfig+0x904>)
 800cc84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc86:	f003 0307 	and.w	r3, r3, #7
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	d826      	bhi.n	800ccdc <UART_SetConfig+0x7a0>
 800cc8e:	a201      	add	r2, pc, #4	; (adr r2, 800cc94 <UART_SetConfig+0x758>)
 800cc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc94:	0800ccad 	.word	0x0800ccad
 800cc98:	0800ccb5 	.word	0x0800ccb5
 800cc9c:	0800ccbd 	.word	0x0800ccbd
 800cca0:	0800ccc5 	.word	0x0800ccc5
 800cca4:	0800cccd 	.word	0x0800cccd
 800cca8:	0800ccd5 	.word	0x0800ccd5
 800ccac:	2302      	movs	r3, #2
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e01a      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ccb4:	2304      	movs	r3, #4
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e016      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ccbc:	2308      	movs	r3, #8
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e012      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ccc4:	2310      	movs	r3, #16
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccca:	e00e      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cccc:	2320      	movs	r3, #32
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd2:	e00a      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ccd4:	2340      	movs	r3, #64	; 0x40
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccda:	e006      	b.n	800ccea <UART_SetConfig+0x7ae>
 800ccdc:	2380      	movs	r3, #128	; 0x80
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce2:	e002      	b.n	800ccea <UART_SetConfig+0x7ae>
 800cce4:	2380      	movs	r3, #128	; 0x80
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a55      	ldr	r2, [pc, #340]	; (800ce44 <UART_SetConfig+0x908>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	f040 80f8 	bne.w	800cee6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccfa:	2b20      	cmp	r3, #32
 800ccfc:	dc46      	bgt.n	800cd8c <UART_SetConfig+0x850>
 800ccfe:	2b02      	cmp	r3, #2
 800cd00:	db75      	blt.n	800cdee <UART_SetConfig+0x8b2>
 800cd02:	3b02      	subs	r3, #2
 800cd04:	2b1e      	cmp	r3, #30
 800cd06:	d872      	bhi.n	800cdee <UART_SetConfig+0x8b2>
 800cd08:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <UART_SetConfig+0x7d4>)
 800cd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0e:	bf00      	nop
 800cd10:	0800cd93 	.word	0x0800cd93
 800cd14:	0800cdef 	.word	0x0800cdef
 800cd18:	0800cd9b 	.word	0x0800cd9b
 800cd1c:	0800cdef 	.word	0x0800cdef
 800cd20:	0800cdef 	.word	0x0800cdef
 800cd24:	0800cdef 	.word	0x0800cdef
 800cd28:	0800cdab 	.word	0x0800cdab
 800cd2c:	0800cdef 	.word	0x0800cdef
 800cd30:	0800cdef 	.word	0x0800cdef
 800cd34:	0800cdef 	.word	0x0800cdef
 800cd38:	0800cdef 	.word	0x0800cdef
 800cd3c:	0800cdef 	.word	0x0800cdef
 800cd40:	0800cdef 	.word	0x0800cdef
 800cd44:	0800cdef 	.word	0x0800cdef
 800cd48:	0800cdbb 	.word	0x0800cdbb
 800cd4c:	0800cdef 	.word	0x0800cdef
 800cd50:	0800cdef 	.word	0x0800cdef
 800cd54:	0800cdef 	.word	0x0800cdef
 800cd58:	0800cdef 	.word	0x0800cdef
 800cd5c:	0800cdef 	.word	0x0800cdef
 800cd60:	0800cdef 	.word	0x0800cdef
 800cd64:	0800cdef 	.word	0x0800cdef
 800cd68:	0800cdef 	.word	0x0800cdef
 800cd6c:	0800cdef 	.word	0x0800cdef
 800cd70:	0800cdef 	.word	0x0800cdef
 800cd74:	0800cdef 	.word	0x0800cdef
 800cd78:	0800cdef 	.word	0x0800cdef
 800cd7c:	0800cdef 	.word	0x0800cdef
 800cd80:	0800cdef 	.word	0x0800cdef
 800cd84:	0800cdef 	.word	0x0800cdef
 800cd88:	0800cde1 	.word	0x0800cde1
 800cd8c:	2b40      	cmp	r3, #64	; 0x40
 800cd8e:	d02a      	beq.n	800cde6 <UART_SetConfig+0x8aa>
 800cd90:	e02d      	b.n	800cdee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd92:	f7fc ffd3 	bl	8009d3c <HAL_RCCEx_GetD3PCLK1Freq>
 800cd96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd98:	e02f      	b.n	800cdfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fc ffe2 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda8:	e027      	b.n	800cdfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdaa:	f107 0318 	add.w	r3, r7, #24
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fd f92e 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e01f      	b.n	800cdfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdba:	4b21      	ldr	r3, [pc, #132]	; (800ce40 <UART_SetConfig+0x904>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0320 	and.w	r3, r3, #32
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d009      	beq.n	800cdda <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdc6:	4b1e      	ldr	r3, [pc, #120]	; (800ce40 <UART_SetConfig+0x904>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	08db      	lsrs	r3, r3, #3
 800cdcc:	f003 0303 	and.w	r3, r3, #3
 800cdd0:	4a1d      	ldr	r2, [pc, #116]	; (800ce48 <UART_SetConfig+0x90c>)
 800cdd2:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cdd8:	e00f      	b.n	800cdfa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cdda:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <UART_SetConfig+0x90c>)
 800cddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdde:	e00c      	b.n	800cdfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cde0:	4b1a      	ldr	r3, [pc, #104]	; (800ce4c <UART_SetConfig+0x910>)
 800cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde4:	e009      	b.n	800cdfa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdec:	e005      	b.n	800cdfa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 81ee 	beq.w	800d1de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce06:	4a12      	ldr	r2, [pc, #72]	; (800ce50 <UART_SetConfig+0x914>)
 800ce08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce14:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	4413      	add	r3, r2
 800ce20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d305      	bcc.n	800ce32 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d910      	bls.n	800ce54 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce38:	e1d1      	b.n	800d1de <UART_SetConfig+0xca2>
 800ce3a:	bf00      	nop
 800ce3c:	40011c00 	.word	0x40011c00
 800ce40:	58024400 	.word	0x58024400
 800ce44:	58000c00 	.word	0x58000c00
 800ce48:	03d09000 	.word	0x03d09000
 800ce4c:	003d0900 	.word	0x003d0900
 800ce50:	0800e43c 	.word	0x0800e43c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	2200      	movs	r2, #0
 800ce58:	60bb      	str	r3, [r7, #8]
 800ce5a:	60fa      	str	r2, [r7, #12]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	4ac0      	ldr	r2, [pc, #768]	; (800d164 <UART_SetConfig+0xc28>)
 800ce62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	2200      	movs	r2, #0
 800ce6a:	603b      	str	r3, [r7, #0]
 800ce6c:	607a      	str	r2, [r7, #4]
 800ce6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce76:	f7f3 fa53 	bl	8000320 <__aeabi_uldivmod>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	4610      	mov	r0, r2
 800ce80:	4619      	mov	r1, r3
 800ce82:	f04f 0200 	mov.w	r2, #0
 800ce86:	f04f 0300 	mov.w	r3, #0
 800ce8a:	020b      	lsls	r3, r1, #8
 800ce8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce90:	0202      	lsls	r2, r0, #8
 800ce92:	6979      	ldr	r1, [r7, #20]
 800ce94:	6849      	ldr	r1, [r1, #4]
 800ce96:	0849      	lsrs	r1, r1, #1
 800ce98:	2000      	movs	r0, #0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	eb12 0804 	adds.w	r8, r2, r4
 800cea2:	eb43 0905 	adc.w	r9, r3, r5
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	469a      	mov	sl, r3
 800ceae:	4693      	mov	fp, r2
 800ceb0:	4652      	mov	r2, sl
 800ceb2:	465b      	mov	r3, fp
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 fa32 	bl	8000320 <__aeabi_uldivmod>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4613      	mov	r3, r2
 800cec2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceca:	d308      	bcc.n	800cede <UART_SetConfig+0x9a2>
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ced2:	d204      	bcs.n	800cede <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceda:	60da      	str	r2, [r3, #12]
 800cedc:	e17f      	b.n	800d1de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cee4:	e17b      	b.n	800d1de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	69db      	ldr	r3, [r3, #28]
 800ceea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceee:	f040 80bd 	bne.w	800d06c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cef2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	dc48      	bgt.n	800cf8c <UART_SetConfig+0xa50>
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	db7b      	blt.n	800cff6 <UART_SetConfig+0xaba>
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	d879      	bhi.n	800cff6 <UART_SetConfig+0xaba>
 800cf02:	a201      	add	r2, pc, #4	; (adr r2, 800cf08 <UART_SetConfig+0x9cc>)
 800cf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf08:	0800cf93 	.word	0x0800cf93
 800cf0c:	0800cf9b 	.word	0x0800cf9b
 800cf10:	0800cff7 	.word	0x0800cff7
 800cf14:	0800cff7 	.word	0x0800cff7
 800cf18:	0800cfa3 	.word	0x0800cfa3
 800cf1c:	0800cff7 	.word	0x0800cff7
 800cf20:	0800cff7 	.word	0x0800cff7
 800cf24:	0800cff7 	.word	0x0800cff7
 800cf28:	0800cfb3 	.word	0x0800cfb3
 800cf2c:	0800cff7 	.word	0x0800cff7
 800cf30:	0800cff7 	.word	0x0800cff7
 800cf34:	0800cff7 	.word	0x0800cff7
 800cf38:	0800cff7 	.word	0x0800cff7
 800cf3c:	0800cff7 	.word	0x0800cff7
 800cf40:	0800cff7 	.word	0x0800cff7
 800cf44:	0800cff7 	.word	0x0800cff7
 800cf48:	0800cfc3 	.word	0x0800cfc3
 800cf4c:	0800cff7 	.word	0x0800cff7
 800cf50:	0800cff7 	.word	0x0800cff7
 800cf54:	0800cff7 	.word	0x0800cff7
 800cf58:	0800cff7 	.word	0x0800cff7
 800cf5c:	0800cff7 	.word	0x0800cff7
 800cf60:	0800cff7 	.word	0x0800cff7
 800cf64:	0800cff7 	.word	0x0800cff7
 800cf68:	0800cff7 	.word	0x0800cff7
 800cf6c:	0800cff7 	.word	0x0800cff7
 800cf70:	0800cff7 	.word	0x0800cff7
 800cf74:	0800cff7 	.word	0x0800cff7
 800cf78:	0800cff7 	.word	0x0800cff7
 800cf7c:	0800cff7 	.word	0x0800cff7
 800cf80:	0800cff7 	.word	0x0800cff7
 800cf84:	0800cff7 	.word	0x0800cff7
 800cf88:	0800cfe9 	.word	0x0800cfe9
 800cf8c:	2b40      	cmp	r3, #64	; 0x40
 800cf8e:	d02e      	beq.n	800cfee <UART_SetConfig+0xab2>
 800cf90:	e031      	b.n	800cff6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf92:	f7fb ffad 	bl	8008ef0 <HAL_RCC_GetPCLK1Freq>
 800cf96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf98:	e033      	b.n	800d002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf9a:	f7fb ffbf 	bl	8008f1c <HAL_RCC_GetPCLK2Freq>
 800cf9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfa0:	e02f      	b.n	800d002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fc fede 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfb0:	e027      	b.n	800d002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfb2:	f107 0318 	add.w	r3, r7, #24
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fd f82a 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc0:	e01f      	b.n	800d002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfc2:	4b69      	ldr	r3, [pc, #420]	; (800d168 <UART_SetConfig+0xc2c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 0320 	and.w	r3, r3, #32
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d009      	beq.n	800cfe2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfce:	4b66      	ldr	r3, [pc, #408]	; (800d168 <UART_SetConfig+0xc2c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	08db      	lsrs	r3, r3, #3
 800cfd4:	f003 0303 	and.w	r3, r3, #3
 800cfd8:	4a64      	ldr	r2, [pc, #400]	; (800d16c <UART_SetConfig+0xc30>)
 800cfda:	fa22 f303 	lsr.w	r3, r2, r3
 800cfde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfe0:	e00f      	b.n	800d002 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cfe2:	4b62      	ldr	r3, [pc, #392]	; (800d16c <UART_SetConfig+0xc30>)
 800cfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfe6:	e00c      	b.n	800d002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfe8:	4b61      	ldr	r3, [pc, #388]	; (800d170 <UART_SetConfig+0xc34>)
 800cfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfec:	e009      	b.n	800d002 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cff4:	e005      	b.n	800d002 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cff6:	2300      	movs	r3, #0
 800cff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 80ea 	beq.w	800d1de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	4a55      	ldr	r2, [pc, #340]	; (800d164 <UART_SetConfig+0xc28>)
 800d010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d014:	461a      	mov	r2, r3
 800d016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d018:	fbb3 f3f2 	udiv	r3, r3, r2
 800d01c:	005a      	lsls	r2, r3, #1
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	085b      	lsrs	r3, r3, #1
 800d024:	441a      	add	r2, r3
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d02e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	2b0f      	cmp	r3, #15
 800d034:	d916      	bls.n	800d064 <UART_SetConfig+0xb28>
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d03c:	d212      	bcs.n	800d064 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	b29b      	uxth	r3, r3
 800d042:	f023 030f 	bic.w	r3, r3, #15
 800d046:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04a:	085b      	lsrs	r3, r3, #1
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	b29a      	uxth	r2, r3
 800d054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d056:	4313      	orrs	r3, r2
 800d058:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d060:	60da      	str	r2, [r3, #12]
 800d062:	e0bc      	b.n	800d1de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d06a:	e0b8      	b.n	800d1de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d06c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d070:	2b20      	cmp	r3, #32
 800d072:	dc4b      	bgt.n	800d10c <UART_SetConfig+0xbd0>
 800d074:	2b00      	cmp	r3, #0
 800d076:	f2c0 8087 	blt.w	800d188 <UART_SetConfig+0xc4c>
 800d07a:	2b20      	cmp	r3, #32
 800d07c:	f200 8084 	bhi.w	800d188 <UART_SetConfig+0xc4c>
 800d080:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <UART_SetConfig+0xb4c>)
 800d082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d086:	bf00      	nop
 800d088:	0800d113 	.word	0x0800d113
 800d08c:	0800d11b 	.word	0x0800d11b
 800d090:	0800d189 	.word	0x0800d189
 800d094:	0800d189 	.word	0x0800d189
 800d098:	0800d123 	.word	0x0800d123
 800d09c:	0800d189 	.word	0x0800d189
 800d0a0:	0800d189 	.word	0x0800d189
 800d0a4:	0800d189 	.word	0x0800d189
 800d0a8:	0800d133 	.word	0x0800d133
 800d0ac:	0800d189 	.word	0x0800d189
 800d0b0:	0800d189 	.word	0x0800d189
 800d0b4:	0800d189 	.word	0x0800d189
 800d0b8:	0800d189 	.word	0x0800d189
 800d0bc:	0800d189 	.word	0x0800d189
 800d0c0:	0800d189 	.word	0x0800d189
 800d0c4:	0800d189 	.word	0x0800d189
 800d0c8:	0800d143 	.word	0x0800d143
 800d0cc:	0800d189 	.word	0x0800d189
 800d0d0:	0800d189 	.word	0x0800d189
 800d0d4:	0800d189 	.word	0x0800d189
 800d0d8:	0800d189 	.word	0x0800d189
 800d0dc:	0800d189 	.word	0x0800d189
 800d0e0:	0800d189 	.word	0x0800d189
 800d0e4:	0800d189 	.word	0x0800d189
 800d0e8:	0800d189 	.word	0x0800d189
 800d0ec:	0800d189 	.word	0x0800d189
 800d0f0:	0800d189 	.word	0x0800d189
 800d0f4:	0800d189 	.word	0x0800d189
 800d0f8:	0800d189 	.word	0x0800d189
 800d0fc:	0800d189 	.word	0x0800d189
 800d100:	0800d189 	.word	0x0800d189
 800d104:	0800d189 	.word	0x0800d189
 800d108:	0800d17b 	.word	0x0800d17b
 800d10c:	2b40      	cmp	r3, #64	; 0x40
 800d10e:	d037      	beq.n	800d180 <UART_SetConfig+0xc44>
 800d110:	e03a      	b.n	800d188 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d112:	f7fb feed 	bl	8008ef0 <HAL_RCC_GetPCLK1Freq>
 800d116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d118:	e03c      	b.n	800d194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d11a:	f7fb feff 	bl	8008f1c <HAL_RCC_GetPCLK2Freq>
 800d11e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d120:	e038      	b.n	800d194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d126:	4618      	mov	r0, r3
 800d128:	f7fc fe1e 	bl	8009d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d130:	e030      	b.n	800d194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d132:	f107 0318 	add.w	r3, r7, #24
 800d136:	4618      	mov	r0, r3
 800d138:	f7fc ff6a 	bl	800a010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d140:	e028      	b.n	800d194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <UART_SetConfig+0xc2c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 0320 	and.w	r3, r3, #32
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d012      	beq.n	800d174 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d14e:	4b06      	ldr	r3, [pc, #24]	; (800d168 <UART_SetConfig+0xc2c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	08db      	lsrs	r3, r3, #3
 800d154:	f003 0303 	and.w	r3, r3, #3
 800d158:	4a04      	ldr	r2, [pc, #16]	; (800d16c <UART_SetConfig+0xc30>)
 800d15a:	fa22 f303 	lsr.w	r3, r2, r3
 800d15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d160:	e018      	b.n	800d194 <UART_SetConfig+0xc58>
 800d162:	bf00      	nop
 800d164:	0800e43c 	.word	0x0800e43c
 800d168:	58024400 	.word	0x58024400
 800d16c:	03d09000 	.word	0x03d09000
 800d170:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d174:	4b24      	ldr	r3, [pc, #144]	; (800d208 <UART_SetConfig+0xccc>)
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d178:	e00c      	b.n	800d194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d17a:	4b24      	ldr	r3, [pc, #144]	; (800d20c <UART_SetConfig+0xcd0>)
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d17e:	e009      	b.n	800d194 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d186:	e005      	b.n	800d194 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d188:	2300      	movs	r3, #0
 800d18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d192:	bf00      	nop
    }

    if (pclk != 0U)
 800d194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d196:	2b00      	cmp	r3, #0
 800d198:	d021      	beq.n	800d1de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	4a1c      	ldr	r2, [pc, #112]	; (800d210 <UART_SetConfig+0xcd4>)
 800d1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	085b      	lsrs	r3, r3, #1
 800d1b2:	441a      	add	r2, r3
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1bc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	2b0f      	cmp	r3, #15
 800d1c2:	d909      	bls.n	800d1d8 <UART_SetConfig+0xc9c>
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ca:	d205      	bcs.n	800d1d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60da      	str	r2, [r3, #12]
 800d1d6:	e002      	b.n	800d1de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d1fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3748      	adds	r7, #72	; 0x48
 800d202:	46bd      	mov	sp, r7
 800d204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d208:	03d09000 	.word	0x03d09000
 800d20c:	003d0900 	.word	0x003d0900
 800d210:	0800e43c 	.word	0x0800e43c

0800d214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00a      	beq.n	800d23e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	430a      	orrs	r2, r1
 800d23c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d242:	f003 0302 	and.w	r3, r3, #2
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00a      	beq.n	800d260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	430a      	orrs	r2, r1
 800d25e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00a      	beq.n	800d282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	430a      	orrs	r2, r1
 800d280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d286:	f003 0308 	and.w	r3, r3, #8
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00a      	beq.n	800d2a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a8:	f003 0310 	and.w	r3, r3, #16
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00a      	beq.n	800d2c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	430a      	orrs	r2, r1
 800d2c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ca:	f003 0320 	and.w	r3, r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00a      	beq.n	800d2e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	430a      	orrs	r2, r1
 800d2e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01a      	beq.n	800d32a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d312:	d10a      	bne.n	800d32a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	430a      	orrs	r2, r1
 800d34a:	605a      	str	r2, [r3, #4]
  }
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af02      	add	r7, sp, #8
 800d35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d368:	f7f7 fd62 	bl	8004e30 <HAL_GetTick>
 800d36c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0308 	and.w	r3, r3, #8
 800d378:	2b08      	cmp	r3, #8
 800d37a:	d10e      	bne.n	800d39a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d37c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f82f 	bl	800d3ee <UART_WaitOnFlagUntilTimeout>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d396:	2303      	movs	r3, #3
 800d398:	e025      	b.n	800d3e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b04      	cmp	r3, #4
 800d3a6:	d10e      	bne.n	800d3c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f819 	bl	800d3ee <UART_WaitOnFlagUntilTimeout>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	e00f      	b.n	800d3e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2220      	movs	r2, #32
 800d3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b09c      	sub	sp, #112	; 0x70
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	603b      	str	r3, [r7, #0]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3fe:	e0a9      	b.n	800d554 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d406:	f000 80a5 	beq.w	800d554 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d40a:	f7f7 fd11 	bl	8004e30 <HAL_GetTick>
 800d40e:	4602      	mov	r2, r0
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d416:	429a      	cmp	r2, r3
 800d418:	d302      	bcc.n	800d420 <UART_WaitOnFlagUntilTimeout+0x32>
 800d41a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d140      	bne.n	800d4a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d428:	e853 3f00 	ldrex	r3, [r3]
 800d42c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d434:	667b      	str	r3, [r7, #100]	; 0x64
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d43e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d440:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d442:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d446:	e841 2300 	strex	r3, r2, [r1]
 800d44a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d44c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e6      	bne.n	800d420 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45c:	e853 3f00 	ldrex	r3, [r3]
 800d460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	f023 0301 	bic.w	r3, r3, #1
 800d468:	663b      	str	r3, [r7, #96]	; 0x60
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3308      	adds	r3, #8
 800d470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d472:	64ba      	str	r2, [r7, #72]	; 0x48
 800d474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d47a:	e841 2300 	strex	r3, r2, [r1]
 800d47e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d482:	2b00      	cmp	r3, #0
 800d484:	d1e5      	bne.n	800d452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2220      	movs	r2, #32
 800d48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2220      	movs	r2, #32
 800d492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e069      	b.n	800d576 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0304 	and.w	r3, r3, #4
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d051      	beq.n	800d554 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4be:	d149      	bne.n	800d554 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	e853 3f00 	ldrex	r3, [r3]
 800d4d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4f0:	e841 2300 	strex	r3, r2, [r1]
 800d4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e6      	bne.n	800d4ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3308      	adds	r3, #8
 800d502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	e853 3f00 	ldrex	r3, [r3]
 800d50a:	613b      	str	r3, [r7, #16]
   return(result);
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f023 0301 	bic.w	r3, r3, #1
 800d512:	66bb      	str	r3, [r7, #104]	; 0x68
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3308      	adds	r3, #8
 800d51a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d51c:	623a      	str	r2, [r7, #32]
 800d51e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d520:	69f9      	ldr	r1, [r7, #28]
 800d522:	6a3a      	ldr	r2, [r7, #32]
 800d524:	e841 2300 	strex	r3, r2, [r1]
 800d528:	61bb      	str	r3, [r7, #24]
   return(result);
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1e5      	bne.n	800d4fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2220      	movs	r2, #32
 800d534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2220      	movs	r2, #32
 800d53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2220      	movs	r2, #32
 800d544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d550:	2303      	movs	r3, #3
 800d552:	e010      	b.n	800d576 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	69da      	ldr	r2, [r3, #28]
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	4013      	ands	r3, r2
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	429a      	cmp	r2, r3
 800d562:	bf0c      	ite	eq
 800d564:	2301      	moveq	r3, #1
 800d566:	2300      	movne	r3, #0
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	461a      	mov	r2, r3
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	429a      	cmp	r2, r3
 800d570:	f43f af46 	beq.w	800d400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3770      	adds	r7, #112	; 0x70
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b096      	sub	sp, #88	; 0x58
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	4613      	mov	r3, r2
 800d58c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	88fa      	ldrh	r2, [r7, #6]
 800d598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2222      	movs	r2, #34	; 0x22
 800d5a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d02c      	beq.n	800d60e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b8:	4a42      	ldr	r2, [pc, #264]	; (800d6c4 <UART_Start_Receive_DMA+0x144>)
 800d5ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5c0:	4a41      	ldr	r2, [pc, #260]	; (800d6c8 <UART_Start_Receive_DMA+0x148>)
 800d5c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5c8:	4a40      	ldr	r2, [pc, #256]	; (800d6cc <UART_Start_Receive_DMA+0x14c>)
 800d5ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3324      	adds	r3, #36	; 0x24
 800d5de:	4619      	mov	r1, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	88fb      	ldrh	r3, [r7, #6]
 800d5e8:	f7f8 f898 	bl	800571c <HAL_DMA_Start_IT>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00d      	beq.n	800d60e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2210      	movs	r2, #16
 800d5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2220      	movs	r2, #32
 800d606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e055      	b.n	800d6ba <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d018      	beq.n	800d650 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	e853 3f00 	ldrex	r3, [r3]
 800d62a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d632:	657b      	str	r3, [r7, #84]	; 0x54
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d63c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d63e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d644:	e841 2300 	strex	r3, r2, [r1]
 800d648:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1e6      	bne.n	800d61e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3308      	adds	r3, #8
 800d656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	e853 3f00 	ldrex	r3, [r3]
 800d65e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	f043 0301 	orr.w	r3, r3, #1
 800d666:	653b      	str	r3, [r7, #80]	; 0x50
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3308      	adds	r3, #8
 800d66e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d670:	637a      	str	r2, [r7, #52]	; 0x34
 800d672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d678:	e841 2300 	strex	r3, r2, [r1]
 800d67c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1e5      	bne.n	800d650 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3308      	adds	r3, #8
 800d68a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	e853 3f00 	ldrex	r3, [r3]
 800d692:	613b      	str	r3, [r7, #16]
   return(result);
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d69a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6a4:	623a      	str	r2, [r7, #32]
 800d6a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a8:	69f9      	ldr	r1, [r7, #28]
 800d6aa:	6a3a      	ldr	r2, [r7, #32]
 800d6ac:	e841 2300 	strex	r3, r2, [r1]
 800d6b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e5      	bne.n	800d684 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3758      	adds	r7, #88	; 0x58
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	0800d8d3 	.word	0x0800d8d3
 800d6c8:	0800d9f5 	.word	0x0800d9f5
 800d6cc:	0800da2d 	.word	0x0800da2d

0800d6d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b08f      	sub	sp, #60	; 0x3c
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	e853 3f00 	ldrex	r3, [r3]
 800d6e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6fe:	e841 2300 	strex	r3, r2, [r1]
 800d702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1e6      	bne.n	800d6d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	3308      	adds	r3, #8
 800d710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	e853 3f00 	ldrex	r3, [r3]
 800d718:	60bb      	str	r3, [r7, #8]
   return(result);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d720:	633b      	str	r3, [r7, #48]	; 0x30
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3308      	adds	r3, #8
 800d728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72a:	61ba      	str	r2, [r7, #24]
 800d72c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	6979      	ldr	r1, [r7, #20]
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	e841 2300 	strex	r3, r2, [r1]
 800d736:	613b      	str	r3, [r7, #16]
   return(result);
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1e5      	bne.n	800d70a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2220      	movs	r2, #32
 800d742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d746:	bf00      	nop
 800d748:	373c      	adds	r7, #60	; 0x3c
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
	...

0800d754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b095      	sub	sp, #84	; 0x54
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d770:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d77a:	643b      	str	r3, [r7, #64]	; 0x40
 800d77c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d782:	e841 2300 	strex	r3, r2, [r1]
 800d786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1e6      	bne.n	800d75c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	3308      	adds	r3, #8
 800d794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	e853 3f00 	ldrex	r3, [r3]
 800d79c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d79e:	69fa      	ldr	r2, [r7, #28]
 800d7a0:	4b1e      	ldr	r3, [pc, #120]	; (800d81c <UART_EndRxTransfer+0xc8>)
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e5      	bne.n	800d78e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d118      	bne.n	800d7fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	e853 3f00 	ldrex	r3, [r3]
 800d7d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	f023 0310 	bic.w	r3, r3, #16
 800d7de:	647b      	str	r3, [r7, #68]	; 0x44
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e8:	61bb      	str	r3, [r7, #24]
 800d7ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ec:	6979      	ldr	r1, [r7, #20]
 800d7ee:	69ba      	ldr	r2, [r7, #24]
 800d7f0:	e841 2300 	strex	r3, r2, [r1]
 800d7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1e6      	bne.n	800d7ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2220      	movs	r2, #32
 800d800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d810:	bf00      	nop
 800d812:	3754      	adds	r7, #84	; 0x54
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	effffffe 	.word	0xeffffffe

0800d820 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b090      	sub	sp, #64	; 0x40
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d836:	d037      	beq.n	800d8a8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83a:	2200      	movs	r2, #0
 800d83c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3308      	adds	r3, #8
 800d846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	e853 3f00 	ldrex	r3, [r3]
 800d84e:	623b      	str	r3, [r7, #32]
   return(result);
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d856:	63bb      	str	r3, [r7, #56]	; 0x38
 800d858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3308      	adds	r3, #8
 800d85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d860:	633a      	str	r2, [r7, #48]	; 0x30
 800d862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d868:	e841 2300 	strex	r3, r2, [r1]
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1e5      	bne.n	800d840 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	60fb      	str	r3, [r7, #12]
   return(result);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d888:	637b      	str	r3, [r7, #52]	; 0x34
 800d88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d892:	61fb      	str	r3, [r7, #28]
 800d894:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d896:	69b9      	ldr	r1, [r7, #24]
 800d898:	69fa      	ldr	r2, [r7, #28]
 800d89a:	e841 2300 	strex	r3, r2, [r1]
 800d89e:	617b      	str	r3, [r7, #20]
   return(result);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1e6      	bne.n	800d874 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8a6:	e002      	b.n	800d8ae <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d8a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8aa:	f7f5 fa19 	bl	8002ce0 <HAL_UART_TxCpltCallback>
}
 800d8ae:	bf00      	nop
 800d8b0:	3740      	adds	r7, #64	; 0x40
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b084      	sub	sp, #16
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7fe fe0f 	bl	800c4e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b09c      	sub	sp, #112	; 0x70
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8de:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e8:	d071      	beq.n	800d9ce <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8fa:	e853 3f00 	ldrex	r3, [r3]
 800d8fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d906:	66bb      	str	r3, [r7, #104]	; 0x68
 800d908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	461a      	mov	r2, r3
 800d90e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d910:	65bb      	str	r3, [r7, #88]	; 0x58
 800d912:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d918:	e841 2300 	strex	r3, r2, [r1]
 800d91c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1e6      	bne.n	800d8f2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3308      	adds	r3, #8
 800d92a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92e:	e853 3f00 	ldrex	r3, [r3]
 800d932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d936:	f023 0301 	bic.w	r3, r3, #1
 800d93a:	667b      	str	r3, [r7, #100]	; 0x64
 800d93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3308      	adds	r3, #8
 800d942:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d944:	647a      	str	r2, [r7, #68]	; 0x44
 800d946:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d948:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d94a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d94c:	e841 2300 	strex	r3, r2, [r1]
 800d950:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1e5      	bne.n	800d924 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3308      	adds	r3, #8
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	e853 3f00 	ldrex	r3, [r3]
 800d966:	623b      	str	r3, [r7, #32]
   return(result);
 800d968:	6a3b      	ldr	r3, [r7, #32]
 800d96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d96e:	663b      	str	r3, [r7, #96]	; 0x60
 800d970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3308      	adds	r3, #8
 800d976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d978:	633a      	str	r2, [r7, #48]	; 0x30
 800d97a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d980:	e841 2300 	strex	r3, r2, [r1]
 800d984:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1e5      	bne.n	800d958 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d98e:	2220      	movs	r2, #32
 800d990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d118      	bne.n	800d9ce <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	e853 3f00 	ldrex	r3, [r3]
 800d9a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f023 0310 	bic.w	r3, r3, #16
 800d9b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9ba:	61fb      	str	r3, [r7, #28]
 800d9bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9be:	69b9      	ldr	r1, [r7, #24]
 800d9c0:	69fa      	ldr	r2, [r7, #28]
 800d9c2:	e841 2300 	strex	r3, r2, [r1]
 800d9c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d1e6      	bne.n	800d99c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d107      	bne.n	800d9e6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9e0:	f7fe fda0 	bl	800c524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9e4:	e002      	b.n	800d9ec <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d9e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9e8:	f7f5 f98c 	bl	8002d04 <HAL_UART_RxCpltCallback>
}
 800d9ec:	bf00      	nop
 800d9ee:	3770      	adds	r7, #112	; 0x70
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da00:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da06:	2b01      	cmp	r3, #1
 800da08:	d109      	bne.n	800da1e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da10:	085b      	lsrs	r3, r3, #1
 800da12:	b29b      	uxth	r3, r3
 800da14:	4619      	mov	r1, r3
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7fe fd84 	bl	800c524 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da1c:	e002      	b.n	800da24 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7fe fd6c 	bl	800c4fc <HAL_UART_RxHalfCpltCallback>
}
 800da24:	bf00      	nop
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da40:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da48:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da54:	2b80      	cmp	r3, #128	; 0x80
 800da56:	d109      	bne.n	800da6c <UART_DMAError+0x40>
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	2b21      	cmp	r3, #33	; 0x21
 800da5c:	d106      	bne.n	800da6c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	2200      	movs	r2, #0
 800da62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da66:	6978      	ldr	r0, [r7, #20]
 800da68:	f7ff fe32 	bl	800d6d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da76:	2b40      	cmp	r3, #64	; 0x40
 800da78:	d109      	bne.n	800da8e <UART_DMAError+0x62>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b22      	cmp	r3, #34	; 0x22
 800da7e:	d106      	bne.n	800da8e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	2200      	movs	r2, #0
 800da84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800da88:	6978      	ldr	r0, [r7, #20]
 800da8a:	f7ff fe63 	bl	800d754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da94:	f043 0210 	orr.w	r2, r3, #16
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da9e:	6978      	ldr	r0, [r7, #20]
 800daa0:	f7fe fd36 	bl	800c510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daa4:	bf00      	nop
 800daa6:	3718      	adds	r7, #24
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f7fe fd20 	bl	800c510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dad0:	bf00      	nop
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b088      	sub	sp, #32
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	e853 3f00 	ldrex	r3, [r3]
 800daec:	60bb      	str	r3, [r7, #8]
   return(result);
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daf4:	61fb      	str	r3, [r7, #28]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	461a      	mov	r2, r3
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	61bb      	str	r3, [r7, #24]
 800db00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db02:	6979      	ldr	r1, [r7, #20]
 800db04:	69ba      	ldr	r2, [r7, #24]
 800db06:	e841 2300 	strex	r3, r2, [r1]
 800db0a:	613b      	str	r3, [r7, #16]
   return(result);
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1e6      	bne.n	800dae0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2220      	movs	r2, #32
 800db16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7f5 f8dd 	bl	8002ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db26:	bf00      	nop
 800db28:	3720      	adds	r7, #32
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db2e:	b480      	push	{r7}
 800db30:	b083      	sub	sp, #12
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db36:	bf00      	nop
 800db38:	370c      	adds	r7, #12
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr

0800db42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db42:	b480      	push	{r7}
 800db44:	b083      	sub	sp, #12
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db4a:	bf00      	nop
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db6a:	b480      	push	{r7}
 800db6c:	b085      	sub	sp, #20
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d101      	bne.n	800db80 <HAL_UARTEx_DisableFifoMode+0x16>
 800db7c:	2302      	movs	r3, #2
 800db7e:	e027      	b.n	800dbd0 <HAL_UARTEx_DisableFifoMode+0x66>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2224      	movs	r2, #36	; 0x24
 800db8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f022 0201 	bic.w	r2, r2, #1
 800dba6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2220      	movs	r2, #32
 800dbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3714      	adds	r7, #20
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d101      	bne.n	800dbf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	e02d      	b.n	800dc50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2224      	movs	r2, #36	; 0x24
 800dc00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f022 0201 	bic.w	r2, r2, #1
 800dc1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f84f 	bl	800dcd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2220      	movs	r2, #32
 800dc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d101      	bne.n	800dc70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	e02d      	b.n	800dccc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2224      	movs	r2, #36	; 0x24
 800dc7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f022 0201 	bic.w	r2, r2, #1
 800dc96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f811 	bl	800dcd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2220      	movs	r2, #32
 800dcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d108      	bne.n	800dcf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcf4:	e031      	b.n	800dd5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcf6:	2310      	movs	r3, #16
 800dcf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcfa:	2310      	movs	r3, #16
 800dcfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	0e5b      	lsrs	r3, r3, #25
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	f003 0307 	and.w	r3, r3, #7
 800dd0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	0f5b      	lsrs	r3, r3, #29
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	7b3a      	ldrb	r2, [r7, #12]
 800dd22:	4911      	ldr	r1, [pc, #68]	; (800dd68 <UARTEx_SetNbDataToProcess+0x94>)
 800dd24:	5c8a      	ldrb	r2, [r1, r2]
 800dd26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd2a:	7b3a      	ldrb	r2, [r7, #12]
 800dd2c:	490f      	ldr	r1, [pc, #60]	; (800dd6c <UARTEx_SetNbDataToProcess+0x98>)
 800dd2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd30:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	7b7a      	ldrb	r2, [r7, #13]
 800dd40:	4909      	ldr	r1, [pc, #36]	; (800dd68 <UARTEx_SetNbDataToProcess+0x94>)
 800dd42:	5c8a      	ldrb	r2, [r1, r2]
 800dd44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd48:	7b7a      	ldrb	r2, [r7, #13]
 800dd4a:	4908      	ldr	r1, [pc, #32]	; (800dd6c <UARTEx_SetNbDataToProcess+0x98>)
 800dd4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd5a:	bf00      	nop
 800dd5c:	3714      	adds	r7, #20
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	0800e454 	.word	0x0800e454
 800dd6c:	0800e45c 	.word	0x0800e45c

0800dd70 <__cxa_pure_virtual>:
 800dd70:	b508      	push	{r3, lr}
 800dd72:	f000 f80d 	bl	800dd90 <_ZSt9terminatev>

0800dd76 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dd76:	b508      	push	{r3, lr}
 800dd78:	4780      	blx	r0
 800dd7a:	f000 f80e 	bl	800dd9a <abort>
	...

0800dd80 <_ZSt13get_terminatev>:
 800dd80:	4b02      	ldr	r3, [pc, #8]	; (800dd8c <_ZSt13get_terminatev+0xc>)
 800dd82:	6818      	ldr	r0, [r3, #0]
 800dd84:	f3bf 8f5b 	dmb	ish
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop
 800dd8c:	24000010 	.word	0x24000010

0800dd90 <_ZSt9terminatev>:
 800dd90:	b508      	push	{r3, lr}
 800dd92:	f7ff fff5 	bl	800dd80 <_ZSt13get_terminatev>
 800dd96:	f7ff ffee 	bl	800dd76 <_ZN10__cxxabiv111__terminateEPFvvE>

0800dd9a <abort>:
 800dd9a:	b508      	push	{r3, lr}
 800dd9c:	2006      	movs	r0, #6
 800dd9e:	f000 f873 	bl	800de88 <raise>
 800dda2:	2001      	movs	r0, #1
 800dda4:	f7f6 fedc 	bl	8004b60 <_exit>

0800dda8 <__errno>:
 800dda8:	4b01      	ldr	r3, [pc, #4]	; (800ddb0 <__errno+0x8>)
 800ddaa:	6818      	ldr	r0, [r3, #0]
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	24000014 	.word	0x24000014

0800ddb4 <__libc_init_array>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4d0d      	ldr	r5, [pc, #52]	; (800ddec <__libc_init_array+0x38>)
 800ddb8:	4c0d      	ldr	r4, [pc, #52]	; (800ddf0 <__libc_init_array+0x3c>)
 800ddba:	1b64      	subs	r4, r4, r5
 800ddbc:	10a4      	asrs	r4, r4, #2
 800ddbe:	2600      	movs	r6, #0
 800ddc0:	42a6      	cmp	r6, r4
 800ddc2:	d109      	bne.n	800ddd8 <__libc_init_array+0x24>
 800ddc4:	4d0b      	ldr	r5, [pc, #44]	; (800ddf4 <__libc_init_array+0x40>)
 800ddc6:	4c0c      	ldr	r4, [pc, #48]	; (800ddf8 <__libc_init_array+0x44>)
 800ddc8:	f000 f9b0 	bl	800e12c <_init>
 800ddcc:	1b64      	subs	r4, r4, r5
 800ddce:	10a4      	asrs	r4, r4, #2
 800ddd0:	2600      	movs	r6, #0
 800ddd2:	42a6      	cmp	r6, r4
 800ddd4:	d105      	bne.n	800dde2 <__libc_init_array+0x2e>
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dddc:	4798      	blx	r3
 800ddde:	3601      	adds	r6, #1
 800dde0:	e7ee      	b.n	800ddc0 <__libc_init_array+0xc>
 800dde2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde6:	4798      	blx	r3
 800dde8:	3601      	adds	r6, #1
 800ddea:	e7f2      	b.n	800ddd2 <__libc_init_array+0x1e>
 800ddec:	0800e46c 	.word	0x0800e46c
 800ddf0:	0800e46c 	.word	0x0800e46c
 800ddf4:	0800e46c 	.word	0x0800e46c
 800ddf8:	0800e478 	.word	0x0800e478

0800ddfc <memcpy>:
 800ddfc:	440a      	add	r2, r1
 800ddfe:	4291      	cmp	r1, r2
 800de00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de04:	d100      	bne.n	800de08 <memcpy+0xc>
 800de06:	4770      	bx	lr
 800de08:	b510      	push	{r4, lr}
 800de0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de12:	4291      	cmp	r1, r2
 800de14:	d1f9      	bne.n	800de0a <memcpy+0xe>
 800de16:	bd10      	pop	{r4, pc}

0800de18 <memset>:
 800de18:	4402      	add	r2, r0
 800de1a:	4603      	mov	r3, r0
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d100      	bne.n	800de22 <memset+0xa>
 800de20:	4770      	bx	lr
 800de22:	f803 1b01 	strb.w	r1, [r3], #1
 800de26:	e7f9      	b.n	800de1c <memset+0x4>

0800de28 <realloc>:
 800de28:	4b02      	ldr	r3, [pc, #8]	; (800de34 <realloc+0xc>)
 800de2a:	460a      	mov	r2, r1
 800de2c:	4601      	mov	r1, r0
 800de2e:	6818      	ldr	r0, [r3, #0]
 800de30:	f000 b8da 	b.w	800dfe8 <_realloc_r>
 800de34:	24000014 	.word	0x24000014

0800de38 <_raise_r>:
 800de38:	291f      	cmp	r1, #31
 800de3a:	b538      	push	{r3, r4, r5, lr}
 800de3c:	4604      	mov	r4, r0
 800de3e:	460d      	mov	r5, r1
 800de40:	d904      	bls.n	800de4c <_raise_r+0x14>
 800de42:	2316      	movs	r3, #22
 800de44:	6003      	str	r3, [r0, #0]
 800de46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de4a:	bd38      	pop	{r3, r4, r5, pc}
 800de4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de4e:	b112      	cbz	r2, 800de56 <_raise_r+0x1e>
 800de50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de54:	b94b      	cbnz	r3, 800de6a <_raise_r+0x32>
 800de56:	4620      	mov	r0, r4
 800de58:	f000 f830 	bl	800debc <_getpid_r>
 800de5c:	462a      	mov	r2, r5
 800de5e:	4601      	mov	r1, r0
 800de60:	4620      	mov	r0, r4
 800de62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de66:	f000 b817 	b.w	800de98 <_kill_r>
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d00a      	beq.n	800de84 <_raise_r+0x4c>
 800de6e:	1c59      	adds	r1, r3, #1
 800de70:	d103      	bne.n	800de7a <_raise_r+0x42>
 800de72:	2316      	movs	r3, #22
 800de74:	6003      	str	r3, [r0, #0]
 800de76:	2001      	movs	r0, #1
 800de78:	e7e7      	b.n	800de4a <_raise_r+0x12>
 800de7a:	2400      	movs	r4, #0
 800de7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de80:	4628      	mov	r0, r5
 800de82:	4798      	blx	r3
 800de84:	2000      	movs	r0, #0
 800de86:	e7e0      	b.n	800de4a <_raise_r+0x12>

0800de88 <raise>:
 800de88:	4b02      	ldr	r3, [pc, #8]	; (800de94 <raise+0xc>)
 800de8a:	4601      	mov	r1, r0
 800de8c:	6818      	ldr	r0, [r3, #0]
 800de8e:	f7ff bfd3 	b.w	800de38 <_raise_r>
 800de92:	bf00      	nop
 800de94:	24000014 	.word	0x24000014

0800de98 <_kill_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d07      	ldr	r5, [pc, #28]	; (800deb8 <_kill_r+0x20>)
 800de9c:	2300      	movs	r3, #0
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
 800dea2:	4611      	mov	r1, r2
 800dea4:	602b      	str	r3, [r5, #0]
 800dea6:	f7f6 fe4b 	bl	8004b40 <_kill>
 800deaa:	1c43      	adds	r3, r0, #1
 800deac:	d102      	bne.n	800deb4 <_kill_r+0x1c>
 800deae:	682b      	ldr	r3, [r5, #0]
 800deb0:	b103      	cbz	r3, 800deb4 <_kill_r+0x1c>
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
 800deb6:	bf00      	nop
 800deb8:	240010dc 	.word	0x240010dc

0800debc <_getpid_r>:
 800debc:	f7f6 be38 	b.w	8004b30 <_getpid>

0800dec0 <sbrk_aligned>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	4e0e      	ldr	r6, [pc, #56]	; (800defc <sbrk_aligned+0x3c>)
 800dec4:	460c      	mov	r4, r1
 800dec6:	6831      	ldr	r1, [r6, #0]
 800dec8:	4605      	mov	r5, r0
 800deca:	b911      	cbnz	r1, 800ded2 <sbrk_aligned+0x12>
 800decc:	f000 f8bc 	bl	800e048 <_sbrk_r>
 800ded0:	6030      	str	r0, [r6, #0]
 800ded2:	4621      	mov	r1, r4
 800ded4:	4628      	mov	r0, r5
 800ded6:	f000 f8b7 	bl	800e048 <_sbrk_r>
 800deda:	1c43      	adds	r3, r0, #1
 800dedc:	d00a      	beq.n	800def4 <sbrk_aligned+0x34>
 800dede:	1cc4      	adds	r4, r0, #3
 800dee0:	f024 0403 	bic.w	r4, r4, #3
 800dee4:	42a0      	cmp	r0, r4
 800dee6:	d007      	beq.n	800def8 <sbrk_aligned+0x38>
 800dee8:	1a21      	subs	r1, r4, r0
 800deea:	4628      	mov	r0, r5
 800deec:	f000 f8ac 	bl	800e048 <_sbrk_r>
 800def0:	3001      	adds	r0, #1
 800def2:	d101      	bne.n	800def8 <sbrk_aligned+0x38>
 800def4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800def8:	4620      	mov	r0, r4
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	240010d8 	.word	0x240010d8

0800df00 <_malloc_r>:
 800df00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df04:	1ccd      	adds	r5, r1, #3
 800df06:	f025 0503 	bic.w	r5, r5, #3
 800df0a:	3508      	adds	r5, #8
 800df0c:	2d0c      	cmp	r5, #12
 800df0e:	bf38      	it	cc
 800df10:	250c      	movcc	r5, #12
 800df12:	2d00      	cmp	r5, #0
 800df14:	4607      	mov	r7, r0
 800df16:	db01      	blt.n	800df1c <_malloc_r+0x1c>
 800df18:	42a9      	cmp	r1, r5
 800df1a:	d905      	bls.n	800df28 <_malloc_r+0x28>
 800df1c:	230c      	movs	r3, #12
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	2600      	movs	r6, #0
 800df22:	4630      	mov	r0, r6
 800df24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df28:	4e2e      	ldr	r6, [pc, #184]	; (800dfe4 <_malloc_r+0xe4>)
 800df2a:	f000 f89d 	bl	800e068 <__malloc_lock>
 800df2e:	6833      	ldr	r3, [r6, #0]
 800df30:	461c      	mov	r4, r3
 800df32:	bb34      	cbnz	r4, 800df82 <_malloc_r+0x82>
 800df34:	4629      	mov	r1, r5
 800df36:	4638      	mov	r0, r7
 800df38:	f7ff ffc2 	bl	800dec0 <sbrk_aligned>
 800df3c:	1c43      	adds	r3, r0, #1
 800df3e:	4604      	mov	r4, r0
 800df40:	d14d      	bne.n	800dfde <_malloc_r+0xde>
 800df42:	6834      	ldr	r4, [r6, #0]
 800df44:	4626      	mov	r6, r4
 800df46:	2e00      	cmp	r6, #0
 800df48:	d140      	bne.n	800dfcc <_malloc_r+0xcc>
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	4631      	mov	r1, r6
 800df4e:	4638      	mov	r0, r7
 800df50:	eb04 0803 	add.w	r8, r4, r3
 800df54:	f000 f878 	bl	800e048 <_sbrk_r>
 800df58:	4580      	cmp	r8, r0
 800df5a:	d13a      	bne.n	800dfd2 <_malloc_r+0xd2>
 800df5c:	6821      	ldr	r1, [r4, #0]
 800df5e:	3503      	adds	r5, #3
 800df60:	1a6d      	subs	r5, r5, r1
 800df62:	f025 0503 	bic.w	r5, r5, #3
 800df66:	3508      	adds	r5, #8
 800df68:	2d0c      	cmp	r5, #12
 800df6a:	bf38      	it	cc
 800df6c:	250c      	movcc	r5, #12
 800df6e:	4629      	mov	r1, r5
 800df70:	4638      	mov	r0, r7
 800df72:	f7ff ffa5 	bl	800dec0 <sbrk_aligned>
 800df76:	3001      	adds	r0, #1
 800df78:	d02b      	beq.n	800dfd2 <_malloc_r+0xd2>
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	442b      	add	r3, r5
 800df7e:	6023      	str	r3, [r4, #0]
 800df80:	e00e      	b.n	800dfa0 <_malloc_r+0xa0>
 800df82:	6822      	ldr	r2, [r4, #0]
 800df84:	1b52      	subs	r2, r2, r5
 800df86:	d41e      	bmi.n	800dfc6 <_malloc_r+0xc6>
 800df88:	2a0b      	cmp	r2, #11
 800df8a:	d916      	bls.n	800dfba <_malloc_r+0xba>
 800df8c:	1961      	adds	r1, r4, r5
 800df8e:	42a3      	cmp	r3, r4
 800df90:	6025      	str	r5, [r4, #0]
 800df92:	bf18      	it	ne
 800df94:	6059      	strne	r1, [r3, #4]
 800df96:	6863      	ldr	r3, [r4, #4]
 800df98:	bf08      	it	eq
 800df9a:	6031      	streq	r1, [r6, #0]
 800df9c:	5162      	str	r2, [r4, r5]
 800df9e:	604b      	str	r3, [r1, #4]
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f104 060b 	add.w	r6, r4, #11
 800dfa6:	f000 f865 	bl	800e074 <__malloc_unlock>
 800dfaa:	f026 0607 	bic.w	r6, r6, #7
 800dfae:	1d23      	adds	r3, r4, #4
 800dfb0:	1af2      	subs	r2, r6, r3
 800dfb2:	d0b6      	beq.n	800df22 <_malloc_r+0x22>
 800dfb4:	1b9b      	subs	r3, r3, r6
 800dfb6:	50a3      	str	r3, [r4, r2]
 800dfb8:	e7b3      	b.n	800df22 <_malloc_r+0x22>
 800dfba:	6862      	ldr	r2, [r4, #4]
 800dfbc:	42a3      	cmp	r3, r4
 800dfbe:	bf0c      	ite	eq
 800dfc0:	6032      	streq	r2, [r6, #0]
 800dfc2:	605a      	strne	r2, [r3, #4]
 800dfc4:	e7ec      	b.n	800dfa0 <_malloc_r+0xa0>
 800dfc6:	4623      	mov	r3, r4
 800dfc8:	6864      	ldr	r4, [r4, #4]
 800dfca:	e7b2      	b.n	800df32 <_malloc_r+0x32>
 800dfcc:	4634      	mov	r4, r6
 800dfce:	6876      	ldr	r6, [r6, #4]
 800dfd0:	e7b9      	b.n	800df46 <_malloc_r+0x46>
 800dfd2:	230c      	movs	r3, #12
 800dfd4:	603b      	str	r3, [r7, #0]
 800dfd6:	4638      	mov	r0, r7
 800dfd8:	f000 f84c 	bl	800e074 <__malloc_unlock>
 800dfdc:	e7a1      	b.n	800df22 <_malloc_r+0x22>
 800dfde:	6025      	str	r5, [r4, #0]
 800dfe0:	e7de      	b.n	800dfa0 <_malloc_r+0xa0>
 800dfe2:	bf00      	nop
 800dfe4:	240010d4 	.word	0x240010d4

0800dfe8 <_realloc_r>:
 800dfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfec:	4680      	mov	r8, r0
 800dfee:	4614      	mov	r4, r2
 800dff0:	460e      	mov	r6, r1
 800dff2:	b921      	cbnz	r1, 800dffe <_realloc_r+0x16>
 800dff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	4611      	mov	r1, r2
 800dffa:	f7ff bf81 	b.w	800df00 <_malloc_r>
 800dffe:	b92a      	cbnz	r2, 800e00c <_realloc_r+0x24>
 800e000:	f000 f83e 	bl	800e080 <_free_r>
 800e004:	4625      	mov	r5, r4
 800e006:	4628      	mov	r0, r5
 800e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00c:	f000 f884 	bl	800e118 <_malloc_usable_size_r>
 800e010:	4284      	cmp	r4, r0
 800e012:	4607      	mov	r7, r0
 800e014:	d802      	bhi.n	800e01c <_realloc_r+0x34>
 800e016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e01a:	d812      	bhi.n	800e042 <_realloc_r+0x5a>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4640      	mov	r0, r8
 800e020:	f7ff ff6e 	bl	800df00 <_malloc_r>
 800e024:	4605      	mov	r5, r0
 800e026:	2800      	cmp	r0, #0
 800e028:	d0ed      	beq.n	800e006 <_realloc_r+0x1e>
 800e02a:	42bc      	cmp	r4, r7
 800e02c:	4622      	mov	r2, r4
 800e02e:	4631      	mov	r1, r6
 800e030:	bf28      	it	cs
 800e032:	463a      	movcs	r2, r7
 800e034:	f7ff fee2 	bl	800ddfc <memcpy>
 800e038:	4631      	mov	r1, r6
 800e03a:	4640      	mov	r0, r8
 800e03c:	f000 f820 	bl	800e080 <_free_r>
 800e040:	e7e1      	b.n	800e006 <_realloc_r+0x1e>
 800e042:	4635      	mov	r5, r6
 800e044:	e7df      	b.n	800e006 <_realloc_r+0x1e>
	...

0800e048 <_sbrk_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d06      	ldr	r5, [pc, #24]	; (800e064 <_sbrk_r+0x1c>)
 800e04c:	2300      	movs	r3, #0
 800e04e:	4604      	mov	r4, r0
 800e050:	4608      	mov	r0, r1
 800e052:	602b      	str	r3, [r5, #0]
 800e054:	f7f6 fd8e 	bl	8004b74 <_sbrk>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_sbrk_r+0x1a>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_sbrk_r+0x1a>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	240010dc 	.word	0x240010dc

0800e068 <__malloc_lock>:
 800e068:	4801      	ldr	r0, [pc, #4]	; (800e070 <__malloc_lock+0x8>)
 800e06a:	f000 b85d 	b.w	800e128 <__retarget_lock_acquire_recursive>
 800e06e:	bf00      	nop
 800e070:	240010e0 	.word	0x240010e0

0800e074 <__malloc_unlock>:
 800e074:	4801      	ldr	r0, [pc, #4]	; (800e07c <__malloc_unlock+0x8>)
 800e076:	f000 b858 	b.w	800e12a <__retarget_lock_release_recursive>
 800e07a:	bf00      	nop
 800e07c:	240010e0 	.word	0x240010e0

0800e080 <_free_r>:
 800e080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e082:	2900      	cmp	r1, #0
 800e084:	d044      	beq.n	800e110 <_free_r+0x90>
 800e086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e08a:	9001      	str	r0, [sp, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f1a1 0404 	sub.w	r4, r1, #4
 800e092:	bfb8      	it	lt
 800e094:	18e4      	addlt	r4, r4, r3
 800e096:	f7ff ffe7 	bl	800e068 <__malloc_lock>
 800e09a:	4a1e      	ldr	r2, [pc, #120]	; (800e114 <_free_r+0x94>)
 800e09c:	9801      	ldr	r0, [sp, #4]
 800e09e:	6813      	ldr	r3, [r2, #0]
 800e0a0:	b933      	cbnz	r3, 800e0b0 <_free_r+0x30>
 800e0a2:	6063      	str	r3, [r4, #4]
 800e0a4:	6014      	str	r4, [r2, #0]
 800e0a6:	b003      	add	sp, #12
 800e0a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0ac:	f7ff bfe2 	b.w	800e074 <__malloc_unlock>
 800e0b0:	42a3      	cmp	r3, r4
 800e0b2:	d908      	bls.n	800e0c6 <_free_r+0x46>
 800e0b4:	6825      	ldr	r5, [r4, #0]
 800e0b6:	1961      	adds	r1, r4, r5
 800e0b8:	428b      	cmp	r3, r1
 800e0ba:	bf01      	itttt	eq
 800e0bc:	6819      	ldreq	r1, [r3, #0]
 800e0be:	685b      	ldreq	r3, [r3, #4]
 800e0c0:	1949      	addeq	r1, r1, r5
 800e0c2:	6021      	streq	r1, [r4, #0]
 800e0c4:	e7ed      	b.n	800e0a2 <_free_r+0x22>
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	b10b      	cbz	r3, 800e0d0 <_free_r+0x50>
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	d9fa      	bls.n	800e0c6 <_free_r+0x46>
 800e0d0:	6811      	ldr	r1, [r2, #0]
 800e0d2:	1855      	adds	r5, r2, r1
 800e0d4:	42a5      	cmp	r5, r4
 800e0d6:	d10b      	bne.n	800e0f0 <_free_r+0x70>
 800e0d8:	6824      	ldr	r4, [r4, #0]
 800e0da:	4421      	add	r1, r4
 800e0dc:	1854      	adds	r4, r2, r1
 800e0de:	42a3      	cmp	r3, r4
 800e0e0:	6011      	str	r1, [r2, #0]
 800e0e2:	d1e0      	bne.n	800e0a6 <_free_r+0x26>
 800e0e4:	681c      	ldr	r4, [r3, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	6053      	str	r3, [r2, #4]
 800e0ea:	4421      	add	r1, r4
 800e0ec:	6011      	str	r1, [r2, #0]
 800e0ee:	e7da      	b.n	800e0a6 <_free_r+0x26>
 800e0f0:	d902      	bls.n	800e0f8 <_free_r+0x78>
 800e0f2:	230c      	movs	r3, #12
 800e0f4:	6003      	str	r3, [r0, #0]
 800e0f6:	e7d6      	b.n	800e0a6 <_free_r+0x26>
 800e0f8:	6825      	ldr	r5, [r4, #0]
 800e0fa:	1961      	adds	r1, r4, r5
 800e0fc:	428b      	cmp	r3, r1
 800e0fe:	bf04      	itt	eq
 800e100:	6819      	ldreq	r1, [r3, #0]
 800e102:	685b      	ldreq	r3, [r3, #4]
 800e104:	6063      	str	r3, [r4, #4]
 800e106:	bf04      	itt	eq
 800e108:	1949      	addeq	r1, r1, r5
 800e10a:	6021      	streq	r1, [r4, #0]
 800e10c:	6054      	str	r4, [r2, #4]
 800e10e:	e7ca      	b.n	800e0a6 <_free_r+0x26>
 800e110:	b003      	add	sp, #12
 800e112:	bd30      	pop	{r4, r5, pc}
 800e114:	240010d4 	.word	0x240010d4

0800e118 <_malloc_usable_size_r>:
 800e118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e11c:	1f18      	subs	r0, r3, #4
 800e11e:	2b00      	cmp	r3, #0
 800e120:	bfbc      	itt	lt
 800e122:	580b      	ldrlt	r3, [r1, r0]
 800e124:	18c0      	addlt	r0, r0, r3
 800e126:	4770      	bx	lr

0800e128 <__retarget_lock_acquire_recursive>:
 800e128:	4770      	bx	lr

0800e12a <__retarget_lock_release_recursive>:
 800e12a:	4770      	bx	lr

0800e12c <_init>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	bf00      	nop
 800e130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e132:	bc08      	pop	{r3}
 800e134:	469e      	mov	lr, r3
 800e136:	4770      	bx	lr

0800e138 <_fini>:
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	bf00      	nop
 800e13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13e:	bc08      	pop	{r3}
 800e140:	469e      	mov	lr, r3
 800e142:	4770      	bx	lr
